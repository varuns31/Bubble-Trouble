
finalprojectnew.elf:     file format elf32-littlenios2
finalprojectnew.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c000230

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x00012c18 memsz 0x00012c18 flags r-x
    LOAD off    0x00013c38 vaddr 0x0c012c38 paddr 0x0c014764 align 2**12
         filesz 0x00001b2c memsz 0x00001b2c flags rw-
    LOAD off    0x00016290 vaddr 0x0c016290 paddr 0x0c016290 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000124cc  0c000230  0c000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000053c  0c0126fc  0c0126fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b2c  0c012c38  0c014764  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  0c016290  0c016290  00016290  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015764  2**0
                  CONTENTS
  7 .sdram        00000000  0c016578  0c016578  00015764  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015764  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fc8  00000000  00000000  00015788  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000265cd  00000000  00000000  00016750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009b7d  00000000  00000000  0003cd1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c22d  00000000  00000000  0004689a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002858  00000000  00000000  00052ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042be  00000000  00000000  00055320  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b11  00000000  00000000  000595de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000710f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001930  00000000  00000000  00071130  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00076352  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00076355  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00076361  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00076362  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00076363  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00076367  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007636b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007636f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007637a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00076385  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  00076390  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000037  00000000  00000000  00076397  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e1f  00000000  00000000  000763ce  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a213d  00000000  00000000  0007b1ed  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c000230 l    d  .text	00000000 .text
0c0126fc l    d  .rodata	00000000 .rodata
0c012c38 l    d  .rwdata	00000000 .rwdata
0c016290 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0c016578 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finalprojectnew_bsp//obj/HAL/src/crt0.o
0c000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0c014714 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0c0162a0 l     O .bss	00000004 usb_delay.2608
0c0162a4 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c01297e l     O .rodata	00000010 zeroes.4404
0c0051d8 l     F .text	000000bc __sbprintf
0c01298e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0c0053e8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0c006f40 l     F .text	00000008 __fp_unlock
0c006f54 l     F .text	0000019c __sinit.part.1
0c0070f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0c012c68 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0c0130ac l     O .rwdata	00000020 lc_ctype_charset
0c01308c l     O .rwdata	00000020 lc_message_charset
0c0130cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0c0129c0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c00a72c l     F .text	000000fc __sprint_r.part.0
0c012ae4 l     O .rodata	00000010 zeroes.4349
0c00bd68 l     F .text	000000bc __sbprintf
0c012af4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0c00fbd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c00fce8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0c00fd14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0c00fe08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0c00fef0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0c00ffdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0c0101b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c014754 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0c010600 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c01073c l     F .text	00000034 alt_dev_reg
0c0136b4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c010a30 l     F .text	0000020c altera_avalon_jtag_uart_irq
0c010c3c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c011470 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c011808 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c011c68 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c011dc8 l     F .text	0000003c alt_get_errno
0c011e04 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0c0162dc g     O .bss	00000004 alt_instruction_exception_handler
0c002d5c g     F .text	00000018 putchar
0c009c08 g     F .text	00000074 _mprec_log10
0c009cf4 g     F .text	0000008c __any_on
0c00c474 g     F .text	00000054 _isatty_r
0c0129cc g     O .rodata	00000028 __mprec_tinytens
0c0100f4 g     F .text	0000007c alt_main
0c014718 g     O .rwdata	00000008 ctrl_xfers
0c002d74 g     F .text	000000c0 _puts_r
0c016478 g     O .bss	00000100 alt_irq
0c00c4c8 g     F .text	00000060 _lseek_r
0c0022c0 g     F .text	00000644 USB_Task
0c014764 g       *ABS*	00000000 __flash_rwdata_start
0c00e5ac g     F .text	00000088 .hidden __eqdf2
0c016578 g       *ABS*	00000000 __alt_heap_start
0c002d18 g     F .text	0000003c printf
0c00c588 g     F .text	0000009c _wcrtomb_r
0c0013e0 g     F .text	00000088 kbdPoll
0c00a5ec g     F .text	0000005c __sseek
0c0072a0 g     F .text	00000010 __sinit
0c00be24 g     F .text	00000140 __swbuf_r
0c007d74 g     F .text	0000007c _setlocale_r
0c0070f8 g     F .text	00000078 __sfmoreglue
0c010194 g     F .text	00000024 __malloc_unlock
0c00026c g     F .text	000001f0 GetDriverandReport
0c008a44 g     F .text	0000015c memmove
0c007288 g     F .text	00000018 _cleanup
0c008cc8 g     F .text	000000a8 _Balloc
0c001534 g     F .text	00000088 MAXreg_wr
0c012c38 g     O .rwdata	00000030 ClientDriverTable
0c00e634 g     F .text	000000dc .hidden __gtdf2
0c01204c g     F .text	00000024 altera_nios2_gen2_irq_init
0c002904 g     F .text	0000002c MSDProbe
0c000000 g     F .entry	0000000c __reset
0c001dc0 g     F .text	000000e8 XferCtrlData
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c0162e0 g     O .bss	00000010 hid_ep
0c00c418 g     F .text	0000005c _fstat_r
0c0162c0 g     O .bss	00000004 errno
0c00a568 g     F .text	00000008 __seofread
0c0162c8 g     O .bss	00000004 alt_argv
0c01c714 g       *ABS*	00000000 _gp
0c0105d0 g     F .text	00000030 usleep
0c001724 g     F .text	0000007c MAXreg_rd
0c013534 g     O .rwdata	00000180 alt_fd_list
0c001318 g     F .text	00000040 HID_init
0c002d54 g     F .text	00000008 _putchar_r
0c012070 g     F .text	00000090 alt_find_dev
0c0088fc g     F .text	00000148 memcpy
0c006f48 g     F .text	0000000c _cleanup_r
0c00f9ec g     F .text	000000dc .hidden __floatsidf
0c011d4c g     F .text	0000007c alt_io_redirect
0c00e710 g     F .text	000000f4 .hidden __ltdf2
0c0126fc g       *ABS*	00000000 __DTOR_END__
0c002e34 g     F .text	00000014 puts
0c0122cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0c00a44c g     F .text	00000074 __fpclassifyd
0c009b64 g     F .text	000000a4 __ratio
0c00bd4c g     F .text	0000001c __vfiprintf_internal
0c010e34 g     F .text	0000021c altera_avalon_jtag_uart_read
0c002ce8 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0c002c04 g     F .text	00000064 .hidden __udivsi3
0c00fe44 g     F .text	000000ac isatty
0c012a1c g     O .rodata	000000c8 __mprec_tens
0c007df0 g     F .text	0000000c __locale_charset
0c0162bc g     O .bss	00000004 __malloc_top_pad
0c014720 g     O .rwdata	00000001 usb_task_state
0c01472c g     O .rwdata	00000004 __mb_cur_max
0c007e20 g     F .text	0000000c _localeconv_r
0c0090fc g     F .text	0000003c __i2b
0c007724 g     F .text	000004c8 __sfvwrite_r
0c00a4c0 g     F .text	00000054 _sbrk_r
0c00c528 g     F .text	00000060 _read_r
0c001a7c g     F .text	00000094 MAX3421E_init
0c000738 g     F .text	00000034 setKeycode
0c01474c g     O .rwdata	00000004 alt_max_fd
0c00c10c g     F .text	000000f0 _fclose_r
0c006f10 g     F .text	00000030 fflush
0c0162b8 g     O .bss	00000004 __malloc_max_sbrked_mem
0c00d330 g     F .text	000008ac .hidden __adddf3
0c00990c g     F .text	0000010c __b2d
0c00cd6c g     F .text	000005c4 .hidden __umoddi3
0c010018 g     F .text	000000dc lseek
0c014724 g     O .rwdata	00000004 _global_impure_ptr
0c009ee8 g     F .text	00000564 _realloc_r
0c016578 g       *ABS*	00000000 __bss_end
0c011b78 g     F .text	000000f0 alt_iic_isr_register
0c0104c8 g     F .text	00000108 alt_tick
0c00c770 g     F .text	000005fc .hidden __udivdi3
0c00c374 g     F .text	00000024 _fputwc_r
0c0129f4 g     O .rodata	00000028 __mprec_bigtens
0c008ee0 g     F .text	00000104 __s2b
0c00fac8 g     F .text	000000a8 .hidden __floatunsidf
0c00964c g     F .text	00000060 __mcmp
0c0072c0 g     F .text	00000018 __fp_lock_all
0c011b2c g     F .text	0000004c alt_ic_irq_enabled
0c01042c g     F .text	0000009c alt_alarm_stop
0c0162d8 g     O .bss	00000004 alt_irq_active
0c0029cc g     F .text	0000002c DummyProbe
0c0000fc g     F .exceptions	000000d4 alt_irq_handler
0c01350c g     O .rwdata	00000028 alt_dev_null
0c001358 g     F .text	00000088 mousePoll
0c0018d0 g     F .text	00000024 Vbus_power
0c0117e8 g     F .text	00000020 alt_dcache_flush_all
0c008fe4 g     F .text	00000068 __hi0bits
0c00f96c g     F .text	00000080 .hidden __fixdfsi
0c014764 g       *ABS*	00000000 __ram_rwdata_end
0c014744 g     O .rwdata	00000008 alt_dev_list
0c01063c g     F .text	00000100 write
0c009d80 g     F .text	000000a0 _putc_r
0c012c38 g       *ABS*	00000000 __ram_rodata_end
0c0162a5 g     O .bss	00000001 usb_error
0c00fd50 g     F .text	000000b8 fstat
0c00e710 g     F .text	000000f4 .hidden __ledf2
0c0093c4 g     F .text	00000140 __pow5mult
0c00a840 g     F .text	0000150c ___vfiprintf_internal_r
0c0162b0 g     O .bss	00000004 __nlocale_changed
0c002c68 g     F .text	00000058 .hidden __umodsi3
0c016578 g       *ABS*	00000000 end
0c010970 g     F .text	000000c0 altera_avalon_jtag_uart_init
0c0001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0c001f1c g     F .text	0000017c XferDispatchPkt
0c0126fc g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c0114e8 g     F .text	0000007c alt_avalon_timer_sc_init
0c00fb70 g     F .text	00000064 .hidden __clzsi2
0c011050 g     F .text	00000224 altera_avalon_jtag_uart_write
0c0072b0 g     F .text	00000004 __sfp_lock_acquire
0c008818 g     F .text	000000e4 memchr
0c002ee0 g     F .text	000022dc ___vfprintf_internal_r
0c001c40 g     F .text	00000034 MaxGpxHandler
0c007414 g     F .text	00000310 _free_r
0c007dfc g     F .text	00000010 __locale_mb_cur_max
0c012548 g     F .text	00000180 __call_exitprocs
0c0162ac g     O .bss	00000004 __mlocale_changed
0c014730 g     O .rwdata	00000004 __malloc_sbrk_base
0c000230 g     F .text	0000003c _start
0c0162d0 g     O .bss	00000004 _alt_tick_rate
0c0017a0 g     F .text	00000090 MAXbytes_rd
0c009504 g     F .text	00000148 __lshift
0c011274 g     F .text	000001fc alt_avalon_spi_command
0c0162d4 g     O .bss	00000004 _alt_nticks
0c0101f4 g     F .text	00000104 read
0c0107a8 g     F .text	00000064 alt_sys_init
0c016430 g     O .bss	00000048 devtable
0c012430 g     F .text	00000118 __register_exitproc
0c000f10 g     F .text	00000408 HIDKProbe
0c0162f0 g     O .bss	00000018 msd_ep
0c009138 g     F .text	0000028c __multiply
0c010cdc g     F .text	00000068 altera_avalon_jtag_uart_close
0c002228 g     F .text	00000098 USB_init
0c002cc0 g     F .text	00000028 .hidden __mulsi3
0c016330 g     O .bss	00000100 bigbuf
0c012c38 g       *ABS*	00000000 __ram_rwdata_start
0c0126fc g       *ABS*	00000000 __ram_rodata_start
0c016308 g     O .bss	00000028 __malloc_current_mallinfo
0c01629c g     O .bss	00000001 last_usb_task_state
0c009a18 g     F .text	0000014c __d2b
0c016294 g     O .bss	00000008 dev0ep
0c0004a0 g     F .text	00000048 clearLED
0c01080c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0c012208 g     F .text	000000c4 alt_get_fd
0c011690 g     F .text	00000158 alt_busy_sleep
0c002930 g     F .text	00000038 MSDEventHandler
0c00bfdc g     F .text	00000054 _close_r
0c0123b4 g     F .text	0000007c memcmp
0c0108cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c016578 g       *ABS*	00000000 __alt_stack_base
0c01091c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0c005294 g     F .text	00000154 __swsetup_r
0c00dbdc g     F .text	000009d0 .hidden __divdf3
0c007170 g     F .text	00000118 __sfp
0c009c7c g     F .text	00000078 __copybits
0c013104 g     O .rwdata	00000408 __malloc_av_
0c0072bc g     F .text	00000004 __sinit_lock_release
0c002994 g     F .text	00000038 CDCEventHandler
0c00e804 g     F .text	0000086c .hidden __muldf3
0c0029f8 g     F .text	00000038 DummyEventHandler
0c00a514 g     F .text	00000054 __sread
0c012100 g     F .text	00000108 alt_find_file
0c011844 g     F .text	000000a4 alt_dev_llist_insert
0c010170 g     F .text	00000024 __malloc_lock
0c01037c g     F .text	000000b0 sbrk
0c006eb4 g     F .text	0000005c _fflush_r
0c00c030 g     F .text	000000dc _calloc_r
0c016290 g       *ABS*	00000000 __bss_start
0c0018f4 g     F .text	00000188 MAX_busprobe
0c016290 g     O .bss	00000002 hid_device
0c008ba0 g     F .text	00000128 memset
0c00076c g     F .text	0000039c main
0c001b10 g     F .text	00000064 MAX3421E_Task
0c0162cc g     O .bss	00000004 alt_envp
0c0162b4 g     O .bss	00000004 __malloc_max_total_mem
0c01086c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0c00bf64 g     F .text	00000018 __swbuf
0c002a88 g     F .text	00000084 ConvUTF8ToStr
0c00a648 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0c00c1fc g     F .text	00000014 fclose
0c005610 g     F .text	00001688 _dtoa_r
0c00800c g     F .text	0000080c _malloc_r
0c00c6e4 g     F .text	00000030 __ascii_wctomb
0c014750 g     O .rwdata	00000004 alt_errno
0c007bec g     F .text	000000c4 _fwalk
0c009e20 g     F .text	000000c8 putc
0c002b0c g     F .text	00000084 .hidden __divsi3
0c002098 g     F .text	00000190 XferInTransfer
0c000600 g     F .text	00000138 printSignedHex1
0c0072f0 g     F .text	00000124 _malloc_trim_r
0c0126fc g       *ABS*	00000000 __CTOR_END__
0c002a50 g     F .text	00000038 GetDevtable
0c00a650 g     F .text	000000dc strcmp
0c0126fc g       *ABS*	00000000 __flash_rodata_start
0c0126fc g       *ABS*	00000000 __DTOR_LIST__
0c001ea8 g     F .text	00000074 XferCtrlND
0c00e5ac g     F .text	00000088 .hidden __nedf2
0c001830 g     F .text	000000a0 MAX3421E_reset
0c010770 g     F .text	00000038 alt_irq_init
0c0102f8 g     F .text	00000084 alt_release_fd
0c012b04 g     O .rodata	00000100 .hidden __clz_tab
0c0162a8 g     O .bss	00000004 _PathLocale
0c012368 g     F .text	00000014 atexit
0c00bf7c g     F .text	00000060 _write_r
0c007e2c g     F .text	00000018 setlocale
0c014728 g     O .rwdata	00000004 _impure_ptr
0c0162c4 g     O .bss	00000004 alt_argc
0c006c98 g     F .text	0000021c __sflush_r
0c011948 g     F .text	00000060 _do_dtors
0c007e18 g     F .text	00000008 __locale_cjk_lang
0c0015bc g     F .text	00000168 MAXbytes_wr
0c000020 g       .exceptions	00000000 alt_irq_entry
0c0098a8 g     F .text	00000064 __ulp
0c0072d8 g     F .text	00000018 __fp_unlock_all
0c01473c g     O .rwdata	00000008 alt_fs_list
0c002968 g     F .text	0000002c CDCProbe
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c007e44 g     F .text	0000000c localeconv
0c00045c g     F .text	00000044 setLED
0c002a30 g     F .text	00000020 GetUsbTaskState
0c0119c8 g     F .text	00000050 alt_ic_isr_register
0c012738 g     O .rodata	00000010 devclasses
0c014764 g       *ABS*	00000000 _edata
0c0014a0 g     F .text	00000038 HIDKEventHandler
0c016578 g       *ABS*	00000000 _end
0c001b74 g     F .text	000000cc MaxIntHandler
0c00c210 g     F .text	00000164 __fputwc
0c000230 g       *ABS*	00000000 __ram_exceptions_end
0c010d44 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0c0014d8 g     F .text	00000034 SPI_init
0c011aa0 g     F .text	0000008c alt_ic_irq_disable
0c00a570 g     F .text	0000007c __swrite
0c014734 g     O .rwdata	00000004 __malloc_trim_threshold
0c007e0c g     F .text	0000000c __locale_msgcharset
0c01237c g     F .text	00000038 exit
0c007cb0 g     F .text	000000c4 _fwalk_reent
0c0096ac g     F .text	000001fc __mdiff
0c002b90 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c0072b4 g     F .text	00000004 __sfp_lock_release
0c000000 g       *ABS*	00000000 __alt_mem_sdram
0c001468 g     F .text	00000038 HIDMEventHandler
0c0126c8 g     F .text	00000034 _exit
0c011564 g     F .text	0000012c alt_alarm_start
0c0004e8 g     F .text	00000118 printSignedHex0
0c007e50 g     F .text	000001bc __smakebuf_r
0c002e48 g     F .text	00000098 strlen
0c011ef0 g     F .text	0000015c open
0c00e634 g     F .text	000000dc .hidden __gedf2
0c014738 g     O .rwdata	00000004 __wctomb
0c00a828 g     F .text	00000018 __sprint_r
0c0119a8 g     F .text	00000020 alt_icache_flush_all
0c014760 g     O .rwdata	00000004 alt_priority_mask
0c011a18 g     F .text	00000088 alt_ic_irq_enable
0c0051bc g     F .text	0000001c __vfprintf_internal
0c000b08 g     F .text	00000408 HIDMProbe
0c00c714 g     F .text	0000005c _wctomb_r
0c00150c g     F .text	00000028 SPI_wr
0c00f070 g     F .text	000008fc .hidden __subdf3
0c00904c g     F .text	000000b0 __lo0bits
0c014758 g     O .rwdata	00000008 alt_alarm_list
0c0118e8 g     F .text	00000060 _do_ctors
0c00c624 g     F .text	000000c0 wcrtomb
0c00fc10 g     F .text	000000d8 close
0c00ff58 g     F .text	00000084 alt_load
0c00c398 g     F .text	00000080 fputwc
0c0072b8 g     F .text	00000004 __sinit_lock_acquire
0c001c74 g     F .text	0000014c XferCtrlReq
0c008d98 g     F .text	00000148 __multadd
0c008d70 g     F .text	00000028 _Bfree



Disassembly of section .entry:

0c000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000000:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000004:	08408c14 	ori	at,at,560
    jmp r1
 c000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0c000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 c000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000fc0 	call	c0000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000706 	br	c0000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 c00008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 c000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 c000098:	c0001d00 	call	c0001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 c00009c:	1000021e 	bne	r2,zero,c0000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 c0000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c0000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c0000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c0000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 c0000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 c0000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000f8:	ef80083a 	eret

0c0000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000fc:	defff904 	addi	sp,sp,-28
 c000100:	dfc00615 	stw	ra,24(sp)
 c000104:	df000515 	stw	fp,20(sp)
 c000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 c00010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000110:	0005313a 	rdctl	r2,ipending
 c000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 c000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c00011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 c000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000124:	00800044 	movi	r2,1
 c000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c00012c:	e0fffb17 	ldw	r3,-20(fp)
 c000130:	e0bffc17 	ldw	r2,-16(fp)
 c000134:	1884703a 	and	r2,r3,r2
 c000138:	10001426 	beq	r2,zero,c00018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00013c:	00830074 	movhi	r2,3073
 c000140:	10991e04 	addi	r2,r2,25720
 c000144:	e0fffd17 	ldw	r3,-12(fp)
 c000148:	180690fa 	slli	r3,r3,3
 c00014c:	10c5883a 	add	r2,r2,r3
 c000150:	10c00017 	ldw	r3,0(r2)
 c000154:	00830074 	movhi	r2,3073
 c000158:	10991e04 	addi	r2,r2,25720
 c00015c:	e13ffd17 	ldw	r4,-12(fp)
 c000160:	200890fa 	slli	r4,r4,3
 c000164:	1105883a 	add	r2,r2,r4
 c000168:	10800104 	addi	r2,r2,4
 c00016c:	10800017 	ldw	r2,0(r2)
 c000170:	1009883a 	mov	r4,r2
 c000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 c000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c00017c:	0005313a 	rdctl	r2,ipending
 c000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 c000184:	e0bfff17 	ldw	r2,-4(fp)
 c000188:	00000706 	br	c0001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 c00018c:	e0bffc17 	ldw	r2,-16(fp)
 c000190:	1085883a 	add	r2,r2,r2
 c000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 c000198:	e0bffd17 	ldw	r2,-12(fp)
 c00019c:	10800044 	addi	r2,r2,1
 c0001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c0001a4:	003fe106 	br	c00012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 c0001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 c0001ac:	e0bffb17 	ldw	r2,-20(fp)
 c0001b0:	103fdb1e 	bne	r2,zero,c000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 c0001b4:	0001883a 	nop
}
 c0001b8:	0001883a 	nop
 c0001bc:	e037883a 	mov	sp,fp
 c0001c0:	dfc00117 	ldw	ra,4(sp)
 c0001c4:	df000017 	ldw	fp,0(sp)
 c0001c8:	dec00204 	addi	sp,sp,8
 c0001cc:	f800283a 	ret

0c0001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 c0001d0:	defffb04 	addi	sp,sp,-20
 c0001d4:	dfc00415 	stw	ra,16(sp)
 c0001d8:	df000315 	stw	fp,12(sp)
 c0001dc:	df000304 	addi	fp,sp,12
 c0001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 c0001e4:	00bfffc4 	movi	r2,-1
 c0001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 c0001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 c0001f0:	d0a6f217 	ldw	r2,-25656(gp)
 c0001f4:	10000726 	beq	r2,zero,c000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 c0001f8:	d0a6f217 	ldw	r2,-25656(gp)
 c0001fc:	e0fffd17 	ldw	r3,-12(fp)
 c000200:	e1bffe17 	ldw	r6,-8(fp)
 c000204:	e17fff17 	ldw	r5,-4(fp)
 c000208:	1809883a 	mov	r4,r3
 c00020c:	103ee83a 	callr	r2
 c000210:	00000206 	br	c00021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 c000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 c000218:	0005883a 	mov	r2,zero
}
 c00021c:	e037883a 	mov	sp,fp
 c000220:	dfc00117 	ldw	ra,4(sp)
 c000224:	df000017 	ldw	fp,0(sp)
 c000228:	dec00204 	addi	sp,sp,8
 c00022c:	f800283a 	ret

Disassembly of section .text:

0c000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 c000238:	06830074 	movhi	gp,3073
    ori gp, gp, %lo(_gp)
 c00023c:	d6b1c514 	ori	gp,gp,50964
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c000240:	00830074 	movhi	r2,3073
    ori r2, r2, %lo(__bss_start)
 c000244:	1098a414 	ori	r2,r2,25232

    movhi r3, %hi(__bss_end)
 c000248:	00c30074 	movhi	r3,3073
    ori r3, r3, %lo(__bss_end)
 c00024c:	18d95e14 	ori	r3,r3,25976

    beq r2, r3, 1f
 c000250:	10c00326 	beq	r2,r3,c000260 <_start+0x30>

0:
    stw zero, (r2)
 c000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c00025c:	10fffd36 	bltu	r2,r3,c000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c000260:	c00ff580 	call	c00ff58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c000264:	c0100f40 	call	c0100f4 <alt_main>

0c000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c000268:	003fff06 	br	c000268 <__alt_data_end+0xfc000268>

0c00026c <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 c00026c:	defff604 	addi	sp,sp,-40
 c000270:	dfc00915 	stw	ra,36(sp)
 c000274:	df000815 	stw	fp,32(sp)
 c000278:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 c00027c:	00bfffc4 	movi	r2,-1
 c000280:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 c000284:	01030074 	movhi	r4,3073
 c000288:	2109d204 	addi	r4,r4,10056
 c00028c:	c002e340 	call	c002e34 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 c000290:	00800044 	movi	r2,1
 c000294:	e0bffd05 	stb	r2,-12(fp)
 c000298:	00001f06 	br	c000318 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 c00029c:	e0bffd03 	ldbu	r2,-12(fp)
 c0002a0:	1009883a 	mov	r4,r2
 c0002a4:	c002a500 	call	c002a50 <GetDevtable>
 c0002a8:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 c0002ac:	e0bffe17 	ldw	r2,-8(fp)
 c0002b0:	10800017 	ldw	r2,0(r2)
 c0002b4:	10001526 	beq	r2,zero,c00030c <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 c0002b8:	e0bffd03 	ldbu	r2,-12(fp)
 c0002bc:	100b883a 	mov	r5,r2
 c0002c0:	01030074 	movhi	r4,3073
 c0002c4:	2109db04 	addi	r4,r4,10092
 c0002c8:	c002d180 	call	c002d18 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 c0002cc:	e0bffe17 	ldw	r2,-8(fp)
 c0002d0:	10800103 	ldbu	r2,4(r2)
 c0002d4:	10c03fcc 	andi	r3,r2,255
 c0002d8:	00830074 	movhi	r2,3073
 c0002dc:	1089ce04 	addi	r2,r2,10040
 c0002e0:	18c7883a 	add	r3,r3,r3
 c0002e4:	18c7883a 	add	r3,r3,r3
 c0002e8:	10c5883a 	add	r2,r2,r3
 c0002ec:	10800017 	ldw	r2,0(r2)
 c0002f0:	100b883a 	mov	r5,r2
 c0002f4:	01030074 	movhi	r4,3073
 c0002f8:	2109de04 	addi	r4,r4,10104
 c0002fc:	c002d180 	call	c002d18 <printf>
			device = tpl_ptr->devclass;
 c000300:	e0bffe17 	ldw	r2,-8(fp)
 c000304:	10800103 	ldbu	r2,4(r2)
 c000308:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 c00030c:	e0bffd03 	ldbu	r2,-12(fp)
 c000310:	10800044 	addi	r2,r2,1
 c000314:	e0bffd05 	stb	r2,-12(fp)
 c000318:	e0bffd03 	ldbu	r2,-12(fp)
 c00031c:	10800230 	cmpltui	r2,r2,8
 c000320:	103fde1e 	bne	r2,zero,c00029c <__alt_data_end+0xfc00029c>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 c000324:	d0a00003 	ldbu	r2,-32768(gp)
 c000328:	11003fcc 	andi	r4,r2,255
 c00032c:	d0a6df43 	ldbu	r2,-25731(gp)
 c000330:	10803fcc 	andi	r2,r2,255
 c000334:	e0ffff44 	addi	r3,fp,-3
 c000338:	d8c00415 	stw	r3,16(sp)
 c00033c:	00c00044 	movi	r3,1
 c000340:	d8c00315 	stw	r3,12(sp)
 c000344:	d8800215 	stw	r2,8(sp)
 c000348:	d8000115 	stw	zero,4(sp)
 c00034c:	d8000015 	stw	zero,0(sp)
 c000350:	01c00084 	movi	r7,2
 c000354:	01802844 	movi	r6,161
 c000358:	000b883a 	mov	r5,zero
 c00035c:	c001c740 	call	c001c74 <XferCtrlReq>
 c000360:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 c000364:	e0bfff03 	ldbu	r2,-4(fp)
 c000368:	10000926 	beq	r2,zero,c000390 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 c00036c:	01030074 	movhi	r4,3073
 c000370:	2109e004 	addi	r4,r4,10112
 c000374:	c002d180 	call	c002d18 <printf>
		printf("%x \n", rcode);
 c000378:	e0bfff03 	ldbu	r2,-4(fp)
 c00037c:	100b883a 	mov	r5,r2
 c000380:	01030074 	movhi	r4,3073
 c000384:	2109e704 	addi	r4,r4,10140
 c000388:	c002d180 	call	c002d18 <printf>
 c00038c:	00000906 	br	c0003b4 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 c000390:	01030074 	movhi	r4,3073
 c000394:	2109e904 	addi	r4,r4,10148
 c000398:	c002d180 	call	c002d18 <printf>
		printf("%x \n", tmpbyte);
 c00039c:	e0bfff43 	ldbu	r2,-3(fp)
 c0003a0:	10803fcc 	andi	r2,r2,255
 c0003a4:	100b883a 	mov	r5,r2
 c0003a8:	01030074 	movhi	r4,3073
 c0003ac:	2109e704 	addi	r4,r4,10140
 c0003b0:	c002d180 	call	c002d18 <printf>
	}
	printf("Protocol: ");
 c0003b4:	01030074 	movhi	r4,3073
 c0003b8:	2109ed04 	addi	r4,r4,10164
 c0003bc:	c002d180 	call	c002d18 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 c0003c0:	d0a00003 	ldbu	r2,-32768(gp)
 c0003c4:	11003fcc 	andi	r4,r2,255
 c0003c8:	d0a6df43 	ldbu	r2,-25731(gp)
 c0003cc:	10803fcc 	andi	r2,r2,255
 c0003d0:	e0ffff44 	addi	r3,fp,-3
 c0003d4:	d8c00415 	stw	r3,16(sp)
 c0003d8:	00c00044 	movi	r3,1
 c0003dc:	d8c00315 	stw	r3,12(sp)
 c0003e0:	d8800215 	stw	r2,8(sp)
 c0003e4:	d8000115 	stw	zero,4(sp)
 c0003e8:	d8000015 	stw	zero,0(sp)
 c0003ec:	01c000c4 	movi	r7,3
 c0003f0:	01802844 	movi	r6,161
 c0003f4:	000b883a 	mov	r5,zero
 c0003f8:	c001c740 	call	c001c74 <XferCtrlReq>
 c0003fc:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 c000400:	e0bfff03 	ldbu	r2,-4(fp)
 c000404:	10000926 	beq	r2,zero,c00042c <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 c000408:	01030074 	movhi	r4,3073
 c00040c:	2109f004 	addi	r4,r4,10176
 c000410:	c002d180 	call	c002d18 <printf>
		printf("%x \n", rcode);
 c000414:	e0bfff03 	ldbu	r2,-4(fp)
 c000418:	100b883a 	mov	r5,r2
 c00041c:	01030074 	movhi	r4,3073
 c000420:	2109e704 	addi	r4,r4,10140
 c000424:	c002d180 	call	c002d18 <printf>
 c000428:	00000606 	br	c000444 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 c00042c:	e0bfff43 	ldbu	r2,-3(fp)
 c000430:	10803fcc 	andi	r2,r2,255
 c000434:	100b883a 	mov	r5,r2
 c000438:	01030074 	movhi	r4,3073
 c00043c:	2109f704 	addi	r4,r4,10204
 c000440:	c002d180 	call	c002d18 <printf>
	}
	return device;
 c000444:	e0bffd43 	ldbu	r2,-11(fp)
}
 c000448:	e037883a 	mov	sp,fp
 c00044c:	dfc00117 	ldw	ra,4(sp)
 c000450:	df000017 	ldw	fp,0(sp)
 c000454:	dec00204 	addi	sp,sp,8
 c000458:	f800283a 	ret

0c00045c <setLED>:

void setLED(int LED) {
 c00045c:	defffe04 	addi	sp,sp,-8
 c000460:	df000115 	stw	fp,4(sp)
 c000464:	df000104 	addi	fp,sp,4
 c000468:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 c00046c:	00807004 	movi	r2,448
 c000470:	10c00037 	ldwio	r3,0(r2)
 c000474:	01000044 	movi	r4,1
 c000478:	e0bfff17 	ldw	r2,-4(fp)
 c00047c:	2084983a 	sll	r2,r4,r2
 c000480:	1886b03a 	or	r3,r3,r2
 c000484:	00807004 	movi	r2,448
 c000488:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 c00048c:	0001883a 	nop
 c000490:	e037883a 	mov	sp,fp
 c000494:	df000017 	ldw	fp,0(sp)
 c000498:	dec00104 	addi	sp,sp,4
 c00049c:	f800283a 	ret

0c0004a0 <clearLED>:

void clearLED(int LED) {
 c0004a0:	defffe04 	addi	sp,sp,-8
 c0004a4:	df000115 	stw	fp,4(sp)
 c0004a8:	df000104 	addi	fp,sp,4
 c0004ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 c0004b0:	00807004 	movi	r2,448
 c0004b4:	10c00037 	ldwio	r3,0(r2)
 c0004b8:	01000044 	movi	r4,1
 c0004bc:	e0bfff17 	ldw	r2,-4(fp)
 c0004c0:	2084983a 	sll	r2,r4,r2
 c0004c4:	0084303a 	nor	r2,zero,r2
 c0004c8:	1886703a 	and	r3,r3,r2
 c0004cc:	00807004 	movi	r2,448
 c0004d0:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 c0004d4:	0001883a 	nop
 c0004d8:	e037883a 	mov	sp,fp
 c0004dc:	df000017 	ldw	fp,0(sp)
 c0004e0:	dec00104 	addi	sp,sp,4
 c0004e4:	f800283a 	ret

0c0004e8 <printSignedHex0>:

void printSignedHex0(signed char value) {
 c0004e8:	defffc04 	addi	sp,sp,-16
 c0004ec:	dfc00315 	stw	ra,12(sp)
 c0004f0:	df000215 	stw	fp,8(sp)
 c0004f4:	df000204 	addi	fp,sp,8
 c0004f8:	2005883a 	mov	r2,r4
 c0004fc:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 c000500:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 c000504:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 c000508:	00807404 	movi	r2,464
 c00050c:	10800037 	ldwio	r2,0(r2)
 c000510:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 c000514:	e0bfff07 	ldb	r2,-4(fp)
 c000518:	1000060e 	bge	r2,zero,c000534 <printSignedHex0+0x4c>
		setLED(11);
 c00051c:	010002c4 	movi	r4,11
 c000520:	c00045c0 	call	c00045c <setLED>
		value = -value;
 c000524:	e0bfff03 	ldbu	r2,-4(fp)
 c000528:	0085c83a 	sub	r2,zero,r2
 c00052c:	e0bfff05 	stb	r2,-4(fp)
 c000530:	00000206 	br	c00053c <printSignedHex0+0x54>
	} else {
		clearLED(11);
 c000534:	010002c4 	movi	r4,11
 c000538:	c0004a00 	call	c0004a0 <clearLED>
	}
	//handled hundredsxdccddffews
	if (value / 100)
 c00053c:	e0bfff03 	ldbu	r2,-4(fp)
 c000540:	108018c4 	addi	r2,r2,99
 c000544:	10803fcc 	andi	r2,r2,255
 c000548:	108031f0 	cmpltui	r2,r2,199
 c00054c:	1000031e 	bne	r2,zero,c00055c <printSignedHex0+0x74>
		setLED(13);
 c000550:	01000344 	movi	r4,13
 c000554:	c00045c0 	call	c00045c <setLED>
 c000558:	00000206 	br	c000564 <printSignedHex0+0x7c>
	else
		clearLED(13);
 c00055c:	01000344 	movi	r4,13
 c000560:	c0004a00 	call	c0004a0 <clearLED>

	value = value % 100;
 c000564:	e0bfff07 	ldb	r2,-4(fp)
 c000568:	01401904 	movi	r5,100
 c00056c:	1009883a 	mov	r4,r2
 c000570:	c002b900 	call	c002b90 <__modsi3>
 c000574:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 c000578:	e0bfff07 	ldb	r2,-4(fp)
 c00057c:	01400284 	movi	r5,10
 c000580:	1009883a 	mov	r4,r2
 c000584:	c002b0c0 	call	c002b0c <__divsi3>
 c000588:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 c00058c:	e0bfff07 	ldb	r2,-4(fp)
 c000590:	01400284 	movi	r5,10
 c000594:	1009883a 	mov	r4,r2
 c000598:	c002b900 	call	c002b90 <__modsi3>
 c00059c:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 c0005a0:	e0bffe8b 	ldhu	r2,-6(fp)
 c0005a4:	10803fcc 	andi	r2,r2,255
 c0005a8:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 c0005ac:	e0bffe03 	ldbu	r2,-8(fp)
 c0005b0:	1004933a 	slli	r2,r2,12
 c0005b4:	1007883a 	mov	r3,r2
 c0005b8:	e0bffe8b 	ldhu	r2,-6(fp)
 c0005bc:	1884b03a 	or	r2,r3,r2
 c0005c0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 c0005c4:	e0bffe43 	ldbu	r2,-7(fp)
 c0005c8:	1004923a 	slli	r2,r2,8
 c0005cc:	1007883a 	mov	r3,r2
 c0005d0:	e0bffe8b 	ldhu	r2,-6(fp)
 c0005d4:	1884b03a 	or	r2,r3,r2
 c0005d8:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 c0005dc:	e0fffe8b 	ldhu	r3,-6(fp)
 c0005e0:	00807404 	movi	r2,464
 c0005e4:	10c00035 	stwio	r3,0(r2)
}
 c0005e8:	0001883a 	nop
 c0005ec:	e037883a 	mov	sp,fp
 c0005f0:	dfc00117 	ldw	ra,4(sp)
 c0005f4:	df000017 	ldw	fp,0(sp)
 c0005f8:	dec00204 	addi	sp,sp,8
 c0005fc:	f800283a 	ret

0c000600 <printSignedHex1>:

void printSignedHex1(signed char value) {
 c000600:	defffb04 	addi	sp,sp,-20
 c000604:	dfc00415 	stw	ra,16(sp)
 c000608:	df000315 	stw	fp,12(sp)
 c00060c:	df000304 	addi	fp,sp,12
 c000610:	2005883a 	mov	r2,r4
 c000614:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 c000618:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 c00061c:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 c000620:	00807404 	movi	r2,464
 c000624:	10800037 	ldwio	r2,0(r2)
 c000628:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 c00062c:	e0bfff07 	ldb	r2,-4(fp)
 c000630:	1000060e 	bge	r2,zero,c00064c <printSignedHex1+0x4c>
		setLED(10);
 c000634:	01000284 	movi	r4,10
 c000638:	c00045c0 	call	c00045c <setLED>
		value = -value;
 c00063c:	e0bfff03 	ldbu	r2,-4(fp)
 c000640:	0085c83a 	sub	r2,zero,r2
 c000644:	e0bfff05 	stb	r2,-4(fp)
 c000648:	00000206 	br	c000654 <printSignedHex1+0x54>
	} else {
		clearLED(10);
 c00064c:	01000284 	movi	r4,10
 c000650:	c0004a00 	call	c0004a0 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 c000654:	e0bfff03 	ldbu	r2,-4(fp)
 c000658:	108018c4 	addi	r2,r2,99
 c00065c:	10803fcc 	andi	r2,r2,255
 c000660:	108031f0 	cmpltui	r2,r2,199
 c000664:	1000031e 	bne	r2,zero,c000674 <printSignedHex1+0x74>
		setLED(12);
 c000668:	01000304 	movi	r4,12
 c00066c:	c00045c0 	call	c00045c <setLED>
 c000670:	00000206 	br	c00067c <printSignedHex1+0x7c>
	else
		clearLED(12);
 c000674:	01000304 	movi	r4,12
 c000678:	c0004a00 	call	c0004a0 <clearLED>

	value = value % 100;
 c00067c:	e0bfff07 	ldb	r2,-4(fp)
 c000680:	01401904 	movi	r5,100
 c000684:	1009883a 	mov	r4,r2
 c000688:	c002b900 	call	c002b90 <__modsi3>
 c00068c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 c000690:	e0bfff07 	ldb	r2,-4(fp)
 c000694:	01400284 	movi	r5,10
 c000698:	1009883a 	mov	r4,r2
 c00069c:	c002b0c0 	call	c002b0c <__divsi3>
 c0006a0:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 c0006a4:	e0bfff07 	ldb	r2,-4(fp)
 c0006a8:	01400284 	movi	r5,10
 c0006ac:	1009883a 	mov	r4,r2
 c0006b0:	c002b900 	call	c002b90 <__modsi3>
 c0006b4:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 c0006b8:	e0bfff07 	ldb	r2,-4(fp)
 c0006bc:	01400284 	movi	r5,10
 c0006c0:	1009883a 	mov	r4,r2
 c0006c4:	c002b0c0 	call	c002b0c <__divsi3>
 c0006c8:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 c0006cc:	e0bfff07 	ldb	r2,-4(fp)
 c0006d0:	01400284 	movi	r5,10
 c0006d4:	1009883a 	mov	r4,r2
 c0006d8:	c002b900 	call	c002b90 <__modsi3>
 c0006dc:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 c0006e0:	e0bffe17 	ldw	r2,-8(fp)
 c0006e4:	10bfc00c 	andi	r2,r2,65280
 c0006e8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 c0006ec:	e0bffd03 	ldbu	r2,-12(fp)
 c0006f0:	1004913a 	slli	r2,r2,4
 c0006f4:	1007883a 	mov	r3,r2
 c0006f8:	e0bffe17 	ldw	r2,-8(fp)
 c0006fc:	10c4b03a 	or	r2,r2,r3
 c000700:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 c000704:	e0bffd43 	ldbu	r2,-11(fp)
 c000708:	e0fffe17 	ldw	r3,-8(fp)
 c00070c:	1884b03a 	or	r2,r3,r2
 c000710:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 c000714:	e0fffe17 	ldw	r3,-8(fp)
 c000718:	00807404 	movi	r2,464
 c00071c:	10c00035 	stwio	r3,0(r2)
}
 c000720:	0001883a 	nop
 c000724:	e037883a 	mov	sp,fp
 c000728:	dfc00117 	ldw	ra,4(sp)
 c00072c:	df000017 	ldw	fp,0(sp)
 c000730:	dec00204 	addi	sp,sp,8
 c000734:	f800283a 	ret

0c000738 <setKeycode>:

void setKeycode(WORD keycode)
{
 c000738:	defffe04 	addi	sp,sp,-8
 c00073c:	df000115 	stw	fp,4(sp)
 c000740:	df000104 	addi	fp,sp,4
 c000744:	2005883a 	mov	r2,r4
 c000748:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 c00074c:	e0ffff0b 	ldhu	r3,-4(fp)
 c000750:	00808404 	movi	r2,528
 c000754:	10c00035 	stwio	r3,0(r2)
}
 c000758:	0001883a 	nop
 c00075c:	e037883a 	mov	sp,fp
 c000760:	df000017 	ldw	fp,0(sp)
 c000764:	dec00104 	addi	sp,sp,4
 c000768:	f800283a 	ret

0c00076c <main>:
int main() {
 c00076c:	defff704 	addi	sp,sp,-36
 c000770:	dfc00815 	stw	ra,32(sp)
 c000774:	df000715 	stw	fp,28(sp)
 c000778:	df000704 	addi	fp,sp,28
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 c00077c:	e03ff905 	stb	zero,-28(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 c000780:	e03ff945 	stb	zero,-27(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 c000784:	01030074 	movhi	r4,3073
 c000788:	2109f904 	addi	r4,r4,10212
 c00078c:	c002e340 	call	c002e34 <puts>
	MAX3421E_init();
 c000790:	c001a7c0 	call	c001a7c <MAX3421E_init>
	printf("initializing USB...\n");
 c000794:	01030074 	movhi	r4,3073
 c000798:	210a0004 	addi	r4,r4,10240
 c00079c:	c002e340 	call	c002e34 <puts>
	USB_init();
 c0007a0:	c0022280 	call	c002228 <USB_init>
	while (1) {
		printf(".");
 c0007a4:	01000b84 	movi	r4,46
 c0007a8:	c002d5c0 	call	c002d5c <putchar>
		MAX3421E_Task();
 c0007ac:	c001b100 	call	c001b10 <MAX3421E_Task>
		USB_Task();
 c0007b0:	c0022c00 	call	c0022c0 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 c0007b4:	c002a300 	call	c002a30 <GetUsbTaskState>
 c0007b8:	10803fcc 	andi	r2,r2,255
 c0007bc:	10801018 	cmpnei	r2,r2,64
 c0007c0:	1000ad1e 	bne	r2,zero,c000a78 <main+0x30c>
			if (!runningdebugflag) {
 c0007c4:	e0bff903 	ldbu	r2,-28(fp)
 c0007c8:	1000071e 	bne	r2,zero,c0007e8 <main+0x7c>
				runningdebugflag = 1;
 c0007cc:	00800044 	movi	r2,1
 c0007d0:	e0bff905 	stb	r2,-28(fp)
				setLED(9);
 c0007d4:	01000244 	movi	r4,9
 c0007d8:	c00045c0 	call	c00045c <setLED>
				device = GetDriverandReport();
 c0007dc:	c00026c0 	call	c00026c <GetDriverandReport>
 c0007e0:	e0bff985 	stb	r2,-26(fp)
 c0007e4:	003fef06 	br	c0007a4 <__alt_data_end+0xfc0007a4>
			} else if (device == 1) {
 c0007e8:	e0bff983 	ldbu	r2,-26(fp)
 c0007ec:	10800058 	cmpnei	r2,r2,1
 c0007f0:	1000451e 	bne	r2,zero,c000908 <main+0x19c>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 c0007f4:	e0bffd44 	addi	r2,fp,-11
 c0007f8:	1009883a 	mov	r4,r2
 c0007fc:	c0013e00 	call	c0013e0 <kbdPoll>
 c000800:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
 c000804:	e0bffb03 	ldbu	r2,-20(fp)
 c000808:	10800118 	cmpnei	r2,r2,4
 c00080c:	1000ba26 	beq	r2,zero,c000af8 <main+0x38c>
					continue; //NAK means no new data
				} else if (rcode) {
 c000810:	e0bffb03 	ldbu	r2,-20(fp)
 c000814:	10000926 	beq	r2,zero,c00083c <main+0xd0>
					printf("Rcode: ");
 c000818:	01030074 	movhi	r4,3073
 c00081c:	210a0504 	addi	r4,r4,10260
 c000820:	c002d180 	call	c002d18 <printf>
					printf("%x \n", rcode);
 c000824:	e0bffb03 	ldbu	r2,-20(fp)
 c000828:	100b883a 	mov	r5,r2
 c00082c:	01030074 	movhi	r4,3073
 c000830:	2109e704 	addi	r4,r4,10140
 c000834:	c002d180 	call	c002d18 <printf>
					continue;
 c000838:	0000b206 	br	c000b04 <main+0x398>
				}
				printf("keycodes: ");
 c00083c:	01030074 	movhi	r4,3073
 c000840:	210a0704 	addi	r4,r4,10268
 c000844:	c002d180 	call	c002d18 <printf>
				for (int i = 0; i < 6; i++) {
 c000848:	e03ffa15 	stw	zero,-24(fp)
 c00084c:	00000c06 	br	c000880 <main+0x114>
					printf("%x ", kbdbuf.keycode[i]);
 c000850:	e0fffdc4 	addi	r3,fp,-9
 c000854:	e0bffa17 	ldw	r2,-24(fp)
 c000858:	1885883a 	add	r2,r3,r2
 c00085c:	10800003 	ldbu	r2,0(r2)
 c000860:	10803fcc 	andi	r2,r2,255
 c000864:	100b883a 	mov	r5,r2
 c000868:	01030074 	movhi	r4,3073
 c00086c:	210a0a04 	addi	r4,r4,10280
 c000870:	c002d180 	call	c002d18 <printf>
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 c000874:	e0bffa17 	ldw	r2,-24(fp)
 c000878:	10800044 	addi	r2,r2,1
 c00087c:	e0bffa15 	stw	r2,-24(fp)
 c000880:	e0bffa17 	ldw	r2,-24(fp)
 c000884:	10800190 	cmplti	r2,r2,6
 c000888:	103ff11e 	bne	r2,zero,c000850 <__alt_data_end+0xfc000850>
					printf("%x ", kbdbuf.keycode[i]);
				}
				setKeycode(kbdbuf.keycode[0]);
 c00088c:	e0bffdc3 	ldbu	r2,-9(fp)
 c000890:	10803fcc 	andi	r2,r2,255
 c000894:	1009883a 	mov	r4,r2
 c000898:	c0007380 	call	c000738 <setKeycode>
				IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE2_BASE, kbdbuf.keycode[1]);
 c00089c:	e0bffe03 	ldbu	r2,-8(fp)
 c0008a0:	10c03fcc 	andi	r3,r2,255
 c0008a4:	00806804 	movi	r2,416
 c0008a8:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE3_BASE, kbdbuf.keycode[2]);
 c0008ac:	e0bffe43 	ldbu	r2,-7(fp)
 c0008b0:	10c03fcc 	andi	r3,r2,255
 c0008b4:	00806404 	movi	r2,400
 c0008b8:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE4_BASE, kbdbuf.keycode[3]);
 c0008bc:	e0bffe83 	ldbu	r2,-6(fp)
 c0008c0:	10c03fcc 	andi	r3,r2,255
 c0008c4:	00806004 	movi	r2,384
 c0008c8:	10c00035 	stwio	r3,0(r2)
				printSignedHex0(kbdbuf.keycode[0]);
 c0008cc:	e0bffdc3 	ldbu	r2,-9(fp)
 c0008d0:	10803fcc 	andi	r2,r2,255
 c0008d4:	1080201c 	xori	r2,r2,128
 c0008d8:	10bfe004 	addi	r2,r2,-128
 c0008dc:	1009883a 	mov	r4,r2
 c0008e0:	c0004e80 	call	c0004e8 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 c0008e4:	e0bffe03 	ldbu	r2,-8(fp)
 c0008e8:	10803fcc 	andi	r2,r2,255
 c0008ec:	1080201c 	xori	r2,r2,128
 c0008f0:	10bfe004 	addi	r2,r2,-128
 c0008f4:	1009883a 	mov	r4,r2
 c0008f8:	c0006000 	call	c000600 <printSignedHex1>
				printf("\n");
 c0008fc:	01000284 	movi	r4,10
 c000900:	c002d5c0 	call	c002d5c <putchar>
 c000904:	003fa706 	br	c0007a4 <__alt_data_end+0xfc0007a4>
			}

			else if (device == 2) {
 c000908:	e0bff983 	ldbu	r2,-26(fp)
 c00090c:	10800098 	cmpnei	r2,r2,2
 c000910:	103fa41e 	bne	r2,zero,c0007a4 <__alt_data_end+0xfc0007a4>
				rcode = mousePoll(&buf);
 c000914:	e0bffb44 	addi	r2,fp,-19
 c000918:	1009883a 	mov	r4,r2
 c00091c:	c0013580 	call	c001358 <mousePoll>
 c000920:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
 c000924:	e0bffb03 	ldbu	r2,-20(fp)
 c000928:	10800118 	cmpnei	r2,r2,4
 c00092c:	10007426 	beq	r2,zero,c000b00 <main+0x394>
					//NAK means no new data
					continue;
				} else if (rcode) {
 c000930:	e0bffb03 	ldbu	r2,-20(fp)
 c000934:	10000926 	beq	r2,zero,c00095c <main+0x1f0>
					printf("Rcode: ");
 c000938:	01030074 	movhi	r4,3073
 c00093c:	210a0504 	addi	r4,r4,10260
 c000940:	c002d180 	call	c002d18 <printf>
					printf("%x \n", rcode);
 c000944:	e0bffb03 	ldbu	r2,-20(fp)
 c000948:	100b883a 	mov	r5,r2
 c00094c:	01030074 	movhi	r4,3073
 c000950:	2109e704 	addi	r4,r4,10140
 c000954:	c002d180 	call	c002d18 <printf>
					continue;
 c000958:	00006a06 	br	c000b04 <main+0x398>
				}
				printf("X displacement: ");
 c00095c:	01030074 	movhi	r4,3073
 c000960:	210a0b04 	addi	r4,r4,10284
 c000964:	c002d180 	call	c002d18 <printf>
				printf("%d ", (signed char) buf.Xdispl);
 c000968:	e0bffb83 	ldbu	r2,-18(fp)
 c00096c:	10803fcc 	andi	r2,r2,255
 c000970:	1080201c 	xori	r2,r2,128
 c000974:	10bfe004 	addi	r2,r2,-128
 c000978:	100b883a 	mov	r5,r2
 c00097c:	01030074 	movhi	r4,3073
 c000980:	210a1004 	addi	r4,r4,10304
 c000984:	c002d180 	call	c002d18 <printf>
				printSignedHex0((signed char) buf.Xdispl);
 c000988:	e0bffb83 	ldbu	r2,-18(fp)
 c00098c:	10803fcc 	andi	r2,r2,255
 c000990:	1080201c 	xori	r2,r2,128
 c000994:	10bfe004 	addi	r2,r2,-128
 c000998:	1009883a 	mov	r4,r2
 c00099c:	c0004e80 	call	c0004e8 <printSignedHex0>
				printf("Y displacement: ");
 c0009a0:	01030074 	movhi	r4,3073
 c0009a4:	210a1104 	addi	r4,r4,10308
 c0009a8:	c002d180 	call	c002d18 <printf>
				printf("%d ", (signed char) buf.Ydispl);
 c0009ac:	e0bffbc3 	ldbu	r2,-17(fp)
 c0009b0:	10803fcc 	andi	r2,r2,255
 c0009b4:	1080201c 	xori	r2,r2,128
 c0009b8:	10bfe004 	addi	r2,r2,-128
 c0009bc:	100b883a 	mov	r5,r2
 c0009c0:	01030074 	movhi	r4,3073
 c0009c4:	210a1004 	addi	r4,r4,10304
 c0009c8:	c002d180 	call	c002d18 <printf>
				printSignedHex1((signed char) buf.Ydispl);
 c0009cc:	e0bffbc3 	ldbu	r2,-17(fp)
 c0009d0:	10803fcc 	andi	r2,r2,255
 c0009d4:	1080201c 	xori	r2,r2,128
 c0009d8:	10bfe004 	addi	r2,r2,-128
 c0009dc:	1009883a 	mov	r4,r2
 c0009e0:	c0006000 	call	c000600 <printSignedHex1>
				printf("Buttons: ");
 c0009e4:	01030074 	movhi	r4,3073
 c0009e8:	210a1604 	addi	r4,r4,10328
 c0009ec:	c002d180 	call	c002d18 <printf>
				printf("%x\n", buf.button);
 c0009f0:	e0bffb43 	ldbu	r2,-19(fp)
 c0009f4:	10803fcc 	andi	r2,r2,255
 c0009f8:	100b883a 	mov	r5,r2
 c0009fc:	01030074 	movhi	r4,3073
 c000a00:	210a1904 	addi	r4,r4,10340
 c000a04:	c002d180 	call	c002d18 <printf>
				if (buf.button & 0x04)
 c000a08:	e0bffb43 	ldbu	r2,-19(fp)
 c000a0c:	10803fcc 	andi	r2,r2,255
 c000a10:	1080010c 	andi	r2,r2,4
 c000a14:	10000326 	beq	r2,zero,c000a24 <main+0x2b8>
					setLED(2);
 c000a18:	01000084 	movi	r4,2
 c000a1c:	c00045c0 	call	c00045c <setLED>
 c000a20:	00000206 	br	c000a2c <main+0x2c0>
				else
					clearLED(2);
 c000a24:	01000084 	movi	r4,2
 c000a28:	c0004a00 	call	c0004a0 <clearLED>
				if (buf.button & 0x02)
 c000a2c:	e0bffb43 	ldbu	r2,-19(fp)
 c000a30:	10803fcc 	andi	r2,r2,255
 c000a34:	1080008c 	andi	r2,r2,2
 c000a38:	10000326 	beq	r2,zero,c000a48 <main+0x2dc>
					setLED(1);
 c000a3c:	01000044 	movi	r4,1
 c000a40:	c00045c0 	call	c00045c <setLED>
 c000a44:	00000206 	br	c000a50 <main+0x2e4>
				else
					clearLED(1);
 c000a48:	01000044 	movi	r4,1
 c000a4c:	c0004a00 	call	c0004a0 <clearLED>
				if (buf.button & 0x01)
 c000a50:	e0bffb43 	ldbu	r2,-19(fp)
 c000a54:	10803fcc 	andi	r2,r2,255
 c000a58:	1080004c 	andi	r2,r2,1
 c000a5c:	10000326 	beq	r2,zero,c000a6c <main+0x300>
					setLED(0);
 c000a60:	0009883a 	mov	r4,zero
 c000a64:	c00045c0 	call	c00045c <setLED>
 c000a68:	003f4e06 	br	c0007a4 <__alt_data_end+0xfc0007a4>
				else
					clearLED(0);
 c000a6c:	0009883a 	mov	r4,zero
 c000a70:	c0004a00 	call	c0004a0 <clearLED>
 c000a74:	003f4b06 	br	c0007a4 <__alt_data_end+0xfc0007a4>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 c000a78:	c002a300 	call	c002a30 <GetUsbTaskState>
 c000a7c:	10803fcc 	andi	r2,r2,255
 c000a80:	10803fd8 	cmpnei	r2,r2,255
 c000a84:	10000a1e 	bne	r2,zero,c000ab0 <main+0x344>
			if (!errorflag) {
 c000a88:	e0bff943 	ldbu	r2,-27(fp)
 c000a8c:	103f451e 	bne	r2,zero,c0007a4 <__alt_data_end+0xfc0007a4>
				errorflag = 1;
 c000a90:	00800044 	movi	r2,1
 c000a94:	e0bff945 	stb	r2,-27(fp)
				clearLED(9);
 c000a98:	01000244 	movi	r4,9
 c000a9c:	c0004a00 	call	c0004a0 <clearLED>
				printf("USB Error State\n");
 c000aa0:	01030074 	movhi	r4,3073
 c000aa4:	210a1a04 	addi	r4,r4,10344
 c000aa8:	c002e340 	call	c002e34 <puts>
 c000aac:	003f3d06 	br	c0007a4 <__alt_data_end+0xfc0007a4>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 c000ab0:	01030074 	movhi	r4,3073
 c000ab4:	210a1e04 	addi	r4,r4,10360
 c000ab8:	c002d180 	call	c002d18 <printf>
			printf("%x\n", GetUsbTaskState());
 c000abc:	c002a300 	call	c002a30 <GetUsbTaskState>
 c000ac0:	10803fcc 	andi	r2,r2,255
 c000ac4:	100b883a 	mov	r5,r2
 c000ac8:	01030074 	movhi	r4,3073
 c000acc:	210a1904 	addi	r4,r4,10340
 c000ad0:	c002d180 	call	c002d18 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 c000ad4:	e0bff903 	ldbu	r2,-28(fp)
 c000ad8:	10000326 	beq	r2,zero,c000ae8 <main+0x37c>
				runningdebugflag = 0;
 c000adc:	e03ff905 	stb	zero,-28(fp)
				MAX3421E_init();
 c000ae0:	c001a7c0 	call	c001a7c <MAX3421E_init>
				USB_init();
 c000ae4:	c0022280 	call	c002228 <USB_init>
			}
			errorflag = 0;
 c000ae8:	e03ff945 	stb	zero,-27(fp)
			clearLED(9);
 c000aec:	01000244 	movi	r4,9
 c000af0:	c0004a00 	call	c0004a0 <clearLED>
 c000af4:	003f2b06 	br	c0007a4 <__alt_data_end+0xfc0007a4>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
 c000af8:	0001883a 	nop
 c000afc:	003f2906 	br	c0007a4 <__alt_data_end+0xfc0007a4>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
 c000b00:	0001883a 	nop
			}
			errorflag = 0;
			clearLED(9);
		}

	}
 c000b04:	003f2706 	br	c0007a4 <__alt_data_end+0xfc0007a4>

0c000b08 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 c000b08:	defff204 	addi	sp,sp,-56
 c000b0c:	dfc00d15 	stw	ra,52(sp)
 c000b10:	df000c15 	stw	fp,48(sp)
 c000b14:	df000c04 	addi	fp,sp,48
 c000b18:	2005883a 	mov	r2,r4
 c000b1c:	e17fff15 	stw	r5,-4(fp)
 c000b20:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 c000b24:	00830074 	movhi	r2,3073
 c000b28:	1098cc04 	addi	r2,r2,25392
 c000b2c:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 c000b30:	00830074 	movhi	r2,3073
 c000b34:	1098cc04 	addi	r2,r2,25392
 c000b38:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 c000b3c:	e0fffe03 	ldbu	r3,-8(fp)
 c000b40:	00830074 	movhi	r2,3073
 c000b44:	1098cc04 	addi	r2,r2,25392
 c000b48:	d8800415 	stw	r2,16(sp)
 c000b4c:	00800244 	movi	r2,9
 c000b50:	d8800315 	stw	r2,12(sp)
 c000b54:	d8000215 	stw	zero,8(sp)
 c000b58:	00800084 	movi	r2,2
 c000b5c:	d8800115 	stw	r2,4(sp)
 c000b60:	d8000015 	stw	zero,0(sp)
 c000b64:	01c00184 	movi	r7,6
 c000b68:	01802004 	movi	r6,128
 c000b6c:	000b883a 	mov	r5,zero
 c000b70:	1809883a 	mov	r4,r3
 c000b74:	c001c740 	call	c001c74 <XferCtrlReq>
 c000b78:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c000b7c:	e0bffc03 	ldbu	r2,-16(fp)
 c000b80:	10000226 	beq	r2,zero,c000b8c <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 c000b84:	0005883a 	mov	r2,zero
 c000b88:	0000dc06 	br	c000efc <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 c000b8c:	e0bffa17 	ldw	r2,-24(fp)
 c000b90:	1080008b 	ldhu	r2,2(r2)
 c000b94:	10bfffcc 	andi	r2,r2,65535
 c000b98:	10804070 	cmpltui	r2,r2,257
 c000b9c:	1000031e 	bne	r2,zero,c000bac <HIDMProbe+0xa4>
		total_length = 256;
 c000ba0:	00804004 	movi	r2,256
 c000ba4:	e0bff90d 	sth	r2,-28(fp)
 c000ba8:	00000306 	br	c000bb8 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 c000bac:	e0bffa17 	ldw	r2,-24(fp)
 c000bb0:	1080008b 	ldhu	r2,2(r2)
 c000bb4:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 c000bb8:	e13ffe03 	ldbu	r4,-8(fp)
 c000bbc:	e0fff90b 	ldhu	r3,-28(fp)
 c000bc0:	00830074 	movhi	r2,3073
 c000bc4:	1098cc04 	addi	r2,r2,25392
 c000bc8:	d8800415 	stw	r2,16(sp)
 c000bcc:	d8c00315 	stw	r3,12(sp)
 c000bd0:	d8000215 	stw	zero,8(sp)
 c000bd4:	00800084 	movi	r2,2
 c000bd8:	d8800115 	stw	r2,4(sp)
 c000bdc:	d8000015 	stw	zero,0(sp)
 c000be0:	01c00184 	movi	r7,6
 c000be4:	01802004 	movi	r6,128
 c000be8:	000b883a 	mov	r5,zero
 c000bec:	c001c740 	call	c001c74 <XferCtrlReq>
 c000bf0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c000bf4:	e0bffc03 	ldbu	r2,-16(fp)
 c000bf8:	10000226 	beq	r2,zero,c000c04 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 c000bfc:	0005883a 	mov	r2,zero
 c000c00:	0000be06 	br	c000efc <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 c000c04:	e0bffa17 	ldw	r2,-24(fp)
 c000c08:	10800143 	ldbu	r2,5(r2)
 c000c0c:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 c000c10:	0000b306 	br	c000ee0 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 c000c14:	e0bffa17 	ldw	r2,-24(fp)
 c000c18:	10800043 	ldbu	r2,1(r2)
 c000c1c:	10803fcc 	andi	r2,r2,255
 c000c20:	10800120 	cmpeqi	r2,r2,4
 c000c24:	1000091e 	bne	r2,zero,c000c4c <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c000c28:	e0bffa17 	ldw	r2,-24(fp)
 c000c2c:	10800003 	ldbu	r2,0(r2)
 c000c30:	10803fcc 	andi	r2,r2,255
 c000c34:	e0fffb17 	ldw	r3,-20(fp)
 c000c38:	1885883a 	add	r2,r3,r2
 c000c3c:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 c000c40:	e0bffb17 	ldw	r2,-20(fp)
 c000c44:	e0bffa15 	stw	r2,-24(fp)
 c000c48:	0000a506 	br	c000ee0 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 c000c4c:	e0bffa17 	ldw	r2,-24(fp)
 c000c50:	10800143 	ldbu	r2,5(r2)
 c000c54:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 c000c58:	e0bffa17 	ldw	r2,-24(fp)
 c000c5c:	10800183 	ldbu	r2,6(r2)
 c000c60:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 c000c64:	e0bffa17 	ldw	r2,-24(fp)
 c000c68:	108001c3 	ldbu	r2,7(r2)
 c000c6c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c000c70:	e0bffc83 	ldbu	r2,-14(fp)
 c000c74:	108000d8 	cmpnei	r2,r2,3
 c000c78:	1000971e 	bne	r2,zero,c000ed8 <HIDMProbe+0x3d0>
 c000c7c:	e0bffcc3 	ldbu	r2,-13(fp)
 c000c80:	10800058 	cmpnei	r2,r2,1
 c000c84:	1000941e 	bne	r2,zero,c000ed8 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 c000c88:	e0bffd03 	ldbu	r2,-12(fp)
 c000c8c:	10800098 	cmpnei	r2,r2,2
 c000c90:	1000911e 	bne	r2,zero,c000ed8 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 c000c94:	e0fffe03 	ldbu	r3,-8(fp)
 c000c98:	00830074 	movhi	r2,3073
 c000c9c:	10990c04 	addi	r2,r2,25648
 c000ca0:	180690fa 	slli	r3,r3,3
 c000ca4:	10c5883a 	add	r2,r2,r3
 c000ca8:	10800104 	addi	r2,r2,4
 c000cac:	00c00084 	movi	r3,2
 c000cb0:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 c000cb4:	e0fffe03 	ldbu	r3,-8(fp)
 c000cb8:	00830074 	movhi	r2,3073
 c000cbc:	10990c04 	addi	r2,r2,25648
 c000cc0:	180690fa 	slli	r3,r3,3
 c000cc4:	10c5883a 	add	r2,r2,r3
 c000cc8:	10800017 	ldw	r2,0(r2)
 c000ccc:	1080008b 	ldhu	r2,2(r2)
 c000cd0:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 c000cd4:	c0013180 	call	c001318 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 c000cd8:	e0fffe03 	ldbu	r3,-8(fp)
 c000cdc:	00830074 	movhi	r2,3073
 c000ce0:	10990c04 	addi	r2,r2,25648
 c000ce4:	180690fa 	slli	r3,r3,3
 c000ce8:	10c7883a 	add	r3,r2,r3
 c000cec:	00830074 	movhi	r2,3073
 c000cf0:	1098b804 	addi	r2,r2,25312
 c000cf4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 c000cf8:	e0fffe03 	ldbu	r3,-8(fp)
 c000cfc:	00830074 	movhi	r2,3073
 c000d00:	10990c04 	addi	r2,r2,25648
 c000d04:	180690fa 	slli	r3,r3,3
 c000d08:	10c5883a 	add	r2,r2,r3
 c000d0c:	10800017 	ldw	r2,0(r2)
 c000d10:	e0fffd43 	ldbu	r3,-11(fp)
 c000d14:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 c000d18:	e0bffa17 	ldw	r2,-24(fp)
 c000d1c:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 c000d20:	d0a6df45 	stb	r2,-25731(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 c000d24:	e0bffe03 	ldbu	r2,-8(fp)
 c000d28:	d0a6df05 	stb	r2,-25732(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c000d2c:	e0bffa17 	ldw	r2,-24(fp)
 c000d30:	10800003 	ldbu	r2,0(r2)
 c000d34:	10803fcc 	andi	r2,r2,255
 c000d38:	e0fffb17 	ldw	r3,-20(fp)
 c000d3c:	1885883a 	add	r2,r3,r2
 c000d40:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 c000d44:	e0bffb17 	ldw	r2,-20(fp)
 c000d48:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 c000d4c:	00005b06 	br	c000ebc <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 c000d50:	e0bffa17 	ldw	r2,-24(fp)
 c000d54:	10800043 	ldbu	r2,1(r2)
 c000d58:	10803fcc 	andi	r2,r2,255
 c000d5c:	10800160 	cmpeqi	r2,r2,5
 c000d60:	1000091e 	bne	r2,zero,c000d88 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c000d64:	e0bffa17 	ldw	r2,-24(fp)
 c000d68:	10800003 	ldbu	r2,0(r2)
 c000d6c:	10803fcc 	andi	r2,r2,255
 c000d70:	e0fffb17 	ldw	r3,-20(fp)
 c000d74:	1885883a 	add	r2,r3,r2
 c000d78:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 c000d7c:	e0bffb17 	ldw	r2,-20(fp)
 c000d80:	e0bffa15 	stw	r2,-24(fp)
 c000d84:	00004d06 	br	c000ebc <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c000d88:	e0fffe03 	ldbu	r3,-8(fp)
 c000d8c:	00830074 	movhi	r2,3073
 c000d90:	10990c04 	addi	r2,r2,25648
 c000d94:	180690fa 	slli	r3,r3,3
 c000d98:	10c5883a 	add	r2,r2,r3
 c000d9c:	10800017 	ldw	r2,0(r2)
 c000da0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 c000da4:	e0fffa17 	ldw	r3,-24(fp)
 c000da8:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c000dac:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c000db0:	e0fffe03 	ldbu	r3,-8(fp)
 c000db4:	00830074 	movhi	r2,3073
 c000db8:	10990c04 	addi	r2,r2,25648
 c000dbc:	180690fa 	slli	r3,r3,3
 c000dc0:	10c5883a 	add	r2,r2,r3
 c000dc4:	10800017 	ldw	r2,0(r2)
 c000dc8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 c000dcc:	e0fffa17 	ldw	r3,-24(fp)
 c000dd0:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c000dd4:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c000dd8:	e0fffe03 	ldbu	r3,-8(fp)
 c000ddc:	00830074 	movhi	r2,3073
 c000de0:	10990c04 	addi	r2,r2,25648
 c000de4:	180690fa 	slli	r3,r3,3
 c000de8:	10c5883a 	add	r2,r2,r3
 c000dec:	10800017 	ldw	r2,0(r2)
 c000df0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 c000df4:	e0fffa17 	ldw	r3,-24(fp)
 c000df8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c000dfc:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c000e00:	e0fffe03 	ldbu	r3,-8(fp)
 c000e04:	00830074 	movhi	r2,3073
 c000e08:	10990c04 	addi	r2,r2,25648
 c000e0c:	180690fa 	slli	r3,r3,3
 c000e10:	10c5883a 	add	r2,r2,r3
 c000e14:	10800017 	ldw	r2,0(r2)
 c000e18:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 c000e1c:	e0fffa17 	ldw	r3,-24(fp)
 c000e20:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c000e24:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 c000e28:	e0fffe03 	ldbu	r3,-8(fp)
 c000e2c:	e0bffc43 	ldbu	r2,-15(fp)
 c000e30:	d8000415 	stw	zero,16(sp)
 c000e34:	d8000315 	stw	zero,12(sp)
 c000e38:	d8000215 	stw	zero,8(sp)
 c000e3c:	d8000115 	stw	zero,4(sp)
 c000e40:	d8800015 	stw	r2,0(sp)
 c000e44:	01c00244 	movi	r7,9
 c000e48:	000d883a 	mov	r6,zero
 c000e4c:	000b883a 	mov	r5,zero
 c000e50:	1809883a 	mov	r4,r3
 c000e54:	c001c740 	call	c001c74 <XferCtrlReq>
 c000e58:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 c000e5c:	e0bffc03 	ldbu	r2,-16(fp)
 c000e60:	10000226 	beq	r2,zero,c000e6c <HIDMProbe+0x364>
							return (FALSE);
 c000e64:	0005883a 	mov	r2,zero
 c000e68:	00002406 	br	c000efc <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 c000e6c:	e0fffe03 	ldbu	r3,-8(fp)
 c000e70:	d0a6df43 	ldbu	r2,-25731(gp)
 c000e74:	10803fcc 	andi	r2,r2,255
 c000e78:	d8000415 	stw	zero,16(sp)
 c000e7c:	d8000315 	stw	zero,12(sp)
 c000e80:	d8800215 	stw	r2,8(sp)
 c000e84:	d8000115 	stw	zero,4(sp)
 c000e88:	d8000015 	stw	zero,0(sp)
 c000e8c:	01c002c4 	movi	r7,11
 c000e90:	01800844 	movi	r6,33
 c000e94:	000b883a 	mov	r5,zero
 c000e98:	1809883a 	mov	r4,r3
 c000e9c:	c001c740 	call	c001c74 <XferCtrlReq>
 c000ea0:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 c000ea4:	e0bffc03 	ldbu	r2,-16(fp)
 c000ea8:	10000226 	beq	r2,zero,c000eb4 <HIDMProbe+0x3ac>
							return (FALSE);
 c000eac:	0005883a 	mov	r2,zero
 c000eb0:	00001206 	br	c000efc <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 c000eb4:	00800044 	movi	r2,1
 c000eb8:	00001006 	br	c000efc <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 c000ebc:	e0fff90b 	ldhu	r3,-28(fp)
 c000ec0:	00830074 	movhi	r2,3073
 c000ec4:	1098cc04 	addi	r2,r2,25392
 c000ec8:	1885883a 	add	r2,r3,r2
 c000ecc:	e0fffb17 	ldw	r3,-20(fp)
 c000ed0:	18bf9f36 	bltu	r3,r2,c000d50 <__alt_data_end+0xfc000d50>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c000ed4:	00000206 	br	c000ee0 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 c000ed8:	0005883a 	mov	r2,zero
 c000edc:	00000706 	br	c000efc <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 c000ee0:	e0fff90b 	ldhu	r3,-28(fp)
 c000ee4:	00830074 	movhi	r2,3073
 c000ee8:	1098cc04 	addi	r2,r2,25392
 c000eec:	1885883a 	add	r2,r3,r2
 c000ef0:	e0fffb17 	ldw	r3,-20(fp)
 c000ef4:	18bf4736 	bltu	r3,r2,c000c14 <__alt_data_end+0xfc000c14>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 c000ef8:	0005883a 	mov	r2,zero
}
 c000efc:	e037883a 	mov	sp,fp
 c000f00:	dfc00117 	ldw	ra,4(sp)
 c000f04:	df000017 	ldw	fp,0(sp)
 c000f08:	dec00204 	addi	sp,sp,8
 c000f0c:	f800283a 	ret

0c000f10 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 c000f10:	defff204 	addi	sp,sp,-56
 c000f14:	dfc00d15 	stw	ra,52(sp)
 c000f18:	df000c15 	stw	fp,48(sp)
 c000f1c:	df000c04 	addi	fp,sp,48
 c000f20:	2005883a 	mov	r2,r4
 c000f24:	e17fff15 	stw	r5,-4(fp)
 c000f28:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 c000f2c:	00830074 	movhi	r2,3073
 c000f30:	1098cc04 	addi	r2,r2,25392
 c000f34:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 c000f38:	00830074 	movhi	r2,3073
 c000f3c:	1098cc04 	addi	r2,r2,25392
 c000f40:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 c000f44:	e0fffe03 	ldbu	r3,-8(fp)
 c000f48:	00830074 	movhi	r2,3073
 c000f4c:	1098cc04 	addi	r2,r2,25392
 c000f50:	d8800415 	stw	r2,16(sp)
 c000f54:	00800244 	movi	r2,9
 c000f58:	d8800315 	stw	r2,12(sp)
 c000f5c:	d8000215 	stw	zero,8(sp)
 c000f60:	00800084 	movi	r2,2
 c000f64:	d8800115 	stw	r2,4(sp)
 c000f68:	d8000015 	stw	zero,0(sp)
 c000f6c:	01c00184 	movi	r7,6
 c000f70:	01802004 	movi	r6,128
 c000f74:	000b883a 	mov	r5,zero
 c000f78:	1809883a 	mov	r4,r3
 c000f7c:	c001c740 	call	c001c74 <XferCtrlReq>
 c000f80:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 c000f84:	e0bffc03 	ldbu	r2,-16(fp)
 c000f88:	10000226 	beq	r2,zero,c000f94 <HIDKProbe+0x84>
		return (FALSE);
 c000f8c:	0005883a 	mov	r2,zero
 c000f90:	0000dc06 	br	c001304 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 c000f94:	e0bffa17 	ldw	r2,-24(fp)
 c000f98:	1080008b 	ldhu	r2,2(r2)
 c000f9c:	10bfffcc 	andi	r2,r2,65535
 c000fa0:	10804070 	cmpltui	r2,r2,257
 c000fa4:	1000031e 	bne	r2,zero,c000fb4 <HIDKProbe+0xa4>
		total_length = 256;
 c000fa8:	00804004 	movi	r2,256
 c000fac:	e0bff90d 	sth	r2,-28(fp)
 c000fb0:	00000306 	br	c000fc0 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 c000fb4:	e0bffa17 	ldw	r2,-24(fp)
 c000fb8:	1080008b 	ldhu	r2,2(r2)
 c000fbc:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 c000fc0:	e13ffe03 	ldbu	r4,-8(fp)
 c000fc4:	e0fff90b 	ldhu	r3,-28(fp)
 c000fc8:	00830074 	movhi	r2,3073
 c000fcc:	1098cc04 	addi	r2,r2,25392
 c000fd0:	d8800415 	stw	r2,16(sp)
 c000fd4:	d8c00315 	stw	r3,12(sp)
 c000fd8:	d8000215 	stw	zero,8(sp)
 c000fdc:	00800084 	movi	r2,2
 c000fe0:	d8800115 	stw	r2,4(sp)
 c000fe4:	d8000015 	stw	zero,0(sp)
 c000fe8:	01c00184 	movi	r7,6
 c000fec:	01802004 	movi	r6,128
 c000ff0:	000b883a 	mov	r5,zero
 c000ff4:	c001c740 	call	c001c74 <XferCtrlReq>
 c000ff8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 c000ffc:	e0bffc03 	ldbu	r2,-16(fp)
 c001000:	10000226 	beq	r2,zero,c00100c <HIDKProbe+0xfc>
		return (FALSE);
 c001004:	0005883a 	mov	r2,zero
 c001008:	0000be06 	br	c001304 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 c00100c:	e0bffa17 	ldw	r2,-24(fp)
 c001010:	10800143 	ldbu	r2,5(r2)
 c001014:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 c001018:	0000b306 	br	c0012e8 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 c00101c:	e0bffa17 	ldw	r2,-24(fp)
 c001020:	10800043 	ldbu	r2,1(r2)
 c001024:	10803fcc 	andi	r2,r2,255
 c001028:	10800120 	cmpeqi	r2,r2,4
 c00102c:	1000091e 	bne	r2,zero,c001054 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c001030:	e0bffa17 	ldw	r2,-24(fp)
 c001034:	10800003 	ldbu	r2,0(r2)
 c001038:	10803fcc 	andi	r2,r2,255
 c00103c:	e0fffb17 	ldw	r3,-20(fp)
 c001040:	1885883a 	add	r2,r3,r2
 c001044:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 c001048:	e0bffb17 	ldw	r2,-20(fp)
 c00104c:	e0bffa15 	stw	r2,-24(fp)
 c001050:	0000a506 	br	c0012e8 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 c001054:	e0bffa17 	ldw	r2,-24(fp)
 c001058:	10800143 	ldbu	r2,5(r2)
 c00105c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 c001060:	e0bffa17 	ldw	r2,-24(fp)
 c001064:	10800183 	ldbu	r2,6(r2)
 c001068:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 c00106c:	e0bffa17 	ldw	r2,-24(fp)
 c001070:	108001c3 	ldbu	r2,7(r2)
 c001074:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c001078:	e0bffc83 	ldbu	r2,-14(fp)
 c00107c:	108000d8 	cmpnei	r2,r2,3
 c001080:	1000971e 	bne	r2,zero,c0012e0 <HIDKProbe+0x3d0>
 c001084:	e0bffcc3 	ldbu	r2,-13(fp)
 c001088:	10800058 	cmpnei	r2,r2,1
 c00108c:	1000941e 	bne	r2,zero,c0012e0 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 c001090:	e0bffd03 	ldbu	r2,-12(fp)
 c001094:	10800058 	cmpnei	r2,r2,1
 c001098:	1000911e 	bne	r2,zero,c0012e0 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 c00109c:	e0fffe03 	ldbu	r3,-8(fp)
 c0010a0:	00830074 	movhi	r2,3073
 c0010a4:	10990c04 	addi	r2,r2,25648
 c0010a8:	180690fa 	slli	r3,r3,3
 c0010ac:	10c5883a 	add	r2,r2,r3
 c0010b0:	10800104 	addi	r2,r2,4
 c0010b4:	00c00044 	movi	r3,1
 c0010b8:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 c0010bc:	e0fffe03 	ldbu	r3,-8(fp)
 c0010c0:	00830074 	movhi	r2,3073
 c0010c4:	10990c04 	addi	r2,r2,25648
 c0010c8:	180690fa 	slli	r3,r3,3
 c0010cc:	10c5883a 	add	r2,r2,r3
 c0010d0:	10800017 	ldw	r2,0(r2)
 c0010d4:	1080008b 	ldhu	r2,2(r2)
 c0010d8:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 c0010dc:	c0013180 	call	c001318 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 c0010e0:	e0fffe03 	ldbu	r3,-8(fp)
 c0010e4:	00830074 	movhi	r2,3073
 c0010e8:	10990c04 	addi	r2,r2,25648
 c0010ec:	180690fa 	slli	r3,r3,3
 c0010f0:	10c7883a 	add	r3,r2,r3
 c0010f4:	00830074 	movhi	r2,3073
 c0010f8:	1098b804 	addi	r2,r2,25312
 c0010fc:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 c001100:	e0fffe03 	ldbu	r3,-8(fp)
 c001104:	00830074 	movhi	r2,3073
 c001108:	10990c04 	addi	r2,r2,25648
 c00110c:	180690fa 	slli	r3,r3,3
 c001110:	10c5883a 	add	r2,r2,r3
 c001114:	10800017 	ldw	r2,0(r2)
 c001118:	e0fffd43 	ldbu	r3,-11(fp)
 c00111c:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 c001120:	e0bffa17 	ldw	r2,-24(fp)
 c001124:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 c001128:	d0a6df45 	stb	r2,-25731(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 c00112c:	e0bffe03 	ldbu	r2,-8(fp)
 c001130:	d0a6df05 	stb	r2,-25732(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 c001134:	e0bffa17 	ldw	r2,-24(fp)
 c001138:	10800003 	ldbu	r2,0(r2)
 c00113c:	10803fcc 	andi	r2,r2,255
 c001140:	e0fffb17 	ldw	r3,-20(fp)
 c001144:	1885883a 	add	r2,r3,r2
 c001148:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 c00114c:	e0bffb17 	ldw	r2,-20(fp)
 c001150:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 c001154:	00005b06 	br	c0012c4 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 c001158:	e0bffa17 	ldw	r2,-24(fp)
 c00115c:	10800043 	ldbu	r2,1(r2)
 c001160:	10803fcc 	andi	r2,r2,255
 c001164:	10800160 	cmpeqi	r2,r2,5
 c001168:	1000091e 	bne	r2,zero,c001190 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 c00116c:	e0bffa17 	ldw	r2,-24(fp)
 c001170:	10800003 	ldbu	r2,0(r2)
 c001174:	10803fcc 	andi	r2,r2,255
 c001178:	e0fffb17 	ldw	r3,-20(fp)
 c00117c:	1885883a 	add	r2,r3,r2
 c001180:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 c001184:	e0bffb17 	ldw	r2,-20(fp)
 c001188:	e0bffa15 	stw	r2,-24(fp)
 c00118c:	00004d06 	br	c0012c4 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c001190:	e0fffe03 	ldbu	r3,-8(fp)
 c001194:	00830074 	movhi	r2,3073
 c001198:	10990c04 	addi	r2,r2,25648
 c00119c:	180690fa 	slli	r3,r3,3
 c0011a0:	10c5883a 	add	r2,r2,r3
 c0011a4:	10800017 	ldw	r2,0(r2)
 c0011a8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 c0011ac:	e0fffa17 	ldw	r3,-24(fp)
 c0011b0:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 c0011b4:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c0011b8:	e0fffe03 	ldbu	r3,-8(fp)
 c0011bc:	00830074 	movhi	r2,3073
 c0011c0:	10990c04 	addi	r2,r2,25648
 c0011c4:	180690fa 	slli	r3,r3,3
 c0011c8:	10c5883a 	add	r2,r2,r3
 c0011cc:	10800017 	ldw	r2,0(r2)
 c0011d0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 c0011d4:	e0fffa17 	ldw	r3,-24(fp)
 c0011d8:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 c0011dc:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c0011e0:	e0fffe03 	ldbu	r3,-8(fp)
 c0011e4:	00830074 	movhi	r2,3073
 c0011e8:	10990c04 	addi	r2,r2,25648
 c0011ec:	180690fa 	slli	r3,r3,3
 c0011f0:	10c5883a 	add	r2,r2,r3
 c0011f4:	10800017 	ldw	r2,0(r2)
 c0011f8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 c0011fc:	e0fffa17 	ldw	r3,-24(fp)
 c001200:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 c001204:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c001208:	e0fffe03 	ldbu	r3,-8(fp)
 c00120c:	00830074 	movhi	r2,3073
 c001210:	10990c04 	addi	r2,r2,25648
 c001214:	180690fa 	slli	r3,r3,3
 c001218:	10c5883a 	add	r2,r2,r3
 c00121c:	10800017 	ldw	r2,0(r2)
 c001220:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 c001224:	e0fffa17 	ldw	r3,-24(fp)
 c001228:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 c00122c:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 c001230:	e0fffe03 	ldbu	r3,-8(fp)
 c001234:	e0bffc43 	ldbu	r2,-15(fp)
 c001238:	d8000415 	stw	zero,16(sp)
 c00123c:	d8000315 	stw	zero,12(sp)
 c001240:	d8000215 	stw	zero,8(sp)
 c001244:	d8000115 	stw	zero,4(sp)
 c001248:	d8800015 	stw	r2,0(sp)
 c00124c:	01c00244 	movi	r7,9
 c001250:	000d883a 	mov	r6,zero
 c001254:	000b883a 	mov	r5,zero
 c001258:	1809883a 	mov	r4,r3
 c00125c:	c001c740 	call	c001c74 <XferCtrlReq>
 c001260:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 c001264:	e0bffc03 	ldbu	r2,-16(fp)
 c001268:	10000226 	beq	r2,zero,c001274 <HIDKProbe+0x364>
							return (FALSE);
 c00126c:	0005883a 	mov	r2,zero
 c001270:	00002406 	br	c001304 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 c001274:	e0fffe03 	ldbu	r3,-8(fp)
 c001278:	d0a6df43 	ldbu	r2,-25731(gp)
 c00127c:	10803fcc 	andi	r2,r2,255
 c001280:	d8000415 	stw	zero,16(sp)
 c001284:	d8000315 	stw	zero,12(sp)
 c001288:	d8800215 	stw	r2,8(sp)
 c00128c:	d8000115 	stw	zero,4(sp)
 c001290:	d8000015 	stw	zero,0(sp)
 c001294:	01c002c4 	movi	r7,11
 c001298:	01800844 	movi	r6,33
 c00129c:	000b883a 	mov	r5,zero
 c0012a0:	1809883a 	mov	r4,r3
 c0012a4:	c001c740 	call	c001c74 <XferCtrlReq>
 c0012a8:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 c0012ac:	e0bffc03 	ldbu	r2,-16(fp)
 c0012b0:	10000226 	beq	r2,zero,c0012bc <HIDKProbe+0x3ac>
							return (FALSE);
 c0012b4:	0005883a 	mov	r2,zero
 c0012b8:	00001206 	br	c001304 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 c0012bc:	00800044 	movi	r2,1
 c0012c0:	00001006 	br	c001304 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 c0012c4:	e0fff90b 	ldhu	r3,-28(fp)
 c0012c8:	00830074 	movhi	r2,3073
 c0012cc:	1098cc04 	addi	r2,r2,25392
 c0012d0:	1885883a 	add	r2,r3,r2
 c0012d4:	e0fffb17 	ldw	r3,-20(fp)
 c0012d8:	18bf9f36 	bltu	r3,r2,c001158 <__alt_data_end+0xfc001158>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 c0012dc:	00000206 	br	c0012e8 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 c0012e0:	0005883a 	mov	r2,zero
 c0012e4:	00000706 	br	c001304 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 c0012e8:	e0fff90b 	ldhu	r3,-28(fp)
 c0012ec:	00830074 	movhi	r2,3073
 c0012f0:	1098cc04 	addi	r2,r2,25392
 c0012f4:	1885883a 	add	r2,r3,r2
 c0012f8:	e0fffb17 	ldw	r3,-20(fp)
 c0012fc:	18bf4736 	bltu	r3,r2,c00101c <__alt_data_end+0xfc00101c>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 c001300:	0005883a 	mov	r2,zero
}
 c001304:	e037883a 	mov	sp,fp
 c001308:	dfc00117 	ldw	ra,4(sp)
 c00130c:	df000017 	ldw	fp,0(sp)
 c001310:	dec00204 	addi	sp,sp,8
 c001314:	f800283a 	ret

0c001318 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 c001318:	deffff04 	addi	sp,sp,-4
 c00131c:	df000015 	stw	fp,0(sp)
 c001320:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 c001324:	00830074 	movhi	r2,3073
 c001328:	1098b804 	addi	r2,r2,25312
 c00132c:	00c01004 	movi	r3,64
 c001330:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 c001334:	00830074 	movhi	r2,3073
 c001338:	1098b804 	addi	r2,r2,25312
 c00133c:	00c00404 	movi	r3,16
 c001340:	10c00385 	stb	r3,14(r2)
}
 c001344:	0001883a 	nop
 c001348:	e037883a 	mov	sp,fp
 c00134c:	df000017 	ldw	fp,0(sp)
 c001350:	dec00104 	addi	sp,sp,4
 c001354:	f800283a 	ret

0c001358 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 c001358:	defffb04 	addi	sp,sp,-20
 c00135c:	dfc00415 	stw	ra,16(sp)
 c001360:	df000315 	stw	fp,12(sp)
 c001364:	df000304 	addi	fp,sp,12
 c001368:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 c00136c:	d0a6df03 	ldbu	r2,-25732(gp)
 c001370:	10803fcc 	andi	r2,r2,255
 c001374:	100b883a 	mov	r5,r2
 c001378:	01003804 	movi	r4,224
 c00137c:	c0015340 	call	c001534 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c001380:	d0a6df03 	ldbu	r2,-25732(gp)
 c001384:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 c001388:	d0a6df03 	ldbu	r2,-25732(gp)
 c00138c:	10c03fcc 	andi	r3,r2,255
 c001390:	00830074 	movhi	r2,3073
 c001394:	10990c04 	addi	r2,r2,25648
 c001398:	180690fa 	slli	r3,r3,3
 c00139c:	10c5883a 	add	r2,r2,r3
 c0013a0:	10800017 	ldw	r2,0(r2)
 c0013a4:	10800204 	addi	r2,r2,8
 c0013a8:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c0013ac:	10803fcc 	andi	r2,r2,255
 c0013b0:	d8800015 	stw	r2,0(sp)
 c0013b4:	e1ffff17 	ldw	r7,-4(fp)
 c0013b8:	01800204 	movi	r6,8
 c0013bc:	01400044 	movi	r5,1
 c0013c0:	c0020980 	call	c002098 <XferInTransfer>
 c0013c4:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 c0013c8:	e0bffe03 	ldbu	r2,-8(fp)
}
 c0013cc:	e037883a 	mov	sp,fp
 c0013d0:	dfc00117 	ldw	ra,4(sp)
 c0013d4:	df000017 	ldw	fp,0(sp)
 c0013d8:	dec00204 	addi	sp,sp,8
 c0013dc:	f800283a 	ret

0c0013e0 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 c0013e0:	defffb04 	addi	sp,sp,-20
 c0013e4:	dfc00415 	stw	ra,16(sp)
 c0013e8:	df000315 	stw	fp,12(sp)
 c0013ec:	df000304 	addi	fp,sp,12
 c0013f0:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 c0013f4:	d0a6df03 	ldbu	r2,-25732(gp)
 c0013f8:	10803fcc 	andi	r2,r2,255
 c0013fc:	100b883a 	mov	r5,r2
 c001400:	01003804 	movi	r4,224
 c001404:	c0015340 	call	c001534 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c001408:	d0a6df03 	ldbu	r2,-25732(gp)
 c00140c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 c001410:	d0a6df03 	ldbu	r2,-25732(gp)
 c001414:	10c03fcc 	andi	r3,r2,255
 c001418:	00830074 	movhi	r2,3073
 c00141c:	10990c04 	addi	r2,r2,25648
 c001420:	180690fa 	slli	r3,r3,3
 c001424:	10c5883a 	add	r2,r2,r3
 c001428:	10800017 	ldw	r2,0(r2)
 c00142c:	10800204 	addi	r2,r2,8
 c001430:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 c001434:	10803fcc 	andi	r2,r2,255
 c001438:	d8800015 	stw	r2,0(sp)
 c00143c:	e1ffff17 	ldw	r7,-4(fp)
 c001440:	01800204 	movi	r6,8
 c001444:	01400044 	movi	r5,1
 c001448:	c0020980 	call	c002098 <XferInTransfer>
 c00144c:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 c001450:	e0bffe03 	ldbu	r2,-8(fp)
}
 c001454:	e037883a 	mov	sp,fp
 c001458:	dfc00117 	ldw	ra,4(sp)
 c00145c:	df000017 	ldw	fp,0(sp)
 c001460:	dec00204 	addi	sp,sp,8
 c001464:	f800283a 	ret

0c001468 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 c001468:	defffb04 	addi	sp,sp,-20
 c00146c:	df000415 	stw	fp,16(sp)
 c001470:	df000404 	addi	fp,sp,16
 c001474:	2007883a 	mov	r3,r4
 c001478:	2805883a 	mov	r2,r5
 c00147c:	e1bffe15 	stw	r6,-8(fp)
 c001480:	e1ffff15 	stw	r7,-4(fp)
 c001484:	e0fffc05 	stb	r3,-16(fp)
 c001488:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 c00148c:	0005883a 	mov	r2,zero
}
 c001490:	e037883a 	mov	sp,fp
 c001494:	df000017 	ldw	fp,0(sp)
 c001498:	dec00104 	addi	sp,sp,4
 c00149c:	f800283a 	ret

0c0014a0 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 c0014a0:	defffb04 	addi	sp,sp,-20
 c0014a4:	df000415 	stw	fp,16(sp)
 c0014a8:	df000404 	addi	fp,sp,16
 c0014ac:	2007883a 	mov	r3,r4
 c0014b0:	2805883a 	mov	r2,r5
 c0014b4:	e1bffe15 	stw	r6,-8(fp)
 c0014b8:	e1ffff15 	stw	r7,-4(fp)
 c0014bc:	e0fffc05 	stb	r3,-16(fp)
 c0014c0:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 c0014c4:	0005883a 	mov	r2,zero
}
 c0014c8:	e037883a 	mov	sp,fp
 c0014cc:	df000017 	ldw	fp,0(sp)
 c0014d0:	dec00104 	addi	sp,sp,4
 c0014d4:	f800283a 	ret

0c0014d8 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 c0014d8:	defffc04 	addi	sp,sp,-16
 c0014dc:	df000315 	stw	fp,12(sp)
 c0014e0:	df000304 	addi	fp,sp,12
 c0014e4:	2807883a 	mov	r3,r5
 c0014e8:	3005883a 	mov	r2,r6
 c0014ec:	e13ffd05 	stb	r4,-12(fp)
 c0014f0:	e0fffe05 	stb	r3,-8(fp)
 c0014f4:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 c0014f8:	0001883a 	nop
 c0014fc:	e037883a 	mov	sp,fp
 c001500:	df000017 	ldw	fp,0(sp)
 c001504:	dec00104 	addi	sp,sp,4
 c001508:	f800283a 	ret

0c00150c <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 c00150c:	defffe04 	addi	sp,sp,-8
 c001510:	df000115 	stw	fp,4(sp)
 c001514:	df000104 	addi	fp,sp,4
 c001518:	2005883a 	mov	r2,r4
 c00151c:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 c001520:	0001883a 	nop
 c001524:	e037883a 	mov	sp,fp
 c001528:	df000017 	ldw	fp,0(sp)
 c00152c:	dec00104 	addi	sp,sp,4
 c001530:	f800283a 	ret

0c001534 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 c001534:	defff704 	addi	sp,sp,-36
 c001538:	dfc00815 	stw	ra,32(sp)
 c00153c:	df000715 	stw	fp,28(sp)
 c001540:	df000704 	addi	fp,sp,28
 c001544:	2007883a 	mov	r3,r4
 c001548:	2805883a 	mov	r2,r5
 c00154c:	e0fffe05 	stb	r3,-8(fp)
 c001550:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 arr[2];
	arr[0] = reg+2;
 c001554:	e0bffe03 	ldbu	r2,-8(fp)
 c001558:	10800084 	addi	r2,r2,2
 c00155c:	e0bffd05 	stb	r2,-12(fp)
	arr[1]= val;
 c001560:	e0bfff03 	ldbu	r2,-4(fp)
 c001564:	e0bffd45 	stb	r2,-11(fp)
	int ret = alt_avalon_spi_command(SPI_0_BASE,0,2,arr,0,NULL,0);
 c001568:	e0bffd04 	addi	r2,fp,-12
 c00156c:	d8000215 	stw	zero,8(sp)
 c001570:	d8000115 	stw	zero,4(sp)
 c001574:	d8000015 	stw	zero,0(sp)
 c001578:	100f883a 	mov	r7,r2
 c00157c:	01800084 	movi	r6,2
 c001580:	000b883a 	mov	r5,zero
 c001584:	01003004 	movi	r4,192
 c001588:	c0112740 	call	c011274 <alt_avalon_spi_command>
 c00158c:	e0bffc15 	stw	r2,-16(fp)
	if(ret < 0)
 c001590:	e0bffc17 	ldw	r2,-16(fp)
 c001594:	1000030e 	bge	r2,zero,c0015a4 <MAXreg_wr+0x70>
	{
		printf("Error Occured");
 c001598:	01030074 	movhi	r4,3073
 c00159c:	210a2304 	addi	r4,r4,10380
 c0015a0:	c002d180 	call	c002d18 <printf>
	}
}
 c0015a4:	0001883a 	nop
 c0015a8:	e037883a 	mov	sp,fp
 c0015ac:	dfc00117 	ldw	ra,4(sp)
 c0015b0:	df000017 	ldw	fp,0(sp)
 c0015b4:	dec00204 	addi	sp,sp,8
 c0015b8:	f800283a 	ret

0c0015bc <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 c0015bc:	defff304 	addi	sp,sp,-52
 c0015c0:	dfc00c15 	stw	ra,48(sp)
 c0015c4:	df000b15 	stw	fp,44(sp)
 c0015c8:	dc000a15 	stw	r16,40(sp)
 c0015cc:	df000b04 	addi	fp,sp,44
 c0015d0:	201b883a 	mov	r13,r4
 c0015d4:	2809883a 	mov	r4,r5
 c0015d8:	e1bffe15 	stw	r6,-8(fp)
 c0015dc:	e37ffc05 	stb	r13,-16(fp)
 c0015e0:	e13ffd05 	stb	r4,-12(fp)
 c0015e4:	d809883a 	mov	r4,sp
 c0015e8:	2021883a 	mov	r16,r4
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 send_data[nbytes + 1];
 c0015ec:	e13ffd03 	ldbu	r4,-12(fp)
 c0015f0:	21000044 	addi	r4,r4,1
 c0015f4:	217fffc4 	addi	r5,r4,-1
 c0015f8:	e17ff915 	stw	r5,-28(fp)
 c0015fc:	200b883a 	mov	r5,r4
 c001600:	2817883a 	mov	r11,r5
 c001604:	0019883a 	mov	r12,zero
 c001608:	580ad77a 	srli	r5,r11,29
 c00160c:	601090fa 	slli	r8,r12,3
 c001610:	2a10b03a 	or	r8,r5,r8
 c001614:	580e90fa 	slli	r7,r11,3
 c001618:	200b883a 	mov	r5,r4
 c00161c:	2813883a 	mov	r9,r5
 c001620:	0015883a 	mov	r10,zero
 c001624:	480ad77a 	srli	r5,r9,29
 c001628:	500690fa 	slli	r3,r10,3
 c00162c:	28c6b03a 	or	r3,r5,r3
 c001630:	480490fa 	slli	r2,r9,3
 c001634:	2005883a 	mov	r2,r4
 c001638:	108000c4 	addi	r2,r2,3
 c00163c:	1004d0ba 	srli	r2,r2,2
 c001640:	1085883a 	add	r2,r2,r2
 c001644:	1085883a 	add	r2,r2,r2
 c001648:	d8b7c83a 	sub	sp,sp,r2
 c00164c:	d8800304 	addi	r2,sp,12
 c001650:	1005883a 	mov	r2,r2
 c001654:	e0bffa15 	stw	r2,-24(fp)
	int i=0;
 c001658:	e03ff815 	stw	zero,-32(fp)
	for(i=0;i<nbytes;i++)
 c00165c:	e03ff815 	stw	zero,-32(fp)
 c001660:	00000c06 	br	c001694 <MAXbytes_wr+0xd8>
	{
		send_data[i+1] = data[i];
 c001664:	e0bff817 	ldw	r2,-32(fp)
 c001668:	10800044 	addi	r2,r2,1
 c00166c:	e0fff817 	ldw	r3,-32(fp)
 c001670:	e13ffe17 	ldw	r4,-8(fp)
 c001674:	20c7883a 	add	r3,r4,r3
 c001678:	18c00003 	ldbu	r3,0(r3)
 c00167c:	e13ffa17 	ldw	r4,-24(fp)
 c001680:	2085883a 	add	r2,r4,r2
 c001684:	10c00005 	stb	r3,0(r2)
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 send_data[nbytes + 1];
	int i=0;
	for(i=0;i<nbytes;i++)
 c001688:	e0bff817 	ldw	r2,-32(fp)
 c00168c:	10800044 	addi	r2,r2,1
 c001690:	e0bff815 	stw	r2,-32(fp)
 c001694:	e0bffd03 	ldbu	r2,-12(fp)
 c001698:	e0fff817 	ldw	r3,-32(fp)
 c00169c:	18bff116 	blt	r3,r2,c001664 <__alt_data_end+0xfc001664>
	{
		send_data[i+1] = data[i];
	}
	send_data[0] = reg + 2;
 c0016a0:	e0bffc03 	ldbu	r2,-16(fp)
 c0016a4:	10800084 	addi	r2,r2,2
 c0016a8:	1007883a 	mov	r3,r2
 c0016ac:	e0bffa17 	ldw	r2,-24(fp)
 c0016b0:	10c00005 	stb	r3,0(r2)
	int ret = alt_avalon_spi_command(SPI_0_BASE,0,nbytes+1,send_data,0,NULL,0);
 c0016b4:	e0bffd03 	ldbu	r2,-12(fp)
 c0016b8:	10800044 	addi	r2,r2,1
 c0016bc:	1007883a 	mov	r3,r2
 c0016c0:	e0bffa17 	ldw	r2,-24(fp)
 c0016c4:	d8000215 	stw	zero,8(sp)
 c0016c8:	d8000115 	stw	zero,4(sp)
 c0016cc:	d8000015 	stw	zero,0(sp)
 c0016d0:	100f883a 	mov	r7,r2
 c0016d4:	180d883a 	mov	r6,r3
 c0016d8:	000b883a 	mov	r5,zero
 c0016dc:	01003004 	movi	r4,192
 c0016e0:	c0112740 	call	c011274 <alt_avalon_spi_command>
 c0016e4:	e0bffb15 	stw	r2,-20(fp)
	if(ret < 0)
 c0016e8:	e0bffb17 	ldw	r2,-20(fp)
 c0016ec:	1000030e 	bge	r2,zero,c0016fc <MAXbytes_wr+0x140>
	{
		printf("Error Occured");
 c0016f0:	01030074 	movhi	r4,3073
 c0016f4:	210a2304 	addi	r4,r4,10380
 c0016f8:	c002d180 	call	c002d18 <printf>
	//write reg + 2 via SPI
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
 c0016fc:	e0bffd03 	ldbu	r2,-12(fp)
 c001700:	e0fffe17 	ldw	r3,-8(fp)
 c001704:	1885883a 	add	r2,r3,r2
 c001708:	8037883a 	mov	sp,r16
}
 c00170c:	e6ffff04 	addi	sp,fp,-4
 c001710:	dfc00217 	ldw	ra,8(sp)
 c001714:	df000117 	ldw	fp,4(sp)
 c001718:	dc000017 	ldw	r16,0(sp)
 c00171c:	dec00304 	addi	sp,sp,12
 c001720:	f800283a 	ret

0c001724 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 c001724:	defff804 	addi	sp,sp,-32
 c001728:	dfc00715 	stw	ra,28(sp)
 c00172c:	df000615 	stw	fp,24(sp)
 c001730:	df000604 	addi	fp,sp,24
 c001734:	2005883a 	mov	r2,r4
 c001738:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:
	alt_u8 send_data= reg;
 c00173c:	e0bfff03 	ldbu	r2,-4(fp)
 c001740:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 val;
	int ret = alt_avalon_spi_command(SPI_0_BASE,0,1,&send_data,1,&val,0);
 c001744:	e0fffe04 	addi	r3,fp,-8
 c001748:	d8000215 	stw	zero,8(sp)
 c00174c:	e0bffe44 	addi	r2,fp,-7
 c001750:	d8800115 	stw	r2,4(sp)
 c001754:	00800044 	movi	r2,1
 c001758:	d8800015 	stw	r2,0(sp)
 c00175c:	180f883a 	mov	r7,r3
 c001760:	01800044 	movi	r6,1
 c001764:	000b883a 	mov	r5,zero
 c001768:	01003004 	movi	r4,192
 c00176c:	c0112740 	call	c011274 <alt_avalon_spi_command>
 c001770:	e0bffd15 	stw	r2,-12(fp)
	if(ret < 0)
 c001774:	e0bffd17 	ldw	r2,-12(fp)
 c001778:	1000030e 	bge	r2,zero,c001788 <MAXreg_rd+0x64>
	{
		printf("Error Occured");
 c00177c:	01030074 	movhi	r4,3073
 c001780:	210a2304 	addi	r4,r4,10380
 c001784:	c002d180 	call	c002d18 <printf>
	}
	return val;
 c001788:	e0bffe43 	ldbu	r2,-7(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
}
 c00178c:	e037883a 	mov	sp,fp
 c001790:	dfc00117 	ldw	ra,4(sp)
 c001794:	df000017 	ldw	fp,0(sp)
 c001798:	dec00204 	addi	sp,sp,8
 c00179c:	f800283a 	ret

0c0017a0 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 c0017a0:	defff604 	addi	sp,sp,-40
 c0017a4:	dfc00915 	stw	ra,36(sp)
 c0017a8:	df000815 	stw	fp,32(sp)
 c0017ac:	df000804 	addi	fp,sp,32
 c0017b0:	2007883a 	mov	r3,r4
 c0017b4:	2805883a 	mov	r2,r5
 c0017b8:	e1bfff15 	stw	r6,-4(fp)
 c0017bc:	e0fffd05 	stb	r3,-12(fp)
 c0017c0:	e0bffe05 	stb	r2,-8(fp)
	//psuedocode:
	alt_u8 send_data= reg;
 c0017c4:	e0bffd03 	ldbu	r2,-12(fp)
 c0017c8:	e0bffc05 	stb	r2,-16(fp)
	int ret = alt_avalon_spi_command(SPI_0_BASE,0,1,&send_data,nbytes,data,0);
 c0017cc:	e0bffe03 	ldbu	r2,-8(fp)
 c0017d0:	e13ffc04 	addi	r4,fp,-16
 c0017d4:	d8000215 	stw	zero,8(sp)
 c0017d8:	e0ffff17 	ldw	r3,-4(fp)
 c0017dc:	d8c00115 	stw	r3,4(sp)
 c0017e0:	d8800015 	stw	r2,0(sp)
 c0017e4:	200f883a 	mov	r7,r4
 c0017e8:	01800044 	movi	r6,1
 c0017ec:	000b883a 	mov	r5,zero
 c0017f0:	01003004 	movi	r4,192
 c0017f4:	c0112740 	call	c011274 <alt_avalon_spi_command>
 c0017f8:	e0bffb15 	stw	r2,-20(fp)
	if(ret < 0)
 c0017fc:	e0bffb17 	ldw	r2,-20(fp)
 c001800:	1000030e 	bge	r2,zero,c001810 <MAXbytes_rd+0x70>
	{
		printf("Error Occured");
 c001804:	01030074 	movhi	r4,3073
 c001808:	210a2304 	addi	r4,r4,10380
 c00180c:	c002d180 	call	c002d18 <printf>
	//write reg via SPI
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
 c001810:	e0bffe03 	ldbu	r2,-8(fp)
 c001814:	e0ffff17 	ldw	r3,-4(fp)
 c001818:	1885883a 	add	r2,r3,r2
}
 c00181c:	e037883a 	mov	sp,fp
 c001820:	dfc00117 	ldw	ra,4(sp)
 c001824:	df000017 	ldw	fp,0(sp)
 c001828:	dec00204 	addi	sp,sp,8
 c00182c:	f800283a 	ret

0c001830 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 c001830:	defffd04 	addi	sp,sp,-12
 c001834:	dfc00215 	stw	ra,8(sp)
 c001838:	df000115 	stw	fp,4(sp)
 c00183c:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 c001840:	0007883a 	mov	r3,zero
 c001844:	00807804 	movi	r2,480
 c001848:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 c00184c:	010003f4 	movhi	r4,15
 c001850:	21109004 	addi	r4,r4,16960
 c001854:	c0105d00 	call	c0105d0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 c001858:	00c00044 	movi	r3,1
 c00185c:	00807804 	movi	r2,480
 c001860:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 c001864:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 c001868:	01400804 	movi	r5,32
 c00186c:	01001e04 	movi	r4,120
 c001870:	c0015340 	call	c001534 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 c001874:	000b883a 	mov	r5,zero
 c001878:	01001e04 	movi	r4,120
 c00187c:	c0015340 	call	c001534 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 c001880:	00000806 	br	c0018a4 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 c001884:	e0bfff03 	ldbu	r2,-4(fp)
 c001888:	10800044 	addi	r2,r2,1
 c00188c:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 c001890:	e0bfff03 	ldbu	r2,-4(fp)
 c001894:	1000031e 	bne	r2,zero,c0018a4 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 c001898:	01030074 	movhi	r4,3073
 c00189c:	210a2704 	addi	r4,r4,10396
 c0018a0:	c002d180 	call	c002d18 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 c0018a4:	01001a04 	movi	r4,104
 c0018a8:	c0017240 	call	c001724 <MAXreg_rd>
 c0018ac:	10803fcc 	andi	r2,r2,255
 c0018b0:	1080004c 	andi	r2,r2,1
 c0018b4:	103ff326 	beq	r2,zero,c001884 <__alt_data_end+0xfc001884>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 c0018b8:	0001883a 	nop
 c0018bc:	e037883a 	mov	sp,fp
 c0018c0:	dfc00117 	ldw	ra,4(sp)
 c0018c4:	df000017 	ldw	fp,0(sp)
 c0018c8:	dec00204 	addi	sp,sp,8
 c0018cc:	f800283a 	ret

0c0018d0 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 c0018d0:	defffe04 	addi	sp,sp,-8
 c0018d4:	df000115 	stw	fp,4(sp)
 c0018d8:	df000104 	addi	fp,sp,4
 c0018dc:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 c0018e0:	00800044 	movi	r2,1
}
 c0018e4:	e037883a 	mov	sp,fp
 c0018e8:	df000017 	ldw	fp,0(sp)
 c0018ec:	dec00104 	addi	sp,sp,4
 c0018f0:	f800283a 	ret

0c0018f4 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 c0018f4:	defffd04 	addi	sp,sp,-12
 c0018f8:	dfc00215 	stw	ra,8(sp)
 c0018fc:	df000115 	stw	fp,4(sp)
 c001900:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 c001904:	01003e04 	movi	r4,248
 c001908:	c0017240 	call	c001724 <MAXreg_rd>
 c00190c:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 c001910:	e0ffff03 	ldbu	r3,-4(fp)
 c001914:	00bff004 	movi	r2,-64
 c001918:	1884703a 	and	r2,r3,r2
 c00191c:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 c001920:	e0bfff03 	ldbu	r2,-4(fp)
 c001924:	10c01020 	cmpeqi	r3,r2,64
 c001928:	1800221e 	bne	r3,zero,c0019b4 <MAX_busprobe+0xc0>
 c00192c:	10c01048 	cmpgei	r3,r2,65
 c001930:	1800021e 	bne	r3,zero,c00193c <MAX_busprobe+0x48>
 c001934:	10003b26 	beq	r2,zero,c001a24 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c001938:	00004a06 	br	c001a64 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 c00193c:	10c02020 	cmpeqi	r3,r2,128
 c001940:	1800031e 	bne	r3,zero,c001950 <MAX_busprobe+0x5c>
 c001944:	10803020 	cmpeqi	r2,r2,192
 c001948:	1000331e 	bne	r2,zero,c001a18 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c00194c:	00004506 	br	c001a64 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 c001950:	d0a00303 	ldbu	r2,-32756(gp)
 c001954:	10803fcc 	andi	r2,r2,255
 c001958:	108004e0 	cmpeqi	r2,r2,19
 c00195c:	10003e1e 	bne	r2,zero,c001a58 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 c001960:	01003604 	movi	r4,216
 c001964:	c0017240 	call	c001724 <MAXreg_rd>
 c001968:	10803fcc 	andi	r2,r2,255
 c00196c:	1080008c 	andi	r2,r2,2
 c001970:	1000071e 	bne	r2,zero,c001990 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 c001974:	01403244 	movi	r5,201
 c001978:	01003604 	movi	r4,216
 c00197c:	c0015340 	call	c001534 <MAXreg_wr>
				printf("Starting in full speed\n");
 c001980:	01030074 	movhi	r4,3073
 c001984:	210a2b04 	addi	r4,r4,10412
 c001988:	c002e340 	call	c002e34 <puts>
 c00198c:	00000606 	br	c0019a8 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 c001990:	014032c4 	movi	r5,203
 c001994:	01003604 	movi	r4,216
 c001998:	c0015340 	call	c001534 <MAXreg_wr>
				printf("Starting in low speed\n");
 c00199c:	01030074 	movhi	r4,3073
 c0019a0:	210a3104 	addi	r4,r4,10436
 c0019a4:	c002e340 	call	c002e34 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 c0019a8:	00800404 	movi	r2,16
 c0019ac:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 c0019b0:	00002906 	br	c001a58 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 c0019b4:	d0a00303 	ldbu	r2,-32756(gp)
 c0019b8:	10803fcc 	andi	r2,r2,255
 c0019bc:	108004e0 	cmpeqi	r2,r2,19
 c0019c0:	1000271e 	bne	r2,zero,c001a60 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 c0019c4:	01003604 	movi	r4,216
 c0019c8:	c0017240 	call	c001724 <MAXreg_rd>
 c0019cc:	10803fcc 	andi	r2,r2,255
 c0019d0:	1080008c 	andi	r2,r2,2
 c0019d4:	1000071e 	bne	r2,zero,c0019f4 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 c0019d8:	014032c4 	movi	r5,203
 c0019dc:	01003604 	movi	r4,216
 c0019e0:	c0015340 	call	c001534 <MAXreg_wr>
				printf("Starting in low speed\n");
 c0019e4:	01030074 	movhi	r4,3073
 c0019e8:	210a3104 	addi	r4,r4,10436
 c0019ec:	c002e340 	call	c002e34 <puts>
 c0019f0:	00000606 	br	c001a0c <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 c0019f4:	01403244 	movi	r5,201
 c0019f8:	01003604 	movi	r4,216
 c0019fc:	c0015340 	call	c001534 <MAXreg_wr>
				printf("Starting in full speed\n");
 c001a00:	01030074 	movhi	r4,3073
 c001a04:	210a2b04 	addi	r4,r4,10412
 c001a08:	c002e340 	call	c002e34 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 c001a0c:	00800404 	movi	r2,16
 c001a10:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 c001a14:	00001206 	br	c001a60 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 c001a18:	00800104 	movi	r2,4
 c001a1c:	d0a00305 	stb	r2,-32756(gp)
		break;
 c001a20:	00001006 	br	c001a64 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 c001a24:	d0a00303 	ldbu	r2,-32756(gp)
 c001a28:	10803fcc 	andi	r2,r2,255
 c001a2c:	10803c0c 	andi	r2,r2,240
 c001a30:	10000326 	beq	r2,zero,c001a40 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 c001a34:	00800044 	movi	r2,1
 c001a38:	d0a00305 	stb	r2,-32756(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 c001a3c:	00000906 	br	c001a64 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 c001a40:	01403244 	movi	r5,201
 c001a44:	01003604 	movi	r4,216
 c001a48:	c0015340 	call	c001534 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 c001a4c:	008000c4 	movi	r2,3
 c001a50:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 c001a54:	00000306 	br	c001a64 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 c001a58:	0001883a 	nop
 c001a5c:	00000106 	br	c001a64 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 c001a60:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 c001a64:	0001883a 	nop
 c001a68:	e037883a 	mov	sp,fp
 c001a6c:	dfc00117 	ldw	ra,4(sp)
 c001a70:	df000017 	ldw	fp,0(sp)
 c001a74:	dec00204 	addi	sp,sp,8
 c001a78:	f800283a 	ret

0c001a7c <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 c001a7c:	defffe04 	addi	sp,sp,-8
 c001a80:	dfc00115 	stw	ra,4(sp)
 c001a84:	df000015 	stw	fp,0(sp)
 c001a88:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 c001a8c:	01400684 	movi	r5,26
 c001a90:	01002204 	movi	r4,136
 c001a94:	c0015340 	call	c001534 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 c001a98:	c0018300 	call	c001830 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 c001a9c:	0009883a 	mov	r4,zero
 c001aa0:	c0018d00 	call	c0018d0 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 c001aa4:	01402004 	movi	r5,128
 c001aa8:	01002e04 	movi	r4,184
 c001aac:	c0015340 	call	c001534 <MAXreg_wr>
	Vbus_power( ON);
 c001ab0:	01000044 	movi	r4,1
 c001ab4:	c0018d00 	call	c0018d0 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 c001ab8:	01403444 	movi	r5,209
 c001abc:	01003604 	movi	r4,216
 c001ac0:	c0015340 	call	c001534 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 c001ac4:	01400804 	movi	r5,32
 c001ac8:	01003404 	movi	r4,208
 c001acc:	c0015340 	call	c001534 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 c001ad0:	01400104 	movi	r5,4
 c001ad4:	01003a04 	movi	r4,232
 c001ad8:	c0015340 	call	c001534 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 c001adc:	c0018f40 	call	c0018f4 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 c001ae0:	01400804 	movi	r5,32
 c001ae4:	01003204 	movi	r4,200
 c001ae8:	c0015340 	call	c001534 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 c001aec:	01400044 	movi	r5,1
 c001af0:	01002004 	movi	r4,128
 c001af4:	c0015340 	call	c001534 <MAXreg_wr>
}
 c001af8:	0001883a 	nop
 c001afc:	e037883a 	mov	sp,fp
 c001b00:	dfc00117 	ldw	ra,4(sp)
 c001b04:	df000017 	ldw	fp,0(sp)
 c001b08:	dec00204 	addi	sp,sp,8
 c001b0c:	f800283a 	ret

0c001b10 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 c001b10:	defffe04 	addi	sp,sp,-8
 c001b14:	dfc00115 	stw	ra,4(sp)
 c001b18:	df000015 	stw	fp,0(sp)
 c001b1c:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 c001b20:	00808004 	movi	r2,512
 c001b24:	10800037 	ldwio	r2,0(r2)
 c001b28:	1000041e 	bne	r2,zero,c001b3c <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 c001b2c:	01030074 	movhi	r4,3073
 c001b30:	210a3704 	addi	r4,r4,10460
 c001b34:	c002d180 	call	c002d18 <printf>
		MaxIntHandler();
 c001b38:	c001b740 	call	c001b74 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 c001b3c:	00807c04 	movi	r2,496
 c001b40:	10800037 	ldwio	r2,0(r2)
 c001b44:	10800058 	cmpnei	r2,r2,1
 c001b48:	1000041e 	bne	r2,zero,c001b5c <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 c001b4c:	01030074 	movhi	r4,3073
 c001b50:	210a3b04 	addi	r4,r4,10476
 c001b54:	c002d180 	call	c002d18 <printf>
		MaxGpxHandler();
 c001b58:	c001c400 	call	c001c40 <MaxGpxHandler>
	}
}
 c001b5c:	0001883a 	nop
 c001b60:	e037883a 	mov	sp,fp
 c001b64:	dfc00117 	ldw	ra,4(sp)
 c001b68:	df000017 	ldw	fp,0(sp)
 c001b6c:	dec00204 	addi	sp,sp,8
 c001b70:	f800283a 	ret

0c001b74 <MaxIntHandler>:

void MaxIntHandler(void) {
 c001b74:	defffd04 	addi	sp,sp,-12
 c001b78:	dfc00215 	stw	ra,8(sp)
 c001b7c:	df000115 	stw	fp,4(sp)
 c001b80:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 c001b84:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 c001b88:	01003204 	movi	r4,200
 c001b8c:	c0017240 	call	c001724 <MAXreg_rd>
 c001b90:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 c001b94:	e0bfff43 	ldbu	r2,-3(fp)
 c001b98:	100b883a 	mov	r5,r2
 c001b9c:	01030074 	movhi	r4,3073
 c001ba0:	210a3f04 	addi	r4,r4,10492
 c001ba4:	c002d180 	call	c002d18 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 c001ba8:	e0bfff43 	ldbu	r2,-3(fp)
 c001bac:	1080100c 	andi	r2,r2,64
 c001bb0:	10000326 	beq	r2,zero,c001bc0 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 c001bb4:	e0bfff03 	ldbu	r2,-4(fp)
 c001bb8:	10801014 	ori	r2,r2,64
 c001bbc:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 c001bc0:	e0bfff43 	ldbu	r2,-3(fp)
 c001bc4:	1080080c 	andi	r2,r2,32
 c001bc8:	10000426 	beq	r2,zero,c001bdc <MaxIntHandler+0x68>
		MAX_busprobe();
 c001bcc:	c0018f40 	call	c0018f4 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 c001bd0:	e0bfff03 	ldbu	r2,-4(fp)
 c001bd4:	10800814 	ori	r2,r2,32
 c001bd8:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 c001bdc:	e0bfff43 	ldbu	r2,-3(fp)
 c001be0:	1080020c 	andi	r2,r2,8
 c001be4:	10000326 	beq	r2,zero,c001bf4 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 c001be8:	000b883a 	mov	r5,zero
 c001bec:	01000e04 	movi	r4,56
 c001bf0:	c0015340 	call	c001534 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 c001bf4:	e0bfff43 	ldbu	r2,-3(fp)
 c001bf8:	1080004c 	andi	r2,r2,1
 c001bfc:	10000626 	beq	r2,zero,c001c18 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 c001c00:	d0a00303 	ldbu	r2,-32756(gp)
 c001c04:	10800044 	addi	r2,r2,1
 c001c08:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 c001c0c:	e0bfff03 	ldbu	r2,-4(fp)
 c001c10:	10800054 	ori	r2,r2,1
 c001c14:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 c001c18:	e0bfff03 	ldbu	r2,-4(fp)
 c001c1c:	100b883a 	mov	r5,r2
 c001c20:	01003204 	movi	r4,200
 c001c24:	c0015340 	call	c001534 <MAXreg_wr>
}
 c001c28:	0001883a 	nop
 c001c2c:	e037883a 	mov	sp,fp
 c001c30:	dfc00117 	ldw	ra,4(sp)
 c001c34:	df000017 	ldw	fp,0(sp)
 c001c38:	dec00204 	addi	sp,sp,8
 c001c3c:	f800283a 	ret

0c001c40 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 c001c40:	defffd04 	addi	sp,sp,-12
 c001c44:	dfc00215 	stw	ra,8(sp)
 c001c48:	df000115 	stw	fp,4(sp)
 c001c4c:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 c001c50:	01002c04 	movi	r4,176
 c001c54:	c0017240 	call	c001724 <MAXreg_rd>
 c001c58:	e0bfff05 	stb	r2,-4(fp)
}
 c001c5c:	0001883a 	nop
 c001c60:	e037883a 	mov	sp,fp
 c001c64:	dfc00117 	ldw	ra,4(sp)
 c001c68:	df000017 	ldw	fp,0(sp)
 c001c6c:	dec00204 	addi	sp,sp,8
 c001c70:	f800283a 	ret

0c001c74 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 c001c74:	defff104 	addi	sp,sp,-60
 c001c78:	dfc00e15 	stw	ra,56(sp)
 c001c7c:	df000d15 	stw	fp,52(sp)
 c001c80:	df000d04 	addi	fp,sp,52
 c001c84:	2015883a 	mov	r10,r4
 c001c88:	2813883a 	mov	r9,r5
 c001c8c:	3011883a 	mov	r8,r6
 c001c90:	380d883a 	mov	r6,r7
 c001c94:	e1400217 	ldw	r5,8(fp)
 c001c98:	e1000317 	ldw	r4,12(fp)
 c001c9c:	e0c00417 	ldw	r3,16(fp)
 c001ca0:	e0800517 	ldw	r2,20(fp)
 c001ca4:	e2bff805 	stb	r10,-32(fp)
 c001ca8:	e27ff905 	stb	r9,-28(fp)
 c001cac:	e23ffa05 	stb	r8,-24(fp)
 c001cb0:	e1bffb05 	stb	r6,-20(fp)
 c001cb4:	e17ffc05 	stb	r5,-16(fp)
 c001cb8:	e13ffd05 	stb	r4,-12(fp)
 c001cbc:	e0fffe0d 	sth	r3,-8(fp)
 c001cc0:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 c001cc4:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 c001cc8:	00800044 	movi	r2,1
 c001ccc:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 c001cd0:	e0800617 	ldw	r2,24(fp)
 c001cd4:	1000011e 	bne	r2,zero,c001cdc <XferCtrlReq+0x68>
        datastage = 0;
 c001cd8:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 c001cdc:	e0bff803 	ldbu	r2,-32(fp)
 c001ce0:	100b883a 	mov	r5,r2
 c001ce4:	01003804 	movi	r4,224
 c001ce8:	c0015340 	call	c001534 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 c001cec:	e0bffa03 	ldbu	r2,-24(fp)
 c001cf0:	10803fcc 	andi	r2,r2,255
 c001cf4:	1080201c 	xori	r2,r2,128
 c001cf8:	10bfe004 	addi	r2,r2,-128
 c001cfc:	1000020e 	bge	r2,zero,c001d08 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 c001d00:	00800044 	movi	r2,1
 c001d04:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 c001d08:	e0bffa03 	ldbu	r2,-24(fp)
 c001d0c:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 c001d10:	e0bffb03 	ldbu	r2,-20(fp)
 c001d14:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 c001d18:	e0bffc03 	ldbu	r2,-16(fp)
 c001d1c:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 c001d20:	e0bffd03 	ldbu	r2,-12(fp)
 c001d24:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 c001d28:	e0bffe0b 	ldhu	r2,-8(fp)
 c001d2c:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 c001d30:	e0bfff0b 	ldhu	r2,-4(fp)
 c001d34:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 c001d38:	e0bff584 	addi	r2,fp,-42
 c001d3c:	100d883a 	mov	r6,r2
 c001d40:	01400204 	movi	r5,8
 c001d44:	01000804 	movi	r4,32
 c001d48:	c0015bc0 	call	c0015bc <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 c001d4c:	e0bff903 	ldbu	r2,-28(fp)
 c001d50:	100b883a 	mov	r5,r2
 c001d54:	01000404 	movi	r4,16
 c001d58:	c001f1c0 	call	c001f1c <XferDispatchPkt>
 c001d5c:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 c001d60:	e0bff543 	ldbu	r2,-43(fp)
 c001d64:	10000226 	beq	r2,zero,c001d70 <XferCtrlReq+0xfc>
        return( rcode );
 c001d68:	e0bff543 	ldbu	r2,-43(fp)
 c001d6c:	00000f06 	br	c001dac <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 c001d70:	e0bff503 	ldbu	r2,-44(fp)
 c001d74:	1085883a 	add	r2,r2,r2
 c001d78:	1087883a 	add	r3,r2,r2
 c001d7c:	d0a00104 	addi	r2,gp,-32764
 c001d80:	1885883a 	add	r2,r3,r2
 c001d84:	10800017 	ldw	r2,0(r2)
 c001d88:	e13ff803 	ldbu	r4,-32(fp)
 c001d8c:	e17ff903 	ldbu	r5,-28(fp)
 c001d90:	e1bfff0b 	ldhu	r6,-4(fp)
 c001d94:	e0fff417 	ldw	r3,-48(fp)
 c001d98:	d8c00015 	stw	r3,0(sp)
 c001d9c:	e1c00617 	ldw	r7,24(fp)
 c001da0:	103ee83a 	callr	r2
 c001da4:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 c001da8:	e0bff543 	ldbu	r2,-43(fp)
}
 c001dac:	e037883a 	mov	sp,fp
 c001db0:	dfc00117 	ldw	ra,4(sp)
 c001db4:	df000017 	ldw	fp,0(sp)
 c001db8:	dec00204 	addi	sp,sp,8
 c001dbc:	f800283a 	ret

0c001dc0 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 c001dc0:	defff804 	addi	sp,sp,-32
 c001dc4:	dfc00715 	stw	ra,28(sp)
 c001dc8:	df000615 	stw	fp,24(sp)
 c001dcc:	df000604 	addi	fp,sp,24
 c001dd0:	2807883a 	mov	r3,r5
 c001dd4:	3005883a 	mov	r2,r6
 c001dd8:	e1ffff15 	stw	r7,-4(fp)
 c001ddc:	e13ffc05 	stb	r4,-16(fp)
 c001de0:	e0fffd05 	stb	r3,-12(fp)
 c001de4:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 c001de8:	e0800217 	ldw	r2,8(fp)
 c001dec:	10002826 	beq	r2,zero,c001e90 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 c001df0:	e0fffc03 	ldbu	r3,-16(fp)
 c001df4:	00830074 	movhi	r2,3073
 c001df8:	10990c04 	addi	r2,r2,25648
 c001dfc:	180690fa 	slli	r3,r3,3
 c001e00:	10c5883a 	add	r2,r2,r3
 c001e04:	10c00017 	ldw	r3,0(r2)
 c001e08:	e0bffd03 	ldbu	r2,-12(fp)
 c001e0c:	100490fa 	slli	r2,r2,3
 c001e10:	1885883a 	add	r2,r3,r2
 c001e14:	00c00804 	movi	r3,32
 c001e18:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 c001e1c:	e13ffc03 	ldbu	r4,-16(fp)
 c001e20:	e17ffd03 	ldbu	r5,-12(fp)
 c001e24:	e1bffe0b 	ldhu	r6,-8(fp)
 c001e28:	e0fffc03 	ldbu	r3,-16(fp)
 c001e2c:	00830074 	movhi	r2,3073
 c001e30:	10990c04 	addi	r2,r2,25648
 c001e34:	180690fa 	slli	r3,r3,3
 c001e38:	10c5883a 	add	r2,r2,r3
 c001e3c:	10c00017 	ldw	r3,0(r2)
 c001e40:	e0bffd03 	ldbu	r2,-12(fp)
 c001e44:	100490fa 	slli	r2,r2,3
 c001e48:	1885883a 	add	r2,r3,r2
 c001e4c:	1080008b 	ldhu	r2,2(r2)
 c001e50:	10803fcc 	andi	r2,r2,255
 c001e54:	d8800015 	stw	r2,0(sp)
 c001e58:	e1ffff17 	ldw	r7,-4(fp)
 c001e5c:	c0020980 	call	c002098 <XferInTransfer>
 c001e60:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 c001e64:	e0bffb03 	ldbu	r2,-20(fp)
 c001e68:	10000226 	beq	r2,zero,c001e74 <XferCtrlData+0xb4>
        return( rcode );
 c001e6c:	e0bffb03 	ldbu	r2,-20(fp)
 c001e70:	00000806 	br	c001e94 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 c001e74:	e0bffd03 	ldbu	r2,-12(fp)
 c001e78:	100b883a 	mov	r5,r2
 c001e7c:	01002804 	movi	r4,160
 c001e80:	c001f1c0 	call	c001f1c <XferDispatchPkt>
 c001e84:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 c001e88:	e0bffb03 	ldbu	r2,-20(fp)
 c001e8c:	00000106 	br	c001e94 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 c001e90:	00bfffc4 	movi	r2,-1
    }
}
 c001e94:	e037883a 	mov	sp,fp
 c001e98:	dfc00117 	ldw	ra,4(sp)
 c001e9c:	df000017 	ldw	fp,0(sp)
 c001ea0:	dec00204 	addi	sp,sp,8
 c001ea4:	f800283a 	ret

0c001ea8 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 c001ea8:	defff904 	addi	sp,sp,-28
 c001eac:	dfc00615 	stw	ra,24(sp)
 c001eb0:	df000515 	stw	fp,20(sp)
 c001eb4:	df000504 	addi	fp,sp,20
 c001eb8:	2807883a 	mov	r3,r5
 c001ebc:	3005883a 	mov	r2,r6
 c001ec0:	e1ffff15 	stw	r7,-4(fp)
 c001ec4:	e13ffc05 	stb	r4,-16(fp)
 c001ec8:	e0fffd05 	stb	r3,-12(fp)
 c001ecc:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 c001ed0:	e0800217 	ldw	r2,8(fp)
 c001ed4:	10000626 	beq	r2,zero,c001ef0 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 c001ed8:	e0bffd03 	ldbu	r2,-12(fp)
 c001edc:	100b883a 	mov	r5,r2
 c001ee0:	01002804 	movi	r4,160
 c001ee4:	c001f1c0 	call	c001f1c <XferDispatchPkt>
 c001ee8:	e0bffb05 	stb	r2,-20(fp)
 c001eec:	00000506 	br	c001f04 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 c001ef0:	e0bffd03 	ldbu	r2,-12(fp)
 c001ef4:	100b883a 	mov	r5,r2
 c001ef8:	01002004 	movi	r4,128
 c001efc:	c001f1c0 	call	c001f1c <XferDispatchPkt>
 c001f00:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 c001f04:	e0bffb03 	ldbu	r2,-20(fp)
}
 c001f08:	e037883a 	mov	sp,fp
 c001f0c:	dfc00117 	ldw	ra,4(sp)
 c001f10:	df000017 	ldw	fp,0(sp)
 c001f14:	dec00204 	addi	sp,sp,8
 c001f18:	f800283a 	ret

0c001f1c <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 c001f1c:	defff904 	addi	sp,sp,-28
 c001f20:	dfc00615 	stw	ra,24(sp)
 c001f24:	df000515 	stw	fp,20(sp)
 c001f28:	df000504 	addi	fp,sp,20
 c001f2c:	2007883a 	mov	r3,r4
 c001f30:	2805883a 	mov	r2,r5
 c001f34:	e0fffe05 	stb	r3,-8(fp)
 c001f38:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c001f3c:	d0a6f017 	ldw	r2,-25664(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 c001f40:	0140fa04 	movi	r5,1000
 c001f44:	1009883a 	mov	r4,r2
 c001f48:	c002cc00 	call	c002cc0 <__mulsi3>
 c001f4c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c001f50:	d0a6ef17 	ldw	r2,-25668(gp)
 c001f54:	100b883a 	mov	r5,r2
 c001f58:	1809883a 	mov	r4,r3
 c001f5c:	c002c040 	call	c002c04 <__udivsi3>
 c001f60:	1084e204 	addi	r2,r2,5000
 c001f64:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 c001f68:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 c001f6c:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 c001f70:	e0fffe03 	ldbu	r3,-8(fp)
 c001f74:	e0bfff03 	ldbu	r2,-4(fp)
 c001f78:	1884b03a 	or	r2,r3,r2
 c001f7c:	10803fcc 	andi	r2,r2,255
 c001f80:	100b883a 	mov	r5,r2
 c001f84:	01003c04 	movi	r4,240
 c001f88:	c0015340 	call	c001534 <MAXreg_wr>
        rcode = 0xff;
 c001f8c:	00bfffc4 	movi	r2,-1
 c001f90:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 c001f94:	00000d06 	br	c001fcc <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 c001f98:	01003204 	movi	r4,200
 c001f9c:	c0017240 	call	c001724 <MAXreg_rd>
 c001fa0:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 c001fa4:	e0bffd03 	ldbu	r2,-12(fp)
 c001fa8:	10803fcc 	andi	r2,r2,255
 c001fac:	1080201c 	xori	r2,r2,128
 c001fb0:	10bfe004 	addi	r2,r2,-128
 c001fb4:	1000050e 	bge	r2,zero,c001fcc <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 c001fb8:	01402004 	movi	r5,128
 c001fbc:	01003204 	movi	r4,200
 c001fc0:	c0015340 	call	c001534 <MAXreg_wr>
                rcode = 0x00;
 c001fc4:	e03ffb05 	stb	zero,-20(fp)
                break;
 c001fc8:	00000c06 	br	c001ffc <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c001fcc:	d0a6f017 	ldw	r2,-25664(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 c001fd0:	0140fa04 	movi	r5,1000
 c001fd4:	1009883a 	mov	r4,r2
 c001fd8:	c002cc00 	call	c002cc0 <__mulsi3>
 c001fdc:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c001fe0:	d0a6ef17 	ldw	r2,-25668(gp)
 c001fe4:	100b883a 	mov	r5,r2
 c001fe8:	1809883a 	mov	r4,r3
 c001fec:	c002c040 	call	c002c04 <__udivsi3>
 c001ff0:	1007883a 	mov	r3,r2
 c001ff4:	e0bffc17 	ldw	r2,-16(fp)
 c001ff8:	18bfe736 	bltu	r3,r2,c001f98 <__alt_data_end+0xfc001f98>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 c001ffc:	e0bffb03 	ldbu	r2,-20(fp)
 c002000:	10000226 	beq	r2,zero,c00200c <XferDispatchPkt+0xf0>
            return( rcode );
 c002004:	e0bffb03 	ldbu	r2,-20(fp)
 c002008:	00001e06 	br	c002084 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 c00200c:	01003e04 	movi	r4,248
 c002010:	c0017240 	call	c001724 <MAXreg_rd>
 c002014:	108003cc 	andi	r2,r2,15
 c002018:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 c00201c:	e0bffb03 	ldbu	r2,-20(fp)
 c002020:	10800118 	cmpnei	r2,r2,4
 c002024:	1000071e 	bne	r2,zero,c002044 <XferDispatchPkt+0x128>
            nak_count++;
 c002028:	e0bffb83 	ldbu	r2,-18(fp)
 c00202c:	10800044 	addi	r2,r2,1
 c002030:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 c002034:	e0bffb83 	ldbu	r2,-18(fp)
 c002038:	10803218 	cmpnei	r2,r2,200
 c00203c:	10000b1e 	bne	r2,zero,c00206c <XferDispatchPkt+0x150>
                break;
 c002040:	00000f06 	br	c002080 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 c002044:	e0bffb03 	ldbu	r2,-20(fp)
 c002048:	10800398 	cmpnei	r2,r2,14
 c00204c:	1000091e 	bne	r2,zero,c002074 <XferDispatchPkt+0x158>
            retry_count++;
 c002050:	e0bffb43 	ldbu	r2,-19(fp)
 c002054:	10800044 	addi	r2,r2,1
 c002058:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 c00205c:	e0bffb47 	ldb	r2,-19(fp)
 c002060:	108000d8 	cmpnei	r2,r2,3
 c002064:	10000526 	beq	r2,zero,c00207c <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 c002068:	00000106 	br	c002070 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 c00206c:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 c002070:	003fbf06 	br	c001f70 <__alt_data_end+0xfc001f70>
            }
            else {
                continue;
            }
        }
        else break;
 c002074:	0001883a 	nop
 c002078:	00000106 	br	c002080 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 c00207c:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 c002080:	e0bffb03 	ldbu	r2,-20(fp)
}
 c002084:	e037883a 	mov	sp,fp
 c002088:	dfc00117 	ldw	ra,4(sp)
 c00208c:	df000017 	ldw	fp,0(sp)
 c002090:	dec00204 	addi	sp,sp,8
 c002094:	f800283a 	ret

0c002098 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 c002098:	defff804 	addi	sp,sp,-32
 c00209c:	dfc00715 	stw	ra,28(sp)
 c0020a0:	df000615 	stw	fp,24(sp)
 c0020a4:	df000604 	addi	fp,sp,24
 c0020a8:	2011883a 	mov	r8,r4
 c0020ac:	2809883a 	mov	r4,r5
 c0020b0:	3007883a 	mov	r3,r6
 c0020b4:	e1fffe15 	stw	r7,-8(fp)
 c0020b8:	e0800217 	ldw	r2,8(fp)
 c0020bc:	e23ffb05 	stb	r8,-20(fp)
 c0020c0:	e13ffc05 	stb	r4,-16(fp)
 c0020c4:	e0fffd0d 	sth	r3,-12(fp)
 c0020c8:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 c0020cc:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 c0020d0:	e0fffb03 	ldbu	r3,-20(fp)
 c0020d4:	00830074 	movhi	r2,3073
 c0020d8:	10990c04 	addi	r2,r2,25648
 c0020dc:	180690fa 	slli	r3,r3,3
 c0020e0:	10c5883a 	add	r2,r2,r3
 c0020e4:	10c00017 	ldw	r3,0(r2)
 c0020e8:	e0bffc03 	ldbu	r2,-16(fp)
 c0020ec:	100490fa 	slli	r2,r2,3
 c0020f0:	1885883a 	add	r2,r3,r2
 c0020f4:	10800183 	ldbu	r2,6(r2)
 c0020f8:	10803fcc 	andi	r2,r2,255
 c0020fc:	100b883a 	mov	r5,r2
 c002100:	01003a04 	movi	r4,232
 c002104:	c0015340 	call	c001534 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 c002108:	e0bffc03 	ldbu	r2,-16(fp)
 c00210c:	100b883a 	mov	r5,r2
 c002110:	0009883a 	mov	r4,zero
 c002114:	c001f1c0 	call	c001f1c <XferDispatchPkt>
 c002118:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 c00211c:	e0bffa83 	ldbu	r2,-22(fp)
 c002120:	10000226 	beq	r2,zero,c00212c <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 c002124:	e0bffa83 	ldbu	r2,-22(fp)
 c002128:	00003a06 	br	c002214 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 c00212c:	01003204 	movi	r4,200
 c002130:	c0017240 	call	c001724 <MAXreg_rd>
 c002134:	10803fcc 	andi	r2,r2,255
 c002138:	1080010c 	andi	r2,r2,4
 c00213c:	1000021e 	bne	r2,zero,c002148 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 c002140:	00bffc04 	movi	r2,-16
 c002144:	00003306 	br	c002214 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 c002148:	01000c04 	movi	r4,48
 c00214c:	c0017240 	call	c001724 <MAXreg_rd>
 c002150:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 c002154:	e0bffac3 	ldbu	r2,-21(fp)
 c002158:	e1bffe17 	ldw	r6,-8(fp)
 c00215c:	100b883a 	mov	r5,r2
 c002160:	01000204 	movi	r4,8
 c002164:	c0017a00 	call	c0017a0 <MAXbytes_rd>
 c002168:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 c00216c:	01400104 	movi	r5,4
 c002170:	01003204 	movi	r4,200
 c002174:	c0015340 	call	c001534 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 c002178:	e0fffac3 	ldbu	r3,-21(fp)
 c00217c:	e0bffa0b 	ldhu	r2,-24(fp)
 c002180:	1885883a 	add	r2,r3,r2
 c002184:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 c002188:	e0fffac3 	ldbu	r3,-21(fp)
 c00218c:	e0bfff03 	ldbu	r2,-4(fp)
 c002190:	18800336 	bltu	r3,r2,c0021a0 <XferInTransfer+0x108>
 c002194:	e0fffa0b 	ldhu	r3,-24(fp)
 c002198:	e0bffd0b 	ldhu	r2,-12(fp)
 c00219c:	18bfda36 	bltu	r3,r2,c002108 <__alt_data_end+0xfc002108>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 c0021a0:	01003e04 	movi	r4,248
 c0021a4:	c0017240 	call	c001724 <MAXreg_rd>
 c0021a8:	10803fcc 	andi	r2,r2,255
 c0021ac:	1080040c 	andi	r2,r2,16
 c0021b0:	10000c26 	beq	r2,zero,c0021e4 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 c0021b4:	e0fffb03 	ldbu	r3,-20(fp)
 c0021b8:	00830074 	movhi	r2,3073
 c0021bc:	10990c04 	addi	r2,r2,25648
 c0021c0:	180690fa 	slli	r3,r3,3
 c0021c4:	10c5883a 	add	r2,r2,r3
 c0021c8:	10c00017 	ldw	r3,0(r2)
 c0021cc:	e0bffc03 	ldbu	r2,-16(fp)
 c0021d0:	100490fa 	slli	r2,r2,3
 c0021d4:	1885883a 	add	r2,r3,r2
 c0021d8:	00c00804 	movi	r3,32
 c0021dc:	10c00185 	stb	r3,6(r2)
 c0021e0:	00000b06 	br	c002210 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 c0021e4:	e0fffb03 	ldbu	r3,-20(fp)
 c0021e8:	00830074 	movhi	r2,3073
 c0021ec:	10990c04 	addi	r2,r2,25648
 c0021f0:	180690fa 	slli	r3,r3,3
 c0021f4:	10c5883a 	add	r2,r2,r3
 c0021f8:	10c00017 	ldw	r3,0(r2)
 c0021fc:	e0bffc03 	ldbu	r2,-16(fp)
 c002200:	100490fa 	slli	r2,r2,3
 c002204:	1885883a 	add	r2,r3,r2
 c002208:	00c00404 	movi	r3,16
 c00220c:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 c002210:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 c002214:	e037883a 	mov	sp,fp
 c002218:	dfc00117 	ldw	ra,4(sp)
 c00221c:	df000017 	ldw	fp,0(sp)
 c002220:	dec00204 	addi	sp,sp,8
 c002224:	f800283a 	ret

0c002228 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 c002228:	defffe04 	addi	sp,sp,-8
 c00222c:	df000115 	stw	fp,4(sp)
 c002230:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 c002234:	e03fff05 	stb	zero,-4(fp)
 c002238:	00001006 	br	c00227c <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 c00223c:	e0ffff03 	ldbu	r3,-4(fp)
 c002240:	00830074 	movhi	r2,3073
 c002244:	10990c04 	addi	r2,r2,25648
 c002248:	180690fa 	slli	r3,r3,3
 c00224c:	10c5883a 	add	r2,r2,r3
 c002250:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 c002254:	e0ffff03 	ldbu	r3,-4(fp)
 c002258:	00830074 	movhi	r2,3073
 c00225c:	10990c04 	addi	r2,r2,25648
 c002260:	180690fa 	slli	r3,r3,3
 c002264:	10c5883a 	add	r2,r2,r3
 c002268:	10800104 	addi	r2,r2,4
 c00226c:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 c002270:	e0bfff03 	ldbu	r2,-4(fp)
 c002274:	10800044 	addi	r2,r2,1
 c002278:	e0bfff05 	stb	r2,-4(fp)
 c00227c:	e0bfff03 	ldbu	r2,-4(fp)
 c002280:	10800270 	cmpltui	r2,r2,9
 c002284:	103fed1e 	bne	r2,zero,c00223c <__alt_data_end+0xfc00223c>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 c002288:	00830074 	movhi	r2,3073
 c00228c:	10990c04 	addi	r2,r2,25648
 c002290:	d0e6e004 	addi	r3,gp,-25728
 c002294:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 c002298:	d026e08d 	sth	zero,-25726(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 c00229c:	00801004 	movi	r2,64
 c0022a0:	d0a6e145 	stb	r2,-25723(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 c0022a4:	00800404 	movi	r2,16
 c0022a8:	d0a6e185 	stb	r2,-25722(gp)
}
 c0022ac:	0001883a 	nop
 c0022b0:	e037883a 	mov	sp,fp
 c0022b4:	df000017 	ldw	fp,0(sp)
 c0022b8:	dec00104 	addi	sp,sp,4
 c0022bc:	f800283a 	ret

0c0022c0 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 c0022c0:	deffb204 	addi	sp,sp,-312
 c0022c4:	dfc04d15 	stw	ra,308(sp)
 c0022c8:	df004c15 	stw	fp,304(sp)
 c0022cc:	dc004b15 	stw	r16,300(sp)
 c0022d0:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 c0022d4:	d0a00303 	ldbu	r2,-32756(gp)
 c0022d8:	10803fcc 	andi	r2,r2,255
 c0022dc:	10803c0c 	andi	r2,r2,240
 c0022e0:	10c00820 	cmpeqi	r3,r2,32
 c0022e4:	1801121e 	bne	r3,zero,c002730 <USB_Task+0x470>
 c0022e8:	10c00848 	cmpgei	r3,r2,33
 c0022ec:	1800041e 	bne	r3,zero,c002300 <USB_Task+0x40>
 c0022f0:	10000a26 	beq	r2,zero,c00231c <USB_Task+0x5c>
 c0022f4:	10800420 	cmpeqi	r2,r2,16
 c0022f8:	10001b1e 	bne	r2,zero,c002368 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 c0022fc:	00017a06 	br	c0028e8 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 c002300:	10c01020 	cmpeqi	r3,r2,64
 c002304:	18016f1e 	bne	r3,zero,c0028c4 <USB_Task+0x604>
 c002308:	10c03fe0 	cmpeqi	r3,r2,255
 c00230c:	18016f1e 	bne	r3,zero,c0028cc <USB_Task+0x60c>
 c002310:	10800c20 	cmpeqi	r2,r2,48
 c002314:	1001441e 	bne	r2,zero,c002828 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 c002318:	00017306 	br	c0028e8 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 c00231c:	d0a00303 	ldbu	r2,-32756(gp)
 c002320:	10803fcc 	andi	r2,r2,255
 c002324:	10c000e0 	cmpeqi	r3,r2,3
 c002328:	1800091e 	bne	r3,zero,c002350 <USB_Task+0x90>
 c00232c:	10c00120 	cmpeqi	r3,r2,4
 c002330:	18000b1e 	bne	r3,zero,c002360 <USB_Task+0xa0>
 c002334:	10800060 	cmpeqi	r2,r2,1
 c002338:	1000011e 	bne	r2,zero,c002340 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 c00233c:	00016a06 	br	c0028e8 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 c002340:	c0022280 	call	c002228 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 c002344:	008000c4 	movi	r2,3
 c002348:	d0a00305 	stb	r2,-32756(gp)
                    break;
 c00234c:	00000506 	br	c002364 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 c002350:	01400104 	movi	r5,4
 c002354:	01003a04 	movi	r4,232
 c002358:	c0015340 	call	c001534 <MAXreg_wr>
                    break;
 c00235c:	00000106 	br	c002364 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 c002360:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 c002364:	00016006 	br	c0028e8 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 c002368:	d0a00303 	ldbu	r2,-32756(gp)
 c00236c:	10803fcc 	andi	r2,r2,255
 c002370:	10bffc04 	addi	r2,r2,-16
 c002374:	10c001a8 	cmpgeui	r3,r2,6
 c002378:	1801561e 	bne	r3,zero,c0028d4 <USB_Task+0x614>
 c00237c:	100690ba 	slli	r3,r2,2
 c002380:	00830034 	movhi	r2,3072
 c002384:	1088e504 	addi	r2,r2,9108
 c002388:	1885883a 	add	r2,r3,r2
 c00238c:	10800017 	ldw	r2,0(r2)
 c002390:	1000683a 	jmp	r2
 c002394:	0c0023ac 	andhi	r16,at,142
 c002398:	0c0023e4 	muli	r16,at,143
 c00239c:	0c002420 	cmpeqi	r16,at,144
 c0023a0:	0c002444 	addi	r16,at,145
 c0023a4:	0c002484 	addi	r16,at,146
 c0023a8:	0c002498 	cmpnei	r16,at,146
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0023ac:	d0a6f017 	ldw	r2,-25664(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 c0023b0:	0140fa04 	movi	r5,1000
 c0023b4:	1009883a 	mov	r4,r2
 c0023b8:	c002cc00 	call	c002cc0 <__mulsi3>
 c0023bc:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0023c0:	d0a6ef17 	ldw	r2,-25668(gp)
 c0023c4:	100b883a 	mov	r5,r2
 c0023c8:	1809883a 	mov	r4,r3
 c0023cc:	c002c040 	call	c002c04 <__udivsi3>
 c0023d0:	10803204 	addi	r2,r2,200
 c0023d4:	d0a6e315 	stw	r2,-25716(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 c0023d8:	00800444 	movi	r2,17
 c0023dc:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
 c0023e0:	0000d206 	br	c00272c <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0023e4:	d0a6f017 	ldw	r2,-25664(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 c0023e8:	0140fa04 	movi	r5,1000
 c0023ec:	1009883a 	mov	r4,r2
 c0023f0:	c002cc00 	call	c002cc0 <__mulsi3>
 c0023f4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0023f8:	d0a6ef17 	ldw	r2,-25668(gp)
 c0023fc:	100b883a 	mov	r5,r2
 c002400:	1809883a 	mov	r4,r3
 c002404:	c002c040 	call	c002c04 <__udivsi3>
 c002408:	1007883a 	mov	r3,r2
 c00240c:	d0a6e317 	ldw	r2,-25716(gp)
 c002410:	10c0c32e 	bgeu	r2,r3,c002720 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 c002414:	00800484 	movi	r2,18
 c002418:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 c00241c:	0000c006 	br	c002720 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 c002420:	01400044 	movi	r5,1
 c002424:	01003204 	movi	r4,200
 c002428:	c0015340 	call	c001534 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 c00242c:	01400044 	movi	r5,1
 c002430:	01003a04 	movi	r4,232
 c002434:	c0015340 	call	c001534 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 c002438:	008004c4 	movi	r2,19
 c00243c:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 c002440:	0000ba06 	br	c00272c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 c002444:	01003a04 	movi	r4,232
 c002448:	c0017240 	call	c001724 <MAXreg_rd>
 c00244c:	10803fcc 	andi	r2,r2,255
 c002450:	1080004c 	andi	r2,r2,1
 c002454:	1000b41e 	bne	r2,zero,c002728 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 c002458:	01003604 	movi	r4,216
 c00245c:	c0017240 	call	c001724 <MAXreg_rd>
 c002460:	10800214 	ori	r2,r2,8
 c002464:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 c002468:	e0bfb943 	ldbu	r2,-283(fp)
 c00246c:	100b883a 	mov	r5,r2
 c002470:	01003604 	movi	r4,216
 c002474:	c0015340 	call	c001534 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 c002478:	00800504 	movi	r2,20
 c00247c:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 c002480:	0000a906 	br	c002728 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 c002484:	01003204 	movi	r4,200
 c002488:	c0017240 	call	c001724 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 c00248c:	00800544 	movi	r2,21
 c002490:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 c002494:	0000a506 	br	c00272c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 c002498:	00830074 	movhi	r2,3073
 c00249c:	10990c04 	addi	r2,r2,25648
 c0024a0:	10800017 	ldw	r2,0(r2)
 c0024a4:	00c00204 	movi	r3,8
 c0024a8:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 c0024ac:	e0bfba04 	addi	r2,fp,-280
 c0024b0:	d8800415 	stw	r2,16(sp)
 c0024b4:	00800204 	movi	r2,8
 c0024b8:	d8800315 	stw	r2,12(sp)
 c0024bc:	d8000215 	stw	zero,8(sp)
 c0024c0:	00800044 	movi	r2,1
 c0024c4:	d8800115 	stw	r2,4(sp)
 c0024c8:	d8000015 	stw	zero,0(sp)
 c0024cc:	01c00184 	movi	r7,6
 c0024d0:	01802004 	movi	r6,128
 c0024d4:	000b883a 	mov	r5,zero
 c0024d8:	0009883a 	mov	r4,zero
 c0024dc:	c001c740 	call	c001c74 <XferCtrlReq>
 c0024e0:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 c0024e4:	e0bfb983 	ldbu	r2,-282(fp)
 c0024e8:	1000861e 	bne	r2,zero,c002704 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 c0024ec:	00830074 	movhi	r2,3073
 c0024f0:	10990c04 	addi	r2,r2,25648
 c0024f4:	10800017 	ldw	r2,0(r2)
 c0024f8:	e0ffbbc3 	ldbu	r3,-273(fp)
 c0024fc:	18c03fcc 	andi	r3,r3,255
 c002500:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 c002504:	e0bfba03 	ldbu	r2,-280(fp)
 c002508:	10803fcc 	andi	r2,r2,255
 c00250c:	e0ffba04 	addi	r3,fp,-280
 c002510:	d8c00415 	stw	r3,16(sp)
 c002514:	d8800315 	stw	r2,12(sp)
 c002518:	d8000215 	stw	zero,8(sp)
 c00251c:	00800044 	movi	r2,1
 c002520:	d8800115 	stw	r2,4(sp)
 c002524:	d8000015 	stw	zero,0(sp)
 c002528:	01c00184 	movi	r7,6
 c00252c:	01802004 	movi	r6,128
 c002530:	000b883a 	mov	r5,zero
 c002534:	0009883a 	mov	r4,zero
 c002538:	c001c740 	call	c001c74 <XferCtrlReq>
 c00253c:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 c002540:	e0bfbd83 	ldbu	r2,-266(fp)
 c002544:	10803fcc 	andi	r2,r2,255
 c002548:	10003426 	beq	r2,zero,c00261c <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 c00254c:	e0bfbd83 	ldbu	r2,-266(fp)
 c002550:	10803fcc 	andi	r2,r2,255
 c002554:	e0ffbe84 	addi	r3,fp,-262
 c002558:	d8c00415 	stw	r3,16(sp)
 c00255c:	00c00084 	movi	r3,2
 c002560:	d8c00315 	stw	r3,12(sp)
 c002564:	00c10244 	movi	r3,1033
 c002568:	d8c00215 	stw	r3,8(sp)
 c00256c:	00c000c4 	movi	r3,3
 c002570:	d8c00115 	stw	r3,4(sp)
 c002574:	d8800015 	stw	r2,0(sp)
 c002578:	01c00184 	movi	r7,6
 c00257c:	01802004 	movi	r6,128
 c002580:	000b883a 	mov	r5,zero
 c002584:	0009883a 	mov	r4,zero
 c002588:	c001c740 	call	c001c74 <XferCtrlReq>
 c00258c:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 c002590:	e0bfbd83 	ldbu	r2,-266(fp)
 c002594:	10803fcc 	andi	r2,r2,255
 c002598:	e0ffbe83 	ldbu	r3,-262(fp)
 c00259c:	18c03fcc 	andi	r3,r3,255
 c0025a0:	e13fbe84 	addi	r4,fp,-262
 c0025a4:	d9000415 	stw	r4,16(sp)
 c0025a8:	d8c00315 	stw	r3,12(sp)
 c0025ac:	00c10244 	movi	r3,1033
 c0025b0:	d8c00215 	stw	r3,8(sp)
 c0025b4:	00c000c4 	movi	r3,3
 c0025b8:	d8c00115 	stw	r3,4(sp)
 c0025bc:	d8800015 	stw	r2,0(sp)
 c0025c0:	01c00184 	movi	r7,6
 c0025c4:	01802004 	movi	r6,128
 c0025c8:	000b883a 	mov	r5,zero
 c0025cc:	0009883a 	mov	r4,zero
 c0025d0:	c001c740 	call	c001c74 <XferCtrlReq>
 c0025d4:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 c0025d8:	e0bfbd83 	ldbu	r2,-266(fp)
 c0025dc:	14003fcc 	andi	r16,r2,255
 c0025e0:	e0bfbe83 	ldbu	r2,-262(fp)
 c0025e4:	10803fcc 	andi	r2,r2,255
 c0025e8:	1004d07a 	srli	r2,r2,1
 c0025ec:	10bfffc4 	addi	r2,r2,-1
 c0025f0:	10c03fcc 	andi	r3,r2,255
 c0025f4:	e0bfbe84 	addi	r2,fp,-262
 c0025f8:	10800084 	addi	r2,r2,2
 c0025fc:	180b883a 	mov	r5,r3
 c002600:	1009883a 	mov	r4,r2
 c002604:	c002a880 	call	c002a88 <ConvUTF8ToStr>
 c002608:	100d883a 	mov	r6,r2
 c00260c:	800b883a 	mov	r5,r16
 c002610:	01030074 	movhi	r4,3073
 c002614:	210a4204 	addi	r4,r4,10504
 c002618:	c002d180 	call	c002d18 <printf>
                		}
                		if (buf.iProduct != 0)
 c00261c:	e0bfbdc3 	ldbu	r2,-265(fp)
 c002620:	10803fcc 	andi	r2,r2,255
 c002624:	10003426 	beq	r2,zero,c0026f8 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 c002628:	e0bfbdc3 	ldbu	r2,-265(fp)
 c00262c:	10803fcc 	andi	r2,r2,255
 c002630:	e0ffbe84 	addi	r3,fp,-262
 c002634:	d8c00415 	stw	r3,16(sp)
 c002638:	00c00084 	movi	r3,2
 c00263c:	d8c00315 	stw	r3,12(sp)
 c002640:	00c10244 	movi	r3,1033
 c002644:	d8c00215 	stw	r3,8(sp)
 c002648:	00c000c4 	movi	r3,3
 c00264c:	d8c00115 	stw	r3,4(sp)
 c002650:	d8800015 	stw	r2,0(sp)
 c002654:	01c00184 	movi	r7,6
 c002658:	01802004 	movi	r6,128
 c00265c:	000b883a 	mov	r5,zero
 c002660:	0009883a 	mov	r4,zero
 c002664:	c001c740 	call	c001c74 <XferCtrlReq>
 c002668:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 c00266c:	e0bfbdc3 	ldbu	r2,-265(fp)
 c002670:	10803fcc 	andi	r2,r2,255
 c002674:	e0ffbe83 	ldbu	r3,-262(fp)
 c002678:	18c03fcc 	andi	r3,r3,255
 c00267c:	e13fbe84 	addi	r4,fp,-262
 c002680:	d9000415 	stw	r4,16(sp)
 c002684:	d8c00315 	stw	r3,12(sp)
 c002688:	00c10244 	movi	r3,1033
 c00268c:	d8c00215 	stw	r3,8(sp)
 c002690:	00c000c4 	movi	r3,3
 c002694:	d8c00115 	stw	r3,4(sp)
 c002698:	d8800015 	stw	r2,0(sp)
 c00269c:	01c00184 	movi	r7,6
 c0026a0:	01802004 	movi	r6,128
 c0026a4:	000b883a 	mov	r5,zero
 c0026a8:	0009883a 	mov	r4,zero
 c0026ac:	c001c740 	call	c001c74 <XferCtrlReq>
 c0026b0:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 c0026b4:	e0bfbdc3 	ldbu	r2,-265(fp)
 c0026b8:	14003fcc 	andi	r16,r2,255
 c0026bc:	e0bfbe83 	ldbu	r2,-262(fp)
 c0026c0:	10803fcc 	andi	r2,r2,255
 c0026c4:	1004d07a 	srli	r2,r2,1
 c0026c8:	10bfffc4 	addi	r2,r2,-1
 c0026cc:	10c03fcc 	andi	r3,r2,255
 c0026d0:	e0bfbe84 	addi	r2,fp,-262
 c0026d4:	10800084 	addi	r2,r2,2
 c0026d8:	180b883a 	mov	r5,r3
 c0026dc:	1009883a 	mov	r4,r2
 c0026e0:	c002a880 	call	c002a88 <ConvUTF8ToStr>
 c0026e4:	100d883a 	mov	r6,r2
 c0026e8:	800b883a 	mov	r5,r16
 c0026ec:	01030074 	movhi	r4,3073
 c0026f0:	210a4804 	addi	r4,r4,10528
 c0026f4:	c002d180 	call	c002d18 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 c0026f8:	00800804 	movi	r2,32
 c0026fc:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 c002700:	00000a06 	br	c00272c <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 c002704:	e0bfb983 	ldbu	r2,-282(fp)
 c002708:	d0a6e445 	stb	r2,-25711(gp)
                        last_usb_task_state = usb_task_state;
 c00270c:	d0a00303 	ldbu	r2,-32756(gp)
 c002710:	d0a6e205 	stb	r2,-25720(gp)
                        usb_task_state = USB_STATE_ERROR;
 c002714:	00bfffc4 	movi	r2,-1
 c002718:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 c00271c:	00000306 	br	c00272c <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 c002720:	0001883a 	nop
 c002724:	00006b06 	br	c0028d4 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 c002728:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 c00272c:	00006906 	br	c0028d4 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 c002730:	00800044 	movi	r2,1
 c002734:	e0bfb905 	stb	r2,-284(fp)
 c002738:	00002d06 	br	c0027f0 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 c00273c:	e0ffb903 	ldbu	r3,-284(fp)
 c002740:	00830074 	movhi	r2,3073
 c002744:	10990c04 	addi	r2,r2,25648
 c002748:	180690fa 	slli	r3,r3,3
 c00274c:	10c5883a 	add	r2,r2,r3
 c002750:	10800017 	ldw	r2,0(r2)
 c002754:	1000231e 	bne	r2,zero,c0027e4 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 c002758:	e13fb903 	ldbu	r4,-284(fp)
 c00275c:	00830074 	movhi	r2,3073
 c002760:	10990c04 	addi	r2,r2,25648
 c002764:	10c00017 	ldw	r3,0(r2)
 c002768:	00830074 	movhi	r2,3073
 c00276c:	10990c04 	addi	r2,r2,25648
 c002770:	200890fa 	slli	r4,r4,3
 c002774:	1105883a 	add	r2,r2,r4
 c002778:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 c00277c:	e0bfb903 	ldbu	r2,-284(fp)
 c002780:	d8000415 	stw	zero,16(sp)
 c002784:	d8000315 	stw	zero,12(sp)
 c002788:	d8000215 	stw	zero,8(sp)
 c00278c:	d8000115 	stw	zero,4(sp)
 c002790:	d8800015 	stw	r2,0(sp)
 c002794:	01c00144 	movi	r7,5
 c002798:	000d883a 	mov	r6,zero
 c00279c:	000b883a 	mov	r5,zero
 c0027a0:	0009883a 	mov	r4,zero
 c0027a4:	c001c740 	call	c001c74 <XferCtrlReq>
 c0027a8:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 c0027ac:	e0bfb983 	ldbu	r2,-282(fp)
 c0027b0:	1000051e 	bne	r2,zero,c0027c8 <USB_Task+0x508>
                        tmp_addr = i;
 c0027b4:	e0bfb903 	ldbu	r2,-284(fp)
 c0027b8:	d0a6e405 	stb	r2,-25712(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 c0027bc:	00800c04 	movi	r2,48
 c0027c0:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 c0027c4:	00000d06 	br	c0027fc <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 c0027c8:	e0bfb983 	ldbu	r2,-282(fp)
 c0027cc:	d0a6e445 	stb	r2,-25711(gp)
                        last_usb_task_state = usb_task_state;
 c0027d0:	d0a00303 	ldbu	r2,-32756(gp)
 c0027d4:	d0a6e205 	stb	r2,-25720(gp)
                        usb_task_state = USB_STATE_ERROR;
 c0027d8:	00bfffc4 	movi	r2,-1
 c0027dc:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 c0027e0:	00000606 	br	c0027fc <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 c0027e4:	e0bfb903 	ldbu	r2,-284(fp)
 c0027e8:	10800044 	addi	r2,r2,1
 c0027ec:	e0bfb905 	stb	r2,-284(fp)
 c0027f0:	e0bfb903 	ldbu	r2,-284(fp)
 c0027f4:	10800230 	cmpltui	r2,r2,8
 c0027f8:	103fd01e 	bne	r2,zero,c00273c <__alt_data_end+0xfc00273c>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 c0027fc:	d0a00303 	ldbu	r2,-32756(gp)
 c002800:	10803fcc 	andi	r2,r2,255
 c002804:	10800818 	cmpnei	r2,r2,32
 c002808:	1000341e 	bne	r2,zero,c0028dc <USB_Task+0x61c>
                usb_error = 0xfe;
 c00280c:	00bfff84 	movi	r2,-2
 c002810:	d0a6e445 	stb	r2,-25711(gp)
                last_usb_task_state = usb_task_state;
 c002814:	d0a00303 	ldbu	r2,-32756(gp)
 c002818:	d0a6e205 	stb	r2,-25720(gp)
                usb_task_state = USB_STATE_ERROR;
 c00281c:	00bfffc4 	movi	r2,-1
 c002820:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 c002824:	00002d06 	br	c0028dc <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 c002828:	e03fb905 	stb	zero,-284(fp)
 c00282c:	00001706 	br	c00288c <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 c002830:	e0bfb903 	ldbu	r2,-284(fp)
 c002834:	04030074 	movhi	r16,3073
 c002838:	840b0e04 	addi	r16,r16,11320
 c00283c:	01400304 	movi	r5,12
 c002840:	1009883a 	mov	r4,r2
 c002844:	c002cc00 	call	c002cc0 <__mulsi3>
 c002848:	8085883a 	add	r2,r16,r2
 c00284c:	10800017 	ldw	r2,0(r2)
 c002850:	d0e6e403 	ldbu	r3,-25712(gp)
 c002854:	18c03fcc 	andi	r3,r3,255
 c002858:	000b883a 	mov	r5,zero
 c00285c:	1809883a 	mov	r4,r3
 c002860:	103ee83a 	callr	r2
 c002864:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 c002868:	e0bfb983 	ldbu	r2,-282(fp)
 c00286c:	10800058 	cmpnei	r2,r2,1
 c002870:	1000031e 	bne	r2,zero,c002880 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 c002874:	00801004 	movi	r2,64
 c002878:	d0a00305 	stb	r2,-32756(gp)
                    break;
 c00287c:	00000606 	br	c002898 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 c002880:	e0bfb903 	ldbu	r2,-284(fp)
 c002884:	10800044 	addi	r2,r2,1
 c002888:	e0bfb905 	stb	r2,-284(fp)
 c00288c:	e0bfb903 	ldbu	r2,-284(fp)
 c002890:	10800130 	cmpltui	r2,r2,4
 c002894:	103fe61e 	bne	r2,zero,c002830 <__alt_data_end+0xfc002830>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 c002898:	d0a00303 	ldbu	r2,-32756(gp)
 c00289c:	10803fcc 	andi	r2,r2,255
 c0028a0:	10800c18 	cmpnei	r2,r2,48
 c0028a4:	10000f1e 	bne	r2,zero,c0028e4 <USB_Task+0x624>
                usb_error = 0xfd;
 c0028a8:	00bfff44 	movi	r2,-3
 c0028ac:	d0a6e445 	stb	r2,-25711(gp)
                last_usb_task_state = usb_task_state;
 c0028b0:	d0a00303 	ldbu	r2,-32756(gp)
 c0028b4:	d0a6e205 	stb	r2,-25720(gp)
                usb_task_state = USB_STATE_ERROR;
 c0028b8:	00bfffc4 	movi	r2,-1
 c0028bc:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 c0028c0:	00000806 	br	c0028e4 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 c0028c4:	0001883a 	nop
 c0028c8:	00000706 	br	c0028e8 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 c0028cc:	0001883a 	nop
 c0028d0:	00000506 	br	c0028e8 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 c0028d4:	0001883a 	nop
 c0028d8:	00000306 	br	c0028e8 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 c0028dc:	0001883a 	nop
 c0028e0:	00000106 	br	c0028e8 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 c0028e4:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 c0028e8:	0001883a 	nop
 c0028ec:	e6ffff04 	addi	sp,fp,-4
 c0028f0:	dfc00217 	ldw	ra,8(sp)
 c0028f4:	df000117 	ldw	fp,4(sp)
 c0028f8:	dc000017 	ldw	r16,0(sp)
 c0028fc:	dec00304 	addi	sp,sp,12
 c002900:	f800283a 	ret

0c002904 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 c002904:	defffd04 	addi	sp,sp,-12
 c002908:	df000215 	stw	fp,8(sp)
 c00290c:	df000204 	addi	fp,sp,8
 c002910:	2005883a 	mov	r2,r4
 c002914:	e17fff15 	stw	r5,-4(fp)
 c002918:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 c00291c:	0005883a 	mov	r2,zero
}
 c002920:	e037883a 	mov	sp,fp
 c002924:	df000017 	ldw	fp,0(sp)
 c002928:	dec00104 	addi	sp,sp,4
 c00292c:	f800283a 	ret

0c002930 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c002930:	defffb04 	addi	sp,sp,-20
 c002934:	df000415 	stw	fp,16(sp)
 c002938:	df000404 	addi	fp,sp,16
 c00293c:	2007883a 	mov	r3,r4
 c002940:	2805883a 	mov	r2,r5
 c002944:	e1bffe15 	stw	r6,-8(fp)
 c002948:	e1ffff15 	stw	r7,-4(fp)
 c00294c:	e0fffc05 	stb	r3,-16(fp)
 c002950:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 c002954:	0005883a 	mov	r2,zero

}
 c002958:	e037883a 	mov	sp,fp
 c00295c:	df000017 	ldw	fp,0(sp)
 c002960:	dec00104 	addi	sp,sp,4
 c002964:	f800283a 	ret

0c002968 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 c002968:	defffd04 	addi	sp,sp,-12
 c00296c:	df000215 	stw	fp,8(sp)
 c002970:	df000204 	addi	fp,sp,8
 c002974:	2005883a 	mov	r2,r4
 c002978:	e17fff15 	stw	r5,-4(fp)
 c00297c:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 c002980:	0005883a 	mov	r2,zero

}
 c002984:	e037883a 	mov	sp,fp
 c002988:	df000017 	ldw	fp,0(sp)
 c00298c:	dec00104 	addi	sp,sp,4
 c002990:	f800283a 	ret

0c002994 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c002994:	defffb04 	addi	sp,sp,-20
 c002998:	df000415 	stw	fp,16(sp)
 c00299c:	df000404 	addi	fp,sp,16
 c0029a0:	2007883a 	mov	r3,r4
 c0029a4:	2805883a 	mov	r2,r5
 c0029a8:	e1bffe15 	stw	r6,-8(fp)
 c0029ac:	e1ffff15 	stw	r7,-4(fp)
 c0029b0:	e0fffc05 	stb	r3,-16(fp)
 c0029b4:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 c0029b8:	0005883a 	mov	r2,zero
}
 c0029bc:	e037883a 	mov	sp,fp
 c0029c0:	df000017 	ldw	fp,0(sp)
 c0029c4:	dec00104 	addi	sp,sp,4
 c0029c8:	f800283a 	ret

0c0029cc <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 c0029cc:	defffd04 	addi	sp,sp,-12
 c0029d0:	df000215 	stw	fp,8(sp)
 c0029d4:	df000204 	addi	fp,sp,8
 c0029d8:	2005883a 	mov	r2,r4
 c0029dc:	e17fff15 	stw	r5,-4(fp)
 c0029e0:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 c0029e4:	0005883a 	mov	r2,zero
}
 c0029e8:	e037883a 	mov	sp,fp
 c0029ec:	df000017 	ldw	fp,0(sp)
 c0029f0:	dec00104 	addi	sp,sp,4
 c0029f4:	f800283a 	ret

0c0029f8 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 c0029f8:	defffb04 	addi	sp,sp,-20
 c0029fc:	df000415 	stw	fp,16(sp)
 c002a00:	df000404 	addi	fp,sp,16
 c002a04:	2007883a 	mov	r3,r4
 c002a08:	2805883a 	mov	r2,r5
 c002a0c:	e1bffe15 	stw	r6,-8(fp)
 c002a10:	e1ffff15 	stw	r7,-4(fp)
 c002a14:	e0fffc05 	stb	r3,-16(fp)
 c002a18:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 c002a1c:	0005883a 	mov	r2,zero
}
 c002a20:	e037883a 	mov	sp,fp
 c002a24:	df000017 	ldw	fp,0(sp)
 c002a28:	dec00104 	addi	sp,sp,4
 c002a2c:	f800283a 	ret

0c002a30 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 c002a30:	deffff04 	addi	sp,sp,-4
 c002a34:	df000015 	stw	fp,0(sp)
 c002a38:	d839883a 	mov	fp,sp
    return( usb_task_state );
 c002a3c:	d0a00303 	ldbu	r2,-32756(gp)
}
 c002a40:	e037883a 	mov	sp,fp
 c002a44:	df000017 	ldw	fp,0(sp)
 c002a48:	dec00104 	addi	sp,sp,4
 c002a4c:	f800283a 	ret

0c002a50 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 c002a50:	defffe04 	addi	sp,sp,-8
 c002a54:	df000115 	stw	fp,4(sp)
 c002a58:	df000104 	addi	fp,sp,4
 c002a5c:	2005883a 	mov	r2,r4
 c002a60:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 c002a64:	e0bfff03 	ldbu	r2,-4(fp)
 c002a68:	100690fa 	slli	r3,r2,3
 c002a6c:	00830074 	movhi	r2,3073
 c002a70:	10990c04 	addi	r2,r2,25648
 c002a74:	1885883a 	add	r2,r3,r2
}
 c002a78:	e037883a 	mov	sp,fp
 c002a7c:	df000017 	ldw	fp,0(sp)
 c002a80:	dec00104 	addi	sp,sp,4
 c002a84:	f800283a 	ret

0c002a88 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 c002a88:	defffc04 	addi	sp,sp,-16
 c002a8c:	df000315 	stw	fp,12(sp)
 c002a90:	df000304 	addi	fp,sp,12
 c002a94:	e13ffe15 	stw	r4,-8(fp)
 c002a98:	2805883a 	mov	r2,r5
 c002a9c:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 c002aa0:	e03ffd05 	stb	zero,-12(fp)
 c002aa4:	00000d06 	br	c002adc <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 c002aa8:	e0bffd03 	ldbu	r2,-12(fp)
 c002aac:	e0fffe17 	ldw	r3,-8(fp)
 c002ab0:	1887883a 	add	r3,r3,r2
 c002ab4:	e0bffd03 	ldbu	r2,-12(fp)
 c002ab8:	1085883a 	add	r2,r2,r2
 c002abc:	1009883a 	mov	r4,r2
 c002ac0:	e0bffe17 	ldw	r2,-8(fp)
 c002ac4:	1105883a 	add	r2,r2,r4
 c002ac8:	10800003 	ldbu	r2,0(r2)
 c002acc:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 c002ad0:	e0bffd03 	ldbu	r2,-12(fp)
 c002ad4:	10800044 	addi	r2,r2,1
 c002ad8:	e0bffd05 	stb	r2,-12(fp)
 c002adc:	e0fffd03 	ldbu	r3,-12(fp)
 c002ae0:	e0bfff03 	ldbu	r2,-4(fp)
 c002ae4:	18bff036 	bltu	r3,r2,c002aa8 <__alt_data_end+0xfc002aa8>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 c002ae8:	e0bfff03 	ldbu	r2,-4(fp)
 c002aec:	e0fffe17 	ldw	r3,-8(fp)
 c002af0:	1885883a 	add	r2,r3,r2
 c002af4:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 c002af8:	e0bffe17 	ldw	r2,-8(fp)
}
 c002afc:	e037883a 	mov	sp,fp
 c002b00:	df000017 	ldw	fp,0(sp)
 c002b04:	dec00104 	addi	sp,sp,4
 c002b08:	f800283a 	ret

0c002b0c <__divsi3>:
 c002b0c:	20001b16 	blt	r4,zero,c002b7c <__divsi3+0x70>
 c002b10:	000f883a 	mov	r7,zero
 c002b14:	28001616 	blt	r5,zero,c002b70 <__divsi3+0x64>
 c002b18:	200d883a 	mov	r6,r4
 c002b1c:	29001a2e 	bgeu	r5,r4,c002b88 <__divsi3+0x7c>
 c002b20:	00800804 	movi	r2,32
 c002b24:	00c00044 	movi	r3,1
 c002b28:	00000106 	br	c002b30 <__divsi3+0x24>
 c002b2c:	10000d26 	beq	r2,zero,c002b64 <__divsi3+0x58>
 c002b30:	294b883a 	add	r5,r5,r5
 c002b34:	10bfffc4 	addi	r2,r2,-1
 c002b38:	18c7883a 	add	r3,r3,r3
 c002b3c:	293ffb36 	bltu	r5,r4,c002b2c <__alt_data_end+0xfc002b2c>
 c002b40:	0005883a 	mov	r2,zero
 c002b44:	18000726 	beq	r3,zero,c002b64 <__divsi3+0x58>
 c002b48:	0005883a 	mov	r2,zero
 c002b4c:	31400236 	bltu	r6,r5,c002b58 <__divsi3+0x4c>
 c002b50:	314dc83a 	sub	r6,r6,r5
 c002b54:	10c4b03a 	or	r2,r2,r3
 c002b58:	1806d07a 	srli	r3,r3,1
 c002b5c:	280ad07a 	srli	r5,r5,1
 c002b60:	183ffa1e 	bne	r3,zero,c002b4c <__alt_data_end+0xfc002b4c>
 c002b64:	38000126 	beq	r7,zero,c002b6c <__divsi3+0x60>
 c002b68:	0085c83a 	sub	r2,zero,r2
 c002b6c:	f800283a 	ret
 c002b70:	014bc83a 	sub	r5,zero,r5
 c002b74:	39c0005c 	xori	r7,r7,1
 c002b78:	003fe706 	br	c002b18 <__alt_data_end+0xfc002b18>
 c002b7c:	0109c83a 	sub	r4,zero,r4
 c002b80:	01c00044 	movi	r7,1
 c002b84:	003fe306 	br	c002b14 <__alt_data_end+0xfc002b14>
 c002b88:	00c00044 	movi	r3,1
 c002b8c:	003fee06 	br	c002b48 <__alt_data_end+0xfc002b48>

0c002b90 <__modsi3>:
 c002b90:	20001716 	blt	r4,zero,c002bf0 <__modsi3+0x60>
 c002b94:	000f883a 	mov	r7,zero
 c002b98:	2005883a 	mov	r2,r4
 c002b9c:	28001216 	blt	r5,zero,c002be8 <__modsi3+0x58>
 c002ba0:	2900162e 	bgeu	r5,r4,c002bfc <__modsi3+0x6c>
 c002ba4:	01800804 	movi	r6,32
 c002ba8:	00c00044 	movi	r3,1
 c002bac:	00000106 	br	c002bb4 <__modsi3+0x24>
 c002bb0:	30000a26 	beq	r6,zero,c002bdc <__modsi3+0x4c>
 c002bb4:	294b883a 	add	r5,r5,r5
 c002bb8:	31bfffc4 	addi	r6,r6,-1
 c002bbc:	18c7883a 	add	r3,r3,r3
 c002bc0:	293ffb36 	bltu	r5,r4,c002bb0 <__alt_data_end+0xfc002bb0>
 c002bc4:	18000526 	beq	r3,zero,c002bdc <__modsi3+0x4c>
 c002bc8:	1806d07a 	srli	r3,r3,1
 c002bcc:	11400136 	bltu	r2,r5,c002bd4 <__modsi3+0x44>
 c002bd0:	1145c83a 	sub	r2,r2,r5
 c002bd4:	280ad07a 	srli	r5,r5,1
 c002bd8:	183ffb1e 	bne	r3,zero,c002bc8 <__alt_data_end+0xfc002bc8>
 c002bdc:	38000126 	beq	r7,zero,c002be4 <__modsi3+0x54>
 c002be0:	0085c83a 	sub	r2,zero,r2
 c002be4:	f800283a 	ret
 c002be8:	014bc83a 	sub	r5,zero,r5
 c002bec:	003fec06 	br	c002ba0 <__alt_data_end+0xfc002ba0>
 c002bf0:	0109c83a 	sub	r4,zero,r4
 c002bf4:	01c00044 	movi	r7,1
 c002bf8:	003fe706 	br	c002b98 <__alt_data_end+0xfc002b98>
 c002bfc:	00c00044 	movi	r3,1
 c002c00:	003ff106 	br	c002bc8 <__alt_data_end+0xfc002bc8>

0c002c04 <__udivsi3>:
 c002c04:	200d883a 	mov	r6,r4
 c002c08:	2900152e 	bgeu	r5,r4,c002c60 <__udivsi3+0x5c>
 c002c0c:	28001416 	blt	r5,zero,c002c60 <__udivsi3+0x5c>
 c002c10:	00800804 	movi	r2,32
 c002c14:	00c00044 	movi	r3,1
 c002c18:	00000206 	br	c002c24 <__udivsi3+0x20>
 c002c1c:	10000e26 	beq	r2,zero,c002c58 <__udivsi3+0x54>
 c002c20:	28000516 	blt	r5,zero,c002c38 <__udivsi3+0x34>
 c002c24:	294b883a 	add	r5,r5,r5
 c002c28:	10bfffc4 	addi	r2,r2,-1
 c002c2c:	18c7883a 	add	r3,r3,r3
 c002c30:	293ffa36 	bltu	r5,r4,c002c1c <__alt_data_end+0xfc002c1c>
 c002c34:	18000826 	beq	r3,zero,c002c58 <__udivsi3+0x54>
 c002c38:	0005883a 	mov	r2,zero
 c002c3c:	31400236 	bltu	r6,r5,c002c48 <__udivsi3+0x44>
 c002c40:	314dc83a 	sub	r6,r6,r5
 c002c44:	10c4b03a 	or	r2,r2,r3
 c002c48:	1806d07a 	srli	r3,r3,1
 c002c4c:	280ad07a 	srli	r5,r5,1
 c002c50:	183ffa1e 	bne	r3,zero,c002c3c <__alt_data_end+0xfc002c3c>
 c002c54:	f800283a 	ret
 c002c58:	0005883a 	mov	r2,zero
 c002c5c:	f800283a 	ret
 c002c60:	00c00044 	movi	r3,1
 c002c64:	003ff406 	br	c002c38 <__alt_data_end+0xfc002c38>

0c002c68 <__umodsi3>:
 c002c68:	2005883a 	mov	r2,r4
 c002c6c:	2900122e 	bgeu	r5,r4,c002cb8 <__umodsi3+0x50>
 c002c70:	28001116 	blt	r5,zero,c002cb8 <__umodsi3+0x50>
 c002c74:	01800804 	movi	r6,32
 c002c78:	00c00044 	movi	r3,1
 c002c7c:	00000206 	br	c002c88 <__umodsi3+0x20>
 c002c80:	30000c26 	beq	r6,zero,c002cb4 <__umodsi3+0x4c>
 c002c84:	28000516 	blt	r5,zero,c002c9c <__umodsi3+0x34>
 c002c88:	294b883a 	add	r5,r5,r5
 c002c8c:	31bfffc4 	addi	r6,r6,-1
 c002c90:	18c7883a 	add	r3,r3,r3
 c002c94:	293ffa36 	bltu	r5,r4,c002c80 <__alt_data_end+0xfc002c80>
 c002c98:	18000626 	beq	r3,zero,c002cb4 <__umodsi3+0x4c>
 c002c9c:	1806d07a 	srli	r3,r3,1
 c002ca0:	11400136 	bltu	r2,r5,c002ca8 <__umodsi3+0x40>
 c002ca4:	1145c83a 	sub	r2,r2,r5
 c002ca8:	280ad07a 	srli	r5,r5,1
 c002cac:	183ffb1e 	bne	r3,zero,c002c9c <__alt_data_end+0xfc002c9c>
 c002cb0:	f800283a 	ret
 c002cb4:	f800283a 	ret
 c002cb8:	00c00044 	movi	r3,1
 c002cbc:	003ff706 	br	c002c9c <__alt_data_end+0xfc002c9c>

0c002cc0 <__mulsi3>:
 c002cc0:	0005883a 	mov	r2,zero
 c002cc4:	20000726 	beq	r4,zero,c002ce4 <__mulsi3+0x24>
 c002cc8:	20c0004c 	andi	r3,r4,1
 c002ccc:	2008d07a 	srli	r4,r4,1
 c002cd0:	18000126 	beq	r3,zero,c002cd8 <__mulsi3+0x18>
 c002cd4:	1145883a 	add	r2,r2,r5
 c002cd8:	294b883a 	add	r5,r5,r5
 c002cdc:	203ffa1e 	bne	r4,zero,c002cc8 <__alt_data_end+0xfc002cc8>
 c002ce0:	f800283a 	ret
 c002ce4:	f800283a 	ret

0c002ce8 <_printf_r>:
 c002ce8:	defffd04 	addi	sp,sp,-12
 c002cec:	2805883a 	mov	r2,r5
 c002cf0:	dfc00015 	stw	ra,0(sp)
 c002cf4:	d9800115 	stw	r6,4(sp)
 c002cf8:	d9c00215 	stw	r7,8(sp)
 c002cfc:	21400217 	ldw	r5,8(r4)
 c002d00:	d9c00104 	addi	r7,sp,4
 c002d04:	100d883a 	mov	r6,r2
 c002d08:	c002ee00 	call	c002ee0 <___vfprintf_internal_r>
 c002d0c:	dfc00017 	ldw	ra,0(sp)
 c002d10:	dec00304 	addi	sp,sp,12
 c002d14:	f800283a 	ret

0c002d18 <printf>:
 c002d18:	defffc04 	addi	sp,sp,-16
 c002d1c:	dfc00015 	stw	ra,0(sp)
 c002d20:	d9400115 	stw	r5,4(sp)
 c002d24:	d9800215 	stw	r6,8(sp)
 c002d28:	d9c00315 	stw	r7,12(sp)
 c002d2c:	00830074 	movhi	r2,3073
 c002d30:	1091ca04 	addi	r2,r2,18216
 c002d34:	10800017 	ldw	r2,0(r2)
 c002d38:	200b883a 	mov	r5,r4
 c002d3c:	d9800104 	addi	r6,sp,4
 c002d40:	11000217 	ldw	r4,8(r2)
 c002d44:	c0051bc0 	call	c0051bc <__vfprintf_internal>
 c002d48:	dfc00017 	ldw	ra,0(sp)
 c002d4c:	dec00404 	addi	sp,sp,16
 c002d50:	f800283a 	ret

0c002d54 <_putchar_r>:
 c002d54:	21800217 	ldw	r6,8(r4)
 c002d58:	c009d801 	jmpi	c009d80 <_putc_r>

0c002d5c <putchar>:
 c002d5c:	00830074 	movhi	r2,3073
 c002d60:	1091ca04 	addi	r2,r2,18216
 c002d64:	200b883a 	mov	r5,r4
 c002d68:	11000017 	ldw	r4,0(r2)
 c002d6c:	21800217 	ldw	r6,8(r4)
 c002d70:	c009d801 	jmpi	c009d80 <_putc_r>

0c002d74 <_puts_r>:
 c002d74:	defff604 	addi	sp,sp,-40
 c002d78:	dc000715 	stw	r16,28(sp)
 c002d7c:	2021883a 	mov	r16,r4
 c002d80:	2809883a 	mov	r4,r5
 c002d84:	dc400815 	stw	r17,32(sp)
 c002d88:	dfc00915 	stw	ra,36(sp)
 c002d8c:	2823883a 	mov	r17,r5
 c002d90:	c002e480 	call	c002e48 <strlen>
 c002d94:	10c00044 	addi	r3,r2,1
 c002d98:	d8800115 	stw	r2,4(sp)
 c002d9c:	00830074 	movhi	r2,3073
 c002da0:	108a4e04 	addi	r2,r2,10552
 c002da4:	d8800215 	stw	r2,8(sp)
 c002da8:	00800044 	movi	r2,1
 c002dac:	d8800315 	stw	r2,12(sp)
 c002db0:	00800084 	movi	r2,2
 c002db4:	dc400015 	stw	r17,0(sp)
 c002db8:	d8c00615 	stw	r3,24(sp)
 c002dbc:	dec00415 	stw	sp,16(sp)
 c002dc0:	d8800515 	stw	r2,20(sp)
 c002dc4:	80000226 	beq	r16,zero,c002dd0 <_puts_r+0x5c>
 c002dc8:	80800e17 	ldw	r2,56(r16)
 c002dcc:	10001426 	beq	r2,zero,c002e20 <_puts_r+0xac>
 c002dd0:	81400217 	ldw	r5,8(r16)
 c002dd4:	2880030b 	ldhu	r2,12(r5)
 c002dd8:	10c8000c 	andi	r3,r2,8192
 c002ddc:	1800061e 	bne	r3,zero,c002df8 <_puts_r+0x84>
 c002de0:	29001917 	ldw	r4,100(r5)
 c002de4:	00f7ffc4 	movi	r3,-8193
 c002de8:	10880014 	ori	r2,r2,8192
 c002dec:	20c6703a 	and	r3,r4,r3
 c002df0:	2880030d 	sth	r2,12(r5)
 c002df4:	28c01915 	stw	r3,100(r5)
 c002df8:	d9800404 	addi	r6,sp,16
 c002dfc:	8009883a 	mov	r4,r16
 c002e00:	c0077240 	call	c007724 <__sfvwrite_r>
 c002e04:	1000091e 	bne	r2,zero,c002e2c <_puts_r+0xb8>
 c002e08:	00800284 	movi	r2,10
 c002e0c:	dfc00917 	ldw	ra,36(sp)
 c002e10:	dc400817 	ldw	r17,32(sp)
 c002e14:	dc000717 	ldw	r16,28(sp)
 c002e18:	dec00a04 	addi	sp,sp,40
 c002e1c:	f800283a 	ret
 c002e20:	8009883a 	mov	r4,r16
 c002e24:	c0072a00 	call	c0072a0 <__sinit>
 c002e28:	003fe906 	br	c002dd0 <__alt_data_end+0xfc002dd0>
 c002e2c:	00bfffc4 	movi	r2,-1
 c002e30:	003ff606 	br	c002e0c <__alt_data_end+0xfc002e0c>

0c002e34 <puts>:
 c002e34:	00830074 	movhi	r2,3073
 c002e38:	1091ca04 	addi	r2,r2,18216
 c002e3c:	200b883a 	mov	r5,r4
 c002e40:	11000017 	ldw	r4,0(r2)
 c002e44:	c002d741 	jmpi	c002d74 <_puts_r>

0c002e48 <strlen>:
 c002e48:	208000cc 	andi	r2,r4,3
 c002e4c:	10002026 	beq	r2,zero,c002ed0 <strlen+0x88>
 c002e50:	20800007 	ldb	r2,0(r4)
 c002e54:	10002026 	beq	r2,zero,c002ed8 <strlen+0x90>
 c002e58:	2005883a 	mov	r2,r4
 c002e5c:	00000206 	br	c002e68 <strlen+0x20>
 c002e60:	10c00007 	ldb	r3,0(r2)
 c002e64:	18001826 	beq	r3,zero,c002ec8 <strlen+0x80>
 c002e68:	10800044 	addi	r2,r2,1
 c002e6c:	10c000cc 	andi	r3,r2,3
 c002e70:	183ffb1e 	bne	r3,zero,c002e60 <__alt_data_end+0xfc002e60>
 c002e74:	10c00017 	ldw	r3,0(r2)
 c002e78:	01ffbff4 	movhi	r7,65279
 c002e7c:	39ffbfc4 	addi	r7,r7,-257
 c002e80:	00ca303a 	nor	r5,zero,r3
 c002e84:	01a02074 	movhi	r6,32897
 c002e88:	19c7883a 	add	r3,r3,r7
 c002e8c:	31a02004 	addi	r6,r6,-32640
 c002e90:	1946703a 	and	r3,r3,r5
 c002e94:	1986703a 	and	r3,r3,r6
 c002e98:	1800091e 	bne	r3,zero,c002ec0 <strlen+0x78>
 c002e9c:	10800104 	addi	r2,r2,4
 c002ea0:	10c00017 	ldw	r3,0(r2)
 c002ea4:	19cb883a 	add	r5,r3,r7
 c002ea8:	00c6303a 	nor	r3,zero,r3
 c002eac:	28c6703a 	and	r3,r5,r3
 c002eb0:	1986703a 	and	r3,r3,r6
 c002eb4:	183ff926 	beq	r3,zero,c002e9c <__alt_data_end+0xfc002e9c>
 c002eb8:	00000106 	br	c002ec0 <strlen+0x78>
 c002ebc:	10800044 	addi	r2,r2,1
 c002ec0:	10c00007 	ldb	r3,0(r2)
 c002ec4:	183ffd1e 	bne	r3,zero,c002ebc <__alt_data_end+0xfc002ebc>
 c002ec8:	1105c83a 	sub	r2,r2,r4
 c002ecc:	f800283a 	ret
 c002ed0:	2005883a 	mov	r2,r4
 c002ed4:	003fe706 	br	c002e74 <__alt_data_end+0xfc002e74>
 c002ed8:	0005883a 	mov	r2,zero
 c002edc:	f800283a 	ret

0c002ee0 <___vfprintf_internal_r>:
 c002ee0:	deffb804 	addi	sp,sp,-288
 c002ee4:	dfc04715 	stw	ra,284(sp)
 c002ee8:	ddc04515 	stw	r23,276(sp)
 c002eec:	dd404315 	stw	r21,268(sp)
 c002ef0:	d9002d15 	stw	r4,180(sp)
 c002ef4:	282f883a 	mov	r23,r5
 c002ef8:	302b883a 	mov	r21,r6
 c002efc:	d9c02e15 	stw	r7,184(sp)
 c002f00:	df004615 	stw	fp,280(sp)
 c002f04:	dd804415 	stw	r22,272(sp)
 c002f08:	dd004215 	stw	r20,264(sp)
 c002f0c:	dcc04115 	stw	r19,260(sp)
 c002f10:	dc804015 	stw	r18,256(sp)
 c002f14:	dc403f15 	stw	r17,252(sp)
 c002f18:	dc003e15 	stw	r16,248(sp)
 c002f1c:	c007e200 	call	c007e20 <_localeconv_r>
 c002f20:	10800017 	ldw	r2,0(r2)
 c002f24:	1009883a 	mov	r4,r2
 c002f28:	d8803415 	stw	r2,208(sp)
 c002f2c:	c002e480 	call	c002e48 <strlen>
 c002f30:	d8803715 	stw	r2,220(sp)
 c002f34:	d8802d17 	ldw	r2,180(sp)
 c002f38:	10000226 	beq	r2,zero,c002f44 <___vfprintf_internal_r+0x64>
 c002f3c:	10800e17 	ldw	r2,56(r2)
 c002f40:	1000fb26 	beq	r2,zero,c003330 <___vfprintf_internal_r+0x450>
 c002f44:	b880030b 	ldhu	r2,12(r23)
 c002f48:	10c8000c 	andi	r3,r2,8192
 c002f4c:	1800061e 	bne	r3,zero,c002f68 <___vfprintf_internal_r+0x88>
 c002f50:	b9001917 	ldw	r4,100(r23)
 c002f54:	00f7ffc4 	movi	r3,-8193
 c002f58:	10880014 	ori	r2,r2,8192
 c002f5c:	20c6703a 	and	r3,r4,r3
 c002f60:	b880030d 	sth	r2,12(r23)
 c002f64:	b8c01915 	stw	r3,100(r23)
 c002f68:	10c0020c 	andi	r3,r2,8
 c002f6c:	1800c326 	beq	r3,zero,c00327c <___vfprintf_internal_r+0x39c>
 c002f70:	b8c00417 	ldw	r3,16(r23)
 c002f74:	1800c126 	beq	r3,zero,c00327c <___vfprintf_internal_r+0x39c>
 c002f78:	1080068c 	andi	r2,r2,26
 c002f7c:	00c00284 	movi	r3,10
 c002f80:	10c0c626 	beq	r2,r3,c00329c <___vfprintf_internal_r+0x3bc>
 c002f84:	d8c00404 	addi	r3,sp,16
 c002f88:	05030074 	movhi	r20,3073
 c002f8c:	d9001e04 	addi	r4,sp,120
 c002f90:	a50a5f84 	addi	r20,r20,10622
 c002f94:	d8c01e15 	stw	r3,120(sp)
 c002f98:	d8002015 	stw	zero,128(sp)
 c002f9c:	d8001f15 	stw	zero,124(sp)
 c002fa0:	d8003315 	stw	zero,204(sp)
 c002fa4:	d8003615 	stw	zero,216(sp)
 c002fa8:	d8003815 	stw	zero,224(sp)
 c002fac:	1811883a 	mov	r8,r3
 c002fb0:	d8003915 	stw	zero,228(sp)
 c002fb4:	d8003a15 	stw	zero,232(sp)
 c002fb8:	d8002f15 	stw	zero,188(sp)
 c002fbc:	d9002815 	stw	r4,160(sp)
 c002fc0:	a8800007 	ldb	r2,0(r21)
 c002fc4:	10028b26 	beq	r2,zero,c0039f4 <___vfprintf_internal_r+0xb14>
 c002fc8:	00c00944 	movi	r3,37
 c002fcc:	a823883a 	mov	r17,r21
 c002fd0:	10c0021e 	bne	r2,r3,c002fdc <___vfprintf_internal_r+0xfc>
 c002fd4:	00001406 	br	c003028 <___vfprintf_internal_r+0x148>
 c002fd8:	10c00326 	beq	r2,r3,c002fe8 <___vfprintf_internal_r+0x108>
 c002fdc:	8c400044 	addi	r17,r17,1
 c002fe0:	88800007 	ldb	r2,0(r17)
 c002fe4:	103ffc1e 	bne	r2,zero,c002fd8 <__alt_data_end+0xfc002fd8>
 c002fe8:	8d61c83a 	sub	r16,r17,r21
 c002fec:	80000e26 	beq	r16,zero,c003028 <___vfprintf_internal_r+0x148>
 c002ff0:	d8c02017 	ldw	r3,128(sp)
 c002ff4:	d8801f17 	ldw	r2,124(sp)
 c002ff8:	45400015 	stw	r21,0(r8)
 c002ffc:	1c07883a 	add	r3,r3,r16
 c003000:	10800044 	addi	r2,r2,1
 c003004:	d8c02015 	stw	r3,128(sp)
 c003008:	44000115 	stw	r16,4(r8)
 c00300c:	d8801f15 	stw	r2,124(sp)
 c003010:	00c001c4 	movi	r3,7
 c003014:	1880a916 	blt	r3,r2,c0032bc <___vfprintf_internal_r+0x3dc>
 c003018:	42000204 	addi	r8,r8,8
 c00301c:	d9402f17 	ldw	r5,188(sp)
 c003020:	2c0b883a 	add	r5,r5,r16
 c003024:	d9402f15 	stw	r5,188(sp)
 c003028:	88800007 	ldb	r2,0(r17)
 c00302c:	1000aa26 	beq	r2,zero,c0032d8 <___vfprintf_internal_r+0x3f8>
 c003030:	8d400044 	addi	r21,r17,1
 c003034:	8c400047 	ldb	r17,1(r17)
 c003038:	0021883a 	mov	r16,zero
 c00303c:	00bfffc4 	movi	r2,-1
 c003040:	0025883a 	mov	r18,zero
 c003044:	dc002905 	stb	r16,164(sp)
 c003048:	d8002785 	stb	zero,158(sp)
 c00304c:	d8002b05 	stb	zero,172(sp)
 c003050:	d8802a15 	stw	r2,168(sp)
 c003054:	d8003115 	stw	zero,196(sp)
 c003058:	04c01604 	movi	r19,88
 c00305c:	05800244 	movi	r22,9
 c003060:	9021883a 	mov	r16,r18
 c003064:	4039883a 	mov	fp,r8
 c003068:	ad400044 	addi	r21,r21,1
 c00306c:	88bff804 	addi	r2,r17,-32
 c003070:	98833236 	bltu	r19,r2,c003d3c <___vfprintf_internal_r+0xe5c>
 c003074:	100490ba 	slli	r2,r2,2
 c003078:	00c30034 	movhi	r3,3072
 c00307c:	18cc2304 	addi	r3,r3,12428
 c003080:	10c5883a 	add	r2,r2,r3
 c003084:	10800017 	ldw	r2,0(r2)
 c003088:	1000683a 	jmp	r2
 c00308c:	0c003c34 	orhi	r16,at,240
 c003090:	0c003d3c 	xorhi	r16,at,244
 c003094:	0c003d3c 	xorhi	r16,at,244
 c003098:	0c003c54 	ori	r16,at,241
 c00309c:	0c003d3c 	xorhi	r16,at,244
 c0030a0:	0c003d3c 	xorhi	r16,at,244
 c0030a4:	0c003d3c 	xorhi	r16,at,244
 c0030a8:	0c003d3c 	xorhi	r16,at,244
 c0030ac:	0c003d3c 	xorhi	r16,at,244
 c0030b0:	0c003d3c 	xorhi	r16,at,244
 c0030b4:	0c00333c 	xorhi	r16,at,204
 c0030b8:	0c003b44 	addi	r16,at,237
 c0030bc:	0c003d3c 	xorhi	r16,at,244
 c0030c0:	0c003200 	call	c00320 <__alt_mem_onchip_memory2_0+0xc00320>
 c0030c4:	0c003360 	cmpeqi	r16,at,205
 c0030c8:	0c003d3c 	xorhi	r16,at,244
 c0030cc:	0c0033b0 	cmpltui	r16,at,206
 c0030d0:	0c0033bc 	xorhi	r16,at,206
 c0030d4:	0c0033bc 	xorhi	r16,at,206
 c0030d8:	0c0033bc 	xorhi	r16,at,206
 c0030dc:	0c0033bc 	xorhi	r16,at,206
 c0030e0:	0c0033bc 	xorhi	r16,at,206
 c0030e4:	0c0033bc 	xorhi	r16,at,206
 c0030e8:	0c0033bc 	xorhi	r16,at,206
 c0030ec:	0c0033bc 	xorhi	r16,at,206
 c0030f0:	0c0033bc 	xorhi	r16,at,206
 c0030f4:	0c003d3c 	xorhi	r16,at,244
 c0030f8:	0c003d3c 	xorhi	r16,at,244
 c0030fc:	0c003d3c 	xorhi	r16,at,244
 c003100:	0c003d3c 	xorhi	r16,at,244
 c003104:	0c003d3c 	xorhi	r16,at,244
 c003108:	0c003d3c 	xorhi	r16,at,244
 c00310c:	0c003d3c 	xorhi	r16,at,244
 c003110:	0c003d3c 	xorhi	r16,at,244
 c003114:	0c003d3c 	xorhi	r16,at,244
 c003118:	0c003d3c 	xorhi	r16,at,244
 c00311c:	0c0033f8 	rdprs	r16,at,207
 c003120:	0c0034c0 	call	c0034c <__alt_mem_onchip_memory2_0+0xc0034c>
 c003124:	0c003d3c 	xorhi	r16,at,244
 c003128:	0c0034c0 	call	c0034c <__alt_mem_onchip_memory2_0+0xc0034c>
 c00312c:	0c003d3c 	xorhi	r16,at,244
 c003130:	0c003d3c 	xorhi	r16,at,244
 c003134:	0c003d3c 	xorhi	r16,at,244
 c003138:	0c003d3c 	xorhi	r16,at,244
 c00313c:	0c00356c 	andhi	r16,at,213
 c003140:	0c003d3c 	xorhi	r16,at,244
 c003144:	0c003d3c 	xorhi	r16,at,244
 c003148:	0c003578 	rdprs	r16,at,213
 c00314c:	0c003d3c 	xorhi	r16,at,244
 c003150:	0c003d3c 	xorhi	r16,at,244
 c003154:	0c003d3c 	xorhi	r16,at,244
 c003158:	0c003d3c 	xorhi	r16,at,244
 c00315c:	0c003d3c 	xorhi	r16,at,244
 c003160:	0c0039fc 	xorhi	r16,at,231
 c003164:	0c003d3c 	xorhi	r16,at,244
 c003168:	0c003d3c 	xorhi	r16,at,244
 c00316c:	0c003a68 	cmpgeui	r16,at,233
 c003170:	0c003d3c 	xorhi	r16,at,244
 c003174:	0c003d3c 	xorhi	r16,at,244
 c003178:	0c003d3c 	xorhi	r16,at,244
 c00317c:	0c003d3c 	xorhi	r16,at,244
 c003180:	0c003d3c 	xorhi	r16,at,244
 c003184:	0c003d3c 	xorhi	r16,at,244
 c003188:	0c003d3c 	xorhi	r16,at,244
 c00318c:	0c003d3c 	xorhi	r16,at,244
 c003190:	0c003d3c 	xorhi	r16,at,244
 c003194:	0c003d3c 	xorhi	r16,at,244
 c003198:	0c003ce0 	cmpeqi	r16,at,243
 c00319c:	0c003c60 	cmpeqi	r16,at,241
 c0031a0:	0c0034c0 	call	c0034c <__alt_mem_onchip_memory2_0+0xc0034c>
 c0031a4:	0c0034c0 	call	c0034c <__alt_mem_onchip_memory2_0+0xc0034c>
 c0031a8:	0c0034c0 	call	c0034c <__alt_mem_onchip_memory2_0+0xc0034c>
 c0031ac:	0c003c80 	call	c003c8 <__alt_mem_onchip_memory2_0+0xc003c8>
 c0031b0:	0c003c60 	cmpeqi	r16,at,241
 c0031b4:	0c003d3c 	xorhi	r16,at,244
 c0031b8:	0c003d3c 	xorhi	r16,at,244
 c0031bc:	0c003c8c 	andi	r16,at,242
 c0031c0:	0c003d3c 	xorhi	r16,at,244
 c0031c4:	0c003ca0 	cmpeqi	r16,at,242
 c0031c8:	0c003b24 	muli	r16,at,236
 c0031cc:	0c00320c 	andi	r16,at,200
 c0031d0:	0c003b5c 	xori	r16,at,237
 c0031d4:	0c003d3c 	xorhi	r16,at,244
 c0031d8:	0c003b68 	cmpgeui	r16,at,237
 c0031dc:	0c003d3c 	xorhi	r16,at,244
 c0031e0:	0c003bcc 	andi	r16,at,239
 c0031e4:	0c003d3c 	xorhi	r16,at,244
 c0031e8:	0c003d3c 	xorhi	r16,at,244
 c0031ec:	0c003bec 	andhi	r16,at,239
 c0031f0:	d8c03117 	ldw	r3,196(sp)
 c0031f4:	d8802e15 	stw	r2,184(sp)
 c0031f8:	00c7c83a 	sub	r3,zero,r3
 c0031fc:	d8c03115 	stw	r3,196(sp)
 c003200:	84000114 	ori	r16,r16,4
 c003204:	ac400007 	ldb	r17,0(r21)
 c003208:	003f9706 	br	c003068 <__alt_data_end+0xfc003068>
 c00320c:	00800c04 	movi	r2,48
 c003210:	d8802705 	stb	r2,156(sp)
 c003214:	00801e04 	movi	r2,120
 c003218:	d8802745 	stb	r2,157(sp)
 c00321c:	d9002a17 	ldw	r4,168(sp)
 c003220:	d8802e17 	ldw	r2,184(sp)
 c003224:	d8002785 	stb	zero,158(sp)
 c003228:	e011883a 	mov	r8,fp
 c00322c:	10c00104 	addi	r3,r2,4
 c003230:	14c00017 	ldw	r19,0(r2)
 c003234:	002d883a 	mov	r22,zero
 c003238:	80800094 	ori	r2,r16,2
 c00323c:	2002ca16 	blt	r4,zero,c003d68 <___vfprintf_internal_r+0xe88>
 c003240:	00bfdfc4 	movi	r2,-129
 c003244:	80a4703a 	and	r18,r16,r2
 c003248:	d8c02e15 	stw	r3,184(sp)
 c00324c:	94800094 	ori	r18,r18,2
 c003250:	9802b41e 	bne	r19,zero,c003d24 <___vfprintf_internal_r+0xe44>
 c003254:	01430074 	movhi	r5,3073
 c003258:	294a5804 	addi	r5,r5,10592
 c00325c:	d9403915 	stw	r5,228(sp)
 c003260:	04401e04 	movi	r17,120
 c003264:	d8802a17 	ldw	r2,168(sp)
 c003268:	0039883a 	mov	fp,zero
 c00326c:	1001fa26 	beq	r2,zero,c003a58 <___vfprintf_internal_r+0xb78>
 c003270:	0027883a 	mov	r19,zero
 c003274:	002d883a 	mov	r22,zero
 c003278:	00021906 	br	c003ae0 <___vfprintf_internal_r+0xc00>
 c00327c:	d9002d17 	ldw	r4,180(sp)
 c003280:	b80b883a 	mov	r5,r23
 c003284:	c0052940 	call	c005294 <__swsetup_r>
 c003288:	1005dc1e 	bne	r2,zero,c0049fc <___vfprintf_internal_r+0x1b1c>
 c00328c:	b880030b 	ldhu	r2,12(r23)
 c003290:	00c00284 	movi	r3,10
 c003294:	1080068c 	andi	r2,r2,26
 c003298:	10ff3a1e 	bne	r2,r3,c002f84 <__alt_data_end+0xfc002f84>
 c00329c:	b880038f 	ldh	r2,14(r23)
 c0032a0:	103f3816 	blt	r2,zero,c002f84 <__alt_data_end+0xfc002f84>
 c0032a4:	d9c02e17 	ldw	r7,184(sp)
 c0032a8:	d9002d17 	ldw	r4,180(sp)
 c0032ac:	a80d883a 	mov	r6,r21
 c0032b0:	b80b883a 	mov	r5,r23
 c0032b4:	c0051d80 	call	c0051d8 <__sbprintf>
 c0032b8:	00001106 	br	c003300 <___vfprintf_internal_r+0x420>
 c0032bc:	d9002d17 	ldw	r4,180(sp)
 c0032c0:	d9801e04 	addi	r6,sp,120
 c0032c4:	b80b883a 	mov	r5,r23
 c0032c8:	c00a8280 	call	c00a828 <__sprint_r>
 c0032cc:	1000081e 	bne	r2,zero,c0032f0 <___vfprintf_internal_r+0x410>
 c0032d0:	da000404 	addi	r8,sp,16
 c0032d4:	003f5106 	br	c00301c <__alt_data_end+0xfc00301c>
 c0032d8:	d8802017 	ldw	r2,128(sp)
 c0032dc:	10000426 	beq	r2,zero,c0032f0 <___vfprintf_internal_r+0x410>
 c0032e0:	d9002d17 	ldw	r4,180(sp)
 c0032e4:	d9801e04 	addi	r6,sp,120
 c0032e8:	b80b883a 	mov	r5,r23
 c0032ec:	c00a8280 	call	c00a828 <__sprint_r>
 c0032f0:	b880030b 	ldhu	r2,12(r23)
 c0032f4:	1080100c 	andi	r2,r2,64
 c0032f8:	1005c01e 	bne	r2,zero,c0049fc <___vfprintf_internal_r+0x1b1c>
 c0032fc:	d8802f17 	ldw	r2,188(sp)
 c003300:	dfc04717 	ldw	ra,284(sp)
 c003304:	df004617 	ldw	fp,280(sp)
 c003308:	ddc04517 	ldw	r23,276(sp)
 c00330c:	dd804417 	ldw	r22,272(sp)
 c003310:	dd404317 	ldw	r21,268(sp)
 c003314:	dd004217 	ldw	r20,264(sp)
 c003318:	dcc04117 	ldw	r19,260(sp)
 c00331c:	dc804017 	ldw	r18,256(sp)
 c003320:	dc403f17 	ldw	r17,252(sp)
 c003324:	dc003e17 	ldw	r16,248(sp)
 c003328:	dec04804 	addi	sp,sp,288
 c00332c:	f800283a 	ret
 c003330:	d9002d17 	ldw	r4,180(sp)
 c003334:	c0072a00 	call	c0072a0 <__sinit>
 c003338:	003f0206 	br	c002f44 <__alt_data_end+0xfc002f44>
 c00333c:	d9002e17 	ldw	r4,184(sp)
 c003340:	d9402e17 	ldw	r5,184(sp)
 c003344:	21000017 	ldw	r4,0(r4)
 c003348:	28800104 	addi	r2,r5,4
 c00334c:	d9003115 	stw	r4,196(sp)
 c003350:	203fa716 	blt	r4,zero,c0031f0 <__alt_data_end+0xfc0031f0>
 c003354:	d8802e15 	stw	r2,184(sp)
 c003358:	ac400007 	ldb	r17,0(r21)
 c00335c:	003f4206 	br	c003068 <__alt_data_end+0xfc003068>
 c003360:	ac400007 	ldb	r17,0(r21)
 c003364:	01000a84 	movi	r4,42
 c003368:	a8c00044 	addi	r3,r21,1
 c00336c:	89075826 	beq	r17,r4,c0050d0 <___vfprintf_internal_r+0x21f0>
 c003370:	8cbff404 	addi	r18,r17,-48
 c003374:	b486ae36 	bltu	r22,r18,c004e30 <___vfprintf_internal_r+0x1f50>
 c003378:	0009883a 	mov	r4,zero
 c00337c:	1823883a 	mov	r17,r3
 c003380:	01400284 	movi	r5,10
 c003384:	c002cc00 	call	c002cc0 <__mulsi3>
 c003388:	88c00007 	ldb	r3,0(r17)
 c00338c:	1489883a 	add	r4,r2,r18
 c003390:	8d400044 	addi	r21,r17,1
 c003394:	1cbff404 	addi	r18,r3,-48
 c003398:	a823883a 	mov	r17,r21
 c00339c:	b4bff82e 	bgeu	r22,r18,c003380 <__alt_data_end+0xfc003380>
 c0033a0:	1823883a 	mov	r17,r3
 c0033a4:	2005f616 	blt	r4,zero,c004b80 <___vfprintf_internal_r+0x1ca0>
 c0033a8:	d9002a15 	stw	r4,168(sp)
 c0033ac:	003f2f06 	br	c00306c <__alt_data_end+0xfc00306c>
 c0033b0:	84002014 	ori	r16,r16,128
 c0033b4:	ac400007 	ldb	r17,0(r21)
 c0033b8:	003f2b06 	br	c003068 <__alt_data_end+0xfc003068>
 c0033bc:	8cbff404 	addi	r18,r17,-48
 c0033c0:	d8003115 	stw	zero,196(sp)
 c0033c4:	0009883a 	mov	r4,zero
 c0033c8:	a823883a 	mov	r17,r21
 c0033cc:	01400284 	movi	r5,10
 c0033d0:	c002cc00 	call	c002cc0 <__mulsi3>
 c0033d4:	88c00007 	ldb	r3,0(r17)
 c0033d8:	9089883a 	add	r4,r18,r2
 c0033dc:	ad400044 	addi	r21,r21,1
 c0033e0:	1cbff404 	addi	r18,r3,-48
 c0033e4:	a823883a 	mov	r17,r21
 c0033e8:	b4bff82e 	bgeu	r22,r18,c0033cc <__alt_data_end+0xfc0033cc>
 c0033ec:	1823883a 	mov	r17,r3
 c0033f0:	d9003115 	stw	r4,196(sp)
 c0033f4:	003f1d06 	br	c00306c <__alt_data_end+0xfc00306c>
 c0033f8:	8025883a 	mov	r18,r16
 c0033fc:	dc002903 	ldbu	r16,164(sp)
 c003400:	e011883a 	mov	r8,fp
 c003404:	84003fcc 	andi	r16,r16,255
 c003408:	8007531e 	bne	r16,zero,c005158 <___vfprintf_internal_r+0x2278>
 c00340c:	94800414 	ori	r18,r18,16
 c003410:	9080080c 	andi	r2,r18,32
 c003414:	1003a326 	beq	r2,zero,c0042a4 <___vfprintf_internal_r+0x13c4>
 c003418:	d9002e17 	ldw	r4,184(sp)
 c00341c:	20800117 	ldw	r2,4(r4)
 c003420:	24c00017 	ldw	r19,0(r4)
 c003424:	21000204 	addi	r4,r4,8
 c003428:	d9002e15 	stw	r4,184(sp)
 c00342c:	102d883a 	mov	r22,r2
 c003430:	10047316 	blt	r2,zero,c004600 <___vfprintf_internal_r+0x1720>
 c003434:	d9002a17 	ldw	r4,168(sp)
 c003438:	df002783 	ldbu	fp,158(sp)
 c00343c:	2003e416 	blt	r4,zero,c0043d0 <___vfprintf_internal_r+0x14f0>
 c003440:	00ffdfc4 	movi	r3,-129
 c003444:	9d84b03a 	or	r2,r19,r22
 c003448:	90e4703a 	and	r18,r18,r3
 c00344c:	10018026 	beq	r2,zero,c003a50 <___vfprintf_internal_r+0xb70>
 c003450:	b003ab26 	beq	r22,zero,c004300 <___vfprintf_internal_r+0x1420>
 c003454:	dc402915 	stw	r17,164(sp)
 c003458:	dc001e04 	addi	r16,sp,120
 c00345c:	b023883a 	mov	r17,r22
 c003460:	402d883a 	mov	r22,r8
 c003464:	9809883a 	mov	r4,r19
 c003468:	880b883a 	mov	r5,r17
 c00346c:	01800284 	movi	r6,10
 c003470:	000f883a 	mov	r7,zero
 c003474:	c00cd6c0 	call	c00cd6c <__umoddi3>
 c003478:	10800c04 	addi	r2,r2,48
 c00347c:	843fffc4 	addi	r16,r16,-1
 c003480:	9809883a 	mov	r4,r19
 c003484:	880b883a 	mov	r5,r17
 c003488:	80800005 	stb	r2,0(r16)
 c00348c:	01800284 	movi	r6,10
 c003490:	000f883a 	mov	r7,zero
 c003494:	c00c7700 	call	c00c770 <__udivdi3>
 c003498:	1027883a 	mov	r19,r2
 c00349c:	10c4b03a 	or	r2,r2,r3
 c0034a0:	1823883a 	mov	r17,r3
 c0034a4:	103fef1e 	bne	r2,zero,c003464 <__alt_data_end+0xfc003464>
 c0034a8:	d8c02817 	ldw	r3,160(sp)
 c0034ac:	dc402917 	ldw	r17,164(sp)
 c0034b0:	b011883a 	mov	r8,r22
 c0034b4:	1c07c83a 	sub	r3,r3,r16
 c0034b8:	d8c02b15 	stw	r3,172(sp)
 c0034bc:	00005f06 	br	c00363c <___vfprintf_internal_r+0x75c>
 c0034c0:	8025883a 	mov	r18,r16
 c0034c4:	dc002903 	ldbu	r16,164(sp)
 c0034c8:	e011883a 	mov	r8,fp
 c0034cc:	84003fcc 	andi	r16,r16,255
 c0034d0:	80071e1e 	bne	r16,zero,c00514c <___vfprintf_internal_r+0x226c>
 c0034d4:	9080020c 	andi	r2,r18,8
 c0034d8:	1004af26 	beq	r2,zero,c004798 <___vfprintf_internal_r+0x18b8>
 c0034dc:	d9002e17 	ldw	r4,184(sp)
 c0034e0:	d9402e17 	ldw	r5,184(sp)
 c0034e4:	d8802e17 	ldw	r2,184(sp)
 c0034e8:	21000017 	ldw	r4,0(r4)
 c0034ec:	29400117 	ldw	r5,4(r5)
 c0034f0:	10800204 	addi	r2,r2,8
 c0034f4:	d9003615 	stw	r4,216(sp)
 c0034f8:	d9403815 	stw	r5,224(sp)
 c0034fc:	d8802e15 	stw	r2,184(sp)
 c003500:	d9003617 	ldw	r4,216(sp)
 c003504:	d9403817 	ldw	r5,224(sp)
 c003508:	da003d15 	stw	r8,244(sp)
 c00350c:	04000044 	movi	r16,1
 c003510:	c00a44c0 	call	c00a44c <__fpclassifyd>
 c003514:	da003d17 	ldw	r8,244(sp)
 c003518:	1404441e 	bne	r2,r16,c00462c <___vfprintf_internal_r+0x174c>
 c00351c:	d9003617 	ldw	r4,216(sp)
 c003520:	d9403817 	ldw	r5,224(sp)
 c003524:	000d883a 	mov	r6,zero
 c003528:	000f883a 	mov	r7,zero
 c00352c:	c00e7100 	call	c00e710 <__ledf2>
 c003530:	da003d17 	ldw	r8,244(sp)
 c003534:	1005e316 	blt	r2,zero,c004cc4 <___vfprintf_internal_r+0x1de4>
 c003538:	df002783 	ldbu	fp,158(sp)
 c00353c:	008011c4 	movi	r2,71
 c003540:	1445580e 	bge	r2,r17,c004aa4 <___vfprintf_internal_r+0x1bc4>
 c003544:	04030074 	movhi	r16,3073
 c003548:	840a5004 	addi	r16,r16,10560
 c00354c:	00c000c4 	movi	r3,3
 c003550:	00bfdfc4 	movi	r2,-129
 c003554:	d8c02915 	stw	r3,164(sp)
 c003558:	90a4703a 	and	r18,r18,r2
 c00355c:	d8c02b15 	stw	r3,172(sp)
 c003560:	d8002a15 	stw	zero,168(sp)
 c003564:	d8003215 	stw	zero,200(sp)
 c003568:	00003a06 	br	c003654 <___vfprintf_internal_r+0x774>
 c00356c:	84000214 	ori	r16,r16,8
 c003570:	ac400007 	ldb	r17,0(r21)
 c003574:	003ebc06 	br	c003068 <__alt_data_end+0xfc003068>
 c003578:	8025883a 	mov	r18,r16
 c00357c:	dc002903 	ldbu	r16,164(sp)
 c003580:	e011883a 	mov	r8,fp
 c003584:	84003fcc 	andi	r16,r16,255
 c003588:	8007001e 	bne	r16,zero,c00518c <___vfprintf_internal_r+0x22ac>
 c00358c:	94800414 	ori	r18,r18,16
 c003590:	9080080c 	andi	r2,r18,32
 c003594:	1002fa26 	beq	r2,zero,c004180 <___vfprintf_internal_r+0x12a0>
 c003598:	d9002e17 	ldw	r4,184(sp)
 c00359c:	d9402a17 	ldw	r5,168(sp)
 c0035a0:	d8002785 	stb	zero,158(sp)
 c0035a4:	20800204 	addi	r2,r4,8
 c0035a8:	24c00017 	ldw	r19,0(r4)
 c0035ac:	25800117 	ldw	r22,4(r4)
 c0035b0:	2804b116 	blt	r5,zero,c004878 <___vfprintf_internal_r+0x1998>
 c0035b4:	013fdfc4 	movi	r4,-129
 c0035b8:	9d86b03a 	or	r3,r19,r22
 c0035bc:	d8802e15 	stw	r2,184(sp)
 c0035c0:	9124703a 	and	r18,r18,r4
 c0035c4:	1802fb1e 	bne	r3,zero,c0041b4 <___vfprintf_internal_r+0x12d4>
 c0035c8:	d8c02a17 	ldw	r3,168(sp)
 c0035cc:	0039883a 	mov	fp,zero
 c0035d0:	1805e526 	beq	r3,zero,c004d68 <___vfprintf_internal_r+0x1e88>
 c0035d4:	0027883a 	mov	r19,zero
 c0035d8:	002d883a 	mov	r22,zero
 c0035dc:	dc001e04 	addi	r16,sp,120
 c0035e0:	9806d0fa 	srli	r3,r19,3
 c0035e4:	b008977a 	slli	r4,r22,29
 c0035e8:	b02cd0fa 	srli	r22,r22,3
 c0035ec:	9cc001cc 	andi	r19,r19,7
 c0035f0:	98800c04 	addi	r2,r19,48
 c0035f4:	843fffc4 	addi	r16,r16,-1
 c0035f8:	20e6b03a 	or	r19,r4,r3
 c0035fc:	80800005 	stb	r2,0(r16)
 c003600:	9d86b03a 	or	r3,r19,r22
 c003604:	183ff61e 	bne	r3,zero,c0035e0 <__alt_data_end+0xfc0035e0>
 c003608:	90c0004c 	andi	r3,r18,1
 c00360c:	18014126 	beq	r3,zero,c003b14 <___vfprintf_internal_r+0xc34>
 c003610:	10803fcc 	andi	r2,r2,255
 c003614:	1080201c 	xori	r2,r2,128
 c003618:	10bfe004 	addi	r2,r2,-128
 c00361c:	00c00c04 	movi	r3,48
 c003620:	10c13c26 	beq	r2,r3,c003b14 <___vfprintf_internal_r+0xc34>
 c003624:	80ffffc5 	stb	r3,-1(r16)
 c003628:	d8c02817 	ldw	r3,160(sp)
 c00362c:	80bfffc4 	addi	r2,r16,-1
 c003630:	1021883a 	mov	r16,r2
 c003634:	1887c83a 	sub	r3,r3,r2
 c003638:	d8c02b15 	stw	r3,172(sp)
 c00363c:	d8802b17 	ldw	r2,172(sp)
 c003640:	d9002a17 	ldw	r4,168(sp)
 c003644:	1100010e 	bge	r2,r4,c00364c <___vfprintf_internal_r+0x76c>
 c003648:	2005883a 	mov	r2,r4
 c00364c:	d8802915 	stw	r2,164(sp)
 c003650:	d8003215 	stw	zero,200(sp)
 c003654:	e7003fcc 	andi	fp,fp,255
 c003658:	e700201c 	xori	fp,fp,128
 c00365c:	e73fe004 	addi	fp,fp,-128
 c003660:	e0000326 	beq	fp,zero,c003670 <___vfprintf_internal_r+0x790>
 c003664:	d8c02917 	ldw	r3,164(sp)
 c003668:	18c00044 	addi	r3,r3,1
 c00366c:	d8c02915 	stw	r3,164(sp)
 c003670:	90c0008c 	andi	r3,r18,2
 c003674:	d8c02c15 	stw	r3,176(sp)
 c003678:	18000326 	beq	r3,zero,c003688 <___vfprintf_internal_r+0x7a8>
 c00367c:	d8c02917 	ldw	r3,164(sp)
 c003680:	18c00084 	addi	r3,r3,2
 c003684:	d8c02915 	stw	r3,164(sp)
 c003688:	90c0210c 	andi	r3,r18,132
 c00368c:	d8c03015 	stw	r3,192(sp)
 c003690:	1801c51e 	bne	r3,zero,c003da8 <___vfprintf_internal_r+0xec8>
 c003694:	d9003117 	ldw	r4,196(sp)
 c003698:	d8c02917 	ldw	r3,164(sp)
 c00369c:	20e7c83a 	sub	r19,r4,r3
 c0036a0:	04c1c10e 	bge	zero,r19,c003da8 <___vfprintf_internal_r+0xec8>
 c0036a4:	02400404 	movi	r9,16
 c0036a8:	d8c02017 	ldw	r3,128(sp)
 c0036ac:	d8801f17 	ldw	r2,124(sp)
 c0036b0:	4cc52f0e 	bge	r9,r19,c004b70 <___vfprintf_internal_r+0x1c90>
 c0036b4:	01430074 	movhi	r5,3073
 c0036b8:	294a6384 	addi	r5,r5,10638
 c0036bc:	dc403b15 	stw	r17,236(sp)
 c0036c0:	d9403515 	stw	r5,212(sp)
 c0036c4:	9823883a 	mov	r17,r19
 c0036c8:	482d883a 	mov	r22,r9
 c0036cc:	9027883a 	mov	r19,r18
 c0036d0:	070001c4 	movi	fp,7
 c0036d4:	8025883a 	mov	r18,r16
 c0036d8:	dc002d17 	ldw	r16,180(sp)
 c0036dc:	00000306 	br	c0036ec <___vfprintf_internal_r+0x80c>
 c0036e0:	8c7ffc04 	addi	r17,r17,-16
 c0036e4:	42000204 	addi	r8,r8,8
 c0036e8:	b440130e 	bge	r22,r17,c003738 <___vfprintf_internal_r+0x858>
 c0036ec:	01030074 	movhi	r4,3073
 c0036f0:	18c00404 	addi	r3,r3,16
 c0036f4:	10800044 	addi	r2,r2,1
 c0036f8:	210a6384 	addi	r4,r4,10638
 c0036fc:	41000015 	stw	r4,0(r8)
 c003700:	45800115 	stw	r22,4(r8)
 c003704:	d8c02015 	stw	r3,128(sp)
 c003708:	d8801f15 	stw	r2,124(sp)
 c00370c:	e0bff40e 	bge	fp,r2,c0036e0 <__alt_data_end+0xfc0036e0>
 c003710:	d9801e04 	addi	r6,sp,120
 c003714:	b80b883a 	mov	r5,r23
 c003718:	8009883a 	mov	r4,r16
 c00371c:	c00a8280 	call	c00a828 <__sprint_r>
 c003720:	103ef31e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c003724:	8c7ffc04 	addi	r17,r17,-16
 c003728:	d8c02017 	ldw	r3,128(sp)
 c00372c:	d8801f17 	ldw	r2,124(sp)
 c003730:	da000404 	addi	r8,sp,16
 c003734:	b47fed16 	blt	r22,r17,c0036ec <__alt_data_end+0xfc0036ec>
 c003738:	9021883a 	mov	r16,r18
 c00373c:	9825883a 	mov	r18,r19
 c003740:	8827883a 	mov	r19,r17
 c003744:	dc403b17 	ldw	r17,236(sp)
 c003748:	d9403517 	ldw	r5,212(sp)
 c00374c:	98c7883a 	add	r3,r19,r3
 c003750:	10800044 	addi	r2,r2,1
 c003754:	41400015 	stw	r5,0(r8)
 c003758:	44c00115 	stw	r19,4(r8)
 c00375c:	d8c02015 	stw	r3,128(sp)
 c003760:	d8801f15 	stw	r2,124(sp)
 c003764:	010001c4 	movi	r4,7
 c003768:	2082c516 	blt	r4,r2,c004280 <___vfprintf_internal_r+0x13a0>
 c00376c:	df002787 	ldb	fp,158(sp)
 c003770:	42000204 	addi	r8,r8,8
 c003774:	e0000c26 	beq	fp,zero,c0037a8 <___vfprintf_internal_r+0x8c8>
 c003778:	d8801f17 	ldw	r2,124(sp)
 c00377c:	d9002784 	addi	r4,sp,158
 c003780:	18c00044 	addi	r3,r3,1
 c003784:	10800044 	addi	r2,r2,1
 c003788:	41000015 	stw	r4,0(r8)
 c00378c:	01000044 	movi	r4,1
 c003790:	41000115 	stw	r4,4(r8)
 c003794:	d8c02015 	stw	r3,128(sp)
 c003798:	d8801f15 	stw	r2,124(sp)
 c00379c:	010001c4 	movi	r4,7
 c0037a0:	20825e16 	blt	r4,r2,c00411c <___vfprintf_internal_r+0x123c>
 c0037a4:	42000204 	addi	r8,r8,8
 c0037a8:	d8802c17 	ldw	r2,176(sp)
 c0037ac:	10000c26 	beq	r2,zero,c0037e0 <___vfprintf_internal_r+0x900>
 c0037b0:	d8801f17 	ldw	r2,124(sp)
 c0037b4:	d9002704 	addi	r4,sp,156
 c0037b8:	18c00084 	addi	r3,r3,2
 c0037bc:	10800044 	addi	r2,r2,1
 c0037c0:	41000015 	stw	r4,0(r8)
 c0037c4:	01000084 	movi	r4,2
 c0037c8:	41000115 	stw	r4,4(r8)
 c0037cc:	d8c02015 	stw	r3,128(sp)
 c0037d0:	d8801f15 	stw	r2,124(sp)
 c0037d4:	010001c4 	movi	r4,7
 c0037d8:	20825816 	blt	r4,r2,c00413c <___vfprintf_internal_r+0x125c>
 c0037dc:	42000204 	addi	r8,r8,8
 c0037e0:	d9003017 	ldw	r4,192(sp)
 c0037e4:	00802004 	movi	r2,128
 c0037e8:	2081bb26 	beq	r4,r2,c003ed8 <___vfprintf_internal_r+0xff8>
 c0037ec:	d9402a17 	ldw	r5,168(sp)
 c0037f0:	d8802b17 	ldw	r2,172(sp)
 c0037f4:	28adc83a 	sub	r22,r5,r2
 c0037f8:	0580310e 	bge	zero,r22,c0038c0 <___vfprintf_internal_r+0x9e0>
 c0037fc:	07000404 	movi	fp,16
 c003800:	d8801f17 	ldw	r2,124(sp)
 c003804:	e584360e 	bge	fp,r22,c0048e0 <___vfprintf_internal_r+0x1a00>
 c003808:	01430074 	movhi	r5,3073
 c00380c:	294a5f84 	addi	r5,r5,10622
 c003810:	dc402a15 	stw	r17,168(sp)
 c003814:	d9402c15 	stw	r5,176(sp)
 c003818:	b023883a 	mov	r17,r22
 c00381c:	04c001c4 	movi	r19,7
 c003820:	a82d883a 	mov	r22,r21
 c003824:	902b883a 	mov	r21,r18
 c003828:	8025883a 	mov	r18,r16
 c00382c:	dc002d17 	ldw	r16,180(sp)
 c003830:	00000306 	br	c003840 <___vfprintf_internal_r+0x960>
 c003834:	8c7ffc04 	addi	r17,r17,-16
 c003838:	42000204 	addi	r8,r8,8
 c00383c:	e440110e 	bge	fp,r17,c003884 <___vfprintf_internal_r+0x9a4>
 c003840:	18c00404 	addi	r3,r3,16
 c003844:	10800044 	addi	r2,r2,1
 c003848:	45000015 	stw	r20,0(r8)
 c00384c:	47000115 	stw	fp,4(r8)
 c003850:	d8c02015 	stw	r3,128(sp)
 c003854:	d8801f15 	stw	r2,124(sp)
 c003858:	98bff60e 	bge	r19,r2,c003834 <__alt_data_end+0xfc003834>
 c00385c:	d9801e04 	addi	r6,sp,120
 c003860:	b80b883a 	mov	r5,r23
 c003864:	8009883a 	mov	r4,r16
 c003868:	c00a8280 	call	c00a828 <__sprint_r>
 c00386c:	103ea01e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c003870:	8c7ffc04 	addi	r17,r17,-16
 c003874:	d8c02017 	ldw	r3,128(sp)
 c003878:	d8801f17 	ldw	r2,124(sp)
 c00387c:	da000404 	addi	r8,sp,16
 c003880:	e47fef16 	blt	fp,r17,c003840 <__alt_data_end+0xfc003840>
 c003884:	9021883a 	mov	r16,r18
 c003888:	a825883a 	mov	r18,r21
 c00388c:	b02b883a 	mov	r21,r22
 c003890:	882d883a 	mov	r22,r17
 c003894:	dc402a17 	ldw	r17,168(sp)
 c003898:	d9002c17 	ldw	r4,176(sp)
 c00389c:	1d87883a 	add	r3,r3,r22
 c0038a0:	10800044 	addi	r2,r2,1
 c0038a4:	41000015 	stw	r4,0(r8)
 c0038a8:	45800115 	stw	r22,4(r8)
 c0038ac:	d8c02015 	stw	r3,128(sp)
 c0038b0:	d8801f15 	stw	r2,124(sp)
 c0038b4:	010001c4 	movi	r4,7
 c0038b8:	20821016 	blt	r4,r2,c0040fc <___vfprintf_internal_r+0x121c>
 c0038bc:	42000204 	addi	r8,r8,8
 c0038c0:	9080400c 	andi	r2,r18,256
 c0038c4:	10013a1e 	bne	r2,zero,c003db0 <___vfprintf_internal_r+0xed0>
 c0038c8:	d9402b17 	ldw	r5,172(sp)
 c0038cc:	d8801f17 	ldw	r2,124(sp)
 c0038d0:	44000015 	stw	r16,0(r8)
 c0038d4:	1947883a 	add	r3,r3,r5
 c0038d8:	10800044 	addi	r2,r2,1
 c0038dc:	41400115 	stw	r5,4(r8)
 c0038e0:	d8c02015 	stw	r3,128(sp)
 c0038e4:	d8801f15 	stw	r2,124(sp)
 c0038e8:	010001c4 	movi	r4,7
 c0038ec:	2081f516 	blt	r4,r2,c0040c4 <___vfprintf_internal_r+0x11e4>
 c0038f0:	42000204 	addi	r8,r8,8
 c0038f4:	9480010c 	andi	r18,r18,4
 c0038f8:	90003226 	beq	r18,zero,c0039c4 <___vfprintf_internal_r+0xae4>
 c0038fc:	d9403117 	ldw	r5,196(sp)
 c003900:	d8802917 	ldw	r2,164(sp)
 c003904:	28a1c83a 	sub	r16,r5,r2
 c003908:	04002e0e 	bge	zero,r16,c0039c4 <___vfprintf_internal_r+0xae4>
 c00390c:	04400404 	movi	r17,16
 c003910:	d8801f17 	ldw	r2,124(sp)
 c003914:	8c04c40e 	bge	r17,r16,c004c28 <___vfprintf_internal_r+0x1d48>
 c003918:	01430074 	movhi	r5,3073
 c00391c:	294a6384 	addi	r5,r5,10638
 c003920:	d9403515 	stw	r5,212(sp)
 c003924:	048001c4 	movi	r18,7
 c003928:	dcc02d17 	ldw	r19,180(sp)
 c00392c:	00000306 	br	c00393c <___vfprintf_internal_r+0xa5c>
 c003930:	843ffc04 	addi	r16,r16,-16
 c003934:	42000204 	addi	r8,r8,8
 c003938:	8c00130e 	bge	r17,r16,c003988 <___vfprintf_internal_r+0xaa8>
 c00393c:	01030074 	movhi	r4,3073
 c003940:	18c00404 	addi	r3,r3,16
 c003944:	10800044 	addi	r2,r2,1
 c003948:	210a6384 	addi	r4,r4,10638
 c00394c:	41000015 	stw	r4,0(r8)
 c003950:	44400115 	stw	r17,4(r8)
 c003954:	d8c02015 	stw	r3,128(sp)
 c003958:	d8801f15 	stw	r2,124(sp)
 c00395c:	90bff40e 	bge	r18,r2,c003930 <__alt_data_end+0xfc003930>
 c003960:	d9801e04 	addi	r6,sp,120
 c003964:	b80b883a 	mov	r5,r23
 c003968:	9809883a 	mov	r4,r19
 c00396c:	c00a8280 	call	c00a828 <__sprint_r>
 c003970:	103e5f1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c003974:	843ffc04 	addi	r16,r16,-16
 c003978:	d8c02017 	ldw	r3,128(sp)
 c00397c:	d8801f17 	ldw	r2,124(sp)
 c003980:	da000404 	addi	r8,sp,16
 c003984:	8c3fed16 	blt	r17,r16,c00393c <__alt_data_end+0xfc00393c>
 c003988:	d9403517 	ldw	r5,212(sp)
 c00398c:	1c07883a 	add	r3,r3,r16
 c003990:	10800044 	addi	r2,r2,1
 c003994:	41400015 	stw	r5,0(r8)
 c003998:	44000115 	stw	r16,4(r8)
 c00399c:	d8c02015 	stw	r3,128(sp)
 c0039a0:	d8801f15 	stw	r2,124(sp)
 c0039a4:	010001c4 	movi	r4,7
 c0039a8:	2080060e 	bge	r4,r2,c0039c4 <___vfprintf_internal_r+0xae4>
 c0039ac:	d9002d17 	ldw	r4,180(sp)
 c0039b0:	d9801e04 	addi	r6,sp,120
 c0039b4:	b80b883a 	mov	r5,r23
 c0039b8:	c00a8280 	call	c00a828 <__sprint_r>
 c0039bc:	103e4c1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c0039c0:	d8c02017 	ldw	r3,128(sp)
 c0039c4:	d8803117 	ldw	r2,196(sp)
 c0039c8:	d9002917 	ldw	r4,164(sp)
 c0039cc:	1100010e 	bge	r2,r4,c0039d4 <___vfprintf_internal_r+0xaf4>
 c0039d0:	2005883a 	mov	r2,r4
 c0039d4:	d9402f17 	ldw	r5,188(sp)
 c0039d8:	288b883a 	add	r5,r5,r2
 c0039dc:	d9402f15 	stw	r5,188(sp)
 c0039e0:	1801c01e 	bne	r3,zero,c0040e4 <___vfprintf_internal_r+0x1204>
 c0039e4:	a8800007 	ldb	r2,0(r21)
 c0039e8:	d8001f15 	stw	zero,124(sp)
 c0039ec:	da000404 	addi	r8,sp,16
 c0039f0:	103d751e 	bne	r2,zero,c002fc8 <__alt_data_end+0xfc002fc8>
 c0039f4:	a823883a 	mov	r17,r21
 c0039f8:	003d8b06 	br	c003028 <__alt_data_end+0xfc003028>
 c0039fc:	8025883a 	mov	r18,r16
 c003a00:	dc002903 	ldbu	r16,164(sp)
 c003a04:	e011883a 	mov	r8,fp
 c003a08:	84003fcc 	andi	r16,r16,255
 c003a0c:	8005e51e 	bne	r16,zero,c0051a4 <___vfprintf_internal_r+0x22c4>
 c003a10:	94800414 	ori	r18,r18,16
 c003a14:	9080080c 	andi	r2,r18,32
 c003a18:	10022b26 	beq	r2,zero,c0042c8 <___vfprintf_internal_r+0x13e8>
 c003a1c:	d9002e17 	ldw	r4,184(sp)
 c003a20:	d9402a17 	ldw	r5,168(sp)
 c003a24:	d8002785 	stb	zero,158(sp)
 c003a28:	20c00204 	addi	r3,r4,8
 c003a2c:	24c00017 	ldw	r19,0(r4)
 c003a30:	25800117 	ldw	r22,4(r4)
 c003a34:	28042e16 	blt	r5,zero,c004af0 <___vfprintf_internal_r+0x1c10>
 c003a38:	013fdfc4 	movi	r4,-129
 c003a3c:	9d84b03a 	or	r2,r19,r22
 c003a40:	d8c02e15 	stw	r3,184(sp)
 c003a44:	9124703a 	and	r18,r18,r4
 c003a48:	0039883a 	mov	fp,zero
 c003a4c:	103e801e 	bne	r2,zero,c003450 <__alt_data_end+0xfc003450>
 c003a50:	d9002a17 	ldw	r4,168(sp)
 c003a54:	2002e01e 	bne	r4,zero,c0045d8 <___vfprintf_internal_r+0x16f8>
 c003a58:	d8002a15 	stw	zero,168(sp)
 c003a5c:	d8002b15 	stw	zero,172(sp)
 c003a60:	dc001e04 	addi	r16,sp,120
 c003a64:	003ef506 	br	c00363c <__alt_data_end+0xfc00363c>
 c003a68:	8025883a 	mov	r18,r16
 c003a6c:	dc002903 	ldbu	r16,164(sp)
 c003a70:	e011883a 	mov	r8,fp
 c003a74:	84003fcc 	andi	r16,r16,255
 c003a78:	8005ba1e 	bne	r16,zero,c005164 <___vfprintf_internal_r+0x2284>
 c003a7c:	01030074 	movhi	r4,3073
 c003a80:	210a5304 	addi	r4,r4,10572
 c003a84:	d9003915 	stw	r4,228(sp)
 c003a88:	9080080c 	andi	r2,r18,32
 c003a8c:	10006126 	beq	r2,zero,c003c14 <___vfprintf_internal_r+0xd34>
 c003a90:	d9402e17 	ldw	r5,184(sp)
 c003a94:	2cc00017 	ldw	r19,0(r5)
 c003a98:	2d800117 	ldw	r22,4(r5)
 c003a9c:	29400204 	addi	r5,r5,8
 c003aa0:	d9402e15 	stw	r5,184(sp)
 c003aa4:	9080004c 	andi	r2,r18,1
 c003aa8:	1001ac26 	beq	r2,zero,c00415c <___vfprintf_internal_r+0x127c>
 c003aac:	9d84b03a 	or	r2,r19,r22
 c003ab0:	10038526 	beq	r2,zero,c0048c8 <___vfprintf_internal_r+0x19e8>
 c003ab4:	d8c02a17 	ldw	r3,168(sp)
 c003ab8:	00800c04 	movi	r2,48
 c003abc:	d8802705 	stb	r2,156(sp)
 c003ac0:	dc402745 	stb	r17,157(sp)
 c003ac4:	d8002785 	stb	zero,158(sp)
 c003ac8:	90800094 	ori	r2,r18,2
 c003acc:	18047916 	blt	r3,zero,c004cb4 <___vfprintf_internal_r+0x1dd4>
 c003ad0:	00bfdfc4 	movi	r2,-129
 c003ad4:	90a4703a 	and	r18,r18,r2
 c003ad8:	94800094 	ori	r18,r18,2
 c003adc:	0039883a 	mov	fp,zero
 c003ae0:	d9003917 	ldw	r4,228(sp)
 c003ae4:	dc001e04 	addi	r16,sp,120
 c003ae8:	988003cc 	andi	r2,r19,15
 c003aec:	b006973a 	slli	r3,r22,28
 c003af0:	2085883a 	add	r2,r4,r2
 c003af4:	9826d13a 	srli	r19,r19,4
 c003af8:	10800003 	ldbu	r2,0(r2)
 c003afc:	b02cd13a 	srli	r22,r22,4
 c003b00:	843fffc4 	addi	r16,r16,-1
 c003b04:	1ce6b03a 	or	r19,r3,r19
 c003b08:	80800005 	stb	r2,0(r16)
 c003b0c:	9d84b03a 	or	r2,r19,r22
 c003b10:	103ff51e 	bne	r2,zero,c003ae8 <__alt_data_end+0xfc003ae8>
 c003b14:	d8c02817 	ldw	r3,160(sp)
 c003b18:	1c07c83a 	sub	r3,r3,r16
 c003b1c:	d8c02b15 	stw	r3,172(sp)
 c003b20:	003ec606 	br	c00363c <__alt_data_end+0xfc00363c>
 c003b24:	8025883a 	mov	r18,r16
 c003b28:	dc002903 	ldbu	r16,164(sp)
 c003b2c:	e011883a 	mov	r8,fp
 c003b30:	84003fcc 	andi	r16,r16,255
 c003b34:	803e9626 	beq	r16,zero,c003590 <__alt_data_end+0xfc003590>
 c003b38:	d8c02b03 	ldbu	r3,172(sp)
 c003b3c:	d8c02785 	stb	r3,158(sp)
 c003b40:	003e9306 	br	c003590 <__alt_data_end+0xfc003590>
 c003b44:	00c00044 	movi	r3,1
 c003b48:	d8c02905 	stb	r3,164(sp)
 c003b4c:	00c00ac4 	movi	r3,43
 c003b50:	d8c02b05 	stb	r3,172(sp)
 c003b54:	ac400007 	ldb	r17,0(r21)
 c003b58:	003d4306 	br	c003068 <__alt_data_end+0xfc003068>
 c003b5c:	84000814 	ori	r16,r16,32
 c003b60:	ac400007 	ldb	r17,0(r21)
 c003b64:	003d4006 	br	c003068 <__alt_data_end+0xfc003068>
 c003b68:	d8802e17 	ldw	r2,184(sp)
 c003b6c:	8025883a 	mov	r18,r16
 c003b70:	d8002785 	stb	zero,158(sp)
 c003b74:	14000017 	ldw	r16,0(r2)
 c003b78:	e011883a 	mov	r8,fp
 c003b7c:	14c00104 	addi	r19,r2,4
 c003b80:	80042d26 	beq	r16,zero,c004c38 <___vfprintf_internal_r+0x1d58>
 c003b84:	d8c02a17 	ldw	r3,168(sp)
 c003b88:	1803e416 	blt	r3,zero,c004b1c <___vfprintf_internal_r+0x1c3c>
 c003b8c:	180d883a 	mov	r6,r3
 c003b90:	000b883a 	mov	r5,zero
 c003b94:	8009883a 	mov	r4,r16
 c003b98:	df003d15 	stw	fp,244(sp)
 c003b9c:	c0088180 	call	c008818 <memchr>
 c003ba0:	da003d17 	ldw	r8,244(sp)
 c003ba4:	10046826 	beq	r2,zero,c004d48 <___vfprintf_internal_r+0x1e68>
 c003ba8:	1405c83a 	sub	r2,r2,r16
 c003bac:	d8802b15 	stw	r2,172(sp)
 c003bb0:	1003e016 	blt	r2,zero,c004b34 <___vfprintf_internal_r+0x1c54>
 c003bb4:	df002783 	ldbu	fp,158(sp)
 c003bb8:	d8802915 	stw	r2,164(sp)
 c003bbc:	dcc02e15 	stw	r19,184(sp)
 c003bc0:	d8002a15 	stw	zero,168(sp)
 c003bc4:	d8003215 	stw	zero,200(sp)
 c003bc8:	003ea206 	br	c003654 <__alt_data_end+0xfc003654>
 c003bcc:	8025883a 	mov	r18,r16
 c003bd0:	dc002903 	ldbu	r16,164(sp)
 c003bd4:	e011883a 	mov	r8,fp
 c003bd8:	84003fcc 	andi	r16,r16,255
 c003bdc:	803f8d26 	beq	r16,zero,c003a14 <__alt_data_end+0xfc003a14>
 c003be0:	d8c02b03 	ldbu	r3,172(sp)
 c003be4:	d8c02785 	stb	r3,158(sp)
 c003be8:	003f8a06 	br	c003a14 <__alt_data_end+0xfc003a14>
 c003bec:	8025883a 	mov	r18,r16
 c003bf0:	dc002903 	ldbu	r16,164(sp)
 c003bf4:	e011883a 	mov	r8,fp
 c003bf8:	84003fcc 	andi	r16,r16,255
 c003bfc:	8005661e 	bne	r16,zero,c005198 <___vfprintf_internal_r+0x22b8>
 c003c00:	01030074 	movhi	r4,3073
 c003c04:	210a5804 	addi	r4,r4,10592
 c003c08:	d9003915 	stw	r4,228(sp)
 c003c0c:	9080080c 	andi	r2,r18,32
 c003c10:	103f9f1e 	bne	r2,zero,c003a90 <__alt_data_end+0xfc003a90>
 c003c14:	9080040c 	andi	r2,r18,16
 c003c18:	1002eb26 	beq	r2,zero,c0047c8 <___vfprintf_internal_r+0x18e8>
 c003c1c:	d8802e17 	ldw	r2,184(sp)
 c003c20:	002d883a 	mov	r22,zero
 c003c24:	14c00017 	ldw	r19,0(r2)
 c003c28:	10800104 	addi	r2,r2,4
 c003c2c:	d8802e15 	stw	r2,184(sp)
 c003c30:	003f9c06 	br	c003aa4 <__alt_data_end+0xfc003aa4>
 c003c34:	d8802b07 	ldb	r2,172(sp)
 c003c38:	1002e11e 	bne	r2,zero,c0047c0 <___vfprintf_internal_r+0x18e0>
 c003c3c:	00c00044 	movi	r3,1
 c003c40:	d8c02905 	stb	r3,164(sp)
 c003c44:	00c00804 	movi	r3,32
 c003c48:	d8c02b05 	stb	r3,172(sp)
 c003c4c:	ac400007 	ldb	r17,0(r21)
 c003c50:	003d0506 	br	c003068 <__alt_data_end+0xfc003068>
 c003c54:	84000054 	ori	r16,r16,1
 c003c58:	ac400007 	ldb	r17,0(r21)
 c003c5c:	003d0206 	br	c003068 <__alt_data_end+0xfc003068>
 c003c60:	8025883a 	mov	r18,r16
 c003c64:	dc002903 	ldbu	r16,164(sp)
 c003c68:	e011883a 	mov	r8,fp
 c003c6c:	84003fcc 	andi	r16,r16,255
 c003c70:	803de726 	beq	r16,zero,c003410 <__alt_data_end+0xfc003410>
 c003c74:	d8c02b03 	ldbu	r3,172(sp)
 c003c78:	d8c02785 	stb	r3,158(sp)
 c003c7c:	003de406 	br	c003410 <__alt_data_end+0xfc003410>
 c003c80:	84001014 	ori	r16,r16,64
 c003c84:	ac400007 	ldb	r17,0(r21)
 c003c88:	003cf706 	br	c003068 <__alt_data_end+0xfc003068>
 c003c8c:	ac400007 	ldb	r17,0(r21)
 c003c90:	00801b04 	movi	r2,108
 c003c94:	88838f26 	beq	r17,r2,c004ad4 <___vfprintf_internal_r+0x1bf4>
 c003c98:	84000414 	ori	r16,r16,16
 c003c9c:	003cf206 	br	c003068 <__alt_data_end+0xfc003068>
 c003ca0:	8025883a 	mov	r18,r16
 c003ca4:	dc002903 	ldbu	r16,164(sp)
 c003ca8:	e011883a 	mov	r8,fp
 c003cac:	84003fcc 	andi	r16,r16,255
 c003cb0:	80053f1e 	bne	r16,zero,c0051b0 <___vfprintf_internal_r+0x22d0>
 c003cb4:	9080080c 	andi	r2,r18,32
 c003cb8:	1002d226 	beq	r2,zero,c004804 <___vfprintf_internal_r+0x1924>
 c003cbc:	d9002e17 	ldw	r4,184(sp)
 c003cc0:	d9402f17 	ldw	r5,188(sp)
 c003cc4:	20800017 	ldw	r2,0(r4)
 c003cc8:	2807d7fa 	srai	r3,r5,31
 c003ccc:	21000104 	addi	r4,r4,4
 c003cd0:	d9002e15 	stw	r4,184(sp)
 c003cd4:	11400015 	stw	r5,0(r2)
 c003cd8:	10c00115 	stw	r3,4(r2)
 c003cdc:	003cb806 	br	c002fc0 <__alt_data_end+0xfc002fc0>
 c003ce0:	d8c02e17 	ldw	r3,184(sp)
 c003ce4:	d9002e17 	ldw	r4,184(sp)
 c003ce8:	8025883a 	mov	r18,r16
 c003cec:	18800017 	ldw	r2,0(r3)
 c003cf0:	21000104 	addi	r4,r4,4
 c003cf4:	00c00044 	movi	r3,1
 c003cf8:	e011883a 	mov	r8,fp
 c003cfc:	d8c02915 	stw	r3,164(sp)
 c003d00:	d8002785 	stb	zero,158(sp)
 c003d04:	d8801405 	stb	r2,80(sp)
 c003d08:	d9002e15 	stw	r4,184(sp)
 c003d0c:	d8c02b15 	stw	r3,172(sp)
 c003d10:	d8002a15 	stw	zero,168(sp)
 c003d14:	d8003215 	stw	zero,200(sp)
 c003d18:	dc001404 	addi	r16,sp,80
 c003d1c:	0039883a 	mov	fp,zero
 c003d20:	003e5306 	br	c003670 <__alt_data_end+0xfc003670>
 c003d24:	01030074 	movhi	r4,3073
 c003d28:	210a5804 	addi	r4,r4,10592
 c003d2c:	0039883a 	mov	fp,zero
 c003d30:	d9003915 	stw	r4,228(sp)
 c003d34:	04401e04 	movi	r17,120
 c003d38:	003f6906 	br	c003ae0 <__alt_data_end+0xfc003ae0>
 c003d3c:	8025883a 	mov	r18,r16
 c003d40:	dc002903 	ldbu	r16,164(sp)
 c003d44:	e011883a 	mov	r8,fp
 c003d48:	84003fcc 	andi	r16,r16,255
 c003d4c:	8005081e 	bne	r16,zero,c005170 <___vfprintf_internal_r+0x2290>
 c003d50:	883d6126 	beq	r17,zero,c0032d8 <__alt_data_end+0xfc0032d8>
 c003d54:	00c00044 	movi	r3,1
 c003d58:	d8c02915 	stw	r3,164(sp)
 c003d5c:	dc401405 	stb	r17,80(sp)
 c003d60:	d8002785 	stb	zero,158(sp)
 c003d64:	003fe906 	br	c003d0c <__alt_data_end+0xfc003d0c>
 c003d68:	01430074 	movhi	r5,3073
 c003d6c:	294a5804 	addi	r5,r5,10592
 c003d70:	d9403915 	stw	r5,228(sp)
 c003d74:	d8c02e15 	stw	r3,184(sp)
 c003d78:	1025883a 	mov	r18,r2
 c003d7c:	04401e04 	movi	r17,120
 c003d80:	9d84b03a 	or	r2,r19,r22
 c003d84:	1000fc1e 	bne	r2,zero,c004178 <___vfprintf_internal_r+0x1298>
 c003d88:	0039883a 	mov	fp,zero
 c003d8c:	00800084 	movi	r2,2
 c003d90:	10803fcc 	andi	r2,r2,255
 c003d94:	00c00044 	movi	r3,1
 c003d98:	10c20f26 	beq	r2,r3,c0045d8 <___vfprintf_internal_r+0x16f8>
 c003d9c:	00c00084 	movi	r3,2
 c003da0:	10fd3326 	beq	r2,r3,c003270 <__alt_data_end+0xfc003270>
 c003da4:	003e0b06 	br	c0035d4 <__alt_data_end+0xfc0035d4>
 c003da8:	d8c02017 	ldw	r3,128(sp)
 c003dac:	003e7106 	br	c003774 <__alt_data_end+0xfc003774>
 c003db0:	00801944 	movi	r2,101
 c003db4:	14407e0e 	bge	r2,r17,c003fb0 <___vfprintf_internal_r+0x10d0>
 c003db8:	d9003617 	ldw	r4,216(sp)
 c003dbc:	d9403817 	ldw	r5,224(sp)
 c003dc0:	000d883a 	mov	r6,zero
 c003dc4:	000f883a 	mov	r7,zero
 c003dc8:	d8c03c15 	stw	r3,240(sp)
 c003dcc:	da003d15 	stw	r8,244(sp)
 c003dd0:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c003dd4:	d8c03c17 	ldw	r3,240(sp)
 c003dd8:	da003d17 	ldw	r8,244(sp)
 c003ddc:	1000f71e 	bne	r2,zero,c0041bc <___vfprintf_internal_r+0x12dc>
 c003de0:	d8801f17 	ldw	r2,124(sp)
 c003de4:	01030074 	movhi	r4,3073
 c003de8:	210a5f04 	addi	r4,r4,10620
 c003dec:	18c00044 	addi	r3,r3,1
 c003df0:	10800044 	addi	r2,r2,1
 c003df4:	41000015 	stw	r4,0(r8)
 c003df8:	01000044 	movi	r4,1
 c003dfc:	41000115 	stw	r4,4(r8)
 c003e00:	d8c02015 	stw	r3,128(sp)
 c003e04:	d8801f15 	stw	r2,124(sp)
 c003e08:	010001c4 	movi	r4,7
 c003e0c:	2082b816 	blt	r4,r2,c0048f0 <___vfprintf_internal_r+0x1a10>
 c003e10:	42000204 	addi	r8,r8,8
 c003e14:	d8802617 	ldw	r2,152(sp)
 c003e18:	d9403317 	ldw	r5,204(sp)
 c003e1c:	11400216 	blt	r2,r5,c003e28 <___vfprintf_internal_r+0xf48>
 c003e20:	9080004c 	andi	r2,r18,1
 c003e24:	103eb326 	beq	r2,zero,c0038f4 <__alt_data_end+0xfc0038f4>
 c003e28:	d8803717 	ldw	r2,220(sp)
 c003e2c:	d9003417 	ldw	r4,208(sp)
 c003e30:	d9403717 	ldw	r5,220(sp)
 c003e34:	1887883a 	add	r3,r3,r2
 c003e38:	d8801f17 	ldw	r2,124(sp)
 c003e3c:	41000015 	stw	r4,0(r8)
 c003e40:	41400115 	stw	r5,4(r8)
 c003e44:	10800044 	addi	r2,r2,1
 c003e48:	d8c02015 	stw	r3,128(sp)
 c003e4c:	d8801f15 	stw	r2,124(sp)
 c003e50:	010001c4 	movi	r4,7
 c003e54:	20832916 	blt	r4,r2,c004afc <___vfprintf_internal_r+0x1c1c>
 c003e58:	42000204 	addi	r8,r8,8
 c003e5c:	d8803317 	ldw	r2,204(sp)
 c003e60:	143fffc4 	addi	r16,r2,-1
 c003e64:	043ea30e 	bge	zero,r16,c0038f4 <__alt_data_end+0xfc0038f4>
 c003e68:	04400404 	movi	r17,16
 c003e6c:	d8801f17 	ldw	r2,124(sp)
 c003e70:	8c00880e 	bge	r17,r16,c004094 <___vfprintf_internal_r+0x11b4>
 c003e74:	01430074 	movhi	r5,3073
 c003e78:	294a5f84 	addi	r5,r5,10622
 c003e7c:	d9402c15 	stw	r5,176(sp)
 c003e80:	058001c4 	movi	r22,7
 c003e84:	dcc02d17 	ldw	r19,180(sp)
 c003e88:	00000306 	br	c003e98 <___vfprintf_internal_r+0xfb8>
 c003e8c:	42000204 	addi	r8,r8,8
 c003e90:	843ffc04 	addi	r16,r16,-16
 c003e94:	8c00820e 	bge	r17,r16,c0040a0 <___vfprintf_internal_r+0x11c0>
 c003e98:	18c00404 	addi	r3,r3,16
 c003e9c:	10800044 	addi	r2,r2,1
 c003ea0:	45000015 	stw	r20,0(r8)
 c003ea4:	44400115 	stw	r17,4(r8)
 c003ea8:	d8c02015 	stw	r3,128(sp)
 c003eac:	d8801f15 	stw	r2,124(sp)
 c003eb0:	b0bff60e 	bge	r22,r2,c003e8c <__alt_data_end+0xfc003e8c>
 c003eb4:	d9801e04 	addi	r6,sp,120
 c003eb8:	b80b883a 	mov	r5,r23
 c003ebc:	9809883a 	mov	r4,r19
 c003ec0:	c00a8280 	call	c00a828 <__sprint_r>
 c003ec4:	103d0a1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c003ec8:	d8c02017 	ldw	r3,128(sp)
 c003ecc:	d8801f17 	ldw	r2,124(sp)
 c003ed0:	da000404 	addi	r8,sp,16
 c003ed4:	003fee06 	br	c003e90 <__alt_data_end+0xfc003e90>
 c003ed8:	d9403117 	ldw	r5,196(sp)
 c003edc:	d8802917 	ldw	r2,164(sp)
 c003ee0:	28adc83a 	sub	r22,r5,r2
 c003ee4:	05be410e 	bge	zero,r22,c0037ec <__alt_data_end+0xfc0037ec>
 c003ee8:	07000404 	movi	fp,16
 c003eec:	d8801f17 	ldw	r2,124(sp)
 c003ef0:	e5838f0e 	bge	fp,r22,c004d30 <___vfprintf_internal_r+0x1e50>
 c003ef4:	01430074 	movhi	r5,3073
 c003ef8:	294a5f84 	addi	r5,r5,10622
 c003efc:	dc403015 	stw	r17,192(sp)
 c003f00:	d9402c15 	stw	r5,176(sp)
 c003f04:	b023883a 	mov	r17,r22
 c003f08:	04c001c4 	movi	r19,7
 c003f0c:	a82d883a 	mov	r22,r21
 c003f10:	902b883a 	mov	r21,r18
 c003f14:	8025883a 	mov	r18,r16
 c003f18:	dc002d17 	ldw	r16,180(sp)
 c003f1c:	00000306 	br	c003f2c <___vfprintf_internal_r+0x104c>
 c003f20:	8c7ffc04 	addi	r17,r17,-16
 c003f24:	42000204 	addi	r8,r8,8
 c003f28:	e440110e 	bge	fp,r17,c003f70 <___vfprintf_internal_r+0x1090>
 c003f2c:	18c00404 	addi	r3,r3,16
 c003f30:	10800044 	addi	r2,r2,1
 c003f34:	45000015 	stw	r20,0(r8)
 c003f38:	47000115 	stw	fp,4(r8)
 c003f3c:	d8c02015 	stw	r3,128(sp)
 c003f40:	d8801f15 	stw	r2,124(sp)
 c003f44:	98bff60e 	bge	r19,r2,c003f20 <__alt_data_end+0xfc003f20>
 c003f48:	d9801e04 	addi	r6,sp,120
 c003f4c:	b80b883a 	mov	r5,r23
 c003f50:	8009883a 	mov	r4,r16
 c003f54:	c00a8280 	call	c00a828 <__sprint_r>
 c003f58:	103ce51e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c003f5c:	8c7ffc04 	addi	r17,r17,-16
 c003f60:	d8c02017 	ldw	r3,128(sp)
 c003f64:	d8801f17 	ldw	r2,124(sp)
 c003f68:	da000404 	addi	r8,sp,16
 c003f6c:	e47fef16 	blt	fp,r17,c003f2c <__alt_data_end+0xfc003f2c>
 c003f70:	9021883a 	mov	r16,r18
 c003f74:	a825883a 	mov	r18,r21
 c003f78:	b02b883a 	mov	r21,r22
 c003f7c:	882d883a 	mov	r22,r17
 c003f80:	dc403017 	ldw	r17,192(sp)
 c003f84:	d9002c17 	ldw	r4,176(sp)
 c003f88:	1d87883a 	add	r3,r3,r22
 c003f8c:	10800044 	addi	r2,r2,1
 c003f90:	41000015 	stw	r4,0(r8)
 c003f94:	45800115 	stw	r22,4(r8)
 c003f98:	d8c02015 	stw	r3,128(sp)
 c003f9c:	d8801f15 	stw	r2,124(sp)
 c003fa0:	010001c4 	movi	r4,7
 c003fa4:	20818e16 	blt	r4,r2,c0045e0 <___vfprintf_internal_r+0x1700>
 c003fa8:	42000204 	addi	r8,r8,8
 c003fac:	003e0f06 	br	c0037ec <__alt_data_end+0xfc0037ec>
 c003fb0:	d9403317 	ldw	r5,204(sp)
 c003fb4:	00800044 	movi	r2,1
 c003fb8:	18c00044 	addi	r3,r3,1
 c003fbc:	1141530e 	bge	r2,r5,c00450c <___vfprintf_internal_r+0x162c>
 c003fc0:	dc401f17 	ldw	r17,124(sp)
 c003fc4:	00800044 	movi	r2,1
 c003fc8:	40800115 	stw	r2,4(r8)
 c003fcc:	8c400044 	addi	r17,r17,1
 c003fd0:	44000015 	stw	r16,0(r8)
 c003fd4:	d8c02015 	stw	r3,128(sp)
 c003fd8:	dc401f15 	stw	r17,124(sp)
 c003fdc:	008001c4 	movi	r2,7
 c003fe0:	14416b16 	blt	r2,r17,c004590 <___vfprintf_internal_r+0x16b0>
 c003fe4:	42000204 	addi	r8,r8,8
 c003fe8:	d8803717 	ldw	r2,220(sp)
 c003fec:	d9003417 	ldw	r4,208(sp)
 c003ff0:	8c400044 	addi	r17,r17,1
 c003ff4:	10c7883a 	add	r3,r2,r3
 c003ff8:	40800115 	stw	r2,4(r8)
 c003ffc:	41000015 	stw	r4,0(r8)
 c004000:	d8c02015 	stw	r3,128(sp)
 c004004:	dc401f15 	stw	r17,124(sp)
 c004008:	008001c4 	movi	r2,7
 c00400c:	14416916 	blt	r2,r17,c0045b4 <___vfprintf_internal_r+0x16d4>
 c004010:	45800204 	addi	r22,r8,8
 c004014:	d9003617 	ldw	r4,216(sp)
 c004018:	d9403817 	ldw	r5,224(sp)
 c00401c:	000d883a 	mov	r6,zero
 c004020:	000f883a 	mov	r7,zero
 c004024:	d8c03c15 	stw	r3,240(sp)
 c004028:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c00402c:	d8c03c17 	ldw	r3,240(sp)
 c004030:	1000bc26 	beq	r2,zero,c004324 <___vfprintf_internal_r+0x1444>
 c004034:	d9403317 	ldw	r5,204(sp)
 c004038:	84000044 	addi	r16,r16,1
 c00403c:	8c400044 	addi	r17,r17,1
 c004040:	28bfffc4 	addi	r2,r5,-1
 c004044:	1887883a 	add	r3,r3,r2
 c004048:	b0800115 	stw	r2,4(r22)
 c00404c:	b4000015 	stw	r16,0(r22)
 c004050:	d8c02015 	stw	r3,128(sp)
 c004054:	dc401f15 	stw	r17,124(sp)
 c004058:	008001c4 	movi	r2,7
 c00405c:	14414316 	blt	r2,r17,c00456c <___vfprintf_internal_r+0x168c>
 c004060:	b5800204 	addi	r22,r22,8
 c004064:	d9003a17 	ldw	r4,232(sp)
 c004068:	df0022c4 	addi	fp,sp,139
 c00406c:	8c400044 	addi	r17,r17,1
 c004070:	20c7883a 	add	r3,r4,r3
 c004074:	b7000015 	stw	fp,0(r22)
 c004078:	b1000115 	stw	r4,4(r22)
 c00407c:	d8c02015 	stw	r3,128(sp)
 c004080:	dc401f15 	stw	r17,124(sp)
 c004084:	008001c4 	movi	r2,7
 c004088:	14400e16 	blt	r2,r17,c0040c4 <___vfprintf_internal_r+0x11e4>
 c00408c:	b2000204 	addi	r8,r22,8
 c004090:	003e1806 	br	c0038f4 <__alt_data_end+0xfc0038f4>
 c004094:	01030074 	movhi	r4,3073
 c004098:	210a5f84 	addi	r4,r4,10622
 c00409c:	d9002c15 	stw	r4,176(sp)
 c0040a0:	d9002c17 	ldw	r4,176(sp)
 c0040a4:	1c07883a 	add	r3,r3,r16
 c0040a8:	44000115 	stw	r16,4(r8)
 c0040ac:	41000015 	stw	r4,0(r8)
 c0040b0:	10800044 	addi	r2,r2,1
 c0040b4:	d8c02015 	stw	r3,128(sp)
 c0040b8:	d8801f15 	stw	r2,124(sp)
 c0040bc:	010001c4 	movi	r4,7
 c0040c0:	20be0b0e 	bge	r4,r2,c0038f0 <__alt_data_end+0xfc0038f0>
 c0040c4:	d9002d17 	ldw	r4,180(sp)
 c0040c8:	d9801e04 	addi	r6,sp,120
 c0040cc:	b80b883a 	mov	r5,r23
 c0040d0:	c00a8280 	call	c00a828 <__sprint_r>
 c0040d4:	103c861e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c0040d8:	d8c02017 	ldw	r3,128(sp)
 c0040dc:	da000404 	addi	r8,sp,16
 c0040e0:	003e0406 	br	c0038f4 <__alt_data_end+0xfc0038f4>
 c0040e4:	d9002d17 	ldw	r4,180(sp)
 c0040e8:	d9801e04 	addi	r6,sp,120
 c0040ec:	b80b883a 	mov	r5,r23
 c0040f0:	c00a8280 	call	c00a828 <__sprint_r>
 c0040f4:	103e3b26 	beq	r2,zero,c0039e4 <__alt_data_end+0xfc0039e4>
 c0040f8:	003c7d06 	br	c0032f0 <__alt_data_end+0xfc0032f0>
 c0040fc:	d9002d17 	ldw	r4,180(sp)
 c004100:	d9801e04 	addi	r6,sp,120
 c004104:	b80b883a 	mov	r5,r23
 c004108:	c00a8280 	call	c00a828 <__sprint_r>
 c00410c:	103c781e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004110:	d8c02017 	ldw	r3,128(sp)
 c004114:	da000404 	addi	r8,sp,16
 c004118:	003de906 	br	c0038c0 <__alt_data_end+0xfc0038c0>
 c00411c:	d9002d17 	ldw	r4,180(sp)
 c004120:	d9801e04 	addi	r6,sp,120
 c004124:	b80b883a 	mov	r5,r23
 c004128:	c00a8280 	call	c00a828 <__sprint_r>
 c00412c:	103c701e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004130:	d8c02017 	ldw	r3,128(sp)
 c004134:	da000404 	addi	r8,sp,16
 c004138:	003d9b06 	br	c0037a8 <__alt_data_end+0xfc0037a8>
 c00413c:	d9002d17 	ldw	r4,180(sp)
 c004140:	d9801e04 	addi	r6,sp,120
 c004144:	b80b883a 	mov	r5,r23
 c004148:	c00a8280 	call	c00a828 <__sprint_r>
 c00414c:	103c681e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004150:	d8c02017 	ldw	r3,128(sp)
 c004154:	da000404 	addi	r8,sp,16
 c004158:	003da106 	br	c0037e0 <__alt_data_end+0xfc0037e0>
 c00415c:	d9402a17 	ldw	r5,168(sp)
 c004160:	d8002785 	stb	zero,158(sp)
 c004164:	283f0616 	blt	r5,zero,c003d80 <__alt_data_end+0xfc003d80>
 c004168:	00ffdfc4 	movi	r3,-129
 c00416c:	9d84b03a 	or	r2,r19,r22
 c004170:	90e4703a 	and	r18,r18,r3
 c004174:	103c3b26 	beq	r2,zero,c003264 <__alt_data_end+0xfc003264>
 c004178:	0039883a 	mov	fp,zero
 c00417c:	003e5806 	br	c003ae0 <__alt_data_end+0xfc003ae0>
 c004180:	9080040c 	andi	r2,r18,16
 c004184:	1001b326 	beq	r2,zero,c004854 <___vfprintf_internal_r+0x1974>
 c004188:	d8c02e17 	ldw	r3,184(sp)
 c00418c:	d9002a17 	ldw	r4,168(sp)
 c004190:	d8002785 	stb	zero,158(sp)
 c004194:	18800104 	addi	r2,r3,4
 c004198:	1cc00017 	ldw	r19,0(r3)
 c00419c:	002d883a 	mov	r22,zero
 c0041a0:	2001b516 	blt	r4,zero,c004878 <___vfprintf_internal_r+0x1998>
 c0041a4:	00ffdfc4 	movi	r3,-129
 c0041a8:	d8802e15 	stw	r2,184(sp)
 c0041ac:	90e4703a 	and	r18,r18,r3
 c0041b0:	983d0526 	beq	r19,zero,c0035c8 <__alt_data_end+0xfc0035c8>
 c0041b4:	0039883a 	mov	fp,zero
 c0041b8:	003d0806 	br	c0035dc <__alt_data_end+0xfc0035dc>
 c0041bc:	dc402617 	ldw	r17,152(sp)
 c0041c0:	0441d30e 	bge	zero,r17,c004910 <___vfprintf_internal_r+0x1a30>
 c0041c4:	dc403217 	ldw	r17,200(sp)
 c0041c8:	d8803317 	ldw	r2,204(sp)
 c0041cc:	1440010e 	bge	r2,r17,c0041d4 <___vfprintf_internal_r+0x12f4>
 c0041d0:	1023883a 	mov	r17,r2
 c0041d4:	04400a0e 	bge	zero,r17,c004200 <___vfprintf_internal_r+0x1320>
 c0041d8:	d8801f17 	ldw	r2,124(sp)
 c0041dc:	1c47883a 	add	r3,r3,r17
 c0041e0:	44000015 	stw	r16,0(r8)
 c0041e4:	10800044 	addi	r2,r2,1
 c0041e8:	44400115 	stw	r17,4(r8)
 c0041ec:	d8c02015 	stw	r3,128(sp)
 c0041f0:	d8801f15 	stw	r2,124(sp)
 c0041f4:	010001c4 	movi	r4,7
 c0041f8:	20826516 	blt	r4,r2,c004b90 <___vfprintf_internal_r+0x1cb0>
 c0041fc:	42000204 	addi	r8,r8,8
 c004200:	88026116 	blt	r17,zero,c004b88 <___vfprintf_internal_r+0x1ca8>
 c004204:	d9003217 	ldw	r4,200(sp)
 c004208:	2463c83a 	sub	r17,r4,r17
 c00420c:	04407b0e 	bge	zero,r17,c0043fc <___vfprintf_internal_r+0x151c>
 c004210:	05800404 	movi	r22,16
 c004214:	d8801f17 	ldw	r2,124(sp)
 c004218:	b4419d0e 	bge	r22,r17,c004890 <___vfprintf_internal_r+0x19b0>
 c00421c:	01030074 	movhi	r4,3073
 c004220:	210a5f84 	addi	r4,r4,10622
 c004224:	d9002c15 	stw	r4,176(sp)
 c004228:	070001c4 	movi	fp,7
 c00422c:	dcc02d17 	ldw	r19,180(sp)
 c004230:	00000306 	br	c004240 <___vfprintf_internal_r+0x1360>
 c004234:	42000204 	addi	r8,r8,8
 c004238:	8c7ffc04 	addi	r17,r17,-16
 c00423c:	b441970e 	bge	r22,r17,c00489c <___vfprintf_internal_r+0x19bc>
 c004240:	18c00404 	addi	r3,r3,16
 c004244:	10800044 	addi	r2,r2,1
 c004248:	45000015 	stw	r20,0(r8)
 c00424c:	45800115 	stw	r22,4(r8)
 c004250:	d8c02015 	stw	r3,128(sp)
 c004254:	d8801f15 	stw	r2,124(sp)
 c004258:	e0bff60e 	bge	fp,r2,c004234 <__alt_data_end+0xfc004234>
 c00425c:	d9801e04 	addi	r6,sp,120
 c004260:	b80b883a 	mov	r5,r23
 c004264:	9809883a 	mov	r4,r19
 c004268:	c00a8280 	call	c00a828 <__sprint_r>
 c00426c:	103c201e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004270:	d8c02017 	ldw	r3,128(sp)
 c004274:	d8801f17 	ldw	r2,124(sp)
 c004278:	da000404 	addi	r8,sp,16
 c00427c:	003fee06 	br	c004238 <__alt_data_end+0xfc004238>
 c004280:	d9002d17 	ldw	r4,180(sp)
 c004284:	d9801e04 	addi	r6,sp,120
 c004288:	b80b883a 	mov	r5,r23
 c00428c:	c00a8280 	call	c00a828 <__sprint_r>
 c004290:	103c171e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004294:	d8c02017 	ldw	r3,128(sp)
 c004298:	df002787 	ldb	fp,158(sp)
 c00429c:	da000404 	addi	r8,sp,16
 c0042a0:	003d3406 	br	c003774 <__alt_data_end+0xfc003774>
 c0042a4:	9080040c 	andi	r2,r18,16
 c0042a8:	10016126 	beq	r2,zero,c004830 <___vfprintf_internal_r+0x1950>
 c0042ac:	d9402e17 	ldw	r5,184(sp)
 c0042b0:	2cc00017 	ldw	r19,0(r5)
 c0042b4:	29400104 	addi	r5,r5,4
 c0042b8:	d9402e15 	stw	r5,184(sp)
 c0042bc:	982dd7fa 	srai	r22,r19,31
 c0042c0:	b005883a 	mov	r2,r22
 c0042c4:	003c5a06 	br	c003430 <__alt_data_end+0xfc003430>
 c0042c8:	9080040c 	andi	r2,r18,16
 c0042cc:	10003526 	beq	r2,zero,c0043a4 <___vfprintf_internal_r+0x14c4>
 c0042d0:	d8c02e17 	ldw	r3,184(sp)
 c0042d4:	d9002a17 	ldw	r4,168(sp)
 c0042d8:	d8002785 	stb	zero,158(sp)
 c0042dc:	18800104 	addi	r2,r3,4
 c0042e0:	1cc00017 	ldw	r19,0(r3)
 c0042e4:	002d883a 	mov	r22,zero
 c0042e8:	20003716 	blt	r4,zero,c0043c8 <___vfprintf_internal_r+0x14e8>
 c0042ec:	00ffdfc4 	movi	r3,-129
 c0042f0:	d8802e15 	stw	r2,184(sp)
 c0042f4:	90e4703a 	and	r18,r18,r3
 c0042f8:	0039883a 	mov	fp,zero
 c0042fc:	983dd426 	beq	r19,zero,c003a50 <__alt_data_end+0xfc003a50>
 c004300:	00800244 	movi	r2,9
 c004304:	14fc5336 	bltu	r2,r19,c003454 <__alt_data_end+0xfc003454>
 c004308:	d8c02817 	ldw	r3,160(sp)
 c00430c:	dc001dc4 	addi	r16,sp,119
 c004310:	9cc00c04 	addi	r19,r19,48
 c004314:	1c07c83a 	sub	r3,r3,r16
 c004318:	dcc01dc5 	stb	r19,119(sp)
 c00431c:	d8c02b15 	stw	r3,172(sp)
 c004320:	003cc606 	br	c00363c <__alt_data_end+0xfc00363c>
 c004324:	d8803317 	ldw	r2,204(sp)
 c004328:	143fffc4 	addi	r16,r2,-1
 c00432c:	043f4d0e 	bge	zero,r16,c004064 <__alt_data_end+0xfc004064>
 c004330:	07000404 	movi	fp,16
 c004334:	e400810e 	bge	fp,r16,c00453c <___vfprintf_internal_r+0x165c>
 c004338:	01430074 	movhi	r5,3073
 c00433c:	294a5f84 	addi	r5,r5,10622
 c004340:	d9402c15 	stw	r5,176(sp)
 c004344:	01c001c4 	movi	r7,7
 c004348:	dcc02d17 	ldw	r19,180(sp)
 c00434c:	00000306 	br	c00435c <___vfprintf_internal_r+0x147c>
 c004350:	b5800204 	addi	r22,r22,8
 c004354:	843ffc04 	addi	r16,r16,-16
 c004358:	e4007b0e 	bge	fp,r16,c004548 <___vfprintf_internal_r+0x1668>
 c00435c:	18c00404 	addi	r3,r3,16
 c004360:	8c400044 	addi	r17,r17,1
 c004364:	b5000015 	stw	r20,0(r22)
 c004368:	b7000115 	stw	fp,4(r22)
 c00436c:	d8c02015 	stw	r3,128(sp)
 c004370:	dc401f15 	stw	r17,124(sp)
 c004374:	3c7ff60e 	bge	r7,r17,c004350 <__alt_data_end+0xfc004350>
 c004378:	d9801e04 	addi	r6,sp,120
 c00437c:	b80b883a 	mov	r5,r23
 c004380:	9809883a 	mov	r4,r19
 c004384:	d9c03c15 	stw	r7,240(sp)
 c004388:	c00a8280 	call	c00a828 <__sprint_r>
 c00438c:	d9c03c17 	ldw	r7,240(sp)
 c004390:	103bd71e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004394:	d8c02017 	ldw	r3,128(sp)
 c004398:	dc401f17 	ldw	r17,124(sp)
 c00439c:	dd800404 	addi	r22,sp,16
 c0043a0:	003fec06 	br	c004354 <__alt_data_end+0xfc004354>
 c0043a4:	9080100c 	andi	r2,r18,64
 c0043a8:	d8002785 	stb	zero,158(sp)
 c0043ac:	10010e26 	beq	r2,zero,c0047e8 <___vfprintf_internal_r+0x1908>
 c0043b0:	d9402e17 	ldw	r5,184(sp)
 c0043b4:	d8c02a17 	ldw	r3,168(sp)
 c0043b8:	002d883a 	mov	r22,zero
 c0043bc:	28800104 	addi	r2,r5,4
 c0043c0:	2cc0000b 	ldhu	r19,0(r5)
 c0043c4:	183fc90e 	bge	r3,zero,c0042ec <__alt_data_end+0xfc0042ec>
 c0043c8:	d8802e15 	stw	r2,184(sp)
 c0043cc:	0039883a 	mov	fp,zero
 c0043d0:	9d84b03a 	or	r2,r19,r22
 c0043d4:	103c1e1e 	bne	r2,zero,c003450 <__alt_data_end+0xfc003450>
 c0043d8:	00800044 	movi	r2,1
 c0043dc:	003e6c06 	br	c003d90 <__alt_data_end+0xfc003d90>
 c0043e0:	d9002d17 	ldw	r4,180(sp)
 c0043e4:	d9801e04 	addi	r6,sp,120
 c0043e8:	b80b883a 	mov	r5,r23
 c0043ec:	c00a8280 	call	c00a828 <__sprint_r>
 c0043f0:	103bbf1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c0043f4:	d8c02017 	ldw	r3,128(sp)
 c0043f8:	da000404 	addi	r8,sp,16
 c0043fc:	d9003217 	ldw	r4,200(sp)
 c004400:	d8802617 	ldw	r2,152(sp)
 c004404:	d9403317 	ldw	r5,204(sp)
 c004408:	8123883a 	add	r17,r16,r4
 c00440c:	11400216 	blt	r2,r5,c004418 <___vfprintf_internal_r+0x1538>
 c004410:	9100004c 	andi	r4,r18,1
 c004414:	20000d26 	beq	r4,zero,c00444c <___vfprintf_internal_r+0x156c>
 c004418:	d9003717 	ldw	r4,220(sp)
 c00441c:	d9403417 	ldw	r5,208(sp)
 c004420:	1907883a 	add	r3,r3,r4
 c004424:	d9001f17 	ldw	r4,124(sp)
 c004428:	41400015 	stw	r5,0(r8)
 c00442c:	d9403717 	ldw	r5,220(sp)
 c004430:	21000044 	addi	r4,r4,1
 c004434:	d8c02015 	stw	r3,128(sp)
 c004438:	41400115 	stw	r5,4(r8)
 c00443c:	d9001f15 	stw	r4,124(sp)
 c004440:	014001c4 	movi	r5,7
 c004444:	2901e816 	blt	r5,r4,c004be8 <___vfprintf_internal_r+0x1d08>
 c004448:	42000204 	addi	r8,r8,8
 c00444c:	d9003317 	ldw	r4,204(sp)
 c004450:	8121883a 	add	r16,r16,r4
 c004454:	2085c83a 	sub	r2,r4,r2
 c004458:	8461c83a 	sub	r16,r16,r17
 c00445c:	1400010e 	bge	r2,r16,c004464 <___vfprintf_internal_r+0x1584>
 c004460:	1021883a 	mov	r16,r2
 c004464:	04000a0e 	bge	zero,r16,c004490 <___vfprintf_internal_r+0x15b0>
 c004468:	d9001f17 	ldw	r4,124(sp)
 c00446c:	1c07883a 	add	r3,r3,r16
 c004470:	44400015 	stw	r17,0(r8)
 c004474:	21000044 	addi	r4,r4,1
 c004478:	44000115 	stw	r16,4(r8)
 c00447c:	d8c02015 	stw	r3,128(sp)
 c004480:	d9001f15 	stw	r4,124(sp)
 c004484:	014001c4 	movi	r5,7
 c004488:	2901fb16 	blt	r5,r4,c004c78 <___vfprintf_internal_r+0x1d98>
 c00448c:	42000204 	addi	r8,r8,8
 c004490:	8001f716 	blt	r16,zero,c004c70 <___vfprintf_internal_r+0x1d90>
 c004494:	1421c83a 	sub	r16,r2,r16
 c004498:	043d160e 	bge	zero,r16,c0038f4 <__alt_data_end+0xfc0038f4>
 c00449c:	04400404 	movi	r17,16
 c0044a0:	d8801f17 	ldw	r2,124(sp)
 c0044a4:	8c3efb0e 	bge	r17,r16,c004094 <__alt_data_end+0xfc004094>
 c0044a8:	01430074 	movhi	r5,3073
 c0044ac:	294a5f84 	addi	r5,r5,10622
 c0044b0:	d9402c15 	stw	r5,176(sp)
 c0044b4:	058001c4 	movi	r22,7
 c0044b8:	dcc02d17 	ldw	r19,180(sp)
 c0044bc:	00000306 	br	c0044cc <___vfprintf_internal_r+0x15ec>
 c0044c0:	42000204 	addi	r8,r8,8
 c0044c4:	843ffc04 	addi	r16,r16,-16
 c0044c8:	8c3ef50e 	bge	r17,r16,c0040a0 <__alt_data_end+0xfc0040a0>
 c0044cc:	18c00404 	addi	r3,r3,16
 c0044d0:	10800044 	addi	r2,r2,1
 c0044d4:	45000015 	stw	r20,0(r8)
 c0044d8:	44400115 	stw	r17,4(r8)
 c0044dc:	d8c02015 	stw	r3,128(sp)
 c0044e0:	d8801f15 	stw	r2,124(sp)
 c0044e4:	b0bff60e 	bge	r22,r2,c0044c0 <__alt_data_end+0xfc0044c0>
 c0044e8:	d9801e04 	addi	r6,sp,120
 c0044ec:	b80b883a 	mov	r5,r23
 c0044f0:	9809883a 	mov	r4,r19
 c0044f4:	c00a8280 	call	c00a828 <__sprint_r>
 c0044f8:	103b7d1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c0044fc:	d8c02017 	ldw	r3,128(sp)
 c004500:	d8801f17 	ldw	r2,124(sp)
 c004504:	da000404 	addi	r8,sp,16
 c004508:	003fee06 	br	c0044c4 <__alt_data_end+0xfc0044c4>
 c00450c:	9088703a 	and	r4,r18,r2
 c004510:	203eab1e 	bne	r4,zero,c003fc0 <__alt_data_end+0xfc003fc0>
 c004514:	dc401f17 	ldw	r17,124(sp)
 c004518:	40800115 	stw	r2,4(r8)
 c00451c:	44000015 	stw	r16,0(r8)
 c004520:	8c400044 	addi	r17,r17,1
 c004524:	d8c02015 	stw	r3,128(sp)
 c004528:	dc401f15 	stw	r17,124(sp)
 c00452c:	008001c4 	movi	r2,7
 c004530:	14400e16 	blt	r2,r17,c00456c <___vfprintf_internal_r+0x168c>
 c004534:	45800204 	addi	r22,r8,8
 c004538:	003eca06 	br	c004064 <__alt_data_end+0xfc004064>
 c00453c:	01030074 	movhi	r4,3073
 c004540:	210a5f84 	addi	r4,r4,10622
 c004544:	d9002c15 	stw	r4,176(sp)
 c004548:	d8802c17 	ldw	r2,176(sp)
 c00454c:	1c07883a 	add	r3,r3,r16
 c004550:	8c400044 	addi	r17,r17,1
 c004554:	b0800015 	stw	r2,0(r22)
 c004558:	b4000115 	stw	r16,4(r22)
 c00455c:	d8c02015 	stw	r3,128(sp)
 c004560:	dc401f15 	stw	r17,124(sp)
 c004564:	008001c4 	movi	r2,7
 c004568:	147ebd0e 	bge	r2,r17,c004060 <__alt_data_end+0xfc004060>
 c00456c:	d9002d17 	ldw	r4,180(sp)
 c004570:	d9801e04 	addi	r6,sp,120
 c004574:	b80b883a 	mov	r5,r23
 c004578:	c00a8280 	call	c00a828 <__sprint_r>
 c00457c:	103b5c1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004580:	d8c02017 	ldw	r3,128(sp)
 c004584:	dc401f17 	ldw	r17,124(sp)
 c004588:	dd800404 	addi	r22,sp,16
 c00458c:	003eb506 	br	c004064 <__alt_data_end+0xfc004064>
 c004590:	d9002d17 	ldw	r4,180(sp)
 c004594:	d9801e04 	addi	r6,sp,120
 c004598:	b80b883a 	mov	r5,r23
 c00459c:	c00a8280 	call	c00a828 <__sprint_r>
 c0045a0:	103b531e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c0045a4:	d8c02017 	ldw	r3,128(sp)
 c0045a8:	dc401f17 	ldw	r17,124(sp)
 c0045ac:	da000404 	addi	r8,sp,16
 c0045b0:	003e8d06 	br	c003fe8 <__alt_data_end+0xfc003fe8>
 c0045b4:	d9002d17 	ldw	r4,180(sp)
 c0045b8:	d9801e04 	addi	r6,sp,120
 c0045bc:	b80b883a 	mov	r5,r23
 c0045c0:	c00a8280 	call	c00a828 <__sprint_r>
 c0045c4:	103b4a1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c0045c8:	d8c02017 	ldw	r3,128(sp)
 c0045cc:	dc401f17 	ldw	r17,124(sp)
 c0045d0:	dd800404 	addi	r22,sp,16
 c0045d4:	003e8f06 	br	c004014 <__alt_data_end+0xfc004014>
 c0045d8:	0027883a 	mov	r19,zero
 c0045dc:	003f4a06 	br	c004308 <__alt_data_end+0xfc004308>
 c0045e0:	d9002d17 	ldw	r4,180(sp)
 c0045e4:	d9801e04 	addi	r6,sp,120
 c0045e8:	b80b883a 	mov	r5,r23
 c0045ec:	c00a8280 	call	c00a828 <__sprint_r>
 c0045f0:	103b3f1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c0045f4:	d8c02017 	ldw	r3,128(sp)
 c0045f8:	da000404 	addi	r8,sp,16
 c0045fc:	003c7b06 	br	c0037ec <__alt_data_end+0xfc0037ec>
 c004600:	d9402a17 	ldw	r5,168(sp)
 c004604:	04e7c83a 	sub	r19,zero,r19
 c004608:	07000b44 	movi	fp,45
 c00460c:	9804c03a 	cmpne	r2,r19,zero
 c004610:	05adc83a 	sub	r22,zero,r22
 c004614:	df002785 	stb	fp,158(sp)
 c004618:	b0adc83a 	sub	r22,r22,r2
 c00461c:	28017b16 	blt	r5,zero,c004c0c <___vfprintf_internal_r+0x1d2c>
 c004620:	00bfdfc4 	movi	r2,-129
 c004624:	90a4703a 	and	r18,r18,r2
 c004628:	003b8906 	br	c003450 <__alt_data_end+0xfc003450>
 c00462c:	d9003617 	ldw	r4,216(sp)
 c004630:	d9403817 	ldw	r5,224(sp)
 c004634:	da003d15 	stw	r8,244(sp)
 c004638:	c00a44c0 	call	c00a44c <__fpclassifyd>
 c00463c:	da003d17 	ldw	r8,244(sp)
 c004640:	1000f026 	beq	r2,zero,c004a04 <___vfprintf_internal_r+0x1b24>
 c004644:	d9002a17 	ldw	r4,168(sp)
 c004648:	05bff7c4 	movi	r22,-33
 c00464c:	00bfffc4 	movi	r2,-1
 c004650:	8dac703a 	and	r22,r17,r22
 c004654:	20820026 	beq	r4,r2,c004e58 <___vfprintf_internal_r+0x1f78>
 c004658:	008011c4 	movi	r2,71
 c00465c:	b081f726 	beq	r22,r2,c004e3c <___vfprintf_internal_r+0x1f5c>
 c004660:	d9003817 	ldw	r4,224(sp)
 c004664:	90c04014 	ori	r3,r18,256
 c004668:	d8c02c15 	stw	r3,176(sp)
 c00466c:	20021516 	blt	r4,zero,c004ec4 <___vfprintf_internal_r+0x1fe4>
 c004670:	dcc03817 	ldw	r19,224(sp)
 c004674:	d8002905 	stb	zero,164(sp)
 c004678:	00801984 	movi	r2,102
 c00467c:	8881f926 	beq	r17,r2,c004e64 <___vfprintf_internal_r+0x1f84>
 c004680:	00801184 	movi	r2,70
 c004684:	88821c26 	beq	r17,r2,c004ef8 <___vfprintf_internal_r+0x2018>
 c004688:	00801144 	movi	r2,69
 c00468c:	b081ef26 	beq	r22,r2,c004e4c <___vfprintf_internal_r+0x1f6c>
 c004690:	d8c02a17 	ldw	r3,168(sp)
 c004694:	d8802104 	addi	r2,sp,132
 c004698:	d8800315 	stw	r2,12(sp)
 c00469c:	d9403617 	ldw	r5,216(sp)
 c0046a0:	d8802504 	addi	r2,sp,148
 c0046a4:	d9002d17 	ldw	r4,180(sp)
 c0046a8:	d8800215 	stw	r2,8(sp)
 c0046ac:	d8802604 	addi	r2,sp,152
 c0046b0:	d8c00015 	stw	r3,0(sp)
 c0046b4:	d8800115 	stw	r2,4(sp)
 c0046b8:	01c00084 	movi	r7,2
 c0046bc:	980d883a 	mov	r6,r19
 c0046c0:	d8c03c15 	stw	r3,240(sp)
 c0046c4:	da003d15 	stw	r8,244(sp)
 c0046c8:	c0056100 	call	c005610 <_dtoa_r>
 c0046cc:	1021883a 	mov	r16,r2
 c0046d0:	008019c4 	movi	r2,103
 c0046d4:	d8c03c17 	ldw	r3,240(sp)
 c0046d8:	da003d17 	ldw	r8,244(sp)
 c0046dc:	88817126 	beq	r17,r2,c004ca4 <___vfprintf_internal_r+0x1dc4>
 c0046e0:	008011c4 	movi	r2,71
 c0046e4:	88829126 	beq	r17,r2,c00512c <___vfprintf_internal_r+0x224c>
 c0046e8:	80f9883a 	add	fp,r16,r3
 c0046ec:	d9003617 	ldw	r4,216(sp)
 c0046f0:	000d883a 	mov	r6,zero
 c0046f4:	000f883a 	mov	r7,zero
 c0046f8:	980b883a 	mov	r5,r19
 c0046fc:	da003d15 	stw	r8,244(sp)
 c004700:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c004704:	da003d17 	ldw	r8,244(sp)
 c004708:	10018d26 	beq	r2,zero,c004d40 <___vfprintf_internal_r+0x1e60>
 c00470c:	d8802117 	ldw	r2,132(sp)
 c004710:	1700062e 	bgeu	r2,fp,c00472c <___vfprintf_internal_r+0x184c>
 c004714:	01000c04 	movi	r4,48
 c004718:	10c00044 	addi	r3,r2,1
 c00471c:	d8c02115 	stw	r3,132(sp)
 c004720:	11000005 	stb	r4,0(r2)
 c004724:	d8802117 	ldw	r2,132(sp)
 c004728:	173ffb36 	bltu	r2,fp,c004718 <__alt_data_end+0xfc004718>
 c00472c:	1405c83a 	sub	r2,r2,r16
 c004730:	d8803315 	stw	r2,204(sp)
 c004734:	008011c4 	movi	r2,71
 c004738:	b0817626 	beq	r22,r2,c004d14 <___vfprintf_internal_r+0x1e34>
 c00473c:	00801944 	movi	r2,101
 c004740:	1442800e 	bge	r2,r17,c005144 <___vfprintf_internal_r+0x2264>
 c004744:	d8c02617 	ldw	r3,152(sp)
 c004748:	00801984 	movi	r2,102
 c00474c:	d8c03215 	stw	r3,200(sp)
 c004750:	8881fe26 	beq	r17,r2,c004f4c <___vfprintf_internal_r+0x206c>
 c004754:	d8c03217 	ldw	r3,200(sp)
 c004758:	d9003317 	ldw	r4,204(sp)
 c00475c:	1901dd16 	blt	r3,r4,c004ed4 <___vfprintf_internal_r+0x1ff4>
 c004760:	9480004c 	andi	r18,r18,1
 c004764:	90022b1e 	bne	r18,zero,c005014 <___vfprintf_internal_r+0x2134>
 c004768:	1805883a 	mov	r2,r3
 c00476c:	18028316 	blt	r3,zero,c00517c <___vfprintf_internal_r+0x229c>
 c004770:	d8c03217 	ldw	r3,200(sp)
 c004774:	044019c4 	movi	r17,103
 c004778:	d8c02b15 	stw	r3,172(sp)
 c00477c:	df002907 	ldb	fp,164(sp)
 c004780:	e001531e 	bne	fp,zero,c004cd0 <___vfprintf_internal_r+0x1df0>
 c004784:	df002783 	ldbu	fp,158(sp)
 c004788:	d8802915 	stw	r2,164(sp)
 c00478c:	dc802c17 	ldw	r18,176(sp)
 c004790:	d8002a15 	stw	zero,168(sp)
 c004794:	003baf06 	br	c003654 <__alt_data_end+0xfc003654>
 c004798:	d8c02e17 	ldw	r3,184(sp)
 c00479c:	d9002e17 	ldw	r4,184(sp)
 c0047a0:	d9402e17 	ldw	r5,184(sp)
 c0047a4:	18c00017 	ldw	r3,0(r3)
 c0047a8:	21000117 	ldw	r4,4(r4)
 c0047ac:	29400204 	addi	r5,r5,8
 c0047b0:	d8c03615 	stw	r3,216(sp)
 c0047b4:	d9003815 	stw	r4,224(sp)
 c0047b8:	d9402e15 	stw	r5,184(sp)
 c0047bc:	003b5006 	br	c003500 <__alt_data_end+0xfc003500>
 c0047c0:	ac400007 	ldb	r17,0(r21)
 c0047c4:	003a2806 	br	c003068 <__alt_data_end+0xfc003068>
 c0047c8:	9080100c 	andi	r2,r18,64
 c0047cc:	1000a826 	beq	r2,zero,c004a70 <___vfprintf_internal_r+0x1b90>
 c0047d0:	d8c02e17 	ldw	r3,184(sp)
 c0047d4:	002d883a 	mov	r22,zero
 c0047d8:	1cc0000b 	ldhu	r19,0(r3)
 c0047dc:	18c00104 	addi	r3,r3,4
 c0047e0:	d8c02e15 	stw	r3,184(sp)
 c0047e4:	003caf06 	br	c003aa4 <__alt_data_end+0xfc003aa4>
 c0047e8:	d9002e17 	ldw	r4,184(sp)
 c0047ec:	d9402a17 	ldw	r5,168(sp)
 c0047f0:	002d883a 	mov	r22,zero
 c0047f4:	20800104 	addi	r2,r4,4
 c0047f8:	24c00017 	ldw	r19,0(r4)
 c0047fc:	283ebb0e 	bge	r5,zero,c0042ec <__alt_data_end+0xfc0042ec>
 c004800:	003ef106 	br	c0043c8 <__alt_data_end+0xfc0043c8>
 c004804:	9080040c 	andi	r2,r18,16
 c004808:	1000921e 	bne	r2,zero,c004a54 <___vfprintf_internal_r+0x1b74>
 c00480c:	9480100c 	andi	r18,r18,64
 c004810:	90013926 	beq	r18,zero,c004cf8 <___vfprintf_internal_r+0x1e18>
 c004814:	d9402e17 	ldw	r5,184(sp)
 c004818:	d8c02f17 	ldw	r3,188(sp)
 c00481c:	28800017 	ldw	r2,0(r5)
 c004820:	29400104 	addi	r5,r5,4
 c004824:	d9402e15 	stw	r5,184(sp)
 c004828:	10c0000d 	sth	r3,0(r2)
 c00482c:	0039e406 	br	c002fc0 <__alt_data_end+0xfc002fc0>
 c004830:	9080100c 	andi	r2,r18,64
 c004834:	10008026 	beq	r2,zero,c004a38 <___vfprintf_internal_r+0x1b58>
 c004838:	d8802e17 	ldw	r2,184(sp)
 c00483c:	14c0000f 	ldh	r19,0(r2)
 c004840:	10800104 	addi	r2,r2,4
 c004844:	d8802e15 	stw	r2,184(sp)
 c004848:	982dd7fa 	srai	r22,r19,31
 c00484c:	b005883a 	mov	r2,r22
 c004850:	003af706 	br	c003430 <__alt_data_end+0xfc003430>
 c004854:	9080100c 	andi	r2,r18,64
 c004858:	d8002785 	stb	zero,158(sp)
 c00485c:	10008a1e 	bne	r2,zero,c004a88 <___vfprintf_internal_r+0x1ba8>
 c004860:	d9002e17 	ldw	r4,184(sp)
 c004864:	d9402a17 	ldw	r5,168(sp)
 c004868:	002d883a 	mov	r22,zero
 c00486c:	20800104 	addi	r2,r4,4
 c004870:	24c00017 	ldw	r19,0(r4)
 c004874:	283e4b0e 	bge	r5,zero,c0041a4 <__alt_data_end+0xfc0041a4>
 c004878:	9d86b03a 	or	r3,r19,r22
 c00487c:	d8802e15 	stw	r2,184(sp)
 c004880:	183e4c1e 	bne	r3,zero,c0041b4 <__alt_data_end+0xfc0041b4>
 c004884:	0039883a 	mov	fp,zero
 c004888:	0005883a 	mov	r2,zero
 c00488c:	003d4006 	br	c003d90 <__alt_data_end+0xfc003d90>
 c004890:	01430074 	movhi	r5,3073
 c004894:	294a5f84 	addi	r5,r5,10622
 c004898:	d9402c15 	stw	r5,176(sp)
 c00489c:	d9402c17 	ldw	r5,176(sp)
 c0048a0:	1c47883a 	add	r3,r3,r17
 c0048a4:	10800044 	addi	r2,r2,1
 c0048a8:	41400015 	stw	r5,0(r8)
 c0048ac:	44400115 	stw	r17,4(r8)
 c0048b0:	d8c02015 	stw	r3,128(sp)
 c0048b4:	d8801f15 	stw	r2,124(sp)
 c0048b8:	010001c4 	movi	r4,7
 c0048bc:	20bec816 	blt	r4,r2,c0043e0 <__alt_data_end+0xfc0043e0>
 c0048c0:	42000204 	addi	r8,r8,8
 c0048c4:	003ecd06 	br	c0043fc <__alt_data_end+0xfc0043fc>
 c0048c8:	d9002a17 	ldw	r4,168(sp)
 c0048cc:	d8002785 	stb	zero,158(sp)
 c0048d0:	203d2d16 	blt	r4,zero,c003d88 <__alt_data_end+0xfc003d88>
 c0048d4:	00bfdfc4 	movi	r2,-129
 c0048d8:	90a4703a 	and	r18,r18,r2
 c0048dc:	003a6106 	br	c003264 <__alt_data_end+0xfc003264>
 c0048e0:	01030074 	movhi	r4,3073
 c0048e4:	210a5f84 	addi	r4,r4,10622
 c0048e8:	d9002c15 	stw	r4,176(sp)
 c0048ec:	003bea06 	br	c003898 <__alt_data_end+0xfc003898>
 c0048f0:	d9002d17 	ldw	r4,180(sp)
 c0048f4:	d9801e04 	addi	r6,sp,120
 c0048f8:	b80b883a 	mov	r5,r23
 c0048fc:	c00a8280 	call	c00a828 <__sprint_r>
 c004900:	103a7b1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004904:	d8c02017 	ldw	r3,128(sp)
 c004908:	da000404 	addi	r8,sp,16
 c00490c:	003d4106 	br	c003e14 <__alt_data_end+0xfc003e14>
 c004910:	d8801f17 	ldw	r2,124(sp)
 c004914:	01430074 	movhi	r5,3073
 c004918:	01000044 	movi	r4,1
 c00491c:	18c00044 	addi	r3,r3,1
 c004920:	10800044 	addi	r2,r2,1
 c004924:	294a5f04 	addi	r5,r5,10620
 c004928:	41000115 	stw	r4,4(r8)
 c00492c:	41400015 	stw	r5,0(r8)
 c004930:	d8c02015 	stw	r3,128(sp)
 c004934:	d8801f15 	stw	r2,124(sp)
 c004938:	010001c4 	movi	r4,7
 c00493c:	20805c16 	blt	r4,r2,c004ab0 <___vfprintf_internal_r+0x1bd0>
 c004940:	42000204 	addi	r8,r8,8
 c004944:	8800041e 	bne	r17,zero,c004958 <___vfprintf_internal_r+0x1a78>
 c004948:	d8803317 	ldw	r2,204(sp)
 c00494c:	1000021e 	bne	r2,zero,c004958 <___vfprintf_internal_r+0x1a78>
 c004950:	9080004c 	andi	r2,r18,1
 c004954:	103be726 	beq	r2,zero,c0038f4 <__alt_data_end+0xfc0038f4>
 c004958:	d9003717 	ldw	r4,220(sp)
 c00495c:	d8801f17 	ldw	r2,124(sp)
 c004960:	d9403417 	ldw	r5,208(sp)
 c004964:	20c7883a 	add	r3,r4,r3
 c004968:	10800044 	addi	r2,r2,1
 c00496c:	41000115 	stw	r4,4(r8)
 c004970:	41400015 	stw	r5,0(r8)
 c004974:	d8c02015 	stw	r3,128(sp)
 c004978:	d8801f15 	stw	r2,124(sp)
 c00497c:	010001c4 	movi	r4,7
 c004980:	20812116 	blt	r4,r2,c004e08 <___vfprintf_internal_r+0x1f28>
 c004984:	42000204 	addi	r8,r8,8
 c004988:	0463c83a 	sub	r17,zero,r17
 c00498c:	0440730e 	bge	zero,r17,c004b5c <___vfprintf_internal_r+0x1c7c>
 c004990:	05800404 	movi	r22,16
 c004994:	b440860e 	bge	r22,r17,c004bb0 <___vfprintf_internal_r+0x1cd0>
 c004998:	01430074 	movhi	r5,3073
 c00499c:	294a5f84 	addi	r5,r5,10622
 c0049a0:	d9402c15 	stw	r5,176(sp)
 c0049a4:	070001c4 	movi	fp,7
 c0049a8:	dcc02d17 	ldw	r19,180(sp)
 c0049ac:	00000306 	br	c0049bc <___vfprintf_internal_r+0x1adc>
 c0049b0:	42000204 	addi	r8,r8,8
 c0049b4:	8c7ffc04 	addi	r17,r17,-16
 c0049b8:	b440800e 	bge	r22,r17,c004bbc <___vfprintf_internal_r+0x1cdc>
 c0049bc:	18c00404 	addi	r3,r3,16
 c0049c0:	10800044 	addi	r2,r2,1
 c0049c4:	45000015 	stw	r20,0(r8)
 c0049c8:	45800115 	stw	r22,4(r8)
 c0049cc:	d8c02015 	stw	r3,128(sp)
 c0049d0:	d8801f15 	stw	r2,124(sp)
 c0049d4:	e0bff60e 	bge	fp,r2,c0049b0 <__alt_data_end+0xfc0049b0>
 c0049d8:	d9801e04 	addi	r6,sp,120
 c0049dc:	b80b883a 	mov	r5,r23
 c0049e0:	9809883a 	mov	r4,r19
 c0049e4:	c00a8280 	call	c00a828 <__sprint_r>
 c0049e8:	103a411e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c0049ec:	d8c02017 	ldw	r3,128(sp)
 c0049f0:	d8801f17 	ldw	r2,124(sp)
 c0049f4:	da000404 	addi	r8,sp,16
 c0049f8:	003fee06 	br	c0049b4 <__alt_data_end+0xfc0049b4>
 c0049fc:	00bfffc4 	movi	r2,-1
 c004a00:	003a3f06 	br	c003300 <__alt_data_end+0xfc003300>
 c004a04:	008011c4 	movi	r2,71
 c004a08:	1440b816 	blt	r2,r17,c004cec <___vfprintf_internal_r+0x1e0c>
 c004a0c:	04030074 	movhi	r16,3073
 c004a10:	840a5104 	addi	r16,r16,10564
 c004a14:	00c000c4 	movi	r3,3
 c004a18:	00bfdfc4 	movi	r2,-129
 c004a1c:	d8c02915 	stw	r3,164(sp)
 c004a20:	90a4703a 	and	r18,r18,r2
 c004a24:	df002783 	ldbu	fp,158(sp)
 c004a28:	d8c02b15 	stw	r3,172(sp)
 c004a2c:	d8002a15 	stw	zero,168(sp)
 c004a30:	d8003215 	stw	zero,200(sp)
 c004a34:	003b0706 	br	c003654 <__alt_data_end+0xfc003654>
 c004a38:	d8c02e17 	ldw	r3,184(sp)
 c004a3c:	1cc00017 	ldw	r19,0(r3)
 c004a40:	18c00104 	addi	r3,r3,4
 c004a44:	d8c02e15 	stw	r3,184(sp)
 c004a48:	982dd7fa 	srai	r22,r19,31
 c004a4c:	b005883a 	mov	r2,r22
 c004a50:	003a7706 	br	c003430 <__alt_data_end+0xfc003430>
 c004a54:	d8c02e17 	ldw	r3,184(sp)
 c004a58:	d9002f17 	ldw	r4,188(sp)
 c004a5c:	18800017 	ldw	r2,0(r3)
 c004a60:	18c00104 	addi	r3,r3,4
 c004a64:	d8c02e15 	stw	r3,184(sp)
 c004a68:	11000015 	stw	r4,0(r2)
 c004a6c:	00395406 	br	c002fc0 <__alt_data_end+0xfc002fc0>
 c004a70:	d9002e17 	ldw	r4,184(sp)
 c004a74:	002d883a 	mov	r22,zero
 c004a78:	24c00017 	ldw	r19,0(r4)
 c004a7c:	21000104 	addi	r4,r4,4
 c004a80:	d9002e15 	stw	r4,184(sp)
 c004a84:	003c0706 	br	c003aa4 <__alt_data_end+0xfc003aa4>
 c004a88:	d9402e17 	ldw	r5,184(sp)
 c004a8c:	d8c02a17 	ldw	r3,168(sp)
 c004a90:	002d883a 	mov	r22,zero
 c004a94:	28800104 	addi	r2,r5,4
 c004a98:	2cc0000b 	ldhu	r19,0(r5)
 c004a9c:	183dc10e 	bge	r3,zero,c0041a4 <__alt_data_end+0xfc0041a4>
 c004aa0:	003f7506 	br	c004878 <__alt_data_end+0xfc004878>
 c004aa4:	04030074 	movhi	r16,3073
 c004aa8:	840a4f04 	addi	r16,r16,10556
 c004aac:	003aa706 	br	c00354c <__alt_data_end+0xfc00354c>
 c004ab0:	d9002d17 	ldw	r4,180(sp)
 c004ab4:	d9801e04 	addi	r6,sp,120
 c004ab8:	b80b883a 	mov	r5,r23
 c004abc:	c00a8280 	call	c00a828 <__sprint_r>
 c004ac0:	103a0b1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004ac4:	dc402617 	ldw	r17,152(sp)
 c004ac8:	d8c02017 	ldw	r3,128(sp)
 c004acc:	da000404 	addi	r8,sp,16
 c004ad0:	003f9c06 	br	c004944 <__alt_data_end+0xfc004944>
 c004ad4:	ac400043 	ldbu	r17,1(r21)
 c004ad8:	84000814 	ori	r16,r16,32
 c004adc:	ad400044 	addi	r21,r21,1
 c004ae0:	8c403fcc 	andi	r17,r17,255
 c004ae4:	8c40201c 	xori	r17,r17,128
 c004ae8:	8c7fe004 	addi	r17,r17,-128
 c004aec:	00395e06 	br	c003068 <__alt_data_end+0xfc003068>
 c004af0:	d8c02e15 	stw	r3,184(sp)
 c004af4:	0039883a 	mov	fp,zero
 c004af8:	003e3506 	br	c0043d0 <__alt_data_end+0xfc0043d0>
 c004afc:	d9002d17 	ldw	r4,180(sp)
 c004b00:	d9801e04 	addi	r6,sp,120
 c004b04:	b80b883a 	mov	r5,r23
 c004b08:	c00a8280 	call	c00a828 <__sprint_r>
 c004b0c:	1039f81e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004b10:	d8c02017 	ldw	r3,128(sp)
 c004b14:	da000404 	addi	r8,sp,16
 c004b18:	003cd006 	br	c003e5c <__alt_data_end+0xfc003e5c>
 c004b1c:	8009883a 	mov	r4,r16
 c004b20:	df003d15 	stw	fp,244(sp)
 c004b24:	c002e480 	call	c002e48 <strlen>
 c004b28:	d8802b15 	stw	r2,172(sp)
 c004b2c:	da003d17 	ldw	r8,244(sp)
 c004b30:	103c200e 	bge	r2,zero,c003bb4 <__alt_data_end+0xfc003bb4>
 c004b34:	0005883a 	mov	r2,zero
 c004b38:	003c1e06 	br	c003bb4 <__alt_data_end+0xfc003bb4>
 c004b3c:	d9002d17 	ldw	r4,180(sp)
 c004b40:	d9801e04 	addi	r6,sp,120
 c004b44:	b80b883a 	mov	r5,r23
 c004b48:	c00a8280 	call	c00a828 <__sprint_r>
 c004b4c:	1039e81e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004b50:	d8c02017 	ldw	r3,128(sp)
 c004b54:	d8801f17 	ldw	r2,124(sp)
 c004b58:	da000404 	addi	r8,sp,16
 c004b5c:	d9403317 	ldw	r5,204(sp)
 c004b60:	10800044 	addi	r2,r2,1
 c004b64:	44000015 	stw	r16,0(r8)
 c004b68:	28c7883a 	add	r3,r5,r3
 c004b6c:	003b5b06 	br	c0038dc <__alt_data_end+0xfc0038dc>
 c004b70:	01030074 	movhi	r4,3073
 c004b74:	210a6384 	addi	r4,r4,10638
 c004b78:	d9003515 	stw	r4,212(sp)
 c004b7c:	003af206 	br	c003748 <__alt_data_end+0xfc003748>
 c004b80:	013fffc4 	movi	r4,-1
 c004b84:	003a0806 	br	c0033a8 <__alt_data_end+0xfc0033a8>
 c004b88:	0023883a 	mov	r17,zero
 c004b8c:	003d9d06 	br	c004204 <__alt_data_end+0xfc004204>
 c004b90:	d9002d17 	ldw	r4,180(sp)
 c004b94:	d9801e04 	addi	r6,sp,120
 c004b98:	b80b883a 	mov	r5,r23
 c004b9c:	c00a8280 	call	c00a828 <__sprint_r>
 c004ba0:	1039d31e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004ba4:	d8c02017 	ldw	r3,128(sp)
 c004ba8:	da000404 	addi	r8,sp,16
 c004bac:	003d9406 	br	c004200 <__alt_data_end+0xfc004200>
 c004bb0:	01030074 	movhi	r4,3073
 c004bb4:	210a5f84 	addi	r4,r4,10622
 c004bb8:	d9002c15 	stw	r4,176(sp)
 c004bbc:	d9002c17 	ldw	r4,176(sp)
 c004bc0:	1c47883a 	add	r3,r3,r17
 c004bc4:	10800044 	addi	r2,r2,1
 c004bc8:	41000015 	stw	r4,0(r8)
 c004bcc:	44400115 	stw	r17,4(r8)
 c004bd0:	d8c02015 	stw	r3,128(sp)
 c004bd4:	d8801f15 	stw	r2,124(sp)
 c004bd8:	010001c4 	movi	r4,7
 c004bdc:	20bfd716 	blt	r4,r2,c004b3c <__alt_data_end+0xfc004b3c>
 c004be0:	42000204 	addi	r8,r8,8
 c004be4:	003fdd06 	br	c004b5c <__alt_data_end+0xfc004b5c>
 c004be8:	d9002d17 	ldw	r4,180(sp)
 c004bec:	d9801e04 	addi	r6,sp,120
 c004bf0:	b80b883a 	mov	r5,r23
 c004bf4:	c00a8280 	call	c00a828 <__sprint_r>
 c004bf8:	1039bd1e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004bfc:	d8802617 	ldw	r2,152(sp)
 c004c00:	d8c02017 	ldw	r3,128(sp)
 c004c04:	da000404 	addi	r8,sp,16
 c004c08:	003e1006 	br	c00444c <__alt_data_end+0xfc00444c>
 c004c0c:	00800044 	movi	r2,1
 c004c10:	10803fcc 	andi	r2,r2,255
 c004c14:	00c00044 	movi	r3,1
 c004c18:	10fa0d26 	beq	r2,r3,c003450 <__alt_data_end+0xfc003450>
 c004c1c:	00c00084 	movi	r3,2
 c004c20:	10fbaf26 	beq	r2,r3,c003ae0 <__alt_data_end+0xfc003ae0>
 c004c24:	003a6d06 	br	c0035dc <__alt_data_end+0xfc0035dc>
 c004c28:	01030074 	movhi	r4,3073
 c004c2c:	210a6384 	addi	r4,r4,10638
 c004c30:	d9003515 	stw	r4,212(sp)
 c004c34:	003b5406 	br	c003988 <__alt_data_end+0xfc003988>
 c004c38:	d8802a17 	ldw	r2,168(sp)
 c004c3c:	00c00184 	movi	r3,6
 c004c40:	1880012e 	bgeu	r3,r2,c004c48 <___vfprintf_internal_r+0x1d68>
 c004c44:	1805883a 	mov	r2,r3
 c004c48:	d8802b15 	stw	r2,172(sp)
 c004c4c:	1000ef16 	blt	r2,zero,c00500c <___vfprintf_internal_r+0x212c>
 c004c50:	04030074 	movhi	r16,3073
 c004c54:	d8802915 	stw	r2,164(sp)
 c004c58:	dcc02e15 	stw	r19,184(sp)
 c004c5c:	d8002a15 	stw	zero,168(sp)
 c004c60:	d8003215 	stw	zero,200(sp)
 c004c64:	840a5d04 	addi	r16,r16,10612
 c004c68:	0039883a 	mov	fp,zero
 c004c6c:	003a8006 	br	c003670 <__alt_data_end+0xfc003670>
 c004c70:	0021883a 	mov	r16,zero
 c004c74:	003e0706 	br	c004494 <__alt_data_end+0xfc004494>
 c004c78:	d9002d17 	ldw	r4,180(sp)
 c004c7c:	d9801e04 	addi	r6,sp,120
 c004c80:	b80b883a 	mov	r5,r23
 c004c84:	c00a8280 	call	c00a828 <__sprint_r>
 c004c88:	1039991e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004c8c:	d8802617 	ldw	r2,152(sp)
 c004c90:	d9403317 	ldw	r5,204(sp)
 c004c94:	d8c02017 	ldw	r3,128(sp)
 c004c98:	da000404 	addi	r8,sp,16
 c004c9c:	2885c83a 	sub	r2,r5,r2
 c004ca0:	003dfb06 	br	c004490 <__alt_data_end+0xfc004490>
 c004ca4:	9080004c 	andi	r2,r18,1
 c004ca8:	103e8f1e 	bne	r2,zero,c0046e8 <__alt_data_end+0xfc0046e8>
 c004cac:	d8802117 	ldw	r2,132(sp)
 c004cb0:	003e9e06 	br	c00472c <__alt_data_end+0xfc00472c>
 c004cb4:	1025883a 	mov	r18,r2
 c004cb8:	0039883a 	mov	fp,zero
 c004cbc:	00800084 	movi	r2,2
 c004cc0:	003fd306 	br	c004c10 <__alt_data_end+0xfc004c10>
 c004cc4:	07000b44 	movi	fp,45
 c004cc8:	df002785 	stb	fp,158(sp)
 c004ccc:	003a1b06 	br	c00353c <__alt_data_end+0xfc00353c>
 c004cd0:	00c00b44 	movi	r3,45
 c004cd4:	d8c02785 	stb	r3,158(sp)
 c004cd8:	d8802915 	stw	r2,164(sp)
 c004cdc:	dc802c17 	ldw	r18,176(sp)
 c004ce0:	d8002a15 	stw	zero,168(sp)
 c004ce4:	07000b44 	movi	fp,45
 c004ce8:	003a5e06 	br	c003664 <__alt_data_end+0xfc003664>
 c004cec:	04030074 	movhi	r16,3073
 c004cf0:	840a5204 	addi	r16,r16,10568
 c004cf4:	003f4706 	br	c004a14 <__alt_data_end+0xfc004a14>
 c004cf8:	d9002e17 	ldw	r4,184(sp)
 c004cfc:	d9402f17 	ldw	r5,188(sp)
 c004d00:	20800017 	ldw	r2,0(r4)
 c004d04:	21000104 	addi	r4,r4,4
 c004d08:	d9002e15 	stw	r4,184(sp)
 c004d0c:	11400015 	stw	r5,0(r2)
 c004d10:	0038ab06 	br	c002fc0 <__alt_data_end+0xfc002fc0>
 c004d14:	dd802617 	ldw	r22,152(sp)
 c004d18:	00bfff44 	movi	r2,-3
 c004d1c:	b0801c16 	blt	r22,r2,c004d90 <___vfprintf_internal_r+0x1eb0>
 c004d20:	d9402a17 	ldw	r5,168(sp)
 c004d24:	2d801a16 	blt	r5,r22,c004d90 <___vfprintf_internal_r+0x1eb0>
 c004d28:	dd803215 	stw	r22,200(sp)
 c004d2c:	003e8906 	br	c004754 <__alt_data_end+0xfc004754>
 c004d30:	01030074 	movhi	r4,3073
 c004d34:	210a5f84 	addi	r4,r4,10622
 c004d38:	d9002c15 	stw	r4,176(sp)
 c004d3c:	003c9106 	br	c003f84 <__alt_data_end+0xfc003f84>
 c004d40:	e005883a 	mov	r2,fp
 c004d44:	003e7906 	br	c00472c <__alt_data_end+0xfc00472c>
 c004d48:	d9002a17 	ldw	r4,168(sp)
 c004d4c:	df002783 	ldbu	fp,158(sp)
 c004d50:	dcc02e15 	stw	r19,184(sp)
 c004d54:	d9002915 	stw	r4,164(sp)
 c004d58:	d9002b15 	stw	r4,172(sp)
 c004d5c:	d8002a15 	stw	zero,168(sp)
 c004d60:	d8003215 	stw	zero,200(sp)
 c004d64:	003a3b06 	br	c003654 <__alt_data_end+0xfc003654>
 c004d68:	9080004c 	andi	r2,r18,1
 c004d6c:	0039883a 	mov	fp,zero
 c004d70:	10000426 	beq	r2,zero,c004d84 <___vfprintf_internal_r+0x1ea4>
 c004d74:	00800c04 	movi	r2,48
 c004d78:	dc001dc4 	addi	r16,sp,119
 c004d7c:	d8801dc5 	stb	r2,119(sp)
 c004d80:	003b6406 	br	c003b14 <__alt_data_end+0xfc003b14>
 c004d84:	d8002b15 	stw	zero,172(sp)
 c004d88:	dc001e04 	addi	r16,sp,120
 c004d8c:	003a2b06 	br	c00363c <__alt_data_end+0xfc00363c>
 c004d90:	8c7fff84 	addi	r17,r17,-2
 c004d94:	b5bfffc4 	addi	r22,r22,-1
 c004d98:	dd802615 	stw	r22,152(sp)
 c004d9c:	dc4022c5 	stb	r17,139(sp)
 c004da0:	b000bf16 	blt	r22,zero,c0050a0 <___vfprintf_internal_r+0x21c0>
 c004da4:	00800ac4 	movi	r2,43
 c004da8:	d8802305 	stb	r2,140(sp)
 c004dac:	00800244 	movi	r2,9
 c004db0:	15807016 	blt	r2,r22,c004f74 <___vfprintf_internal_r+0x2094>
 c004db4:	00800c04 	movi	r2,48
 c004db8:	b5800c04 	addi	r22,r22,48
 c004dbc:	d8802345 	stb	r2,141(sp)
 c004dc0:	dd802385 	stb	r22,142(sp)
 c004dc4:	d88023c4 	addi	r2,sp,143
 c004dc8:	df0022c4 	addi	fp,sp,139
 c004dcc:	d8c03317 	ldw	r3,204(sp)
 c004dd0:	1739c83a 	sub	fp,r2,fp
 c004dd4:	d9003317 	ldw	r4,204(sp)
 c004dd8:	e0c7883a 	add	r3,fp,r3
 c004ddc:	df003a15 	stw	fp,232(sp)
 c004de0:	d8c02b15 	stw	r3,172(sp)
 c004de4:	00800044 	movi	r2,1
 c004de8:	1100b30e 	bge	r2,r4,c0050b8 <___vfprintf_internal_r+0x21d8>
 c004dec:	d8c02b17 	ldw	r3,172(sp)
 c004df0:	18c00044 	addi	r3,r3,1
 c004df4:	d8c02b15 	stw	r3,172(sp)
 c004df8:	1805883a 	mov	r2,r3
 c004dfc:	1800ac16 	blt	r3,zero,c0050b0 <___vfprintf_internal_r+0x21d0>
 c004e00:	d8003215 	stw	zero,200(sp)
 c004e04:	003e5d06 	br	c00477c <__alt_data_end+0xfc00477c>
 c004e08:	d9002d17 	ldw	r4,180(sp)
 c004e0c:	d9801e04 	addi	r6,sp,120
 c004e10:	b80b883a 	mov	r5,r23
 c004e14:	c00a8280 	call	c00a828 <__sprint_r>
 c004e18:	1039351e 	bne	r2,zero,c0032f0 <__alt_data_end+0xfc0032f0>
 c004e1c:	dc402617 	ldw	r17,152(sp)
 c004e20:	d8c02017 	ldw	r3,128(sp)
 c004e24:	d8801f17 	ldw	r2,124(sp)
 c004e28:	da000404 	addi	r8,sp,16
 c004e2c:	003ed606 	br	c004988 <__alt_data_end+0xfc004988>
 c004e30:	182b883a 	mov	r21,r3
 c004e34:	d8002a15 	stw	zero,168(sp)
 c004e38:	00388c06 	br	c00306c <__alt_data_end+0xfc00306c>
 c004e3c:	d8802a17 	ldw	r2,168(sp)
 c004e40:	103e071e 	bne	r2,zero,c004660 <__alt_data_end+0xfc004660>
 c004e44:	dc002a15 	stw	r16,168(sp)
 c004e48:	003e0506 	br	c004660 <__alt_data_end+0xfc004660>
 c004e4c:	d9002a17 	ldw	r4,168(sp)
 c004e50:	20c00044 	addi	r3,r4,1
 c004e54:	003e0f06 	br	c004694 <__alt_data_end+0xfc004694>
 c004e58:	01400184 	movi	r5,6
 c004e5c:	d9402a15 	stw	r5,168(sp)
 c004e60:	003dff06 	br	c004660 <__alt_data_end+0xfc004660>
 c004e64:	d8802104 	addi	r2,sp,132
 c004e68:	d8800315 	stw	r2,12(sp)
 c004e6c:	d8802504 	addi	r2,sp,148
 c004e70:	d8800215 	stw	r2,8(sp)
 c004e74:	d8802604 	addi	r2,sp,152
 c004e78:	d8800115 	stw	r2,4(sp)
 c004e7c:	d8802a17 	ldw	r2,168(sp)
 c004e80:	d9403617 	ldw	r5,216(sp)
 c004e84:	d9002d17 	ldw	r4,180(sp)
 c004e88:	d8800015 	stw	r2,0(sp)
 c004e8c:	01c000c4 	movi	r7,3
 c004e90:	980d883a 	mov	r6,r19
 c004e94:	da003d15 	stw	r8,244(sp)
 c004e98:	c0056100 	call	c005610 <_dtoa_r>
 c004e9c:	d8c02a17 	ldw	r3,168(sp)
 c004ea0:	da003d17 	ldw	r8,244(sp)
 c004ea4:	1021883a 	mov	r16,r2
 c004ea8:	10f9883a 	add	fp,r2,r3
 c004eac:	81000007 	ldb	r4,0(r16)
 c004eb0:	00800c04 	movi	r2,48
 c004eb4:	20805e26 	beq	r4,r2,c005030 <___vfprintf_internal_r+0x2150>
 c004eb8:	d8c02617 	ldw	r3,152(sp)
 c004ebc:	e0f9883a 	add	fp,fp,r3
 c004ec0:	003e0a06 	br	c0046ec <__alt_data_end+0xfc0046ec>
 c004ec4:	00c00b44 	movi	r3,45
 c004ec8:	24e0003c 	xorhi	r19,r4,32768
 c004ecc:	d8c02905 	stb	r3,164(sp)
 c004ed0:	003de906 	br	c004678 <__alt_data_end+0xfc004678>
 c004ed4:	d8c03217 	ldw	r3,200(sp)
 c004ed8:	00c07a0e 	bge	zero,r3,c0050c4 <___vfprintf_internal_r+0x21e4>
 c004edc:	00800044 	movi	r2,1
 c004ee0:	d9003317 	ldw	r4,204(sp)
 c004ee4:	1105883a 	add	r2,r2,r4
 c004ee8:	d8802b15 	stw	r2,172(sp)
 c004eec:	10004e16 	blt	r2,zero,c005028 <___vfprintf_internal_r+0x2148>
 c004ef0:	044019c4 	movi	r17,103
 c004ef4:	003e2106 	br	c00477c <__alt_data_end+0xfc00477c>
 c004ef8:	d9002a17 	ldw	r4,168(sp)
 c004efc:	d8802104 	addi	r2,sp,132
 c004f00:	d8800315 	stw	r2,12(sp)
 c004f04:	d9000015 	stw	r4,0(sp)
 c004f08:	d8802504 	addi	r2,sp,148
 c004f0c:	d9403617 	ldw	r5,216(sp)
 c004f10:	d9002d17 	ldw	r4,180(sp)
 c004f14:	d8800215 	stw	r2,8(sp)
 c004f18:	d8802604 	addi	r2,sp,152
 c004f1c:	d8800115 	stw	r2,4(sp)
 c004f20:	01c000c4 	movi	r7,3
 c004f24:	980d883a 	mov	r6,r19
 c004f28:	da003d15 	stw	r8,244(sp)
 c004f2c:	c0056100 	call	c005610 <_dtoa_r>
 c004f30:	d8c02a17 	ldw	r3,168(sp)
 c004f34:	da003d17 	ldw	r8,244(sp)
 c004f38:	1021883a 	mov	r16,r2
 c004f3c:	00801184 	movi	r2,70
 c004f40:	80f9883a 	add	fp,r16,r3
 c004f44:	88bfd926 	beq	r17,r2,c004eac <__alt_data_end+0xfc004eac>
 c004f48:	003de806 	br	c0046ec <__alt_data_end+0xfc0046ec>
 c004f4c:	d9002a17 	ldw	r4,168(sp)
 c004f50:	00c04d0e 	bge	zero,r3,c005088 <___vfprintf_internal_r+0x21a8>
 c004f54:	2000441e 	bne	r4,zero,c005068 <___vfprintf_internal_r+0x2188>
 c004f58:	9480004c 	andi	r18,r18,1
 c004f5c:	9000421e 	bne	r18,zero,c005068 <___vfprintf_internal_r+0x2188>
 c004f60:	1805883a 	mov	r2,r3
 c004f64:	18006f16 	blt	r3,zero,c005124 <___vfprintf_internal_r+0x2244>
 c004f68:	d8c03217 	ldw	r3,200(sp)
 c004f6c:	d8c02b15 	stw	r3,172(sp)
 c004f70:	003e0206 	br	c00477c <__alt_data_end+0xfc00477c>
 c004f74:	df0022c4 	addi	fp,sp,139
 c004f78:	dc002a15 	stw	r16,168(sp)
 c004f7c:	4027883a 	mov	r19,r8
 c004f80:	e021883a 	mov	r16,fp
 c004f84:	b009883a 	mov	r4,r22
 c004f88:	01400284 	movi	r5,10
 c004f8c:	c002b900 	call	c002b90 <__modsi3>
 c004f90:	10800c04 	addi	r2,r2,48
 c004f94:	843fffc4 	addi	r16,r16,-1
 c004f98:	b009883a 	mov	r4,r22
 c004f9c:	01400284 	movi	r5,10
 c004fa0:	80800005 	stb	r2,0(r16)
 c004fa4:	c002b0c0 	call	c002b0c <__divsi3>
 c004fa8:	102d883a 	mov	r22,r2
 c004fac:	00800244 	movi	r2,9
 c004fb0:	15bff416 	blt	r2,r22,c004f84 <__alt_data_end+0xfc004f84>
 c004fb4:	9811883a 	mov	r8,r19
 c004fb8:	b0800c04 	addi	r2,r22,48
 c004fbc:	8027883a 	mov	r19,r16
 c004fc0:	997fffc4 	addi	r5,r19,-1
 c004fc4:	98bfffc5 	stb	r2,-1(r19)
 c004fc8:	dc002a17 	ldw	r16,168(sp)
 c004fcc:	2f006d2e 	bgeu	r5,fp,c005184 <___vfprintf_internal_r+0x22a4>
 c004fd0:	d9c02384 	addi	r7,sp,142
 c004fd4:	3ccfc83a 	sub	r7,r7,r19
 c004fd8:	d9002344 	addi	r4,sp,141
 c004fdc:	e1cf883a 	add	r7,fp,r7
 c004fe0:	00000106 	br	c004fe8 <___vfprintf_internal_r+0x2108>
 c004fe4:	28800003 	ldbu	r2,0(r5)
 c004fe8:	20800005 	stb	r2,0(r4)
 c004fec:	21000044 	addi	r4,r4,1
 c004ff0:	29400044 	addi	r5,r5,1
 c004ff4:	393ffb1e 	bne	r7,r4,c004fe4 <__alt_data_end+0xfc004fe4>
 c004ff8:	d8802304 	addi	r2,sp,140
 c004ffc:	14c5c83a 	sub	r2,r2,r19
 c005000:	d8c02344 	addi	r3,sp,141
 c005004:	1885883a 	add	r2,r3,r2
 c005008:	003f7006 	br	c004dcc <__alt_data_end+0xfc004dcc>
 c00500c:	0005883a 	mov	r2,zero
 c005010:	003f0f06 	br	c004c50 <__alt_data_end+0xfc004c50>
 c005014:	d8c03217 	ldw	r3,200(sp)
 c005018:	18c00044 	addi	r3,r3,1
 c00501c:	d8c02b15 	stw	r3,172(sp)
 c005020:	1805883a 	mov	r2,r3
 c005024:	183fb20e 	bge	r3,zero,c004ef0 <__alt_data_end+0xfc004ef0>
 c005028:	0005883a 	mov	r2,zero
 c00502c:	003fb006 	br	c004ef0 <__alt_data_end+0xfc004ef0>
 c005030:	d9003617 	ldw	r4,216(sp)
 c005034:	000d883a 	mov	r6,zero
 c005038:	000f883a 	mov	r7,zero
 c00503c:	980b883a 	mov	r5,r19
 c005040:	d8c03c15 	stw	r3,240(sp)
 c005044:	da003d15 	stw	r8,244(sp)
 c005048:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c00504c:	d8c03c17 	ldw	r3,240(sp)
 c005050:	da003d17 	ldw	r8,244(sp)
 c005054:	103f9826 	beq	r2,zero,c004eb8 <__alt_data_end+0xfc004eb8>
 c005058:	00800044 	movi	r2,1
 c00505c:	10c7c83a 	sub	r3,r2,r3
 c005060:	d8c02615 	stw	r3,152(sp)
 c005064:	003f9506 	br	c004ebc <__alt_data_end+0xfc004ebc>
 c005068:	d9002a17 	ldw	r4,168(sp)
 c00506c:	d8c03217 	ldw	r3,200(sp)
 c005070:	20800044 	addi	r2,r4,1
 c005074:	1885883a 	add	r2,r3,r2
 c005078:	d8802b15 	stw	r2,172(sp)
 c00507c:	103dbf0e 	bge	r2,zero,c00477c <__alt_data_end+0xfc00477c>
 c005080:	0005883a 	mov	r2,zero
 c005084:	003dbd06 	br	c00477c <__alt_data_end+0xfc00477c>
 c005088:	2000201e 	bne	r4,zero,c00510c <___vfprintf_internal_r+0x222c>
 c00508c:	9480004c 	andi	r18,r18,1
 c005090:	90001e1e 	bne	r18,zero,c00510c <___vfprintf_internal_r+0x222c>
 c005094:	00800044 	movi	r2,1
 c005098:	d8802b15 	stw	r2,172(sp)
 c00509c:	003db706 	br	c00477c <__alt_data_end+0xfc00477c>
 c0050a0:	00800b44 	movi	r2,45
 c0050a4:	05adc83a 	sub	r22,zero,r22
 c0050a8:	d8802305 	stb	r2,140(sp)
 c0050ac:	003f3f06 	br	c004dac <__alt_data_end+0xfc004dac>
 c0050b0:	0005883a 	mov	r2,zero
 c0050b4:	003f5206 	br	c004e00 <__alt_data_end+0xfc004e00>
 c0050b8:	90a4703a 	and	r18,r18,r2
 c0050bc:	903f4e26 	beq	r18,zero,c004df8 <__alt_data_end+0xfc004df8>
 c0050c0:	003f4a06 	br	c004dec <__alt_data_end+0xfc004dec>
 c0050c4:	00800084 	movi	r2,2
 c0050c8:	10c5c83a 	sub	r2,r2,r3
 c0050cc:	003f8406 	br	c004ee0 <__alt_data_end+0xfc004ee0>
 c0050d0:	d9402e17 	ldw	r5,184(sp)
 c0050d4:	d9002e17 	ldw	r4,184(sp)
 c0050d8:	ac400043 	ldbu	r17,1(r21)
 c0050dc:	29400017 	ldw	r5,0(r5)
 c0050e0:	20800104 	addi	r2,r4,4
 c0050e4:	d8802e15 	stw	r2,184(sp)
 c0050e8:	d9402a15 	stw	r5,168(sp)
 c0050ec:	182b883a 	mov	r21,r3
 c0050f0:	283e7b0e 	bge	r5,zero,c004ae0 <__alt_data_end+0xfc004ae0>
 c0050f4:	8c403fcc 	andi	r17,r17,255
 c0050f8:	017fffc4 	movi	r5,-1
 c0050fc:	8c40201c 	xori	r17,r17,128
 c005100:	d9402a15 	stw	r5,168(sp)
 c005104:	8c7fe004 	addi	r17,r17,-128
 c005108:	0037d706 	br	c003068 <__alt_data_end+0xfc003068>
 c00510c:	d8c02a17 	ldw	r3,168(sp)
 c005110:	18c00084 	addi	r3,r3,2
 c005114:	d8c02b15 	stw	r3,172(sp)
 c005118:	1805883a 	mov	r2,r3
 c00511c:	183d970e 	bge	r3,zero,c00477c <__alt_data_end+0xfc00477c>
 c005120:	003fd706 	br	c005080 <__alt_data_end+0xfc005080>
 c005124:	0005883a 	mov	r2,zero
 c005128:	003f8f06 	br	c004f68 <__alt_data_end+0xfc004f68>
 c00512c:	9080004c 	andi	r2,r18,1
 c005130:	103f821e 	bne	r2,zero,c004f3c <__alt_data_end+0xfc004f3c>
 c005134:	d8802117 	ldw	r2,132(sp)
 c005138:	1405c83a 	sub	r2,r2,r16
 c00513c:	d8803315 	stw	r2,204(sp)
 c005140:	b47ef426 	beq	r22,r17,c004d14 <__alt_data_end+0xfc004d14>
 c005144:	dd802617 	ldw	r22,152(sp)
 c005148:	003f1206 	br	c004d94 <__alt_data_end+0xfc004d94>
 c00514c:	d8c02b03 	ldbu	r3,172(sp)
 c005150:	d8c02785 	stb	r3,158(sp)
 c005154:	0038df06 	br	c0034d4 <__alt_data_end+0xfc0034d4>
 c005158:	d8c02b03 	ldbu	r3,172(sp)
 c00515c:	d8c02785 	stb	r3,158(sp)
 c005160:	0038aa06 	br	c00340c <__alt_data_end+0xfc00340c>
 c005164:	d8c02b03 	ldbu	r3,172(sp)
 c005168:	d8c02785 	stb	r3,158(sp)
 c00516c:	003a4306 	br	c003a7c <__alt_data_end+0xfc003a7c>
 c005170:	d8c02b03 	ldbu	r3,172(sp)
 c005174:	d8c02785 	stb	r3,158(sp)
 c005178:	003af506 	br	c003d50 <__alt_data_end+0xfc003d50>
 c00517c:	0005883a 	mov	r2,zero
 c005180:	003d7b06 	br	c004770 <__alt_data_end+0xfc004770>
 c005184:	d8802344 	addi	r2,sp,141
 c005188:	003f1006 	br	c004dcc <__alt_data_end+0xfc004dcc>
 c00518c:	d8c02b03 	ldbu	r3,172(sp)
 c005190:	d8c02785 	stb	r3,158(sp)
 c005194:	0038fd06 	br	c00358c <__alt_data_end+0xfc00358c>
 c005198:	d8c02b03 	ldbu	r3,172(sp)
 c00519c:	d8c02785 	stb	r3,158(sp)
 c0051a0:	003a9706 	br	c003c00 <__alt_data_end+0xfc003c00>
 c0051a4:	d8c02b03 	ldbu	r3,172(sp)
 c0051a8:	d8c02785 	stb	r3,158(sp)
 c0051ac:	003a1806 	br	c003a10 <__alt_data_end+0xfc003a10>
 c0051b0:	d8c02b03 	ldbu	r3,172(sp)
 c0051b4:	d8c02785 	stb	r3,158(sp)
 c0051b8:	003abe06 	br	c003cb4 <__alt_data_end+0xfc003cb4>

0c0051bc <__vfprintf_internal>:
 c0051bc:	00830074 	movhi	r2,3073
 c0051c0:	1091ca04 	addi	r2,r2,18216
 c0051c4:	300f883a 	mov	r7,r6
 c0051c8:	280d883a 	mov	r6,r5
 c0051cc:	200b883a 	mov	r5,r4
 c0051d0:	11000017 	ldw	r4,0(r2)
 c0051d4:	c002ee01 	jmpi	c002ee0 <___vfprintf_internal_r>

0c0051d8 <__sbprintf>:
 c0051d8:	2880030b 	ldhu	r2,12(r5)
 c0051dc:	2ac01917 	ldw	r11,100(r5)
 c0051e0:	2a80038b 	ldhu	r10,14(r5)
 c0051e4:	2a400717 	ldw	r9,28(r5)
 c0051e8:	2a000917 	ldw	r8,36(r5)
 c0051ec:	defee204 	addi	sp,sp,-1144
 c0051f0:	00c10004 	movi	r3,1024
 c0051f4:	dc011a15 	stw	r16,1128(sp)
 c0051f8:	10bfff4c 	andi	r2,r2,65533
 c0051fc:	2821883a 	mov	r16,r5
 c005200:	d8cb883a 	add	r5,sp,r3
 c005204:	dc811c15 	stw	r18,1136(sp)
 c005208:	dc411b15 	stw	r17,1132(sp)
 c00520c:	dfc11d15 	stw	ra,1140(sp)
 c005210:	2025883a 	mov	r18,r4
 c005214:	d881030d 	sth	r2,1036(sp)
 c005218:	dac11915 	stw	r11,1124(sp)
 c00521c:	da81038d 	sth	r10,1038(sp)
 c005220:	da410715 	stw	r9,1052(sp)
 c005224:	da010915 	stw	r8,1060(sp)
 c005228:	dec10015 	stw	sp,1024(sp)
 c00522c:	dec10415 	stw	sp,1040(sp)
 c005230:	d8c10215 	stw	r3,1032(sp)
 c005234:	d8c10515 	stw	r3,1044(sp)
 c005238:	d8010615 	stw	zero,1048(sp)
 c00523c:	c002ee00 	call	c002ee0 <___vfprintf_internal_r>
 c005240:	1023883a 	mov	r17,r2
 c005244:	10000416 	blt	r2,zero,c005258 <__sbprintf+0x80>
 c005248:	d9410004 	addi	r5,sp,1024
 c00524c:	9009883a 	mov	r4,r18
 c005250:	c006eb40 	call	c006eb4 <_fflush_r>
 c005254:	10000d1e 	bne	r2,zero,c00528c <__sbprintf+0xb4>
 c005258:	d881030b 	ldhu	r2,1036(sp)
 c00525c:	1080100c 	andi	r2,r2,64
 c005260:	10000326 	beq	r2,zero,c005270 <__sbprintf+0x98>
 c005264:	8080030b 	ldhu	r2,12(r16)
 c005268:	10801014 	ori	r2,r2,64
 c00526c:	8080030d 	sth	r2,12(r16)
 c005270:	8805883a 	mov	r2,r17
 c005274:	dfc11d17 	ldw	ra,1140(sp)
 c005278:	dc811c17 	ldw	r18,1136(sp)
 c00527c:	dc411b17 	ldw	r17,1132(sp)
 c005280:	dc011a17 	ldw	r16,1128(sp)
 c005284:	dec11e04 	addi	sp,sp,1144
 c005288:	f800283a 	ret
 c00528c:	047fffc4 	movi	r17,-1
 c005290:	003ff106 	br	c005258 <__alt_data_end+0xfc005258>

0c005294 <__swsetup_r>:
 c005294:	00830074 	movhi	r2,3073
 c005298:	defffd04 	addi	sp,sp,-12
 c00529c:	1091ca04 	addi	r2,r2,18216
 c0052a0:	dc400115 	stw	r17,4(sp)
 c0052a4:	2023883a 	mov	r17,r4
 c0052a8:	11000017 	ldw	r4,0(r2)
 c0052ac:	dc000015 	stw	r16,0(sp)
 c0052b0:	dfc00215 	stw	ra,8(sp)
 c0052b4:	2821883a 	mov	r16,r5
 c0052b8:	20000226 	beq	r4,zero,c0052c4 <__swsetup_r+0x30>
 c0052bc:	20800e17 	ldw	r2,56(r4)
 c0052c0:	10003126 	beq	r2,zero,c005388 <__swsetup_r+0xf4>
 c0052c4:	8080030b 	ldhu	r2,12(r16)
 c0052c8:	10c0020c 	andi	r3,r2,8
 c0052cc:	1009883a 	mov	r4,r2
 c0052d0:	18000f26 	beq	r3,zero,c005310 <__swsetup_r+0x7c>
 c0052d4:	80c00417 	ldw	r3,16(r16)
 c0052d8:	18001526 	beq	r3,zero,c005330 <__swsetup_r+0x9c>
 c0052dc:	1100004c 	andi	r4,r2,1
 c0052e0:	20001c1e 	bne	r4,zero,c005354 <__swsetup_r+0xc0>
 c0052e4:	1080008c 	andi	r2,r2,2
 c0052e8:	1000291e 	bne	r2,zero,c005390 <__swsetup_r+0xfc>
 c0052ec:	80800517 	ldw	r2,20(r16)
 c0052f0:	80800215 	stw	r2,8(r16)
 c0052f4:	18001c26 	beq	r3,zero,c005368 <__swsetup_r+0xd4>
 c0052f8:	0005883a 	mov	r2,zero
 c0052fc:	dfc00217 	ldw	ra,8(sp)
 c005300:	dc400117 	ldw	r17,4(sp)
 c005304:	dc000017 	ldw	r16,0(sp)
 c005308:	dec00304 	addi	sp,sp,12
 c00530c:	f800283a 	ret
 c005310:	2080040c 	andi	r2,r4,16
 c005314:	10002e26 	beq	r2,zero,c0053d0 <__swsetup_r+0x13c>
 c005318:	2080010c 	andi	r2,r4,4
 c00531c:	10001e1e 	bne	r2,zero,c005398 <__swsetup_r+0x104>
 c005320:	80c00417 	ldw	r3,16(r16)
 c005324:	20800214 	ori	r2,r4,8
 c005328:	8080030d 	sth	r2,12(r16)
 c00532c:	183feb1e 	bne	r3,zero,c0052dc <__alt_data_end+0xfc0052dc>
 c005330:	1100a00c 	andi	r4,r2,640
 c005334:	01408004 	movi	r5,512
 c005338:	217fe826 	beq	r4,r5,c0052dc <__alt_data_end+0xfc0052dc>
 c00533c:	800b883a 	mov	r5,r16
 c005340:	8809883a 	mov	r4,r17
 c005344:	c007e500 	call	c007e50 <__smakebuf_r>
 c005348:	8080030b 	ldhu	r2,12(r16)
 c00534c:	80c00417 	ldw	r3,16(r16)
 c005350:	003fe206 	br	c0052dc <__alt_data_end+0xfc0052dc>
 c005354:	80800517 	ldw	r2,20(r16)
 c005358:	80000215 	stw	zero,8(r16)
 c00535c:	0085c83a 	sub	r2,zero,r2
 c005360:	80800615 	stw	r2,24(r16)
 c005364:	183fe41e 	bne	r3,zero,c0052f8 <__alt_data_end+0xfc0052f8>
 c005368:	80c0030b 	ldhu	r3,12(r16)
 c00536c:	0005883a 	mov	r2,zero
 c005370:	1900200c 	andi	r4,r3,128
 c005374:	203fe126 	beq	r4,zero,c0052fc <__alt_data_end+0xfc0052fc>
 c005378:	18c01014 	ori	r3,r3,64
 c00537c:	80c0030d 	sth	r3,12(r16)
 c005380:	00bfffc4 	movi	r2,-1
 c005384:	003fdd06 	br	c0052fc <__alt_data_end+0xfc0052fc>
 c005388:	c0072a00 	call	c0072a0 <__sinit>
 c00538c:	003fcd06 	br	c0052c4 <__alt_data_end+0xfc0052c4>
 c005390:	0005883a 	mov	r2,zero
 c005394:	003fd606 	br	c0052f0 <__alt_data_end+0xfc0052f0>
 c005398:	81400c17 	ldw	r5,48(r16)
 c00539c:	28000626 	beq	r5,zero,c0053b8 <__swsetup_r+0x124>
 c0053a0:	80801004 	addi	r2,r16,64
 c0053a4:	28800326 	beq	r5,r2,c0053b4 <__swsetup_r+0x120>
 c0053a8:	8809883a 	mov	r4,r17
 c0053ac:	c0074140 	call	c007414 <_free_r>
 c0053b0:	8100030b 	ldhu	r4,12(r16)
 c0053b4:	80000c15 	stw	zero,48(r16)
 c0053b8:	80c00417 	ldw	r3,16(r16)
 c0053bc:	00bff6c4 	movi	r2,-37
 c0053c0:	1108703a 	and	r4,r2,r4
 c0053c4:	80000115 	stw	zero,4(r16)
 c0053c8:	80c00015 	stw	r3,0(r16)
 c0053cc:	003fd506 	br	c005324 <__alt_data_end+0xfc005324>
 c0053d0:	00800244 	movi	r2,9
 c0053d4:	88800015 	stw	r2,0(r17)
 c0053d8:	20801014 	ori	r2,r4,64
 c0053dc:	8080030d 	sth	r2,12(r16)
 c0053e0:	00bfffc4 	movi	r2,-1
 c0053e4:	003fc506 	br	c0052fc <__alt_data_end+0xfc0052fc>

0c0053e8 <quorem>:
 c0053e8:	defff204 	addi	sp,sp,-56
 c0053ec:	ddc00b15 	stw	r23,44(sp)
 c0053f0:	20800417 	ldw	r2,16(r4)
 c0053f4:	2dc00417 	ldw	r23,16(r5)
 c0053f8:	dfc00d15 	stw	ra,52(sp)
 c0053fc:	df000c15 	stw	fp,48(sp)
 c005400:	dd800a15 	stw	r22,40(sp)
 c005404:	dd400915 	stw	r21,36(sp)
 c005408:	dd000815 	stw	r20,32(sp)
 c00540c:	dcc00715 	stw	r19,28(sp)
 c005410:	dc800615 	stw	r18,24(sp)
 c005414:	dc400515 	stw	r17,20(sp)
 c005418:	dc000415 	stw	r16,16(sp)
 c00541c:	15c07a16 	blt	r2,r23,c005608 <quorem+0x220>
 c005420:	bdffffc4 	addi	r23,r23,-1
 c005424:	bde9883a 	add	r20,r23,r23
 c005428:	28c00504 	addi	r3,r5,20
 c00542c:	a529883a 	add	r20,r20,r20
 c005430:	1d39883a 	add	fp,r3,r20
 c005434:	24c00504 	addi	r19,r4,20
 c005438:	d9400215 	stw	r5,8(sp)
 c00543c:	9d29883a 	add	r20,r19,r20
 c005440:	e1400017 	ldw	r5,0(fp)
 c005444:	d9000015 	stw	r4,0(sp)
 c005448:	a1000017 	ldw	r4,0(r20)
 c00544c:	29400044 	addi	r5,r5,1
 c005450:	d8c00115 	stw	r3,4(sp)
 c005454:	dd000315 	stw	r20,12(sp)
 c005458:	c002c040 	call	c002c04 <__udivsi3>
 c00545c:	1025883a 	mov	r18,r2
 c005460:	10003026 	beq	r2,zero,c005524 <quorem+0x13c>
 c005464:	dc400117 	ldw	r17,4(sp)
 c005468:	9829883a 	mov	r20,r19
 c00546c:	002d883a 	mov	r22,zero
 c005470:	0021883a 	mov	r16,zero
 c005474:	8d400017 	ldw	r21,0(r17)
 c005478:	900b883a 	mov	r5,r18
 c00547c:	8c400104 	addi	r17,r17,4
 c005480:	a93fffcc 	andi	r4,r21,65535
 c005484:	c002cc00 	call	c002cc0 <__mulsi3>
 c005488:	a808d43a 	srli	r4,r21,16
 c00548c:	900b883a 	mov	r5,r18
 c005490:	15ad883a 	add	r22,r2,r22
 c005494:	c002cc00 	call	c002cc0 <__mulsi3>
 c005498:	a1000017 	ldw	r4,0(r20)
 c00549c:	b00cd43a 	srli	r6,r22,16
 c0054a0:	b0ffffcc 	andi	r3,r22,65535
 c0054a4:	217fffcc 	andi	r5,r4,65535
 c0054a8:	2c21883a 	add	r16,r5,r16
 c0054ac:	80c7c83a 	sub	r3,r16,r3
 c0054b0:	2008d43a 	srli	r4,r4,16
 c0054b4:	1185883a 	add	r2,r2,r6
 c0054b8:	1821d43a 	srai	r16,r3,16
 c0054bc:	117fffcc 	andi	r5,r2,65535
 c0054c0:	2149c83a 	sub	r4,r4,r5
 c0054c4:	2421883a 	add	r16,r4,r16
 c0054c8:	8008943a 	slli	r4,r16,16
 c0054cc:	18ffffcc 	andi	r3,r3,65535
 c0054d0:	102cd43a 	srli	r22,r2,16
 c0054d4:	20c8b03a 	or	r4,r4,r3
 c0054d8:	a1000015 	stw	r4,0(r20)
 c0054dc:	8021d43a 	srai	r16,r16,16
 c0054e0:	a5000104 	addi	r20,r20,4
 c0054e4:	e47fe32e 	bgeu	fp,r17,c005474 <__alt_data_end+0xfc005474>
 c0054e8:	d8c00317 	ldw	r3,12(sp)
 c0054ec:	18800017 	ldw	r2,0(r3)
 c0054f0:	10000c1e 	bne	r2,zero,c005524 <quorem+0x13c>
 c0054f4:	18bfff04 	addi	r2,r3,-4
 c0054f8:	9880082e 	bgeu	r19,r2,c00551c <quorem+0x134>
 c0054fc:	18ffff17 	ldw	r3,-4(r3)
 c005500:	18000326 	beq	r3,zero,c005510 <quorem+0x128>
 c005504:	00000506 	br	c00551c <quorem+0x134>
 c005508:	10c00017 	ldw	r3,0(r2)
 c00550c:	1800031e 	bne	r3,zero,c00551c <quorem+0x134>
 c005510:	10bfff04 	addi	r2,r2,-4
 c005514:	bdffffc4 	addi	r23,r23,-1
 c005518:	98bffb36 	bltu	r19,r2,c005508 <__alt_data_end+0xfc005508>
 c00551c:	d8c00017 	ldw	r3,0(sp)
 c005520:	1dc00415 	stw	r23,16(r3)
 c005524:	d9400217 	ldw	r5,8(sp)
 c005528:	d9000017 	ldw	r4,0(sp)
 c00552c:	c00964c0 	call	c00964c <__mcmp>
 c005530:	10002816 	blt	r2,zero,c0055d4 <quorem+0x1ec>
 c005534:	dc400117 	ldw	r17,4(sp)
 c005538:	94800044 	addi	r18,r18,1
 c00553c:	980d883a 	mov	r6,r19
 c005540:	0007883a 	mov	r3,zero
 c005544:	31000017 	ldw	r4,0(r6)
 c005548:	89400017 	ldw	r5,0(r17)
 c00554c:	31800104 	addi	r6,r6,4
 c005550:	20bfffcc 	andi	r2,r4,65535
 c005554:	10c7883a 	add	r3,r2,r3
 c005558:	28bfffcc 	andi	r2,r5,65535
 c00555c:	1885c83a 	sub	r2,r3,r2
 c005560:	280ad43a 	srli	r5,r5,16
 c005564:	2008d43a 	srli	r4,r4,16
 c005568:	1007d43a 	srai	r3,r2,16
 c00556c:	10bfffcc 	andi	r2,r2,65535
 c005570:	2149c83a 	sub	r4,r4,r5
 c005574:	20c9883a 	add	r4,r4,r3
 c005578:	200a943a 	slli	r5,r4,16
 c00557c:	8c400104 	addi	r17,r17,4
 c005580:	2007d43a 	srai	r3,r4,16
 c005584:	2884b03a 	or	r2,r5,r2
 c005588:	30bfff15 	stw	r2,-4(r6)
 c00558c:	e47fed2e 	bgeu	fp,r17,c005544 <__alt_data_end+0xfc005544>
 c005590:	bdc5883a 	add	r2,r23,r23
 c005594:	1085883a 	add	r2,r2,r2
 c005598:	9887883a 	add	r3,r19,r2
 c00559c:	18800017 	ldw	r2,0(r3)
 c0055a0:	10000c1e 	bne	r2,zero,c0055d4 <quorem+0x1ec>
 c0055a4:	18bfff04 	addi	r2,r3,-4
 c0055a8:	9880082e 	bgeu	r19,r2,c0055cc <quorem+0x1e4>
 c0055ac:	18ffff17 	ldw	r3,-4(r3)
 c0055b0:	18000326 	beq	r3,zero,c0055c0 <quorem+0x1d8>
 c0055b4:	00000506 	br	c0055cc <quorem+0x1e4>
 c0055b8:	10c00017 	ldw	r3,0(r2)
 c0055bc:	1800031e 	bne	r3,zero,c0055cc <quorem+0x1e4>
 c0055c0:	10bfff04 	addi	r2,r2,-4
 c0055c4:	bdffffc4 	addi	r23,r23,-1
 c0055c8:	98bffb36 	bltu	r19,r2,c0055b8 <__alt_data_end+0xfc0055b8>
 c0055cc:	d8c00017 	ldw	r3,0(sp)
 c0055d0:	1dc00415 	stw	r23,16(r3)
 c0055d4:	9005883a 	mov	r2,r18
 c0055d8:	dfc00d17 	ldw	ra,52(sp)
 c0055dc:	df000c17 	ldw	fp,48(sp)
 c0055e0:	ddc00b17 	ldw	r23,44(sp)
 c0055e4:	dd800a17 	ldw	r22,40(sp)
 c0055e8:	dd400917 	ldw	r21,36(sp)
 c0055ec:	dd000817 	ldw	r20,32(sp)
 c0055f0:	dcc00717 	ldw	r19,28(sp)
 c0055f4:	dc800617 	ldw	r18,24(sp)
 c0055f8:	dc400517 	ldw	r17,20(sp)
 c0055fc:	dc000417 	ldw	r16,16(sp)
 c005600:	dec00e04 	addi	sp,sp,56
 c005604:	f800283a 	ret
 c005608:	0005883a 	mov	r2,zero
 c00560c:	003ff206 	br	c0055d8 <__alt_data_end+0xfc0055d8>

0c005610 <_dtoa_r>:
 c005610:	20801017 	ldw	r2,64(r4)
 c005614:	deffde04 	addi	sp,sp,-136
 c005618:	df002015 	stw	fp,128(sp)
 c00561c:	dcc01b15 	stw	r19,108(sp)
 c005620:	dc801a15 	stw	r18,104(sp)
 c005624:	dc401915 	stw	r17,100(sp)
 c005628:	dc001815 	stw	r16,96(sp)
 c00562c:	dfc02115 	stw	ra,132(sp)
 c005630:	ddc01f15 	stw	r23,124(sp)
 c005634:	dd801e15 	stw	r22,120(sp)
 c005638:	dd401d15 	stw	r21,116(sp)
 c00563c:	dd001c15 	stw	r20,112(sp)
 c005640:	d9c00315 	stw	r7,12(sp)
 c005644:	2039883a 	mov	fp,r4
 c005648:	3023883a 	mov	r17,r6
 c00564c:	2825883a 	mov	r18,r5
 c005650:	dc002417 	ldw	r16,144(sp)
 c005654:	3027883a 	mov	r19,r6
 c005658:	10000826 	beq	r2,zero,c00567c <_dtoa_r+0x6c>
 c00565c:	21801117 	ldw	r6,68(r4)
 c005660:	00c00044 	movi	r3,1
 c005664:	100b883a 	mov	r5,r2
 c005668:	1986983a 	sll	r3,r3,r6
 c00566c:	11800115 	stw	r6,4(r2)
 c005670:	10c00215 	stw	r3,8(r2)
 c005674:	c008d700 	call	c008d70 <_Bfree>
 c005678:	e0001015 	stw	zero,64(fp)
 c00567c:	88002e16 	blt	r17,zero,c005738 <_dtoa_r+0x128>
 c005680:	80000015 	stw	zero,0(r16)
 c005684:	889ffc2c 	andhi	r2,r17,32752
 c005688:	00dffc34 	movhi	r3,32752
 c00568c:	10c01c26 	beq	r2,r3,c005700 <_dtoa_r+0xf0>
 c005690:	000d883a 	mov	r6,zero
 c005694:	000f883a 	mov	r7,zero
 c005698:	9009883a 	mov	r4,r18
 c00569c:	980b883a 	mov	r5,r19
 c0056a0:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c0056a4:	10002b1e 	bne	r2,zero,c005754 <_dtoa_r+0x144>
 c0056a8:	d9c02317 	ldw	r7,140(sp)
 c0056ac:	00800044 	movi	r2,1
 c0056b0:	38800015 	stw	r2,0(r7)
 c0056b4:	d8802517 	ldw	r2,148(sp)
 c0056b8:	10019e26 	beq	r2,zero,c005d34 <_dtoa_r+0x724>
 c0056bc:	d8c02517 	ldw	r3,148(sp)
 c0056c0:	00830074 	movhi	r2,3073
 c0056c4:	108a5f44 	addi	r2,r2,10621
 c0056c8:	18800015 	stw	r2,0(r3)
 c0056cc:	10bfffc4 	addi	r2,r2,-1
 c0056d0:	dfc02117 	ldw	ra,132(sp)
 c0056d4:	df002017 	ldw	fp,128(sp)
 c0056d8:	ddc01f17 	ldw	r23,124(sp)
 c0056dc:	dd801e17 	ldw	r22,120(sp)
 c0056e0:	dd401d17 	ldw	r21,116(sp)
 c0056e4:	dd001c17 	ldw	r20,112(sp)
 c0056e8:	dcc01b17 	ldw	r19,108(sp)
 c0056ec:	dc801a17 	ldw	r18,104(sp)
 c0056f0:	dc401917 	ldw	r17,100(sp)
 c0056f4:	dc001817 	ldw	r16,96(sp)
 c0056f8:	dec02204 	addi	sp,sp,136
 c0056fc:	f800283a 	ret
 c005700:	d8c02317 	ldw	r3,140(sp)
 c005704:	0089c3c4 	movi	r2,9999
 c005708:	18800015 	stw	r2,0(r3)
 c00570c:	90017726 	beq	r18,zero,c005cec <_dtoa_r+0x6dc>
 c005710:	00830074 	movhi	r2,3073
 c005714:	108a6b04 	addi	r2,r2,10668
 c005718:	d9002517 	ldw	r4,148(sp)
 c00571c:	203fec26 	beq	r4,zero,c0056d0 <__alt_data_end+0xfc0056d0>
 c005720:	10c000c7 	ldb	r3,3(r2)
 c005724:	1801781e 	bne	r3,zero,c005d08 <_dtoa_r+0x6f8>
 c005728:	10c000c4 	addi	r3,r2,3
 c00572c:	d9802517 	ldw	r6,148(sp)
 c005730:	30c00015 	stw	r3,0(r6)
 c005734:	003fe606 	br	c0056d0 <__alt_data_end+0xfc0056d0>
 c005738:	04e00034 	movhi	r19,32768
 c00573c:	9cffffc4 	addi	r19,r19,-1
 c005740:	00800044 	movi	r2,1
 c005744:	8ce6703a 	and	r19,r17,r19
 c005748:	80800015 	stw	r2,0(r16)
 c00574c:	9823883a 	mov	r17,r19
 c005750:	003fcc06 	br	c005684 <__alt_data_end+0xfc005684>
 c005754:	d8800204 	addi	r2,sp,8
 c005758:	d8800015 	stw	r2,0(sp)
 c00575c:	d9c00104 	addi	r7,sp,4
 c005760:	900b883a 	mov	r5,r18
 c005764:	980d883a 	mov	r6,r19
 c005768:	e009883a 	mov	r4,fp
 c00576c:	8820d53a 	srli	r16,r17,20
 c005770:	c009a180 	call	c009a18 <__d2b>
 c005774:	d8800915 	stw	r2,36(sp)
 c005778:	8001651e 	bne	r16,zero,c005d10 <_dtoa_r+0x700>
 c00577c:	dd800217 	ldw	r22,8(sp)
 c005780:	dc000117 	ldw	r16,4(sp)
 c005784:	00800804 	movi	r2,32
 c005788:	b421883a 	add	r16,r22,r16
 c00578c:	80c10c84 	addi	r3,r16,1074
 c005790:	10c2d10e 	bge	r2,r3,c0062d8 <_dtoa_r+0xcc8>
 c005794:	00801004 	movi	r2,64
 c005798:	81010484 	addi	r4,r16,1042
 c00579c:	10c7c83a 	sub	r3,r2,r3
 c0057a0:	9108d83a 	srl	r4,r18,r4
 c0057a4:	88e2983a 	sll	r17,r17,r3
 c0057a8:	2448b03a 	or	r4,r4,r17
 c0057ac:	c00fac80 	call	c00fac8 <__floatunsidf>
 c0057b0:	017f8434 	movhi	r5,65040
 c0057b4:	01800044 	movi	r6,1
 c0057b8:	1009883a 	mov	r4,r2
 c0057bc:	194b883a 	add	r5,r3,r5
 c0057c0:	843fffc4 	addi	r16,r16,-1
 c0057c4:	d9801115 	stw	r6,68(sp)
 c0057c8:	000d883a 	mov	r6,zero
 c0057cc:	01cffe34 	movhi	r7,16376
 c0057d0:	c00f0700 	call	c00f070 <__subdf3>
 c0057d4:	0198dbf4 	movhi	r6,25455
 c0057d8:	01cff4f4 	movhi	r7,16339
 c0057dc:	3190d844 	addi	r6,r6,17249
 c0057e0:	39e1e9c4 	addi	r7,r7,-30809
 c0057e4:	1009883a 	mov	r4,r2
 c0057e8:	180b883a 	mov	r5,r3
 c0057ec:	c00e8040 	call	c00e804 <__muldf3>
 c0057f0:	01a2d874 	movhi	r6,35681
 c0057f4:	01cff1f4 	movhi	r7,16327
 c0057f8:	31b22cc4 	addi	r6,r6,-14157
 c0057fc:	39e28a04 	addi	r7,r7,-30168
 c005800:	180b883a 	mov	r5,r3
 c005804:	1009883a 	mov	r4,r2
 c005808:	c00d3300 	call	c00d330 <__adddf3>
 c00580c:	8009883a 	mov	r4,r16
 c005810:	1029883a 	mov	r20,r2
 c005814:	1823883a 	mov	r17,r3
 c005818:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c00581c:	019427f4 	movhi	r6,20639
 c005820:	01cff4f4 	movhi	r7,16339
 c005824:	319e7ec4 	addi	r6,r6,31227
 c005828:	39d104c4 	addi	r7,r7,17427
 c00582c:	1009883a 	mov	r4,r2
 c005830:	180b883a 	mov	r5,r3
 c005834:	c00e8040 	call	c00e804 <__muldf3>
 c005838:	100d883a 	mov	r6,r2
 c00583c:	180f883a 	mov	r7,r3
 c005840:	a009883a 	mov	r4,r20
 c005844:	880b883a 	mov	r5,r17
 c005848:	c00d3300 	call	c00d330 <__adddf3>
 c00584c:	1009883a 	mov	r4,r2
 c005850:	180b883a 	mov	r5,r3
 c005854:	1029883a 	mov	r20,r2
 c005858:	1823883a 	mov	r17,r3
 c00585c:	c00f96c0 	call	c00f96c <__fixdfsi>
 c005860:	000d883a 	mov	r6,zero
 c005864:	000f883a 	mov	r7,zero
 c005868:	a009883a 	mov	r4,r20
 c00586c:	880b883a 	mov	r5,r17
 c005870:	d8800515 	stw	r2,20(sp)
 c005874:	c00e7100 	call	c00e710 <__ledf2>
 c005878:	10028716 	blt	r2,zero,c006298 <_dtoa_r+0xc88>
 c00587c:	d8c00517 	ldw	r3,20(sp)
 c005880:	00800584 	movi	r2,22
 c005884:	10c27536 	bltu	r2,r3,c00625c <_dtoa_r+0xc4c>
 c005888:	180490fa 	slli	r2,r3,3
 c00588c:	00c30074 	movhi	r3,3073
 c005890:	18ca8704 	addi	r3,r3,10780
 c005894:	1885883a 	add	r2,r3,r2
 c005898:	11000017 	ldw	r4,0(r2)
 c00589c:	11400117 	ldw	r5,4(r2)
 c0058a0:	900d883a 	mov	r6,r18
 c0058a4:	980f883a 	mov	r7,r19
 c0058a8:	c00e6340 	call	c00e634 <__gedf2>
 c0058ac:	00828d0e 	bge	zero,r2,c0062e4 <_dtoa_r+0xcd4>
 c0058b0:	d9000517 	ldw	r4,20(sp)
 c0058b4:	d8000e15 	stw	zero,56(sp)
 c0058b8:	213fffc4 	addi	r4,r4,-1
 c0058bc:	d9000515 	stw	r4,20(sp)
 c0058c0:	b42dc83a 	sub	r22,r22,r16
 c0058c4:	b5bfffc4 	addi	r22,r22,-1
 c0058c8:	b0026f16 	blt	r22,zero,c006288 <_dtoa_r+0xc78>
 c0058cc:	d8000815 	stw	zero,32(sp)
 c0058d0:	d9c00517 	ldw	r7,20(sp)
 c0058d4:	38026416 	blt	r7,zero,c006268 <_dtoa_r+0xc58>
 c0058d8:	b1ed883a 	add	r22,r22,r7
 c0058dc:	d9c00d15 	stw	r7,52(sp)
 c0058e0:	d8000a15 	stw	zero,40(sp)
 c0058e4:	d9800317 	ldw	r6,12(sp)
 c0058e8:	00800244 	movi	r2,9
 c0058ec:	11811436 	bltu	r2,r6,c005d40 <_dtoa_r+0x730>
 c0058f0:	00800144 	movi	r2,5
 c0058f4:	1184e10e 	bge	r2,r6,c006c7c <_dtoa_r+0x166c>
 c0058f8:	31bfff04 	addi	r6,r6,-4
 c0058fc:	d9800315 	stw	r6,12(sp)
 c005900:	0023883a 	mov	r17,zero
 c005904:	d9800317 	ldw	r6,12(sp)
 c005908:	008000c4 	movi	r2,3
 c00590c:	30836726 	beq	r6,r2,c0066ac <_dtoa_r+0x109c>
 c005910:	1183410e 	bge	r2,r6,c006618 <_dtoa_r+0x1008>
 c005914:	d9c00317 	ldw	r7,12(sp)
 c005918:	00800104 	movi	r2,4
 c00591c:	38827c26 	beq	r7,r2,c006310 <_dtoa_r+0xd00>
 c005920:	00800144 	movi	r2,5
 c005924:	3884c41e 	bne	r7,r2,c006c38 <_dtoa_r+0x1628>
 c005928:	00800044 	movi	r2,1
 c00592c:	d8800b15 	stw	r2,44(sp)
 c005930:	d8c00517 	ldw	r3,20(sp)
 c005934:	d9002217 	ldw	r4,136(sp)
 c005938:	1907883a 	add	r3,r3,r4
 c00593c:	19800044 	addi	r6,r3,1
 c005940:	d8c00c15 	stw	r3,48(sp)
 c005944:	d9800615 	stw	r6,24(sp)
 c005948:	0183a40e 	bge	zero,r6,c0067dc <_dtoa_r+0x11cc>
 c00594c:	d9800617 	ldw	r6,24(sp)
 c005950:	3021883a 	mov	r16,r6
 c005954:	e0001115 	stw	zero,68(fp)
 c005958:	008005c4 	movi	r2,23
 c00595c:	1184c92e 	bgeu	r2,r6,c006c84 <_dtoa_r+0x1674>
 c005960:	00c00044 	movi	r3,1
 c005964:	00800104 	movi	r2,4
 c005968:	1085883a 	add	r2,r2,r2
 c00596c:	11000504 	addi	r4,r2,20
 c005970:	180b883a 	mov	r5,r3
 c005974:	18c00044 	addi	r3,r3,1
 c005978:	313ffb2e 	bgeu	r6,r4,c005968 <__alt_data_end+0xfc005968>
 c00597c:	e1401115 	stw	r5,68(fp)
 c005980:	e009883a 	mov	r4,fp
 c005984:	c008cc80 	call	c008cc8 <_Balloc>
 c005988:	d8800715 	stw	r2,28(sp)
 c00598c:	e0801015 	stw	r2,64(fp)
 c005990:	00800384 	movi	r2,14
 c005994:	1400f736 	bltu	r2,r16,c005d74 <_dtoa_r+0x764>
 c005998:	8800f626 	beq	r17,zero,c005d74 <_dtoa_r+0x764>
 c00599c:	d9c00517 	ldw	r7,20(sp)
 c0059a0:	01c39a0e 	bge	zero,r7,c00680c <_dtoa_r+0x11fc>
 c0059a4:	388003cc 	andi	r2,r7,15
 c0059a8:	100490fa 	slli	r2,r2,3
 c0059ac:	382bd13a 	srai	r21,r7,4
 c0059b0:	00c30074 	movhi	r3,3073
 c0059b4:	18ca8704 	addi	r3,r3,10780
 c0059b8:	1885883a 	add	r2,r3,r2
 c0059bc:	a8c0040c 	andi	r3,r21,16
 c0059c0:	12400017 	ldw	r9,0(r2)
 c0059c4:	12000117 	ldw	r8,4(r2)
 c0059c8:	18037926 	beq	r3,zero,c0067b0 <_dtoa_r+0x11a0>
 c0059cc:	00830074 	movhi	r2,3073
 c0059d0:	108a7d04 	addi	r2,r2,10740
 c0059d4:	11800817 	ldw	r6,32(r2)
 c0059d8:	11c00917 	ldw	r7,36(r2)
 c0059dc:	9009883a 	mov	r4,r18
 c0059e0:	980b883a 	mov	r5,r19
 c0059e4:	da001715 	stw	r8,92(sp)
 c0059e8:	da401615 	stw	r9,88(sp)
 c0059ec:	c00dbdc0 	call	c00dbdc <__divdf3>
 c0059f0:	da001717 	ldw	r8,92(sp)
 c0059f4:	da401617 	ldw	r9,88(sp)
 c0059f8:	ad4003cc 	andi	r21,r21,15
 c0059fc:	040000c4 	movi	r16,3
 c005a00:	1023883a 	mov	r17,r2
 c005a04:	1829883a 	mov	r20,r3
 c005a08:	a8001126 	beq	r21,zero,c005a50 <_dtoa_r+0x440>
 c005a0c:	05c30074 	movhi	r23,3073
 c005a10:	bdca7d04 	addi	r23,r23,10740
 c005a14:	4805883a 	mov	r2,r9
 c005a18:	4007883a 	mov	r3,r8
 c005a1c:	a980004c 	andi	r6,r21,1
 c005a20:	1009883a 	mov	r4,r2
 c005a24:	a82bd07a 	srai	r21,r21,1
 c005a28:	180b883a 	mov	r5,r3
 c005a2c:	30000426 	beq	r6,zero,c005a40 <_dtoa_r+0x430>
 c005a30:	b9800017 	ldw	r6,0(r23)
 c005a34:	b9c00117 	ldw	r7,4(r23)
 c005a38:	84000044 	addi	r16,r16,1
 c005a3c:	c00e8040 	call	c00e804 <__muldf3>
 c005a40:	bdc00204 	addi	r23,r23,8
 c005a44:	a83ff51e 	bne	r21,zero,c005a1c <__alt_data_end+0xfc005a1c>
 c005a48:	1013883a 	mov	r9,r2
 c005a4c:	1811883a 	mov	r8,r3
 c005a50:	480d883a 	mov	r6,r9
 c005a54:	400f883a 	mov	r7,r8
 c005a58:	8809883a 	mov	r4,r17
 c005a5c:	a00b883a 	mov	r5,r20
 c005a60:	c00dbdc0 	call	c00dbdc <__divdf3>
 c005a64:	d8800f15 	stw	r2,60(sp)
 c005a68:	d8c01015 	stw	r3,64(sp)
 c005a6c:	d8c00e17 	ldw	r3,56(sp)
 c005a70:	18000626 	beq	r3,zero,c005a8c <_dtoa_r+0x47c>
 c005a74:	d9000f17 	ldw	r4,60(sp)
 c005a78:	d9401017 	ldw	r5,64(sp)
 c005a7c:	000d883a 	mov	r6,zero
 c005a80:	01cffc34 	movhi	r7,16368
 c005a84:	c00e7100 	call	c00e710 <__ledf2>
 c005a88:	10040b16 	blt	r2,zero,c006ab8 <_dtoa_r+0x14a8>
 c005a8c:	8009883a 	mov	r4,r16
 c005a90:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c005a94:	d9800f17 	ldw	r6,60(sp)
 c005a98:	d9c01017 	ldw	r7,64(sp)
 c005a9c:	1009883a 	mov	r4,r2
 c005aa0:	180b883a 	mov	r5,r3
 c005aa4:	c00e8040 	call	c00e804 <__muldf3>
 c005aa8:	000d883a 	mov	r6,zero
 c005aac:	01d00734 	movhi	r7,16412
 c005ab0:	1009883a 	mov	r4,r2
 c005ab4:	180b883a 	mov	r5,r3
 c005ab8:	c00d3300 	call	c00d330 <__adddf3>
 c005abc:	1021883a 	mov	r16,r2
 c005ac0:	d8800617 	ldw	r2,24(sp)
 c005ac4:	047f3034 	movhi	r17,64704
 c005ac8:	1c63883a 	add	r17,r3,r17
 c005acc:	10031826 	beq	r2,zero,c006730 <_dtoa_r+0x1120>
 c005ad0:	d8c00517 	ldw	r3,20(sp)
 c005ad4:	db000617 	ldw	r12,24(sp)
 c005ad8:	d8c01315 	stw	r3,76(sp)
 c005adc:	d9000b17 	ldw	r4,44(sp)
 c005ae0:	20038f26 	beq	r4,zero,c006920 <_dtoa_r+0x1310>
 c005ae4:	60bfffc4 	addi	r2,r12,-1
 c005ae8:	100490fa 	slli	r2,r2,3
 c005aec:	00c30074 	movhi	r3,3073
 c005af0:	18ca8704 	addi	r3,r3,10780
 c005af4:	1885883a 	add	r2,r3,r2
 c005af8:	11800017 	ldw	r6,0(r2)
 c005afc:	11c00117 	ldw	r7,4(r2)
 c005b00:	d8800717 	ldw	r2,28(sp)
 c005b04:	0009883a 	mov	r4,zero
 c005b08:	014ff834 	movhi	r5,16352
 c005b0c:	db001615 	stw	r12,88(sp)
 c005b10:	15c00044 	addi	r23,r2,1
 c005b14:	c00dbdc0 	call	c00dbdc <__divdf3>
 c005b18:	800d883a 	mov	r6,r16
 c005b1c:	880f883a 	mov	r7,r17
 c005b20:	1009883a 	mov	r4,r2
 c005b24:	180b883a 	mov	r5,r3
 c005b28:	c00f0700 	call	c00f070 <__subdf3>
 c005b2c:	d9401017 	ldw	r5,64(sp)
 c005b30:	d9000f17 	ldw	r4,60(sp)
 c005b34:	102b883a 	mov	r21,r2
 c005b38:	d8c01215 	stw	r3,72(sp)
 c005b3c:	c00f96c0 	call	c00f96c <__fixdfsi>
 c005b40:	1009883a 	mov	r4,r2
 c005b44:	1029883a 	mov	r20,r2
 c005b48:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c005b4c:	d9000f17 	ldw	r4,60(sp)
 c005b50:	d9401017 	ldw	r5,64(sp)
 c005b54:	100d883a 	mov	r6,r2
 c005b58:	180f883a 	mov	r7,r3
 c005b5c:	c00f0700 	call	c00f070 <__subdf3>
 c005b60:	1823883a 	mov	r17,r3
 c005b64:	d8c00717 	ldw	r3,28(sp)
 c005b68:	d9401217 	ldw	r5,72(sp)
 c005b6c:	a2000c04 	addi	r8,r20,48
 c005b70:	1021883a 	mov	r16,r2
 c005b74:	1a000005 	stb	r8,0(r3)
 c005b78:	800d883a 	mov	r6,r16
 c005b7c:	880f883a 	mov	r7,r17
 c005b80:	a809883a 	mov	r4,r21
 c005b84:	4029883a 	mov	r20,r8
 c005b88:	c00e6340 	call	c00e634 <__gedf2>
 c005b8c:	00841d16 	blt	zero,r2,c006c04 <_dtoa_r+0x15f4>
 c005b90:	800d883a 	mov	r6,r16
 c005b94:	880f883a 	mov	r7,r17
 c005b98:	0009883a 	mov	r4,zero
 c005b9c:	014ffc34 	movhi	r5,16368
 c005ba0:	c00f0700 	call	c00f070 <__subdf3>
 c005ba4:	d9401217 	ldw	r5,72(sp)
 c005ba8:	100d883a 	mov	r6,r2
 c005bac:	180f883a 	mov	r7,r3
 c005bb0:	a809883a 	mov	r4,r21
 c005bb4:	c00e6340 	call	c00e634 <__gedf2>
 c005bb8:	db001617 	ldw	r12,88(sp)
 c005bbc:	00840e16 	blt	zero,r2,c006bf8 <_dtoa_r+0x15e8>
 c005bc0:	00800044 	movi	r2,1
 c005bc4:	13006b0e 	bge	r2,r12,c005d74 <_dtoa_r+0x764>
 c005bc8:	d9000717 	ldw	r4,28(sp)
 c005bcc:	dd800f15 	stw	r22,60(sp)
 c005bd0:	dcc01015 	stw	r19,64(sp)
 c005bd4:	2319883a 	add	r12,r4,r12
 c005bd8:	dcc01217 	ldw	r19,72(sp)
 c005bdc:	602d883a 	mov	r22,r12
 c005be0:	dc801215 	stw	r18,72(sp)
 c005be4:	b825883a 	mov	r18,r23
 c005be8:	00000906 	br	c005c10 <_dtoa_r+0x600>
 c005bec:	c00f0700 	call	c00f070 <__subdf3>
 c005bf0:	a80d883a 	mov	r6,r21
 c005bf4:	980f883a 	mov	r7,r19
 c005bf8:	1009883a 	mov	r4,r2
 c005bfc:	180b883a 	mov	r5,r3
 c005c00:	c00e7100 	call	c00e710 <__ledf2>
 c005c04:	1003e816 	blt	r2,zero,c006ba8 <_dtoa_r+0x1598>
 c005c08:	b825883a 	mov	r18,r23
 c005c0c:	bd83e926 	beq	r23,r22,c006bb4 <_dtoa_r+0x15a4>
 c005c10:	a809883a 	mov	r4,r21
 c005c14:	980b883a 	mov	r5,r19
 c005c18:	000d883a 	mov	r6,zero
 c005c1c:	01d00934 	movhi	r7,16420
 c005c20:	c00e8040 	call	c00e804 <__muldf3>
 c005c24:	000d883a 	mov	r6,zero
 c005c28:	01d00934 	movhi	r7,16420
 c005c2c:	8009883a 	mov	r4,r16
 c005c30:	880b883a 	mov	r5,r17
 c005c34:	102b883a 	mov	r21,r2
 c005c38:	1827883a 	mov	r19,r3
 c005c3c:	c00e8040 	call	c00e804 <__muldf3>
 c005c40:	180b883a 	mov	r5,r3
 c005c44:	1009883a 	mov	r4,r2
 c005c48:	1821883a 	mov	r16,r3
 c005c4c:	1023883a 	mov	r17,r2
 c005c50:	c00f96c0 	call	c00f96c <__fixdfsi>
 c005c54:	1009883a 	mov	r4,r2
 c005c58:	1029883a 	mov	r20,r2
 c005c5c:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c005c60:	8809883a 	mov	r4,r17
 c005c64:	800b883a 	mov	r5,r16
 c005c68:	100d883a 	mov	r6,r2
 c005c6c:	180f883a 	mov	r7,r3
 c005c70:	c00f0700 	call	c00f070 <__subdf3>
 c005c74:	a5000c04 	addi	r20,r20,48
 c005c78:	a80d883a 	mov	r6,r21
 c005c7c:	980f883a 	mov	r7,r19
 c005c80:	1009883a 	mov	r4,r2
 c005c84:	180b883a 	mov	r5,r3
 c005c88:	95000005 	stb	r20,0(r18)
 c005c8c:	1021883a 	mov	r16,r2
 c005c90:	1823883a 	mov	r17,r3
 c005c94:	c00e7100 	call	c00e710 <__ledf2>
 c005c98:	bdc00044 	addi	r23,r23,1
 c005c9c:	800d883a 	mov	r6,r16
 c005ca0:	880f883a 	mov	r7,r17
 c005ca4:	0009883a 	mov	r4,zero
 c005ca8:	014ffc34 	movhi	r5,16368
 c005cac:	103fcf0e 	bge	r2,zero,c005bec <__alt_data_end+0xfc005bec>
 c005cb0:	d8c01317 	ldw	r3,76(sp)
 c005cb4:	d8c00515 	stw	r3,20(sp)
 c005cb8:	d9400917 	ldw	r5,36(sp)
 c005cbc:	e009883a 	mov	r4,fp
 c005cc0:	c008d700 	call	c008d70 <_Bfree>
 c005cc4:	d9000517 	ldw	r4,20(sp)
 c005cc8:	d9802317 	ldw	r6,140(sp)
 c005ccc:	d9c02517 	ldw	r7,148(sp)
 c005cd0:	b8000005 	stb	zero,0(r23)
 c005cd4:	20800044 	addi	r2,r4,1
 c005cd8:	30800015 	stw	r2,0(r6)
 c005cdc:	3802aa26 	beq	r7,zero,c006788 <_dtoa_r+0x1178>
 c005ce0:	3dc00015 	stw	r23,0(r7)
 c005ce4:	d8800717 	ldw	r2,28(sp)
 c005ce8:	003e7906 	br	c0056d0 <__alt_data_end+0xfc0056d0>
 c005cec:	00800434 	movhi	r2,16
 c005cf0:	10bfffc4 	addi	r2,r2,-1
 c005cf4:	88a2703a 	and	r17,r17,r2
 c005cf8:	883e851e 	bne	r17,zero,c005710 <__alt_data_end+0xfc005710>
 c005cfc:	00830074 	movhi	r2,3073
 c005d00:	108a6804 	addi	r2,r2,10656
 c005d04:	003e8406 	br	c005718 <__alt_data_end+0xfc005718>
 c005d08:	10c00204 	addi	r3,r2,8
 c005d0c:	003e8706 	br	c00572c <__alt_data_end+0xfc00572c>
 c005d10:	01400434 	movhi	r5,16
 c005d14:	297fffc4 	addi	r5,r5,-1
 c005d18:	994a703a 	and	r5,r19,r5
 c005d1c:	9009883a 	mov	r4,r18
 c005d20:	843f0044 	addi	r16,r16,-1023
 c005d24:	294ffc34 	orhi	r5,r5,16368
 c005d28:	dd800217 	ldw	r22,8(sp)
 c005d2c:	d8001115 	stw	zero,68(sp)
 c005d30:	003ea506 	br	c0057c8 <__alt_data_end+0xfc0057c8>
 c005d34:	00830074 	movhi	r2,3073
 c005d38:	108a5f04 	addi	r2,r2,10620
 c005d3c:	003e6406 	br	c0056d0 <__alt_data_end+0xfc0056d0>
 c005d40:	e0001115 	stw	zero,68(fp)
 c005d44:	000b883a 	mov	r5,zero
 c005d48:	e009883a 	mov	r4,fp
 c005d4c:	c008cc80 	call	c008cc8 <_Balloc>
 c005d50:	01bfffc4 	movi	r6,-1
 c005d54:	01c00044 	movi	r7,1
 c005d58:	d8800715 	stw	r2,28(sp)
 c005d5c:	d9800c15 	stw	r6,48(sp)
 c005d60:	e0801015 	stw	r2,64(fp)
 c005d64:	d8000315 	stw	zero,12(sp)
 c005d68:	d9c00b15 	stw	r7,44(sp)
 c005d6c:	d9800615 	stw	r6,24(sp)
 c005d70:	d8002215 	stw	zero,136(sp)
 c005d74:	d8800117 	ldw	r2,4(sp)
 c005d78:	10008916 	blt	r2,zero,c005fa0 <_dtoa_r+0x990>
 c005d7c:	d9000517 	ldw	r4,20(sp)
 c005d80:	00c00384 	movi	r3,14
 c005d84:	19008616 	blt	r3,r4,c005fa0 <_dtoa_r+0x990>
 c005d88:	200490fa 	slli	r2,r4,3
 c005d8c:	00c30074 	movhi	r3,3073
 c005d90:	d9802217 	ldw	r6,136(sp)
 c005d94:	18ca8704 	addi	r3,r3,10780
 c005d98:	1885883a 	add	r2,r3,r2
 c005d9c:	14000017 	ldw	r16,0(r2)
 c005da0:	14400117 	ldw	r17,4(r2)
 c005da4:	30016316 	blt	r6,zero,c006334 <_dtoa_r+0xd24>
 c005da8:	800d883a 	mov	r6,r16
 c005dac:	880f883a 	mov	r7,r17
 c005db0:	9009883a 	mov	r4,r18
 c005db4:	980b883a 	mov	r5,r19
 c005db8:	c00dbdc0 	call	c00dbdc <__divdf3>
 c005dbc:	180b883a 	mov	r5,r3
 c005dc0:	1009883a 	mov	r4,r2
 c005dc4:	c00f96c0 	call	c00f96c <__fixdfsi>
 c005dc8:	1009883a 	mov	r4,r2
 c005dcc:	102b883a 	mov	r21,r2
 c005dd0:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c005dd4:	800d883a 	mov	r6,r16
 c005dd8:	880f883a 	mov	r7,r17
 c005ddc:	1009883a 	mov	r4,r2
 c005de0:	180b883a 	mov	r5,r3
 c005de4:	c00e8040 	call	c00e804 <__muldf3>
 c005de8:	100d883a 	mov	r6,r2
 c005dec:	180f883a 	mov	r7,r3
 c005df0:	9009883a 	mov	r4,r18
 c005df4:	980b883a 	mov	r5,r19
 c005df8:	c00f0700 	call	c00f070 <__subdf3>
 c005dfc:	d9c00717 	ldw	r7,28(sp)
 c005e00:	1009883a 	mov	r4,r2
 c005e04:	a8800c04 	addi	r2,r21,48
 c005e08:	38800005 	stb	r2,0(r7)
 c005e0c:	3dc00044 	addi	r23,r7,1
 c005e10:	d9c00617 	ldw	r7,24(sp)
 c005e14:	01800044 	movi	r6,1
 c005e18:	180b883a 	mov	r5,r3
 c005e1c:	2005883a 	mov	r2,r4
 c005e20:	39803826 	beq	r7,r6,c005f04 <_dtoa_r+0x8f4>
 c005e24:	000d883a 	mov	r6,zero
 c005e28:	01d00934 	movhi	r7,16420
 c005e2c:	c00e8040 	call	c00e804 <__muldf3>
 c005e30:	000d883a 	mov	r6,zero
 c005e34:	000f883a 	mov	r7,zero
 c005e38:	1009883a 	mov	r4,r2
 c005e3c:	180b883a 	mov	r5,r3
 c005e40:	1025883a 	mov	r18,r2
 c005e44:	1827883a 	mov	r19,r3
 c005e48:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c005e4c:	103f9a26 	beq	r2,zero,c005cb8 <__alt_data_end+0xfc005cb8>
 c005e50:	d9c00617 	ldw	r7,24(sp)
 c005e54:	d8c00717 	ldw	r3,28(sp)
 c005e58:	b829883a 	mov	r20,r23
 c005e5c:	38bfffc4 	addi	r2,r7,-1
 c005e60:	18ad883a 	add	r22,r3,r2
 c005e64:	00000a06 	br	c005e90 <_dtoa_r+0x880>
 c005e68:	c00e8040 	call	c00e804 <__muldf3>
 c005e6c:	000d883a 	mov	r6,zero
 c005e70:	000f883a 	mov	r7,zero
 c005e74:	1009883a 	mov	r4,r2
 c005e78:	180b883a 	mov	r5,r3
 c005e7c:	1025883a 	mov	r18,r2
 c005e80:	1827883a 	mov	r19,r3
 c005e84:	b829883a 	mov	r20,r23
 c005e88:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c005e8c:	103f8a26 	beq	r2,zero,c005cb8 <__alt_data_end+0xfc005cb8>
 c005e90:	800d883a 	mov	r6,r16
 c005e94:	880f883a 	mov	r7,r17
 c005e98:	9009883a 	mov	r4,r18
 c005e9c:	980b883a 	mov	r5,r19
 c005ea0:	c00dbdc0 	call	c00dbdc <__divdf3>
 c005ea4:	180b883a 	mov	r5,r3
 c005ea8:	1009883a 	mov	r4,r2
 c005eac:	c00f96c0 	call	c00f96c <__fixdfsi>
 c005eb0:	1009883a 	mov	r4,r2
 c005eb4:	102b883a 	mov	r21,r2
 c005eb8:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c005ebc:	800d883a 	mov	r6,r16
 c005ec0:	880f883a 	mov	r7,r17
 c005ec4:	1009883a 	mov	r4,r2
 c005ec8:	180b883a 	mov	r5,r3
 c005ecc:	c00e8040 	call	c00e804 <__muldf3>
 c005ed0:	100d883a 	mov	r6,r2
 c005ed4:	180f883a 	mov	r7,r3
 c005ed8:	9009883a 	mov	r4,r18
 c005edc:	980b883a 	mov	r5,r19
 c005ee0:	c00f0700 	call	c00f070 <__subdf3>
 c005ee4:	aa000c04 	addi	r8,r21,48
 c005ee8:	a2000005 	stb	r8,0(r20)
 c005eec:	000d883a 	mov	r6,zero
 c005ef0:	01d00934 	movhi	r7,16420
 c005ef4:	1009883a 	mov	r4,r2
 c005ef8:	180b883a 	mov	r5,r3
 c005efc:	a5c00044 	addi	r23,r20,1
 c005f00:	b53fd91e 	bne	r22,r20,c005e68 <__alt_data_end+0xfc005e68>
 c005f04:	100d883a 	mov	r6,r2
 c005f08:	180f883a 	mov	r7,r3
 c005f0c:	1009883a 	mov	r4,r2
 c005f10:	180b883a 	mov	r5,r3
 c005f14:	c00d3300 	call	c00d330 <__adddf3>
 c005f18:	100d883a 	mov	r6,r2
 c005f1c:	180f883a 	mov	r7,r3
 c005f20:	8009883a 	mov	r4,r16
 c005f24:	880b883a 	mov	r5,r17
 c005f28:	1027883a 	mov	r19,r2
 c005f2c:	1825883a 	mov	r18,r3
 c005f30:	c00e7100 	call	c00e710 <__ledf2>
 c005f34:	10000816 	blt	r2,zero,c005f58 <_dtoa_r+0x948>
 c005f38:	980d883a 	mov	r6,r19
 c005f3c:	900f883a 	mov	r7,r18
 c005f40:	8009883a 	mov	r4,r16
 c005f44:	880b883a 	mov	r5,r17
 c005f48:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c005f4c:	103f5a1e 	bne	r2,zero,c005cb8 <__alt_data_end+0xfc005cb8>
 c005f50:	ad40004c 	andi	r21,r21,1
 c005f54:	a83f5826 	beq	r21,zero,c005cb8 <__alt_data_end+0xfc005cb8>
 c005f58:	bd3fffc3 	ldbu	r20,-1(r23)
 c005f5c:	b8bfffc4 	addi	r2,r23,-1
 c005f60:	1007883a 	mov	r3,r2
 c005f64:	01400e44 	movi	r5,57
 c005f68:	d9800717 	ldw	r6,28(sp)
 c005f6c:	00000506 	br	c005f84 <_dtoa_r+0x974>
 c005f70:	18ffffc4 	addi	r3,r3,-1
 c005f74:	11824726 	beq	r2,r6,c006894 <_dtoa_r+0x1284>
 c005f78:	1d000003 	ldbu	r20,0(r3)
 c005f7c:	102f883a 	mov	r23,r2
 c005f80:	10bfffc4 	addi	r2,r2,-1
 c005f84:	a1003fcc 	andi	r4,r20,255
 c005f88:	2100201c 	xori	r4,r4,128
 c005f8c:	213fe004 	addi	r4,r4,-128
 c005f90:	217ff726 	beq	r4,r5,c005f70 <__alt_data_end+0xfc005f70>
 c005f94:	a2000044 	addi	r8,r20,1
 c005f98:	12000005 	stb	r8,0(r2)
 c005f9c:	003f4606 	br	c005cb8 <__alt_data_end+0xfc005cb8>
 c005fa0:	d9000b17 	ldw	r4,44(sp)
 c005fa4:	2000c826 	beq	r4,zero,c0062c8 <_dtoa_r+0xcb8>
 c005fa8:	d9800317 	ldw	r6,12(sp)
 c005fac:	00c00044 	movi	r3,1
 c005fb0:	1980f90e 	bge	r3,r6,c006398 <_dtoa_r+0xd88>
 c005fb4:	d8800617 	ldw	r2,24(sp)
 c005fb8:	d8c00a17 	ldw	r3,40(sp)
 c005fbc:	157fffc4 	addi	r21,r2,-1
 c005fc0:	1d41f316 	blt	r3,r21,c006790 <_dtoa_r+0x1180>
 c005fc4:	1d6bc83a 	sub	r21,r3,r21
 c005fc8:	d9c00617 	ldw	r7,24(sp)
 c005fcc:	3802aa16 	blt	r7,zero,c006a78 <_dtoa_r+0x1468>
 c005fd0:	dd000817 	ldw	r20,32(sp)
 c005fd4:	d8800617 	ldw	r2,24(sp)
 c005fd8:	d8c00817 	ldw	r3,32(sp)
 c005fdc:	01400044 	movi	r5,1
 c005fe0:	e009883a 	mov	r4,fp
 c005fe4:	1887883a 	add	r3,r3,r2
 c005fe8:	d8c00815 	stw	r3,32(sp)
 c005fec:	b0ad883a 	add	r22,r22,r2
 c005ff0:	c0090fc0 	call	c0090fc <__i2b>
 c005ff4:	1023883a 	mov	r17,r2
 c005ff8:	a0000826 	beq	r20,zero,c00601c <_dtoa_r+0xa0c>
 c005ffc:	0580070e 	bge	zero,r22,c00601c <_dtoa_r+0xa0c>
 c006000:	a005883a 	mov	r2,r20
 c006004:	b500b916 	blt	r22,r20,c0062ec <_dtoa_r+0xcdc>
 c006008:	d9000817 	ldw	r4,32(sp)
 c00600c:	a0a9c83a 	sub	r20,r20,r2
 c006010:	b0adc83a 	sub	r22,r22,r2
 c006014:	2089c83a 	sub	r4,r4,r2
 c006018:	d9000815 	stw	r4,32(sp)
 c00601c:	d9800a17 	ldw	r6,40(sp)
 c006020:	0181810e 	bge	zero,r6,c006628 <_dtoa_r+0x1018>
 c006024:	d9c00b17 	ldw	r7,44(sp)
 c006028:	3800b326 	beq	r7,zero,c0062f8 <_dtoa_r+0xce8>
 c00602c:	a800b226 	beq	r21,zero,c0062f8 <_dtoa_r+0xce8>
 c006030:	880b883a 	mov	r5,r17
 c006034:	a80d883a 	mov	r6,r21
 c006038:	e009883a 	mov	r4,fp
 c00603c:	c0093c40 	call	c0093c4 <__pow5mult>
 c006040:	d9800917 	ldw	r6,36(sp)
 c006044:	100b883a 	mov	r5,r2
 c006048:	e009883a 	mov	r4,fp
 c00604c:	1023883a 	mov	r17,r2
 c006050:	c0091380 	call	c009138 <__multiply>
 c006054:	1021883a 	mov	r16,r2
 c006058:	d8800a17 	ldw	r2,40(sp)
 c00605c:	d9400917 	ldw	r5,36(sp)
 c006060:	e009883a 	mov	r4,fp
 c006064:	1545c83a 	sub	r2,r2,r21
 c006068:	d8800a15 	stw	r2,40(sp)
 c00606c:	c008d700 	call	c008d70 <_Bfree>
 c006070:	d8c00a17 	ldw	r3,40(sp)
 c006074:	18009f1e 	bne	r3,zero,c0062f4 <_dtoa_r+0xce4>
 c006078:	05c00044 	movi	r23,1
 c00607c:	e009883a 	mov	r4,fp
 c006080:	b80b883a 	mov	r5,r23
 c006084:	c0090fc0 	call	c0090fc <__i2b>
 c006088:	d9000d17 	ldw	r4,52(sp)
 c00608c:	102b883a 	mov	r21,r2
 c006090:	2000ce26 	beq	r4,zero,c0063cc <_dtoa_r+0xdbc>
 c006094:	200d883a 	mov	r6,r4
 c006098:	100b883a 	mov	r5,r2
 c00609c:	e009883a 	mov	r4,fp
 c0060a0:	c0093c40 	call	c0093c4 <__pow5mult>
 c0060a4:	d9800317 	ldw	r6,12(sp)
 c0060a8:	102b883a 	mov	r21,r2
 c0060ac:	b981810e 	bge	r23,r6,c0066b4 <_dtoa_r+0x10a4>
 c0060b0:	0027883a 	mov	r19,zero
 c0060b4:	a8800417 	ldw	r2,16(r21)
 c0060b8:	05c00804 	movi	r23,32
 c0060bc:	10800104 	addi	r2,r2,4
 c0060c0:	1085883a 	add	r2,r2,r2
 c0060c4:	1085883a 	add	r2,r2,r2
 c0060c8:	a885883a 	add	r2,r21,r2
 c0060cc:	11000017 	ldw	r4,0(r2)
 c0060d0:	c008fe40 	call	c008fe4 <__hi0bits>
 c0060d4:	b885c83a 	sub	r2,r23,r2
 c0060d8:	1585883a 	add	r2,r2,r22
 c0060dc:	108007cc 	andi	r2,r2,31
 c0060e0:	1000b326 	beq	r2,zero,c0063b0 <_dtoa_r+0xda0>
 c0060e4:	00c00804 	movi	r3,32
 c0060e8:	1887c83a 	sub	r3,r3,r2
 c0060ec:	01000104 	movi	r4,4
 c0060f0:	20c2cd0e 	bge	r4,r3,c006c28 <_dtoa_r+0x1618>
 c0060f4:	00c00704 	movi	r3,28
 c0060f8:	1885c83a 	sub	r2,r3,r2
 c0060fc:	d8c00817 	ldw	r3,32(sp)
 c006100:	a0a9883a 	add	r20,r20,r2
 c006104:	b0ad883a 	add	r22,r22,r2
 c006108:	1887883a 	add	r3,r3,r2
 c00610c:	d8c00815 	stw	r3,32(sp)
 c006110:	d9800817 	ldw	r6,32(sp)
 c006114:	0180040e 	bge	zero,r6,c006128 <_dtoa_r+0xb18>
 c006118:	800b883a 	mov	r5,r16
 c00611c:	e009883a 	mov	r4,fp
 c006120:	c0095040 	call	c009504 <__lshift>
 c006124:	1021883a 	mov	r16,r2
 c006128:	0580050e 	bge	zero,r22,c006140 <_dtoa_r+0xb30>
 c00612c:	a80b883a 	mov	r5,r21
 c006130:	b00d883a 	mov	r6,r22
 c006134:	e009883a 	mov	r4,fp
 c006138:	c0095040 	call	c009504 <__lshift>
 c00613c:	102b883a 	mov	r21,r2
 c006140:	d9c00e17 	ldw	r7,56(sp)
 c006144:	3801211e 	bne	r7,zero,c0065cc <_dtoa_r+0xfbc>
 c006148:	d9800617 	ldw	r6,24(sp)
 c00614c:	0181380e 	bge	zero,r6,c006630 <_dtoa_r+0x1020>
 c006150:	d8c00b17 	ldw	r3,44(sp)
 c006154:	1800ab1e 	bne	r3,zero,c006404 <_dtoa_r+0xdf4>
 c006158:	dc800717 	ldw	r18,28(sp)
 c00615c:	dcc00617 	ldw	r19,24(sp)
 c006160:	9029883a 	mov	r20,r18
 c006164:	00000206 	br	c006170 <_dtoa_r+0xb60>
 c006168:	c008d980 	call	c008d98 <__multadd>
 c00616c:	1021883a 	mov	r16,r2
 c006170:	a80b883a 	mov	r5,r21
 c006174:	8009883a 	mov	r4,r16
 c006178:	c0053e80 	call	c0053e8 <quorem>
 c00617c:	10800c04 	addi	r2,r2,48
 c006180:	90800005 	stb	r2,0(r18)
 c006184:	94800044 	addi	r18,r18,1
 c006188:	9507c83a 	sub	r3,r18,r20
 c00618c:	000f883a 	mov	r7,zero
 c006190:	01800284 	movi	r6,10
 c006194:	800b883a 	mov	r5,r16
 c006198:	e009883a 	mov	r4,fp
 c00619c:	1cfff216 	blt	r3,r19,c006168 <__alt_data_end+0xfc006168>
 c0061a0:	1011883a 	mov	r8,r2
 c0061a4:	d8800617 	ldw	r2,24(sp)
 c0061a8:	0082370e 	bge	zero,r2,c006a88 <_dtoa_r+0x1478>
 c0061ac:	d9000717 	ldw	r4,28(sp)
 c0061b0:	0025883a 	mov	r18,zero
 c0061b4:	20af883a 	add	r23,r4,r2
 c0061b8:	01800044 	movi	r6,1
 c0061bc:	800b883a 	mov	r5,r16
 c0061c0:	e009883a 	mov	r4,fp
 c0061c4:	da001715 	stw	r8,92(sp)
 c0061c8:	c0095040 	call	c009504 <__lshift>
 c0061cc:	a80b883a 	mov	r5,r21
 c0061d0:	1009883a 	mov	r4,r2
 c0061d4:	d8800915 	stw	r2,36(sp)
 c0061d8:	c00964c0 	call	c00964c <__mcmp>
 c0061dc:	da001717 	ldw	r8,92(sp)
 c0061e0:	0081800e 	bge	zero,r2,c0067e4 <_dtoa_r+0x11d4>
 c0061e4:	b93fffc3 	ldbu	r4,-1(r23)
 c0061e8:	b8bfffc4 	addi	r2,r23,-1
 c0061ec:	1007883a 	mov	r3,r2
 c0061f0:	01800e44 	movi	r6,57
 c0061f4:	d9c00717 	ldw	r7,28(sp)
 c0061f8:	00000506 	br	c006210 <_dtoa_r+0xc00>
 c0061fc:	18ffffc4 	addi	r3,r3,-1
 c006200:	11c12326 	beq	r2,r7,c006690 <_dtoa_r+0x1080>
 c006204:	19000003 	ldbu	r4,0(r3)
 c006208:	102f883a 	mov	r23,r2
 c00620c:	10bfffc4 	addi	r2,r2,-1
 c006210:	21403fcc 	andi	r5,r4,255
 c006214:	2940201c 	xori	r5,r5,128
 c006218:	297fe004 	addi	r5,r5,-128
 c00621c:	29bff726 	beq	r5,r6,c0061fc <__alt_data_end+0xfc0061fc>
 c006220:	21000044 	addi	r4,r4,1
 c006224:	11000005 	stb	r4,0(r2)
 c006228:	a80b883a 	mov	r5,r21
 c00622c:	e009883a 	mov	r4,fp
 c006230:	c008d700 	call	c008d70 <_Bfree>
 c006234:	883ea026 	beq	r17,zero,c005cb8 <__alt_data_end+0xfc005cb8>
 c006238:	90000426 	beq	r18,zero,c00624c <_dtoa_r+0xc3c>
 c00623c:	94400326 	beq	r18,r17,c00624c <_dtoa_r+0xc3c>
 c006240:	900b883a 	mov	r5,r18
 c006244:	e009883a 	mov	r4,fp
 c006248:	c008d700 	call	c008d70 <_Bfree>
 c00624c:	880b883a 	mov	r5,r17
 c006250:	e009883a 	mov	r4,fp
 c006254:	c008d700 	call	c008d70 <_Bfree>
 c006258:	003e9706 	br	c005cb8 <__alt_data_end+0xfc005cb8>
 c00625c:	01800044 	movi	r6,1
 c006260:	d9800e15 	stw	r6,56(sp)
 c006264:	003d9606 	br	c0058c0 <__alt_data_end+0xfc0058c0>
 c006268:	d8800817 	ldw	r2,32(sp)
 c00626c:	d8c00517 	ldw	r3,20(sp)
 c006270:	d8000d15 	stw	zero,52(sp)
 c006274:	10c5c83a 	sub	r2,r2,r3
 c006278:	00c9c83a 	sub	r4,zero,r3
 c00627c:	d8800815 	stw	r2,32(sp)
 c006280:	d9000a15 	stw	r4,40(sp)
 c006284:	003d9706 	br	c0058e4 <__alt_data_end+0xfc0058e4>
 c006288:	05adc83a 	sub	r22,zero,r22
 c00628c:	dd800815 	stw	r22,32(sp)
 c006290:	002d883a 	mov	r22,zero
 c006294:	003d8e06 	br	c0058d0 <__alt_data_end+0xfc0058d0>
 c006298:	d9000517 	ldw	r4,20(sp)
 c00629c:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c0062a0:	100d883a 	mov	r6,r2
 c0062a4:	180f883a 	mov	r7,r3
 c0062a8:	a009883a 	mov	r4,r20
 c0062ac:	880b883a 	mov	r5,r17
 c0062b0:	c00e5ac0 	call	c00e5ac <__eqdf2>
 c0062b4:	103d7126 	beq	r2,zero,c00587c <__alt_data_end+0xfc00587c>
 c0062b8:	d9c00517 	ldw	r7,20(sp)
 c0062bc:	39ffffc4 	addi	r7,r7,-1
 c0062c0:	d9c00515 	stw	r7,20(sp)
 c0062c4:	003d6d06 	br	c00587c <__alt_data_end+0xfc00587c>
 c0062c8:	dd400a17 	ldw	r21,40(sp)
 c0062cc:	dd000817 	ldw	r20,32(sp)
 c0062d0:	0023883a 	mov	r17,zero
 c0062d4:	003f4806 	br	c005ff8 <__alt_data_end+0xfc005ff8>
 c0062d8:	10e3c83a 	sub	r17,r2,r3
 c0062dc:	9448983a 	sll	r4,r18,r17
 c0062e0:	003d3206 	br	c0057ac <__alt_data_end+0xfc0057ac>
 c0062e4:	d8000e15 	stw	zero,56(sp)
 c0062e8:	003d7506 	br	c0058c0 <__alt_data_end+0xfc0058c0>
 c0062ec:	b005883a 	mov	r2,r22
 c0062f0:	003f4506 	br	c006008 <__alt_data_end+0xfc006008>
 c0062f4:	dc000915 	stw	r16,36(sp)
 c0062f8:	d9800a17 	ldw	r6,40(sp)
 c0062fc:	d9400917 	ldw	r5,36(sp)
 c006300:	e009883a 	mov	r4,fp
 c006304:	c0093c40 	call	c0093c4 <__pow5mult>
 c006308:	1021883a 	mov	r16,r2
 c00630c:	003f5a06 	br	c006078 <__alt_data_end+0xfc006078>
 c006310:	01c00044 	movi	r7,1
 c006314:	d9c00b15 	stw	r7,44(sp)
 c006318:	d8802217 	ldw	r2,136(sp)
 c00631c:	0081280e 	bge	zero,r2,c0067c0 <_dtoa_r+0x11b0>
 c006320:	100d883a 	mov	r6,r2
 c006324:	1021883a 	mov	r16,r2
 c006328:	d8800c15 	stw	r2,48(sp)
 c00632c:	d8800615 	stw	r2,24(sp)
 c006330:	003d8806 	br	c005954 <__alt_data_end+0xfc005954>
 c006334:	d8800617 	ldw	r2,24(sp)
 c006338:	00be9b16 	blt	zero,r2,c005da8 <__alt_data_end+0xfc005da8>
 c00633c:	10010f1e 	bne	r2,zero,c00677c <_dtoa_r+0x116c>
 c006340:	880b883a 	mov	r5,r17
 c006344:	000d883a 	mov	r6,zero
 c006348:	01d00534 	movhi	r7,16404
 c00634c:	8009883a 	mov	r4,r16
 c006350:	c00e8040 	call	c00e804 <__muldf3>
 c006354:	900d883a 	mov	r6,r18
 c006358:	980f883a 	mov	r7,r19
 c00635c:	1009883a 	mov	r4,r2
 c006360:	180b883a 	mov	r5,r3
 c006364:	c00e6340 	call	c00e634 <__gedf2>
 c006368:	002b883a 	mov	r21,zero
 c00636c:	0023883a 	mov	r17,zero
 c006370:	1000bf16 	blt	r2,zero,c006670 <_dtoa_r+0x1060>
 c006374:	d9802217 	ldw	r6,136(sp)
 c006378:	ddc00717 	ldw	r23,28(sp)
 c00637c:	018c303a 	nor	r6,zero,r6
 c006380:	d9800515 	stw	r6,20(sp)
 c006384:	a80b883a 	mov	r5,r21
 c006388:	e009883a 	mov	r4,fp
 c00638c:	c008d700 	call	c008d70 <_Bfree>
 c006390:	883e4926 	beq	r17,zero,c005cb8 <__alt_data_end+0xfc005cb8>
 c006394:	003fad06 	br	c00624c <__alt_data_end+0xfc00624c>
 c006398:	d9c01117 	ldw	r7,68(sp)
 c00639c:	3801bc26 	beq	r7,zero,c006a90 <_dtoa_r+0x1480>
 c0063a0:	10810cc4 	addi	r2,r2,1075
 c0063a4:	dd400a17 	ldw	r21,40(sp)
 c0063a8:	dd000817 	ldw	r20,32(sp)
 c0063ac:	003f0a06 	br	c005fd8 <__alt_data_end+0xfc005fd8>
 c0063b0:	00800704 	movi	r2,28
 c0063b4:	d9000817 	ldw	r4,32(sp)
 c0063b8:	a0a9883a 	add	r20,r20,r2
 c0063bc:	b0ad883a 	add	r22,r22,r2
 c0063c0:	2089883a 	add	r4,r4,r2
 c0063c4:	d9000815 	stw	r4,32(sp)
 c0063c8:	003f5106 	br	c006110 <__alt_data_end+0xfc006110>
 c0063cc:	d8c00317 	ldw	r3,12(sp)
 c0063d0:	b8c1fc0e 	bge	r23,r3,c006bc4 <_dtoa_r+0x15b4>
 c0063d4:	0027883a 	mov	r19,zero
 c0063d8:	b805883a 	mov	r2,r23
 c0063dc:	003f3e06 	br	c0060d8 <__alt_data_end+0xfc0060d8>
 c0063e0:	880b883a 	mov	r5,r17
 c0063e4:	e009883a 	mov	r4,fp
 c0063e8:	000f883a 	mov	r7,zero
 c0063ec:	01800284 	movi	r6,10
 c0063f0:	c008d980 	call	c008d98 <__multadd>
 c0063f4:	d9000c17 	ldw	r4,48(sp)
 c0063f8:	1023883a 	mov	r17,r2
 c0063fc:	0102040e 	bge	zero,r4,c006c10 <_dtoa_r+0x1600>
 c006400:	d9000615 	stw	r4,24(sp)
 c006404:	0500050e 	bge	zero,r20,c00641c <_dtoa_r+0xe0c>
 c006408:	880b883a 	mov	r5,r17
 c00640c:	a00d883a 	mov	r6,r20
 c006410:	e009883a 	mov	r4,fp
 c006414:	c0095040 	call	c009504 <__lshift>
 c006418:	1023883a 	mov	r17,r2
 c00641c:	9801241e 	bne	r19,zero,c0068b0 <_dtoa_r+0x12a0>
 c006420:	8829883a 	mov	r20,r17
 c006424:	d9000617 	ldw	r4,24(sp)
 c006428:	dcc00717 	ldw	r19,28(sp)
 c00642c:	9480004c 	andi	r18,r18,1
 c006430:	20bfffc4 	addi	r2,r4,-1
 c006434:	9885883a 	add	r2,r19,r2
 c006438:	d8800415 	stw	r2,16(sp)
 c00643c:	dc800615 	stw	r18,24(sp)
 c006440:	a80b883a 	mov	r5,r21
 c006444:	8009883a 	mov	r4,r16
 c006448:	c0053e80 	call	c0053e8 <quorem>
 c00644c:	880b883a 	mov	r5,r17
 c006450:	8009883a 	mov	r4,r16
 c006454:	102f883a 	mov	r23,r2
 c006458:	c00964c0 	call	c00964c <__mcmp>
 c00645c:	a80b883a 	mov	r5,r21
 c006460:	a00d883a 	mov	r6,r20
 c006464:	e009883a 	mov	r4,fp
 c006468:	102d883a 	mov	r22,r2
 c00646c:	c0096ac0 	call	c0096ac <__mdiff>
 c006470:	1007883a 	mov	r3,r2
 c006474:	10800317 	ldw	r2,12(r2)
 c006478:	bc800c04 	addi	r18,r23,48
 c00647c:	180b883a 	mov	r5,r3
 c006480:	10004e1e 	bne	r2,zero,c0065bc <_dtoa_r+0xfac>
 c006484:	8009883a 	mov	r4,r16
 c006488:	d8c01615 	stw	r3,88(sp)
 c00648c:	c00964c0 	call	c00964c <__mcmp>
 c006490:	d8c01617 	ldw	r3,88(sp)
 c006494:	e009883a 	mov	r4,fp
 c006498:	d8801615 	stw	r2,88(sp)
 c00649c:	180b883a 	mov	r5,r3
 c0064a0:	c008d700 	call	c008d70 <_Bfree>
 c0064a4:	d8801617 	ldw	r2,88(sp)
 c0064a8:	1000041e 	bne	r2,zero,c0064bc <_dtoa_r+0xeac>
 c0064ac:	d9800317 	ldw	r6,12(sp)
 c0064b0:	3000021e 	bne	r6,zero,c0064bc <_dtoa_r+0xeac>
 c0064b4:	d8c00617 	ldw	r3,24(sp)
 c0064b8:	18003726 	beq	r3,zero,c006598 <_dtoa_r+0xf88>
 c0064bc:	b0002016 	blt	r22,zero,c006540 <_dtoa_r+0xf30>
 c0064c0:	b000041e 	bne	r22,zero,c0064d4 <_dtoa_r+0xec4>
 c0064c4:	d9000317 	ldw	r4,12(sp)
 c0064c8:	2000021e 	bne	r4,zero,c0064d4 <_dtoa_r+0xec4>
 c0064cc:	d8c00617 	ldw	r3,24(sp)
 c0064d0:	18001b26 	beq	r3,zero,c006540 <_dtoa_r+0xf30>
 c0064d4:	00810716 	blt	zero,r2,c0068f4 <_dtoa_r+0x12e4>
 c0064d8:	d8c00417 	ldw	r3,16(sp)
 c0064dc:	9d800044 	addi	r22,r19,1
 c0064e0:	9c800005 	stb	r18,0(r19)
 c0064e4:	b02f883a 	mov	r23,r22
 c0064e8:	98c10626 	beq	r19,r3,c006904 <_dtoa_r+0x12f4>
 c0064ec:	800b883a 	mov	r5,r16
 c0064f0:	000f883a 	mov	r7,zero
 c0064f4:	01800284 	movi	r6,10
 c0064f8:	e009883a 	mov	r4,fp
 c0064fc:	c008d980 	call	c008d98 <__multadd>
 c006500:	1021883a 	mov	r16,r2
 c006504:	000f883a 	mov	r7,zero
 c006508:	01800284 	movi	r6,10
 c00650c:	880b883a 	mov	r5,r17
 c006510:	e009883a 	mov	r4,fp
 c006514:	8d002526 	beq	r17,r20,c0065ac <_dtoa_r+0xf9c>
 c006518:	c008d980 	call	c008d98 <__multadd>
 c00651c:	a00b883a 	mov	r5,r20
 c006520:	000f883a 	mov	r7,zero
 c006524:	01800284 	movi	r6,10
 c006528:	e009883a 	mov	r4,fp
 c00652c:	1023883a 	mov	r17,r2
 c006530:	c008d980 	call	c008d98 <__multadd>
 c006534:	1029883a 	mov	r20,r2
 c006538:	b027883a 	mov	r19,r22
 c00653c:	003fc006 	br	c006440 <__alt_data_end+0xfc006440>
 c006540:	9011883a 	mov	r8,r18
 c006544:	00800e0e 	bge	zero,r2,c006580 <_dtoa_r+0xf70>
 c006548:	800b883a 	mov	r5,r16
 c00654c:	01800044 	movi	r6,1
 c006550:	e009883a 	mov	r4,fp
 c006554:	da001715 	stw	r8,92(sp)
 c006558:	c0095040 	call	c009504 <__lshift>
 c00655c:	a80b883a 	mov	r5,r21
 c006560:	1009883a 	mov	r4,r2
 c006564:	1021883a 	mov	r16,r2
 c006568:	c00964c0 	call	c00964c <__mcmp>
 c00656c:	da001717 	ldw	r8,92(sp)
 c006570:	0081960e 	bge	zero,r2,c006bcc <_dtoa_r+0x15bc>
 c006574:	00800e44 	movi	r2,57
 c006578:	40817026 	beq	r8,r2,c006b3c <_dtoa_r+0x152c>
 c00657c:	ba000c44 	addi	r8,r23,49
 c006580:	8825883a 	mov	r18,r17
 c006584:	9dc00044 	addi	r23,r19,1
 c006588:	9a000005 	stb	r8,0(r19)
 c00658c:	a023883a 	mov	r17,r20
 c006590:	dc000915 	stw	r16,36(sp)
 c006594:	003f2406 	br	c006228 <__alt_data_end+0xfc006228>
 c006598:	00800e44 	movi	r2,57
 c00659c:	9011883a 	mov	r8,r18
 c0065a0:	90816626 	beq	r18,r2,c006b3c <_dtoa_r+0x152c>
 c0065a4:	05bff516 	blt	zero,r22,c00657c <__alt_data_end+0xfc00657c>
 c0065a8:	003ff506 	br	c006580 <__alt_data_end+0xfc006580>
 c0065ac:	c008d980 	call	c008d98 <__multadd>
 c0065b0:	1023883a 	mov	r17,r2
 c0065b4:	1029883a 	mov	r20,r2
 c0065b8:	003fdf06 	br	c006538 <__alt_data_end+0xfc006538>
 c0065bc:	e009883a 	mov	r4,fp
 c0065c0:	c008d700 	call	c008d70 <_Bfree>
 c0065c4:	00800044 	movi	r2,1
 c0065c8:	003fbc06 	br	c0064bc <__alt_data_end+0xfc0064bc>
 c0065cc:	a80b883a 	mov	r5,r21
 c0065d0:	8009883a 	mov	r4,r16
 c0065d4:	c00964c0 	call	c00964c <__mcmp>
 c0065d8:	103edb0e 	bge	r2,zero,c006148 <__alt_data_end+0xfc006148>
 c0065dc:	800b883a 	mov	r5,r16
 c0065e0:	000f883a 	mov	r7,zero
 c0065e4:	01800284 	movi	r6,10
 c0065e8:	e009883a 	mov	r4,fp
 c0065ec:	c008d980 	call	c008d98 <__multadd>
 c0065f0:	1021883a 	mov	r16,r2
 c0065f4:	d8800517 	ldw	r2,20(sp)
 c0065f8:	d8c00b17 	ldw	r3,44(sp)
 c0065fc:	10bfffc4 	addi	r2,r2,-1
 c006600:	d8800515 	stw	r2,20(sp)
 c006604:	183f761e 	bne	r3,zero,c0063e0 <__alt_data_end+0xfc0063e0>
 c006608:	d9000c17 	ldw	r4,48(sp)
 c00660c:	0101730e 	bge	zero,r4,c006bdc <_dtoa_r+0x15cc>
 c006610:	d9000615 	stw	r4,24(sp)
 c006614:	003ed006 	br	c006158 <__alt_data_end+0xfc006158>
 c006618:	00800084 	movi	r2,2
 c00661c:	3081861e 	bne	r6,r2,c006c38 <_dtoa_r+0x1628>
 c006620:	d8000b15 	stw	zero,44(sp)
 c006624:	003f3c06 	br	c006318 <__alt_data_end+0xfc006318>
 c006628:	dc000917 	ldw	r16,36(sp)
 c00662c:	003e9206 	br	c006078 <__alt_data_end+0xfc006078>
 c006630:	d9c00317 	ldw	r7,12(sp)
 c006634:	00800084 	movi	r2,2
 c006638:	11fec50e 	bge	r2,r7,c006150 <__alt_data_end+0xfc006150>
 c00663c:	d9000617 	ldw	r4,24(sp)
 c006640:	20013c1e 	bne	r4,zero,c006b34 <_dtoa_r+0x1524>
 c006644:	a80b883a 	mov	r5,r21
 c006648:	000f883a 	mov	r7,zero
 c00664c:	01800144 	movi	r6,5
 c006650:	e009883a 	mov	r4,fp
 c006654:	c008d980 	call	c008d98 <__multadd>
 c006658:	100b883a 	mov	r5,r2
 c00665c:	8009883a 	mov	r4,r16
 c006660:	102b883a 	mov	r21,r2
 c006664:	c00964c0 	call	c00964c <__mcmp>
 c006668:	dc000915 	stw	r16,36(sp)
 c00666c:	00bf410e 	bge	zero,r2,c006374 <__alt_data_end+0xfc006374>
 c006670:	d9c00717 	ldw	r7,28(sp)
 c006674:	00800c44 	movi	r2,49
 c006678:	38800005 	stb	r2,0(r7)
 c00667c:	d8800517 	ldw	r2,20(sp)
 c006680:	3dc00044 	addi	r23,r7,1
 c006684:	10800044 	addi	r2,r2,1
 c006688:	d8800515 	stw	r2,20(sp)
 c00668c:	003f3d06 	br	c006384 <__alt_data_end+0xfc006384>
 c006690:	d9800517 	ldw	r6,20(sp)
 c006694:	d9c00717 	ldw	r7,28(sp)
 c006698:	00800c44 	movi	r2,49
 c00669c:	31800044 	addi	r6,r6,1
 c0066a0:	d9800515 	stw	r6,20(sp)
 c0066a4:	38800005 	stb	r2,0(r7)
 c0066a8:	003edf06 	br	c006228 <__alt_data_end+0xfc006228>
 c0066ac:	d8000b15 	stw	zero,44(sp)
 c0066b0:	003c9f06 	br	c005930 <__alt_data_end+0xfc005930>
 c0066b4:	903e7e1e 	bne	r18,zero,c0060b0 <__alt_data_end+0xfc0060b0>
 c0066b8:	00800434 	movhi	r2,16
 c0066bc:	10bfffc4 	addi	r2,r2,-1
 c0066c0:	9884703a 	and	r2,r19,r2
 c0066c4:	1000ea1e 	bne	r2,zero,c006a70 <_dtoa_r+0x1460>
 c0066c8:	9cdffc2c 	andhi	r19,r19,32752
 c0066cc:	9800e826 	beq	r19,zero,c006a70 <_dtoa_r+0x1460>
 c0066d0:	d9c00817 	ldw	r7,32(sp)
 c0066d4:	b5800044 	addi	r22,r22,1
 c0066d8:	04c00044 	movi	r19,1
 c0066dc:	39c00044 	addi	r7,r7,1
 c0066e0:	d9c00815 	stw	r7,32(sp)
 c0066e4:	d8800d17 	ldw	r2,52(sp)
 c0066e8:	103e721e 	bne	r2,zero,c0060b4 <__alt_data_end+0xfc0060b4>
 c0066ec:	00800044 	movi	r2,1
 c0066f0:	003e7906 	br	c0060d8 <__alt_data_end+0xfc0060d8>
 c0066f4:	8009883a 	mov	r4,r16
 c0066f8:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c0066fc:	d9800f17 	ldw	r6,60(sp)
 c006700:	d9c01017 	ldw	r7,64(sp)
 c006704:	1009883a 	mov	r4,r2
 c006708:	180b883a 	mov	r5,r3
 c00670c:	c00e8040 	call	c00e804 <__muldf3>
 c006710:	000d883a 	mov	r6,zero
 c006714:	01d00734 	movhi	r7,16412
 c006718:	1009883a 	mov	r4,r2
 c00671c:	180b883a 	mov	r5,r3
 c006720:	c00d3300 	call	c00d330 <__adddf3>
 c006724:	047f3034 	movhi	r17,64704
 c006728:	1021883a 	mov	r16,r2
 c00672c:	1c63883a 	add	r17,r3,r17
 c006730:	d9000f17 	ldw	r4,60(sp)
 c006734:	d9401017 	ldw	r5,64(sp)
 c006738:	000d883a 	mov	r6,zero
 c00673c:	01d00534 	movhi	r7,16404
 c006740:	c00f0700 	call	c00f070 <__subdf3>
 c006744:	800d883a 	mov	r6,r16
 c006748:	880f883a 	mov	r7,r17
 c00674c:	1009883a 	mov	r4,r2
 c006750:	180b883a 	mov	r5,r3
 c006754:	102b883a 	mov	r21,r2
 c006758:	1829883a 	mov	r20,r3
 c00675c:	c00e6340 	call	c00e634 <__gedf2>
 c006760:	00806c16 	blt	zero,r2,c006914 <_dtoa_r+0x1304>
 c006764:	89e0003c 	xorhi	r7,r17,32768
 c006768:	800d883a 	mov	r6,r16
 c00676c:	a809883a 	mov	r4,r21
 c006770:	a00b883a 	mov	r5,r20
 c006774:	c00e7100 	call	c00e710 <__ledf2>
 c006778:	103d7e0e 	bge	r2,zero,c005d74 <__alt_data_end+0xfc005d74>
 c00677c:	002b883a 	mov	r21,zero
 c006780:	0023883a 	mov	r17,zero
 c006784:	003efb06 	br	c006374 <__alt_data_end+0xfc006374>
 c006788:	d8800717 	ldw	r2,28(sp)
 c00678c:	003bd006 	br	c0056d0 <__alt_data_end+0xfc0056d0>
 c006790:	d9000a17 	ldw	r4,40(sp)
 c006794:	d9800d17 	ldw	r6,52(sp)
 c006798:	dd400a15 	stw	r21,40(sp)
 c00679c:	a905c83a 	sub	r2,r21,r4
 c0067a0:	308d883a 	add	r6,r6,r2
 c0067a4:	d9800d15 	stw	r6,52(sp)
 c0067a8:	002b883a 	mov	r21,zero
 c0067ac:	003e0606 	br	c005fc8 <__alt_data_end+0xfc005fc8>
 c0067b0:	9023883a 	mov	r17,r18
 c0067b4:	9829883a 	mov	r20,r19
 c0067b8:	04000084 	movi	r16,2
 c0067bc:	003c9206 	br	c005a08 <__alt_data_end+0xfc005a08>
 c0067c0:	04000044 	movi	r16,1
 c0067c4:	dc000c15 	stw	r16,48(sp)
 c0067c8:	dc000615 	stw	r16,24(sp)
 c0067cc:	dc002215 	stw	r16,136(sp)
 c0067d0:	e0001115 	stw	zero,68(fp)
 c0067d4:	000b883a 	mov	r5,zero
 c0067d8:	003c6906 	br	c005980 <__alt_data_end+0xfc005980>
 c0067dc:	3021883a 	mov	r16,r6
 c0067e0:	003ffb06 	br	c0067d0 <__alt_data_end+0xfc0067d0>
 c0067e4:	1000021e 	bne	r2,zero,c0067f0 <_dtoa_r+0x11e0>
 c0067e8:	4200004c 	andi	r8,r8,1
 c0067ec:	403e7d1e 	bne	r8,zero,c0061e4 <__alt_data_end+0xfc0061e4>
 c0067f0:	01000c04 	movi	r4,48
 c0067f4:	00000106 	br	c0067fc <_dtoa_r+0x11ec>
 c0067f8:	102f883a 	mov	r23,r2
 c0067fc:	b8bfffc4 	addi	r2,r23,-1
 c006800:	10c00007 	ldb	r3,0(r2)
 c006804:	193ffc26 	beq	r3,r4,c0067f8 <__alt_data_end+0xfc0067f8>
 c006808:	003e8706 	br	c006228 <__alt_data_end+0xfc006228>
 c00680c:	d8800517 	ldw	r2,20(sp)
 c006810:	00a3c83a 	sub	r17,zero,r2
 c006814:	8800a426 	beq	r17,zero,c006aa8 <_dtoa_r+0x1498>
 c006818:	888003cc 	andi	r2,r17,15
 c00681c:	100490fa 	slli	r2,r2,3
 c006820:	00c30074 	movhi	r3,3073
 c006824:	18ca8704 	addi	r3,r3,10780
 c006828:	1885883a 	add	r2,r3,r2
 c00682c:	11800017 	ldw	r6,0(r2)
 c006830:	11c00117 	ldw	r7,4(r2)
 c006834:	9009883a 	mov	r4,r18
 c006838:	980b883a 	mov	r5,r19
 c00683c:	8823d13a 	srai	r17,r17,4
 c006840:	c00e8040 	call	c00e804 <__muldf3>
 c006844:	d8800f15 	stw	r2,60(sp)
 c006848:	d8c01015 	stw	r3,64(sp)
 c00684c:	8800e826 	beq	r17,zero,c006bf0 <_dtoa_r+0x15e0>
 c006850:	05030074 	movhi	r20,3073
 c006854:	a50a7d04 	addi	r20,r20,10740
 c006858:	04000084 	movi	r16,2
 c00685c:	8980004c 	andi	r6,r17,1
 c006860:	1009883a 	mov	r4,r2
 c006864:	8823d07a 	srai	r17,r17,1
 c006868:	180b883a 	mov	r5,r3
 c00686c:	30000426 	beq	r6,zero,c006880 <_dtoa_r+0x1270>
 c006870:	a1800017 	ldw	r6,0(r20)
 c006874:	a1c00117 	ldw	r7,4(r20)
 c006878:	84000044 	addi	r16,r16,1
 c00687c:	c00e8040 	call	c00e804 <__muldf3>
 c006880:	a5000204 	addi	r20,r20,8
 c006884:	883ff51e 	bne	r17,zero,c00685c <__alt_data_end+0xfc00685c>
 c006888:	d8800f15 	stw	r2,60(sp)
 c00688c:	d8c01015 	stw	r3,64(sp)
 c006890:	003c7606 	br	c005a6c <__alt_data_end+0xfc005a6c>
 c006894:	00c00c04 	movi	r3,48
 c006898:	10c00005 	stb	r3,0(r2)
 c00689c:	d8c00517 	ldw	r3,20(sp)
 c0068a0:	bd3fffc3 	ldbu	r20,-1(r23)
 c0068a4:	18c00044 	addi	r3,r3,1
 c0068a8:	d8c00515 	stw	r3,20(sp)
 c0068ac:	003db906 	br	c005f94 <__alt_data_end+0xfc005f94>
 c0068b0:	89400117 	ldw	r5,4(r17)
 c0068b4:	e009883a 	mov	r4,fp
 c0068b8:	c008cc80 	call	c008cc8 <_Balloc>
 c0068bc:	89800417 	ldw	r6,16(r17)
 c0068c0:	89400304 	addi	r5,r17,12
 c0068c4:	11000304 	addi	r4,r2,12
 c0068c8:	31800084 	addi	r6,r6,2
 c0068cc:	318d883a 	add	r6,r6,r6
 c0068d0:	318d883a 	add	r6,r6,r6
 c0068d4:	1027883a 	mov	r19,r2
 c0068d8:	c0088fc0 	call	c0088fc <memcpy>
 c0068dc:	01800044 	movi	r6,1
 c0068e0:	980b883a 	mov	r5,r19
 c0068e4:	e009883a 	mov	r4,fp
 c0068e8:	c0095040 	call	c009504 <__lshift>
 c0068ec:	1029883a 	mov	r20,r2
 c0068f0:	003ecc06 	br	c006424 <__alt_data_end+0xfc006424>
 c0068f4:	00800e44 	movi	r2,57
 c0068f8:	90809026 	beq	r18,r2,c006b3c <_dtoa_r+0x152c>
 c0068fc:	92000044 	addi	r8,r18,1
 c006900:	003f1f06 	br	c006580 <__alt_data_end+0xfc006580>
 c006904:	9011883a 	mov	r8,r18
 c006908:	8825883a 	mov	r18,r17
 c00690c:	a023883a 	mov	r17,r20
 c006910:	003e2906 	br	c0061b8 <__alt_data_end+0xfc0061b8>
 c006914:	002b883a 	mov	r21,zero
 c006918:	0023883a 	mov	r17,zero
 c00691c:	003f5406 	br	c006670 <__alt_data_end+0xfc006670>
 c006920:	61bfffc4 	addi	r6,r12,-1
 c006924:	300490fa 	slli	r2,r6,3
 c006928:	00c30074 	movhi	r3,3073
 c00692c:	18ca8704 	addi	r3,r3,10780
 c006930:	1885883a 	add	r2,r3,r2
 c006934:	11000017 	ldw	r4,0(r2)
 c006938:	11400117 	ldw	r5,4(r2)
 c00693c:	d8800717 	ldw	r2,28(sp)
 c006940:	880f883a 	mov	r7,r17
 c006944:	d9801215 	stw	r6,72(sp)
 c006948:	800d883a 	mov	r6,r16
 c00694c:	db001615 	stw	r12,88(sp)
 c006950:	15c00044 	addi	r23,r2,1
 c006954:	c00e8040 	call	c00e804 <__muldf3>
 c006958:	d9401017 	ldw	r5,64(sp)
 c00695c:	d9000f17 	ldw	r4,60(sp)
 c006960:	d8c01515 	stw	r3,84(sp)
 c006964:	d8801415 	stw	r2,80(sp)
 c006968:	c00f96c0 	call	c00f96c <__fixdfsi>
 c00696c:	1009883a 	mov	r4,r2
 c006970:	1021883a 	mov	r16,r2
 c006974:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c006978:	d9000f17 	ldw	r4,60(sp)
 c00697c:	d9401017 	ldw	r5,64(sp)
 c006980:	100d883a 	mov	r6,r2
 c006984:	180f883a 	mov	r7,r3
 c006988:	c00f0700 	call	c00f070 <__subdf3>
 c00698c:	1829883a 	mov	r20,r3
 c006990:	d8c00717 	ldw	r3,28(sp)
 c006994:	84000c04 	addi	r16,r16,48
 c006998:	1023883a 	mov	r17,r2
 c00699c:	1c000005 	stb	r16,0(r3)
 c0069a0:	db001617 	ldw	r12,88(sp)
 c0069a4:	00800044 	movi	r2,1
 c0069a8:	60802226 	beq	r12,r2,c006a34 <_dtoa_r+0x1424>
 c0069ac:	d9c00717 	ldw	r7,28(sp)
 c0069b0:	8805883a 	mov	r2,r17
 c0069b4:	b82b883a 	mov	r21,r23
 c0069b8:	3b19883a 	add	r12,r7,r12
 c0069bc:	6023883a 	mov	r17,r12
 c0069c0:	a007883a 	mov	r3,r20
 c0069c4:	dc800f15 	stw	r18,60(sp)
 c0069c8:	000d883a 	mov	r6,zero
 c0069cc:	01d00934 	movhi	r7,16420
 c0069d0:	1009883a 	mov	r4,r2
 c0069d4:	180b883a 	mov	r5,r3
 c0069d8:	c00e8040 	call	c00e804 <__muldf3>
 c0069dc:	180b883a 	mov	r5,r3
 c0069e0:	1009883a 	mov	r4,r2
 c0069e4:	1829883a 	mov	r20,r3
 c0069e8:	1025883a 	mov	r18,r2
 c0069ec:	c00f96c0 	call	c00f96c <__fixdfsi>
 c0069f0:	1009883a 	mov	r4,r2
 c0069f4:	1021883a 	mov	r16,r2
 c0069f8:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c0069fc:	100d883a 	mov	r6,r2
 c006a00:	180f883a 	mov	r7,r3
 c006a04:	9009883a 	mov	r4,r18
 c006a08:	a00b883a 	mov	r5,r20
 c006a0c:	84000c04 	addi	r16,r16,48
 c006a10:	c00f0700 	call	c00f070 <__subdf3>
 c006a14:	ad400044 	addi	r21,r21,1
 c006a18:	ac3fffc5 	stb	r16,-1(r21)
 c006a1c:	ac7fea1e 	bne	r21,r17,c0069c8 <__alt_data_end+0xfc0069c8>
 c006a20:	1023883a 	mov	r17,r2
 c006a24:	d8801217 	ldw	r2,72(sp)
 c006a28:	dc800f17 	ldw	r18,60(sp)
 c006a2c:	1829883a 	mov	r20,r3
 c006a30:	b8af883a 	add	r23,r23,r2
 c006a34:	d9001417 	ldw	r4,80(sp)
 c006a38:	d9401517 	ldw	r5,84(sp)
 c006a3c:	000d883a 	mov	r6,zero
 c006a40:	01cff834 	movhi	r7,16352
 c006a44:	c00d3300 	call	c00d330 <__adddf3>
 c006a48:	880d883a 	mov	r6,r17
 c006a4c:	a00f883a 	mov	r7,r20
 c006a50:	1009883a 	mov	r4,r2
 c006a54:	180b883a 	mov	r5,r3
 c006a58:	c00e7100 	call	c00e710 <__ledf2>
 c006a5c:	10003e0e 	bge	r2,zero,c006b58 <_dtoa_r+0x1548>
 c006a60:	d9001317 	ldw	r4,76(sp)
 c006a64:	bd3fffc3 	ldbu	r20,-1(r23)
 c006a68:	d9000515 	stw	r4,20(sp)
 c006a6c:	003d3b06 	br	c005f5c <__alt_data_end+0xfc005f5c>
 c006a70:	0027883a 	mov	r19,zero
 c006a74:	003f1b06 	br	c0066e4 <__alt_data_end+0xfc0066e4>
 c006a78:	d8800817 	ldw	r2,32(sp)
 c006a7c:	11e9c83a 	sub	r20,r2,r7
 c006a80:	0005883a 	mov	r2,zero
 c006a84:	003d5406 	br	c005fd8 <__alt_data_end+0xfc005fd8>
 c006a88:	00800044 	movi	r2,1
 c006a8c:	003dc706 	br	c0061ac <__alt_data_end+0xfc0061ac>
 c006a90:	d8c00217 	ldw	r3,8(sp)
 c006a94:	00800d84 	movi	r2,54
 c006a98:	dd400a17 	ldw	r21,40(sp)
 c006a9c:	10c5c83a 	sub	r2,r2,r3
 c006aa0:	dd000817 	ldw	r20,32(sp)
 c006aa4:	003d4c06 	br	c005fd8 <__alt_data_end+0xfc005fd8>
 c006aa8:	dc800f15 	stw	r18,60(sp)
 c006aac:	dcc01015 	stw	r19,64(sp)
 c006ab0:	04000084 	movi	r16,2
 c006ab4:	003bed06 	br	c005a6c <__alt_data_end+0xfc005a6c>
 c006ab8:	d9000617 	ldw	r4,24(sp)
 c006abc:	203f0d26 	beq	r4,zero,c0066f4 <__alt_data_end+0xfc0066f4>
 c006ac0:	d9800c17 	ldw	r6,48(sp)
 c006ac4:	01bcab0e 	bge	zero,r6,c005d74 <__alt_data_end+0xfc005d74>
 c006ac8:	d9401017 	ldw	r5,64(sp)
 c006acc:	d9000f17 	ldw	r4,60(sp)
 c006ad0:	000d883a 	mov	r6,zero
 c006ad4:	01d00934 	movhi	r7,16420
 c006ad8:	c00e8040 	call	c00e804 <__muldf3>
 c006adc:	81000044 	addi	r4,r16,1
 c006ae0:	d8800f15 	stw	r2,60(sp)
 c006ae4:	d8c01015 	stw	r3,64(sp)
 c006ae8:	c00f9ec0 	call	c00f9ec <__floatsidf>
 c006aec:	d9800f17 	ldw	r6,60(sp)
 c006af0:	d9c01017 	ldw	r7,64(sp)
 c006af4:	1009883a 	mov	r4,r2
 c006af8:	180b883a 	mov	r5,r3
 c006afc:	c00e8040 	call	c00e804 <__muldf3>
 c006b00:	01d00734 	movhi	r7,16412
 c006b04:	000d883a 	mov	r6,zero
 c006b08:	1009883a 	mov	r4,r2
 c006b0c:	180b883a 	mov	r5,r3
 c006b10:	c00d3300 	call	c00d330 <__adddf3>
 c006b14:	d9c00517 	ldw	r7,20(sp)
 c006b18:	047f3034 	movhi	r17,64704
 c006b1c:	1021883a 	mov	r16,r2
 c006b20:	39ffffc4 	addi	r7,r7,-1
 c006b24:	d9c01315 	stw	r7,76(sp)
 c006b28:	1c63883a 	add	r17,r3,r17
 c006b2c:	db000c17 	ldw	r12,48(sp)
 c006b30:	003bea06 	br	c005adc <__alt_data_end+0xfc005adc>
 c006b34:	dc000915 	stw	r16,36(sp)
 c006b38:	003e0e06 	br	c006374 <__alt_data_end+0xfc006374>
 c006b3c:	01000e44 	movi	r4,57
 c006b40:	8825883a 	mov	r18,r17
 c006b44:	9dc00044 	addi	r23,r19,1
 c006b48:	99000005 	stb	r4,0(r19)
 c006b4c:	a023883a 	mov	r17,r20
 c006b50:	dc000915 	stw	r16,36(sp)
 c006b54:	003da406 	br	c0061e8 <__alt_data_end+0xfc0061e8>
 c006b58:	d9801417 	ldw	r6,80(sp)
 c006b5c:	d9c01517 	ldw	r7,84(sp)
 c006b60:	0009883a 	mov	r4,zero
 c006b64:	014ff834 	movhi	r5,16352
 c006b68:	c00f0700 	call	c00f070 <__subdf3>
 c006b6c:	880d883a 	mov	r6,r17
 c006b70:	a00f883a 	mov	r7,r20
 c006b74:	1009883a 	mov	r4,r2
 c006b78:	180b883a 	mov	r5,r3
 c006b7c:	c00e6340 	call	c00e634 <__gedf2>
 c006b80:	00bc7c0e 	bge	zero,r2,c005d74 <__alt_data_end+0xfc005d74>
 c006b84:	01000c04 	movi	r4,48
 c006b88:	00000106 	br	c006b90 <_dtoa_r+0x1580>
 c006b8c:	102f883a 	mov	r23,r2
 c006b90:	b8bfffc4 	addi	r2,r23,-1
 c006b94:	10c00007 	ldb	r3,0(r2)
 c006b98:	193ffc26 	beq	r3,r4,c006b8c <__alt_data_end+0xfc006b8c>
 c006b9c:	d9801317 	ldw	r6,76(sp)
 c006ba0:	d9800515 	stw	r6,20(sp)
 c006ba4:	003c4406 	br	c005cb8 <__alt_data_end+0xfc005cb8>
 c006ba8:	d9801317 	ldw	r6,76(sp)
 c006bac:	d9800515 	stw	r6,20(sp)
 c006bb0:	003cea06 	br	c005f5c <__alt_data_end+0xfc005f5c>
 c006bb4:	dd800f17 	ldw	r22,60(sp)
 c006bb8:	dcc01017 	ldw	r19,64(sp)
 c006bbc:	dc801217 	ldw	r18,72(sp)
 c006bc0:	003c6c06 	br	c005d74 <__alt_data_end+0xfc005d74>
 c006bc4:	903e031e 	bne	r18,zero,c0063d4 <__alt_data_end+0xfc0063d4>
 c006bc8:	003ebb06 	br	c0066b8 <__alt_data_end+0xfc0066b8>
 c006bcc:	103e6c1e 	bne	r2,zero,c006580 <__alt_data_end+0xfc006580>
 c006bd0:	4080004c 	andi	r2,r8,1
 c006bd4:	103e6a26 	beq	r2,zero,c006580 <__alt_data_end+0xfc006580>
 c006bd8:	003e6606 	br	c006574 <__alt_data_end+0xfc006574>
 c006bdc:	d8c00317 	ldw	r3,12(sp)
 c006be0:	00800084 	movi	r2,2
 c006be4:	10c02916 	blt	r2,r3,c006c8c <_dtoa_r+0x167c>
 c006be8:	d9000c17 	ldw	r4,48(sp)
 c006bec:	003e8806 	br	c006610 <__alt_data_end+0xfc006610>
 c006bf0:	04000084 	movi	r16,2
 c006bf4:	003b9d06 	br	c005a6c <__alt_data_end+0xfc005a6c>
 c006bf8:	d9001317 	ldw	r4,76(sp)
 c006bfc:	d9000515 	stw	r4,20(sp)
 c006c00:	003cd606 	br	c005f5c <__alt_data_end+0xfc005f5c>
 c006c04:	d8801317 	ldw	r2,76(sp)
 c006c08:	d8800515 	stw	r2,20(sp)
 c006c0c:	003c2a06 	br	c005cb8 <__alt_data_end+0xfc005cb8>
 c006c10:	d9800317 	ldw	r6,12(sp)
 c006c14:	00800084 	movi	r2,2
 c006c18:	11801516 	blt	r2,r6,c006c70 <_dtoa_r+0x1660>
 c006c1c:	d9c00c17 	ldw	r7,48(sp)
 c006c20:	d9c00615 	stw	r7,24(sp)
 c006c24:	003df706 	br	c006404 <__alt_data_end+0xfc006404>
 c006c28:	193d3926 	beq	r3,r4,c006110 <__alt_data_end+0xfc006110>
 c006c2c:	00c00f04 	movi	r3,60
 c006c30:	1885c83a 	sub	r2,r3,r2
 c006c34:	003ddf06 	br	c0063b4 <__alt_data_end+0xfc0063b4>
 c006c38:	e009883a 	mov	r4,fp
 c006c3c:	e0001115 	stw	zero,68(fp)
 c006c40:	000b883a 	mov	r5,zero
 c006c44:	c008cc80 	call	c008cc8 <_Balloc>
 c006c48:	d8800715 	stw	r2,28(sp)
 c006c4c:	d8c00717 	ldw	r3,28(sp)
 c006c50:	00bfffc4 	movi	r2,-1
 c006c54:	01000044 	movi	r4,1
 c006c58:	d8800c15 	stw	r2,48(sp)
 c006c5c:	e0c01015 	stw	r3,64(fp)
 c006c60:	d9000b15 	stw	r4,44(sp)
 c006c64:	d8800615 	stw	r2,24(sp)
 c006c68:	d8002215 	stw	zero,136(sp)
 c006c6c:	003c4106 	br	c005d74 <__alt_data_end+0xfc005d74>
 c006c70:	d8c00c17 	ldw	r3,48(sp)
 c006c74:	d8c00615 	stw	r3,24(sp)
 c006c78:	003e7006 	br	c00663c <__alt_data_end+0xfc00663c>
 c006c7c:	04400044 	movi	r17,1
 c006c80:	003b2006 	br	c005904 <__alt_data_end+0xfc005904>
 c006c84:	000b883a 	mov	r5,zero
 c006c88:	003b3d06 	br	c005980 <__alt_data_end+0xfc005980>
 c006c8c:	d8800c17 	ldw	r2,48(sp)
 c006c90:	d8800615 	stw	r2,24(sp)
 c006c94:	003e6906 	br	c00663c <__alt_data_end+0xfc00663c>

0c006c98 <__sflush_r>:
 c006c98:	2880030b 	ldhu	r2,12(r5)
 c006c9c:	defffb04 	addi	sp,sp,-20
 c006ca0:	dcc00315 	stw	r19,12(sp)
 c006ca4:	dc400115 	stw	r17,4(sp)
 c006ca8:	dfc00415 	stw	ra,16(sp)
 c006cac:	dc800215 	stw	r18,8(sp)
 c006cb0:	dc000015 	stw	r16,0(sp)
 c006cb4:	10c0020c 	andi	r3,r2,8
 c006cb8:	2823883a 	mov	r17,r5
 c006cbc:	2027883a 	mov	r19,r4
 c006cc0:	1800311e 	bne	r3,zero,c006d88 <__sflush_r+0xf0>
 c006cc4:	28c00117 	ldw	r3,4(r5)
 c006cc8:	10820014 	ori	r2,r2,2048
 c006ccc:	2880030d 	sth	r2,12(r5)
 c006cd0:	00c04b0e 	bge	zero,r3,c006e00 <__sflush_r+0x168>
 c006cd4:	8a000a17 	ldw	r8,40(r17)
 c006cd8:	40002326 	beq	r8,zero,c006d68 <__sflush_r+0xd0>
 c006cdc:	9c000017 	ldw	r16,0(r19)
 c006ce0:	10c4000c 	andi	r3,r2,4096
 c006ce4:	98000015 	stw	zero,0(r19)
 c006ce8:	18004826 	beq	r3,zero,c006e0c <__sflush_r+0x174>
 c006cec:	89801417 	ldw	r6,80(r17)
 c006cf0:	10c0010c 	andi	r3,r2,4
 c006cf4:	18000626 	beq	r3,zero,c006d10 <__sflush_r+0x78>
 c006cf8:	88c00117 	ldw	r3,4(r17)
 c006cfc:	88800c17 	ldw	r2,48(r17)
 c006d00:	30cdc83a 	sub	r6,r6,r3
 c006d04:	10000226 	beq	r2,zero,c006d10 <__sflush_r+0x78>
 c006d08:	88800f17 	ldw	r2,60(r17)
 c006d0c:	308dc83a 	sub	r6,r6,r2
 c006d10:	89400717 	ldw	r5,28(r17)
 c006d14:	000f883a 	mov	r7,zero
 c006d18:	9809883a 	mov	r4,r19
 c006d1c:	403ee83a 	callr	r8
 c006d20:	00ffffc4 	movi	r3,-1
 c006d24:	10c04426 	beq	r2,r3,c006e38 <__sflush_r+0x1a0>
 c006d28:	88c0030b 	ldhu	r3,12(r17)
 c006d2c:	89000417 	ldw	r4,16(r17)
 c006d30:	88000115 	stw	zero,4(r17)
 c006d34:	197dffcc 	andi	r5,r3,63487
 c006d38:	8940030d 	sth	r5,12(r17)
 c006d3c:	89000015 	stw	r4,0(r17)
 c006d40:	18c4000c 	andi	r3,r3,4096
 c006d44:	18002c1e 	bne	r3,zero,c006df8 <__sflush_r+0x160>
 c006d48:	89400c17 	ldw	r5,48(r17)
 c006d4c:	9c000015 	stw	r16,0(r19)
 c006d50:	28000526 	beq	r5,zero,c006d68 <__sflush_r+0xd0>
 c006d54:	88801004 	addi	r2,r17,64
 c006d58:	28800226 	beq	r5,r2,c006d64 <__sflush_r+0xcc>
 c006d5c:	9809883a 	mov	r4,r19
 c006d60:	c0074140 	call	c007414 <_free_r>
 c006d64:	88000c15 	stw	zero,48(r17)
 c006d68:	0005883a 	mov	r2,zero
 c006d6c:	dfc00417 	ldw	ra,16(sp)
 c006d70:	dcc00317 	ldw	r19,12(sp)
 c006d74:	dc800217 	ldw	r18,8(sp)
 c006d78:	dc400117 	ldw	r17,4(sp)
 c006d7c:	dc000017 	ldw	r16,0(sp)
 c006d80:	dec00504 	addi	sp,sp,20
 c006d84:	f800283a 	ret
 c006d88:	2c800417 	ldw	r18,16(r5)
 c006d8c:	903ff626 	beq	r18,zero,c006d68 <__alt_data_end+0xfc006d68>
 c006d90:	2c000017 	ldw	r16,0(r5)
 c006d94:	108000cc 	andi	r2,r2,3
 c006d98:	2c800015 	stw	r18,0(r5)
 c006d9c:	84a1c83a 	sub	r16,r16,r18
 c006da0:	1000131e 	bne	r2,zero,c006df0 <__sflush_r+0x158>
 c006da4:	28800517 	ldw	r2,20(r5)
 c006da8:	88800215 	stw	r2,8(r17)
 c006dac:	04000316 	blt	zero,r16,c006dbc <__sflush_r+0x124>
 c006db0:	003fed06 	br	c006d68 <__alt_data_end+0xfc006d68>
 c006db4:	90a5883a 	add	r18,r18,r2
 c006db8:	043feb0e 	bge	zero,r16,c006d68 <__alt_data_end+0xfc006d68>
 c006dbc:	88800917 	ldw	r2,36(r17)
 c006dc0:	89400717 	ldw	r5,28(r17)
 c006dc4:	800f883a 	mov	r7,r16
 c006dc8:	900d883a 	mov	r6,r18
 c006dcc:	9809883a 	mov	r4,r19
 c006dd0:	103ee83a 	callr	r2
 c006dd4:	80a1c83a 	sub	r16,r16,r2
 c006dd8:	00bff616 	blt	zero,r2,c006db4 <__alt_data_end+0xfc006db4>
 c006ddc:	88c0030b 	ldhu	r3,12(r17)
 c006de0:	00bfffc4 	movi	r2,-1
 c006de4:	18c01014 	ori	r3,r3,64
 c006de8:	88c0030d 	sth	r3,12(r17)
 c006dec:	003fdf06 	br	c006d6c <__alt_data_end+0xfc006d6c>
 c006df0:	0005883a 	mov	r2,zero
 c006df4:	003fec06 	br	c006da8 <__alt_data_end+0xfc006da8>
 c006df8:	88801415 	stw	r2,80(r17)
 c006dfc:	003fd206 	br	c006d48 <__alt_data_end+0xfc006d48>
 c006e00:	28c00f17 	ldw	r3,60(r5)
 c006e04:	00ffb316 	blt	zero,r3,c006cd4 <__alt_data_end+0xfc006cd4>
 c006e08:	003fd706 	br	c006d68 <__alt_data_end+0xfc006d68>
 c006e0c:	89400717 	ldw	r5,28(r17)
 c006e10:	000d883a 	mov	r6,zero
 c006e14:	01c00044 	movi	r7,1
 c006e18:	9809883a 	mov	r4,r19
 c006e1c:	403ee83a 	callr	r8
 c006e20:	100d883a 	mov	r6,r2
 c006e24:	00bfffc4 	movi	r2,-1
 c006e28:	30801426 	beq	r6,r2,c006e7c <__sflush_r+0x1e4>
 c006e2c:	8880030b 	ldhu	r2,12(r17)
 c006e30:	8a000a17 	ldw	r8,40(r17)
 c006e34:	003fae06 	br	c006cf0 <__alt_data_end+0xfc006cf0>
 c006e38:	98c00017 	ldw	r3,0(r19)
 c006e3c:	183fba26 	beq	r3,zero,c006d28 <__alt_data_end+0xfc006d28>
 c006e40:	01000744 	movi	r4,29
 c006e44:	19000626 	beq	r3,r4,c006e60 <__sflush_r+0x1c8>
 c006e48:	01000584 	movi	r4,22
 c006e4c:	19000426 	beq	r3,r4,c006e60 <__sflush_r+0x1c8>
 c006e50:	88c0030b 	ldhu	r3,12(r17)
 c006e54:	18c01014 	ori	r3,r3,64
 c006e58:	88c0030d 	sth	r3,12(r17)
 c006e5c:	003fc306 	br	c006d6c <__alt_data_end+0xfc006d6c>
 c006e60:	8880030b 	ldhu	r2,12(r17)
 c006e64:	88c00417 	ldw	r3,16(r17)
 c006e68:	88000115 	stw	zero,4(r17)
 c006e6c:	10bdffcc 	andi	r2,r2,63487
 c006e70:	8880030d 	sth	r2,12(r17)
 c006e74:	88c00015 	stw	r3,0(r17)
 c006e78:	003fb306 	br	c006d48 <__alt_data_end+0xfc006d48>
 c006e7c:	98800017 	ldw	r2,0(r19)
 c006e80:	103fea26 	beq	r2,zero,c006e2c <__alt_data_end+0xfc006e2c>
 c006e84:	00c00744 	movi	r3,29
 c006e88:	10c00226 	beq	r2,r3,c006e94 <__sflush_r+0x1fc>
 c006e8c:	00c00584 	movi	r3,22
 c006e90:	10c0031e 	bne	r2,r3,c006ea0 <__sflush_r+0x208>
 c006e94:	9c000015 	stw	r16,0(r19)
 c006e98:	0005883a 	mov	r2,zero
 c006e9c:	003fb306 	br	c006d6c <__alt_data_end+0xfc006d6c>
 c006ea0:	88c0030b 	ldhu	r3,12(r17)
 c006ea4:	3005883a 	mov	r2,r6
 c006ea8:	18c01014 	ori	r3,r3,64
 c006eac:	88c0030d 	sth	r3,12(r17)
 c006eb0:	003fae06 	br	c006d6c <__alt_data_end+0xfc006d6c>

0c006eb4 <_fflush_r>:
 c006eb4:	defffd04 	addi	sp,sp,-12
 c006eb8:	dc000115 	stw	r16,4(sp)
 c006ebc:	dfc00215 	stw	ra,8(sp)
 c006ec0:	2021883a 	mov	r16,r4
 c006ec4:	20000226 	beq	r4,zero,c006ed0 <_fflush_r+0x1c>
 c006ec8:	20800e17 	ldw	r2,56(r4)
 c006ecc:	10000c26 	beq	r2,zero,c006f00 <_fflush_r+0x4c>
 c006ed0:	2880030f 	ldh	r2,12(r5)
 c006ed4:	1000051e 	bne	r2,zero,c006eec <_fflush_r+0x38>
 c006ed8:	0005883a 	mov	r2,zero
 c006edc:	dfc00217 	ldw	ra,8(sp)
 c006ee0:	dc000117 	ldw	r16,4(sp)
 c006ee4:	dec00304 	addi	sp,sp,12
 c006ee8:	f800283a 	ret
 c006eec:	8009883a 	mov	r4,r16
 c006ef0:	dfc00217 	ldw	ra,8(sp)
 c006ef4:	dc000117 	ldw	r16,4(sp)
 c006ef8:	dec00304 	addi	sp,sp,12
 c006efc:	c006c981 	jmpi	c006c98 <__sflush_r>
 c006f00:	d9400015 	stw	r5,0(sp)
 c006f04:	c0072a00 	call	c0072a0 <__sinit>
 c006f08:	d9400017 	ldw	r5,0(sp)
 c006f0c:	003ff006 	br	c006ed0 <__alt_data_end+0xfc006ed0>

0c006f10 <fflush>:
 c006f10:	20000526 	beq	r4,zero,c006f28 <fflush+0x18>
 c006f14:	00830074 	movhi	r2,3073
 c006f18:	1091ca04 	addi	r2,r2,18216
 c006f1c:	200b883a 	mov	r5,r4
 c006f20:	11000017 	ldw	r4,0(r2)
 c006f24:	c006eb41 	jmpi	c006eb4 <_fflush_r>
 c006f28:	00830074 	movhi	r2,3073
 c006f2c:	1091c904 	addi	r2,r2,18212
 c006f30:	11000017 	ldw	r4,0(r2)
 c006f34:	01430034 	movhi	r5,3072
 c006f38:	295bad04 	addi	r5,r5,28340
 c006f3c:	c007cb01 	jmpi	c007cb0 <_fwalk_reent>

0c006f40 <__fp_unlock>:
 c006f40:	0005883a 	mov	r2,zero
 c006f44:	f800283a 	ret

0c006f48 <_cleanup_r>:
 c006f48:	01430074 	movhi	r5,3073
 c006f4c:	29704304 	addi	r5,r5,-16116
 c006f50:	c007cb01 	jmpi	c007cb0 <_fwalk_reent>

0c006f54 <__sinit.part.1>:
 c006f54:	defff704 	addi	sp,sp,-36
 c006f58:	00c30034 	movhi	r3,3072
 c006f5c:	dfc00815 	stw	ra,32(sp)
 c006f60:	ddc00715 	stw	r23,28(sp)
 c006f64:	dd800615 	stw	r22,24(sp)
 c006f68:	dd400515 	stw	r21,20(sp)
 c006f6c:	dd000415 	stw	r20,16(sp)
 c006f70:	dcc00315 	stw	r19,12(sp)
 c006f74:	dc800215 	stw	r18,8(sp)
 c006f78:	dc400115 	stw	r17,4(sp)
 c006f7c:	dc000015 	stw	r16,0(sp)
 c006f80:	18dbd204 	addi	r3,r3,28488
 c006f84:	24000117 	ldw	r16,4(r4)
 c006f88:	20c00f15 	stw	r3,60(r4)
 c006f8c:	2080bb04 	addi	r2,r4,748
 c006f90:	00c000c4 	movi	r3,3
 c006f94:	20c0b915 	stw	r3,740(r4)
 c006f98:	2080ba15 	stw	r2,744(r4)
 c006f9c:	2000b815 	stw	zero,736(r4)
 c006fa0:	05c00204 	movi	r23,8
 c006fa4:	00800104 	movi	r2,4
 c006fa8:	2025883a 	mov	r18,r4
 c006fac:	b80d883a 	mov	r6,r23
 c006fb0:	81001704 	addi	r4,r16,92
 c006fb4:	000b883a 	mov	r5,zero
 c006fb8:	80000015 	stw	zero,0(r16)
 c006fbc:	80000115 	stw	zero,4(r16)
 c006fc0:	80000215 	stw	zero,8(r16)
 c006fc4:	8080030d 	sth	r2,12(r16)
 c006fc8:	80001915 	stw	zero,100(r16)
 c006fcc:	8000038d 	sth	zero,14(r16)
 c006fd0:	80000415 	stw	zero,16(r16)
 c006fd4:	80000515 	stw	zero,20(r16)
 c006fd8:	80000615 	stw	zero,24(r16)
 c006fdc:	c008ba00 	call	c008ba0 <memset>
 c006fe0:	05830074 	movhi	r22,3073
 c006fe4:	94400217 	ldw	r17,8(r18)
 c006fe8:	05430074 	movhi	r21,3073
 c006fec:	05030074 	movhi	r20,3073
 c006ff0:	04c30074 	movhi	r19,3073
 c006ff4:	b5a94504 	addi	r22,r22,-23276
 c006ff8:	ad695c04 	addi	r21,r21,-23184
 c006ffc:	a5297b04 	addi	r20,r20,-23060
 c007000:	9ce99204 	addi	r19,r19,-22968
 c007004:	85800815 	stw	r22,32(r16)
 c007008:	85400915 	stw	r21,36(r16)
 c00700c:	85000a15 	stw	r20,40(r16)
 c007010:	84c00b15 	stw	r19,44(r16)
 c007014:	84000715 	stw	r16,28(r16)
 c007018:	00800284 	movi	r2,10
 c00701c:	8880030d 	sth	r2,12(r17)
 c007020:	00800044 	movi	r2,1
 c007024:	b80d883a 	mov	r6,r23
 c007028:	89001704 	addi	r4,r17,92
 c00702c:	000b883a 	mov	r5,zero
 c007030:	88000015 	stw	zero,0(r17)
 c007034:	88000115 	stw	zero,4(r17)
 c007038:	88000215 	stw	zero,8(r17)
 c00703c:	88001915 	stw	zero,100(r17)
 c007040:	8880038d 	sth	r2,14(r17)
 c007044:	88000415 	stw	zero,16(r17)
 c007048:	88000515 	stw	zero,20(r17)
 c00704c:	88000615 	stw	zero,24(r17)
 c007050:	c008ba00 	call	c008ba0 <memset>
 c007054:	94000317 	ldw	r16,12(r18)
 c007058:	00800484 	movi	r2,18
 c00705c:	8c400715 	stw	r17,28(r17)
 c007060:	8d800815 	stw	r22,32(r17)
 c007064:	8d400915 	stw	r21,36(r17)
 c007068:	8d000a15 	stw	r20,40(r17)
 c00706c:	8cc00b15 	stw	r19,44(r17)
 c007070:	8080030d 	sth	r2,12(r16)
 c007074:	00800084 	movi	r2,2
 c007078:	80000015 	stw	zero,0(r16)
 c00707c:	80000115 	stw	zero,4(r16)
 c007080:	80000215 	stw	zero,8(r16)
 c007084:	80001915 	stw	zero,100(r16)
 c007088:	8080038d 	sth	r2,14(r16)
 c00708c:	80000415 	stw	zero,16(r16)
 c007090:	80000515 	stw	zero,20(r16)
 c007094:	80000615 	stw	zero,24(r16)
 c007098:	b80d883a 	mov	r6,r23
 c00709c:	000b883a 	mov	r5,zero
 c0070a0:	81001704 	addi	r4,r16,92
 c0070a4:	c008ba00 	call	c008ba0 <memset>
 c0070a8:	00800044 	movi	r2,1
 c0070ac:	84000715 	stw	r16,28(r16)
 c0070b0:	85800815 	stw	r22,32(r16)
 c0070b4:	85400915 	stw	r21,36(r16)
 c0070b8:	85000a15 	stw	r20,40(r16)
 c0070bc:	84c00b15 	stw	r19,44(r16)
 c0070c0:	90800e15 	stw	r2,56(r18)
 c0070c4:	dfc00817 	ldw	ra,32(sp)
 c0070c8:	ddc00717 	ldw	r23,28(sp)
 c0070cc:	dd800617 	ldw	r22,24(sp)
 c0070d0:	dd400517 	ldw	r21,20(sp)
 c0070d4:	dd000417 	ldw	r20,16(sp)
 c0070d8:	dcc00317 	ldw	r19,12(sp)
 c0070dc:	dc800217 	ldw	r18,8(sp)
 c0070e0:	dc400117 	ldw	r17,4(sp)
 c0070e4:	dc000017 	ldw	r16,0(sp)
 c0070e8:	dec00904 	addi	sp,sp,36
 c0070ec:	f800283a 	ret

0c0070f0 <__fp_lock>:
 c0070f0:	0005883a 	mov	r2,zero
 c0070f4:	f800283a 	ret

0c0070f8 <__sfmoreglue>:
 c0070f8:	defffc04 	addi	sp,sp,-16
 c0070fc:	dc800215 	stw	r18,8(sp)
 c007100:	2825883a 	mov	r18,r5
 c007104:	dc000015 	stw	r16,0(sp)
 c007108:	01401a04 	movi	r5,104
 c00710c:	2021883a 	mov	r16,r4
 c007110:	913fffc4 	addi	r4,r18,-1
 c007114:	dfc00315 	stw	ra,12(sp)
 c007118:	dc400115 	stw	r17,4(sp)
 c00711c:	c002cc00 	call	c002cc0 <__mulsi3>
 c007120:	8009883a 	mov	r4,r16
 c007124:	11401d04 	addi	r5,r2,116
 c007128:	1023883a 	mov	r17,r2
 c00712c:	c00800c0 	call	c00800c <_malloc_r>
 c007130:	1021883a 	mov	r16,r2
 c007134:	10000726 	beq	r2,zero,c007154 <__sfmoreglue+0x5c>
 c007138:	11000304 	addi	r4,r2,12
 c00713c:	10000015 	stw	zero,0(r2)
 c007140:	14800115 	stw	r18,4(r2)
 c007144:	11000215 	stw	r4,8(r2)
 c007148:	89801a04 	addi	r6,r17,104
 c00714c:	000b883a 	mov	r5,zero
 c007150:	c008ba00 	call	c008ba0 <memset>
 c007154:	8005883a 	mov	r2,r16
 c007158:	dfc00317 	ldw	ra,12(sp)
 c00715c:	dc800217 	ldw	r18,8(sp)
 c007160:	dc400117 	ldw	r17,4(sp)
 c007164:	dc000017 	ldw	r16,0(sp)
 c007168:	dec00404 	addi	sp,sp,16
 c00716c:	f800283a 	ret

0c007170 <__sfp>:
 c007170:	defffb04 	addi	sp,sp,-20
 c007174:	dc000015 	stw	r16,0(sp)
 c007178:	04030074 	movhi	r16,3073
 c00717c:	8411c904 	addi	r16,r16,18212
 c007180:	dcc00315 	stw	r19,12(sp)
 c007184:	2027883a 	mov	r19,r4
 c007188:	81000017 	ldw	r4,0(r16)
 c00718c:	dfc00415 	stw	ra,16(sp)
 c007190:	dc800215 	stw	r18,8(sp)
 c007194:	20800e17 	ldw	r2,56(r4)
 c007198:	dc400115 	stw	r17,4(sp)
 c00719c:	1000021e 	bne	r2,zero,c0071a8 <__sfp+0x38>
 c0071a0:	c006f540 	call	c006f54 <__sinit.part.1>
 c0071a4:	81000017 	ldw	r4,0(r16)
 c0071a8:	2480b804 	addi	r18,r4,736
 c0071ac:	047fffc4 	movi	r17,-1
 c0071b0:	91000117 	ldw	r4,4(r18)
 c0071b4:	94000217 	ldw	r16,8(r18)
 c0071b8:	213fffc4 	addi	r4,r4,-1
 c0071bc:	20000a16 	blt	r4,zero,c0071e8 <__sfp+0x78>
 c0071c0:	8080030f 	ldh	r2,12(r16)
 c0071c4:	10000c26 	beq	r2,zero,c0071f8 <__sfp+0x88>
 c0071c8:	80c01d04 	addi	r3,r16,116
 c0071cc:	00000206 	br	c0071d8 <__sfp+0x68>
 c0071d0:	18bfe60f 	ldh	r2,-104(r3)
 c0071d4:	10000826 	beq	r2,zero,c0071f8 <__sfp+0x88>
 c0071d8:	213fffc4 	addi	r4,r4,-1
 c0071dc:	1c3ffd04 	addi	r16,r3,-12
 c0071e0:	18c01a04 	addi	r3,r3,104
 c0071e4:	247ffa1e 	bne	r4,r17,c0071d0 <__alt_data_end+0xfc0071d0>
 c0071e8:	90800017 	ldw	r2,0(r18)
 c0071ec:	10001d26 	beq	r2,zero,c007264 <__sfp+0xf4>
 c0071f0:	1025883a 	mov	r18,r2
 c0071f4:	003fee06 	br	c0071b0 <__alt_data_end+0xfc0071b0>
 c0071f8:	00bfffc4 	movi	r2,-1
 c0071fc:	8080038d 	sth	r2,14(r16)
 c007200:	00800044 	movi	r2,1
 c007204:	8080030d 	sth	r2,12(r16)
 c007208:	80001915 	stw	zero,100(r16)
 c00720c:	80000015 	stw	zero,0(r16)
 c007210:	80000215 	stw	zero,8(r16)
 c007214:	80000115 	stw	zero,4(r16)
 c007218:	80000415 	stw	zero,16(r16)
 c00721c:	80000515 	stw	zero,20(r16)
 c007220:	80000615 	stw	zero,24(r16)
 c007224:	01800204 	movi	r6,8
 c007228:	000b883a 	mov	r5,zero
 c00722c:	81001704 	addi	r4,r16,92
 c007230:	c008ba00 	call	c008ba0 <memset>
 c007234:	8005883a 	mov	r2,r16
 c007238:	80000c15 	stw	zero,48(r16)
 c00723c:	80000d15 	stw	zero,52(r16)
 c007240:	80001115 	stw	zero,68(r16)
 c007244:	80001215 	stw	zero,72(r16)
 c007248:	dfc00417 	ldw	ra,16(sp)
 c00724c:	dcc00317 	ldw	r19,12(sp)
 c007250:	dc800217 	ldw	r18,8(sp)
 c007254:	dc400117 	ldw	r17,4(sp)
 c007258:	dc000017 	ldw	r16,0(sp)
 c00725c:	dec00504 	addi	sp,sp,20
 c007260:	f800283a 	ret
 c007264:	01400104 	movi	r5,4
 c007268:	9809883a 	mov	r4,r19
 c00726c:	c0070f80 	call	c0070f8 <__sfmoreglue>
 c007270:	90800015 	stw	r2,0(r18)
 c007274:	103fde1e 	bne	r2,zero,c0071f0 <__alt_data_end+0xfc0071f0>
 c007278:	00800304 	movi	r2,12
 c00727c:	98800015 	stw	r2,0(r19)
 c007280:	0005883a 	mov	r2,zero
 c007284:	003ff006 	br	c007248 <__alt_data_end+0xfc007248>

0c007288 <_cleanup>:
 c007288:	00830074 	movhi	r2,3073
 c00728c:	1091c904 	addi	r2,r2,18212
 c007290:	11000017 	ldw	r4,0(r2)
 c007294:	01430074 	movhi	r5,3073
 c007298:	29704304 	addi	r5,r5,-16116
 c00729c:	c007cb01 	jmpi	c007cb0 <_fwalk_reent>

0c0072a0 <__sinit>:
 c0072a0:	20800e17 	ldw	r2,56(r4)
 c0072a4:	10000126 	beq	r2,zero,c0072ac <__sinit+0xc>
 c0072a8:	f800283a 	ret
 c0072ac:	c006f541 	jmpi	c006f54 <__sinit.part.1>

0c0072b0 <__sfp_lock_acquire>:
 c0072b0:	f800283a 	ret

0c0072b4 <__sfp_lock_release>:
 c0072b4:	f800283a 	ret

0c0072b8 <__sinit_lock_acquire>:
 c0072b8:	f800283a 	ret

0c0072bc <__sinit_lock_release>:
 c0072bc:	f800283a 	ret

0c0072c0 <__fp_lock_all>:
 c0072c0:	00830074 	movhi	r2,3073
 c0072c4:	1091ca04 	addi	r2,r2,18216
 c0072c8:	11000017 	ldw	r4,0(r2)
 c0072cc:	01430034 	movhi	r5,3072
 c0072d0:	295c3c04 	addi	r5,r5,28912
 c0072d4:	c007bec1 	jmpi	c007bec <_fwalk>

0c0072d8 <__fp_unlock_all>:
 c0072d8:	00830074 	movhi	r2,3073
 c0072dc:	1091ca04 	addi	r2,r2,18216
 c0072e0:	11000017 	ldw	r4,0(r2)
 c0072e4:	01430034 	movhi	r5,3072
 c0072e8:	295bd004 	addi	r5,r5,28480
 c0072ec:	c007bec1 	jmpi	c007bec <_fwalk>

0c0072f0 <_malloc_trim_r>:
 c0072f0:	defffb04 	addi	sp,sp,-20
 c0072f4:	dcc00315 	stw	r19,12(sp)
 c0072f8:	04c30074 	movhi	r19,3073
 c0072fc:	dc800215 	stw	r18,8(sp)
 c007300:	dc400115 	stw	r17,4(sp)
 c007304:	dc000015 	stw	r16,0(sp)
 c007308:	dfc00415 	stw	ra,16(sp)
 c00730c:	2821883a 	mov	r16,r5
 c007310:	9ccc4104 	addi	r19,r19,12548
 c007314:	2025883a 	mov	r18,r4
 c007318:	c0101700 	call	c010170 <__malloc_lock>
 c00731c:	98800217 	ldw	r2,8(r19)
 c007320:	14400117 	ldw	r17,4(r2)
 c007324:	00bfff04 	movi	r2,-4
 c007328:	88a2703a 	and	r17,r17,r2
 c00732c:	8c21c83a 	sub	r16,r17,r16
 c007330:	8403fbc4 	addi	r16,r16,4079
 c007334:	8020d33a 	srli	r16,r16,12
 c007338:	0083ffc4 	movi	r2,4095
 c00733c:	843fffc4 	addi	r16,r16,-1
 c007340:	8020933a 	slli	r16,r16,12
 c007344:	1400060e 	bge	r2,r16,c007360 <_malloc_trim_r+0x70>
 c007348:	000b883a 	mov	r5,zero
 c00734c:	9009883a 	mov	r4,r18
 c007350:	c00a4c00 	call	c00a4c0 <_sbrk_r>
 c007354:	98c00217 	ldw	r3,8(r19)
 c007358:	1c47883a 	add	r3,r3,r17
 c00735c:	10c00a26 	beq	r2,r3,c007388 <_malloc_trim_r+0x98>
 c007360:	9009883a 	mov	r4,r18
 c007364:	c0101940 	call	c010194 <__malloc_unlock>
 c007368:	0005883a 	mov	r2,zero
 c00736c:	dfc00417 	ldw	ra,16(sp)
 c007370:	dcc00317 	ldw	r19,12(sp)
 c007374:	dc800217 	ldw	r18,8(sp)
 c007378:	dc400117 	ldw	r17,4(sp)
 c00737c:	dc000017 	ldw	r16,0(sp)
 c007380:	dec00504 	addi	sp,sp,20
 c007384:	f800283a 	ret
 c007388:	040bc83a 	sub	r5,zero,r16
 c00738c:	9009883a 	mov	r4,r18
 c007390:	c00a4c00 	call	c00a4c0 <_sbrk_r>
 c007394:	00ffffc4 	movi	r3,-1
 c007398:	10c00d26 	beq	r2,r3,c0073d0 <_malloc_trim_r+0xe0>
 c00739c:	00c30074 	movhi	r3,3073
 c0073a0:	18d8c204 	addi	r3,r3,25352
 c0073a4:	18800017 	ldw	r2,0(r3)
 c0073a8:	99000217 	ldw	r4,8(r19)
 c0073ac:	8c23c83a 	sub	r17,r17,r16
 c0073b0:	8c400054 	ori	r17,r17,1
 c0073b4:	1421c83a 	sub	r16,r2,r16
 c0073b8:	24400115 	stw	r17,4(r4)
 c0073bc:	9009883a 	mov	r4,r18
 c0073c0:	1c000015 	stw	r16,0(r3)
 c0073c4:	c0101940 	call	c010194 <__malloc_unlock>
 c0073c8:	00800044 	movi	r2,1
 c0073cc:	003fe706 	br	c00736c <__alt_data_end+0xfc00736c>
 c0073d0:	000b883a 	mov	r5,zero
 c0073d4:	9009883a 	mov	r4,r18
 c0073d8:	c00a4c00 	call	c00a4c0 <_sbrk_r>
 c0073dc:	99000217 	ldw	r4,8(r19)
 c0073e0:	014003c4 	movi	r5,15
 c0073e4:	1107c83a 	sub	r3,r2,r4
 c0073e8:	28ffdd0e 	bge	r5,r3,c007360 <__alt_data_end+0xfc007360>
 c0073ec:	01430074 	movhi	r5,3073
 c0073f0:	2951cc04 	addi	r5,r5,18224
 c0073f4:	29400017 	ldw	r5,0(r5)
 c0073f8:	18c00054 	ori	r3,r3,1
 c0073fc:	20c00115 	stw	r3,4(r4)
 c007400:	00c30074 	movhi	r3,3073
 c007404:	1145c83a 	sub	r2,r2,r5
 c007408:	18d8c204 	addi	r3,r3,25352
 c00740c:	18800015 	stw	r2,0(r3)
 c007410:	003fd306 	br	c007360 <__alt_data_end+0xfc007360>

0c007414 <_free_r>:
 c007414:	28004126 	beq	r5,zero,c00751c <_free_r+0x108>
 c007418:	defffd04 	addi	sp,sp,-12
 c00741c:	dc400115 	stw	r17,4(sp)
 c007420:	dc000015 	stw	r16,0(sp)
 c007424:	2023883a 	mov	r17,r4
 c007428:	2821883a 	mov	r16,r5
 c00742c:	dfc00215 	stw	ra,8(sp)
 c007430:	c0101700 	call	c010170 <__malloc_lock>
 c007434:	81ffff17 	ldw	r7,-4(r16)
 c007438:	00bfff84 	movi	r2,-2
 c00743c:	01030074 	movhi	r4,3073
 c007440:	81bffe04 	addi	r6,r16,-8
 c007444:	3884703a 	and	r2,r7,r2
 c007448:	210c4104 	addi	r4,r4,12548
 c00744c:	308b883a 	add	r5,r6,r2
 c007450:	2a400117 	ldw	r9,4(r5)
 c007454:	22000217 	ldw	r8,8(r4)
 c007458:	00ffff04 	movi	r3,-4
 c00745c:	48c6703a 	and	r3,r9,r3
 c007460:	2a005726 	beq	r5,r8,c0075c0 <_free_r+0x1ac>
 c007464:	28c00115 	stw	r3,4(r5)
 c007468:	39c0004c 	andi	r7,r7,1
 c00746c:	3800091e 	bne	r7,zero,c007494 <_free_r+0x80>
 c007470:	823ffe17 	ldw	r8,-8(r16)
 c007474:	22400204 	addi	r9,r4,8
 c007478:	320dc83a 	sub	r6,r6,r8
 c00747c:	31c00217 	ldw	r7,8(r6)
 c007480:	1205883a 	add	r2,r2,r8
 c007484:	3a406526 	beq	r7,r9,c00761c <_free_r+0x208>
 c007488:	32000317 	ldw	r8,12(r6)
 c00748c:	3a000315 	stw	r8,12(r7)
 c007490:	41c00215 	stw	r7,8(r8)
 c007494:	28cf883a 	add	r7,r5,r3
 c007498:	39c00117 	ldw	r7,4(r7)
 c00749c:	39c0004c 	andi	r7,r7,1
 c0074a0:	38003a26 	beq	r7,zero,c00758c <_free_r+0x178>
 c0074a4:	10c00054 	ori	r3,r2,1
 c0074a8:	30c00115 	stw	r3,4(r6)
 c0074ac:	3087883a 	add	r3,r6,r2
 c0074b0:	18800015 	stw	r2,0(r3)
 c0074b4:	00c07fc4 	movi	r3,511
 c0074b8:	18801936 	bltu	r3,r2,c007520 <_free_r+0x10c>
 c0074bc:	1004d0fa 	srli	r2,r2,3
 c0074c0:	01c00044 	movi	r7,1
 c0074c4:	21400117 	ldw	r5,4(r4)
 c0074c8:	10c00044 	addi	r3,r2,1
 c0074cc:	18c7883a 	add	r3,r3,r3
 c0074d0:	1005d0ba 	srai	r2,r2,2
 c0074d4:	18c7883a 	add	r3,r3,r3
 c0074d8:	18c7883a 	add	r3,r3,r3
 c0074dc:	1907883a 	add	r3,r3,r4
 c0074e0:	3884983a 	sll	r2,r7,r2
 c0074e4:	19c00017 	ldw	r7,0(r3)
 c0074e8:	1a3ffe04 	addi	r8,r3,-8
 c0074ec:	1144b03a 	or	r2,r2,r5
 c0074f0:	32000315 	stw	r8,12(r6)
 c0074f4:	31c00215 	stw	r7,8(r6)
 c0074f8:	20800115 	stw	r2,4(r4)
 c0074fc:	19800015 	stw	r6,0(r3)
 c007500:	39800315 	stw	r6,12(r7)
 c007504:	8809883a 	mov	r4,r17
 c007508:	dfc00217 	ldw	ra,8(sp)
 c00750c:	dc400117 	ldw	r17,4(sp)
 c007510:	dc000017 	ldw	r16,0(sp)
 c007514:	dec00304 	addi	sp,sp,12
 c007518:	c0101941 	jmpi	c010194 <__malloc_unlock>
 c00751c:	f800283a 	ret
 c007520:	100ad27a 	srli	r5,r2,9
 c007524:	00c00104 	movi	r3,4
 c007528:	19404a36 	bltu	r3,r5,c007654 <_free_r+0x240>
 c00752c:	100ad1ba 	srli	r5,r2,6
 c007530:	28c00e44 	addi	r3,r5,57
 c007534:	18c7883a 	add	r3,r3,r3
 c007538:	29400e04 	addi	r5,r5,56
 c00753c:	18c7883a 	add	r3,r3,r3
 c007540:	18c7883a 	add	r3,r3,r3
 c007544:	1909883a 	add	r4,r3,r4
 c007548:	20c00017 	ldw	r3,0(r4)
 c00754c:	01c30074 	movhi	r7,3073
 c007550:	213ffe04 	addi	r4,r4,-8
 c007554:	39cc4104 	addi	r7,r7,12548
 c007558:	20c04426 	beq	r4,r3,c00766c <_free_r+0x258>
 c00755c:	01ffff04 	movi	r7,-4
 c007560:	19400117 	ldw	r5,4(r3)
 c007564:	29ca703a 	and	r5,r5,r7
 c007568:	1140022e 	bgeu	r2,r5,c007574 <_free_r+0x160>
 c00756c:	18c00217 	ldw	r3,8(r3)
 c007570:	20fffb1e 	bne	r4,r3,c007560 <__alt_data_end+0xfc007560>
 c007574:	19000317 	ldw	r4,12(r3)
 c007578:	31000315 	stw	r4,12(r6)
 c00757c:	30c00215 	stw	r3,8(r6)
 c007580:	21800215 	stw	r6,8(r4)
 c007584:	19800315 	stw	r6,12(r3)
 c007588:	003fde06 	br	c007504 <__alt_data_end+0xfc007504>
 c00758c:	29c00217 	ldw	r7,8(r5)
 c007590:	10c5883a 	add	r2,r2,r3
 c007594:	00c30074 	movhi	r3,3073
 c007598:	18cc4304 	addi	r3,r3,12556
 c00759c:	38c03b26 	beq	r7,r3,c00768c <_free_r+0x278>
 c0075a0:	2a000317 	ldw	r8,12(r5)
 c0075a4:	11400054 	ori	r5,r2,1
 c0075a8:	3087883a 	add	r3,r6,r2
 c0075ac:	3a000315 	stw	r8,12(r7)
 c0075b0:	41c00215 	stw	r7,8(r8)
 c0075b4:	31400115 	stw	r5,4(r6)
 c0075b8:	18800015 	stw	r2,0(r3)
 c0075bc:	003fbd06 	br	c0074b4 <__alt_data_end+0xfc0074b4>
 c0075c0:	39c0004c 	andi	r7,r7,1
 c0075c4:	10c5883a 	add	r2,r2,r3
 c0075c8:	3800071e 	bne	r7,zero,c0075e8 <_free_r+0x1d4>
 c0075cc:	81fffe17 	ldw	r7,-8(r16)
 c0075d0:	31cdc83a 	sub	r6,r6,r7
 c0075d4:	30c00317 	ldw	r3,12(r6)
 c0075d8:	31400217 	ldw	r5,8(r6)
 c0075dc:	11c5883a 	add	r2,r2,r7
 c0075e0:	28c00315 	stw	r3,12(r5)
 c0075e4:	19400215 	stw	r5,8(r3)
 c0075e8:	10c00054 	ori	r3,r2,1
 c0075ec:	30c00115 	stw	r3,4(r6)
 c0075f0:	00c30074 	movhi	r3,3073
 c0075f4:	18d1cd04 	addi	r3,r3,18228
 c0075f8:	18c00017 	ldw	r3,0(r3)
 c0075fc:	21800215 	stw	r6,8(r4)
 c007600:	10ffc036 	bltu	r2,r3,c007504 <__alt_data_end+0xfc007504>
 c007604:	00830074 	movhi	r2,3073
 c007608:	1098af04 	addi	r2,r2,25276
 c00760c:	11400017 	ldw	r5,0(r2)
 c007610:	8809883a 	mov	r4,r17
 c007614:	c0072f00 	call	c0072f0 <_malloc_trim_r>
 c007618:	003fba06 	br	c007504 <__alt_data_end+0xfc007504>
 c00761c:	28c9883a 	add	r4,r5,r3
 c007620:	21000117 	ldw	r4,4(r4)
 c007624:	2100004c 	andi	r4,r4,1
 c007628:	2000391e 	bne	r4,zero,c007710 <_free_r+0x2fc>
 c00762c:	29c00217 	ldw	r7,8(r5)
 c007630:	29000317 	ldw	r4,12(r5)
 c007634:	1885883a 	add	r2,r3,r2
 c007638:	10c00054 	ori	r3,r2,1
 c00763c:	39000315 	stw	r4,12(r7)
 c007640:	21c00215 	stw	r7,8(r4)
 c007644:	30c00115 	stw	r3,4(r6)
 c007648:	308d883a 	add	r6,r6,r2
 c00764c:	30800015 	stw	r2,0(r6)
 c007650:	003fac06 	br	c007504 <__alt_data_end+0xfc007504>
 c007654:	00c00504 	movi	r3,20
 c007658:	19401536 	bltu	r3,r5,c0076b0 <_free_r+0x29c>
 c00765c:	28c01704 	addi	r3,r5,92
 c007660:	18c7883a 	add	r3,r3,r3
 c007664:	294016c4 	addi	r5,r5,91
 c007668:	003fb406 	br	c00753c <__alt_data_end+0xfc00753c>
 c00766c:	280bd0ba 	srai	r5,r5,2
 c007670:	00c00044 	movi	r3,1
 c007674:	38800117 	ldw	r2,4(r7)
 c007678:	194a983a 	sll	r5,r3,r5
 c00767c:	2007883a 	mov	r3,r4
 c007680:	2884b03a 	or	r2,r5,r2
 c007684:	38800115 	stw	r2,4(r7)
 c007688:	003fbb06 	br	c007578 <__alt_data_end+0xfc007578>
 c00768c:	21800515 	stw	r6,20(r4)
 c007690:	21800415 	stw	r6,16(r4)
 c007694:	10c00054 	ori	r3,r2,1
 c007698:	31c00315 	stw	r7,12(r6)
 c00769c:	31c00215 	stw	r7,8(r6)
 c0076a0:	30c00115 	stw	r3,4(r6)
 c0076a4:	308d883a 	add	r6,r6,r2
 c0076a8:	30800015 	stw	r2,0(r6)
 c0076ac:	003f9506 	br	c007504 <__alt_data_end+0xfc007504>
 c0076b0:	00c01504 	movi	r3,84
 c0076b4:	19400536 	bltu	r3,r5,c0076cc <_free_r+0x2b8>
 c0076b8:	100ad33a 	srli	r5,r2,12
 c0076bc:	28c01bc4 	addi	r3,r5,111
 c0076c0:	18c7883a 	add	r3,r3,r3
 c0076c4:	29401b84 	addi	r5,r5,110
 c0076c8:	003f9c06 	br	c00753c <__alt_data_end+0xfc00753c>
 c0076cc:	00c05504 	movi	r3,340
 c0076d0:	19400536 	bltu	r3,r5,c0076e8 <_free_r+0x2d4>
 c0076d4:	100ad3fa 	srli	r5,r2,15
 c0076d8:	28c01e04 	addi	r3,r5,120
 c0076dc:	18c7883a 	add	r3,r3,r3
 c0076e0:	29401dc4 	addi	r5,r5,119
 c0076e4:	003f9506 	br	c00753c <__alt_data_end+0xfc00753c>
 c0076e8:	00c15504 	movi	r3,1364
 c0076ec:	19400536 	bltu	r3,r5,c007704 <_free_r+0x2f0>
 c0076f0:	100ad4ba 	srli	r5,r2,18
 c0076f4:	28c01f44 	addi	r3,r5,125
 c0076f8:	18c7883a 	add	r3,r3,r3
 c0076fc:	29401f04 	addi	r5,r5,124
 c007700:	003f8e06 	br	c00753c <__alt_data_end+0xfc00753c>
 c007704:	00c03f84 	movi	r3,254
 c007708:	01401f84 	movi	r5,126
 c00770c:	003f8b06 	br	c00753c <__alt_data_end+0xfc00753c>
 c007710:	10c00054 	ori	r3,r2,1
 c007714:	30c00115 	stw	r3,4(r6)
 c007718:	308d883a 	add	r6,r6,r2
 c00771c:	30800015 	stw	r2,0(r6)
 c007720:	003f7806 	br	c007504 <__alt_data_end+0xfc007504>

0c007724 <__sfvwrite_r>:
 c007724:	30800217 	ldw	r2,8(r6)
 c007728:	10006726 	beq	r2,zero,c0078c8 <__sfvwrite_r+0x1a4>
 c00772c:	28c0030b 	ldhu	r3,12(r5)
 c007730:	defff404 	addi	sp,sp,-48
 c007734:	dd400715 	stw	r21,28(sp)
 c007738:	dd000615 	stw	r20,24(sp)
 c00773c:	dc000215 	stw	r16,8(sp)
 c007740:	dfc00b15 	stw	ra,44(sp)
 c007744:	df000a15 	stw	fp,40(sp)
 c007748:	ddc00915 	stw	r23,36(sp)
 c00774c:	dd800815 	stw	r22,32(sp)
 c007750:	dcc00515 	stw	r19,20(sp)
 c007754:	dc800415 	stw	r18,16(sp)
 c007758:	dc400315 	stw	r17,12(sp)
 c00775c:	1880020c 	andi	r2,r3,8
 c007760:	2821883a 	mov	r16,r5
 c007764:	202b883a 	mov	r21,r4
 c007768:	3029883a 	mov	r20,r6
 c00776c:	10002726 	beq	r2,zero,c00780c <__sfvwrite_r+0xe8>
 c007770:	28800417 	ldw	r2,16(r5)
 c007774:	10002526 	beq	r2,zero,c00780c <__sfvwrite_r+0xe8>
 c007778:	1880008c 	andi	r2,r3,2
 c00777c:	a4400017 	ldw	r17,0(r20)
 c007780:	10002a26 	beq	r2,zero,c00782c <__sfvwrite_r+0x108>
 c007784:	05a00034 	movhi	r22,32768
 c007788:	0027883a 	mov	r19,zero
 c00778c:	0025883a 	mov	r18,zero
 c007790:	b5bf0004 	addi	r22,r22,-1024
 c007794:	980d883a 	mov	r6,r19
 c007798:	a809883a 	mov	r4,r21
 c00779c:	90004626 	beq	r18,zero,c0078b8 <__sfvwrite_r+0x194>
 c0077a0:	900f883a 	mov	r7,r18
 c0077a4:	b480022e 	bgeu	r22,r18,c0077b0 <__sfvwrite_r+0x8c>
 c0077a8:	01e00034 	movhi	r7,32768
 c0077ac:	39ff0004 	addi	r7,r7,-1024
 c0077b0:	80800917 	ldw	r2,36(r16)
 c0077b4:	81400717 	ldw	r5,28(r16)
 c0077b8:	103ee83a 	callr	r2
 c0077bc:	00805a0e 	bge	zero,r2,c007928 <__sfvwrite_r+0x204>
 c0077c0:	a0c00217 	ldw	r3,8(r20)
 c0077c4:	98a7883a 	add	r19,r19,r2
 c0077c8:	90a5c83a 	sub	r18,r18,r2
 c0077cc:	1885c83a 	sub	r2,r3,r2
 c0077d0:	a0800215 	stw	r2,8(r20)
 c0077d4:	103fef1e 	bne	r2,zero,c007794 <__alt_data_end+0xfc007794>
 c0077d8:	0005883a 	mov	r2,zero
 c0077dc:	dfc00b17 	ldw	ra,44(sp)
 c0077e0:	df000a17 	ldw	fp,40(sp)
 c0077e4:	ddc00917 	ldw	r23,36(sp)
 c0077e8:	dd800817 	ldw	r22,32(sp)
 c0077ec:	dd400717 	ldw	r21,28(sp)
 c0077f0:	dd000617 	ldw	r20,24(sp)
 c0077f4:	dcc00517 	ldw	r19,20(sp)
 c0077f8:	dc800417 	ldw	r18,16(sp)
 c0077fc:	dc400317 	ldw	r17,12(sp)
 c007800:	dc000217 	ldw	r16,8(sp)
 c007804:	dec00c04 	addi	sp,sp,48
 c007808:	f800283a 	ret
 c00780c:	800b883a 	mov	r5,r16
 c007810:	a809883a 	mov	r4,r21
 c007814:	c0052940 	call	c005294 <__swsetup_r>
 c007818:	1000ee1e 	bne	r2,zero,c007bd4 <__sfvwrite_r+0x4b0>
 c00781c:	80c0030b 	ldhu	r3,12(r16)
 c007820:	a4400017 	ldw	r17,0(r20)
 c007824:	1880008c 	andi	r2,r3,2
 c007828:	103fd61e 	bne	r2,zero,c007784 <__alt_data_end+0xfc007784>
 c00782c:	1880004c 	andi	r2,r3,1
 c007830:	1000421e 	bne	r2,zero,c00793c <__sfvwrite_r+0x218>
 c007834:	0039883a 	mov	fp,zero
 c007838:	0025883a 	mov	r18,zero
 c00783c:	90001a26 	beq	r18,zero,c0078a8 <__sfvwrite_r+0x184>
 c007840:	1880800c 	andi	r2,r3,512
 c007844:	84c00217 	ldw	r19,8(r16)
 c007848:	10002126 	beq	r2,zero,c0078d0 <__sfvwrite_r+0x1ac>
 c00784c:	982f883a 	mov	r23,r19
 c007850:	94c09636 	bltu	r18,r19,c007aac <__sfvwrite_r+0x388>
 c007854:	1881200c 	andi	r2,r3,1152
 c007858:	1000a11e 	bne	r2,zero,c007ae0 <__sfvwrite_r+0x3bc>
 c00785c:	81000017 	ldw	r4,0(r16)
 c007860:	b80d883a 	mov	r6,r23
 c007864:	e00b883a 	mov	r5,fp
 c007868:	c008a440 	call	c008a44 <memmove>
 c00786c:	80c00217 	ldw	r3,8(r16)
 c007870:	81000017 	ldw	r4,0(r16)
 c007874:	9005883a 	mov	r2,r18
 c007878:	1ce7c83a 	sub	r19,r3,r19
 c00787c:	25cf883a 	add	r7,r4,r23
 c007880:	84c00215 	stw	r19,8(r16)
 c007884:	81c00015 	stw	r7,0(r16)
 c007888:	a0c00217 	ldw	r3,8(r20)
 c00788c:	e0b9883a 	add	fp,fp,r2
 c007890:	90a5c83a 	sub	r18,r18,r2
 c007894:	18a7c83a 	sub	r19,r3,r2
 c007898:	a4c00215 	stw	r19,8(r20)
 c00789c:	983fce26 	beq	r19,zero,c0077d8 <__alt_data_end+0xfc0077d8>
 c0078a0:	80c0030b 	ldhu	r3,12(r16)
 c0078a4:	903fe61e 	bne	r18,zero,c007840 <__alt_data_end+0xfc007840>
 c0078a8:	8f000017 	ldw	fp,0(r17)
 c0078ac:	8c800117 	ldw	r18,4(r17)
 c0078b0:	8c400204 	addi	r17,r17,8
 c0078b4:	003fe106 	br	c00783c <__alt_data_end+0xfc00783c>
 c0078b8:	8cc00017 	ldw	r19,0(r17)
 c0078bc:	8c800117 	ldw	r18,4(r17)
 c0078c0:	8c400204 	addi	r17,r17,8
 c0078c4:	003fb306 	br	c007794 <__alt_data_end+0xfc007794>
 c0078c8:	0005883a 	mov	r2,zero
 c0078cc:	f800283a 	ret
 c0078d0:	81000017 	ldw	r4,0(r16)
 c0078d4:	80800417 	ldw	r2,16(r16)
 c0078d8:	11005a36 	bltu	r2,r4,c007a44 <__sfvwrite_r+0x320>
 c0078dc:	85c00517 	ldw	r23,20(r16)
 c0078e0:	95c05836 	bltu	r18,r23,c007a44 <__sfvwrite_r+0x320>
 c0078e4:	00a00034 	movhi	r2,32768
 c0078e8:	10bfffc4 	addi	r2,r2,-1
 c0078ec:	9009883a 	mov	r4,r18
 c0078f0:	1480012e 	bgeu	r2,r18,c0078f8 <__sfvwrite_r+0x1d4>
 c0078f4:	1009883a 	mov	r4,r2
 c0078f8:	b80b883a 	mov	r5,r23
 c0078fc:	c002b0c0 	call	c002b0c <__divsi3>
 c007900:	b80b883a 	mov	r5,r23
 c007904:	1009883a 	mov	r4,r2
 c007908:	c002cc00 	call	c002cc0 <__mulsi3>
 c00790c:	81400717 	ldw	r5,28(r16)
 c007910:	80c00917 	ldw	r3,36(r16)
 c007914:	100f883a 	mov	r7,r2
 c007918:	e00d883a 	mov	r6,fp
 c00791c:	a809883a 	mov	r4,r21
 c007920:	183ee83a 	callr	r3
 c007924:	00bfd816 	blt	zero,r2,c007888 <__alt_data_end+0xfc007888>
 c007928:	8080030b 	ldhu	r2,12(r16)
 c00792c:	10801014 	ori	r2,r2,64
 c007930:	8080030d 	sth	r2,12(r16)
 c007934:	00bfffc4 	movi	r2,-1
 c007938:	003fa806 	br	c0077dc <__alt_data_end+0xfc0077dc>
 c00793c:	0027883a 	mov	r19,zero
 c007940:	0011883a 	mov	r8,zero
 c007944:	0039883a 	mov	fp,zero
 c007948:	0025883a 	mov	r18,zero
 c00794c:	90001f26 	beq	r18,zero,c0079cc <__sfvwrite_r+0x2a8>
 c007950:	40005a26 	beq	r8,zero,c007abc <__sfvwrite_r+0x398>
 c007954:	982d883a 	mov	r22,r19
 c007958:	94c0012e 	bgeu	r18,r19,c007960 <__sfvwrite_r+0x23c>
 c00795c:	902d883a 	mov	r22,r18
 c007960:	81000017 	ldw	r4,0(r16)
 c007964:	80800417 	ldw	r2,16(r16)
 c007968:	b02f883a 	mov	r23,r22
 c00796c:	81c00517 	ldw	r7,20(r16)
 c007970:	1100032e 	bgeu	r2,r4,c007980 <__sfvwrite_r+0x25c>
 c007974:	80c00217 	ldw	r3,8(r16)
 c007978:	38c7883a 	add	r3,r7,r3
 c00797c:	1d801816 	blt	r3,r22,c0079e0 <__sfvwrite_r+0x2bc>
 c007980:	b1c03e16 	blt	r22,r7,c007a7c <__sfvwrite_r+0x358>
 c007984:	80800917 	ldw	r2,36(r16)
 c007988:	81400717 	ldw	r5,28(r16)
 c00798c:	e00d883a 	mov	r6,fp
 c007990:	da000115 	stw	r8,4(sp)
 c007994:	a809883a 	mov	r4,r21
 c007998:	103ee83a 	callr	r2
 c00799c:	102f883a 	mov	r23,r2
 c0079a0:	da000117 	ldw	r8,4(sp)
 c0079a4:	00bfe00e 	bge	zero,r2,c007928 <__alt_data_end+0xfc007928>
 c0079a8:	9de7c83a 	sub	r19,r19,r23
 c0079ac:	98001f26 	beq	r19,zero,c007a2c <__sfvwrite_r+0x308>
 c0079b0:	a0800217 	ldw	r2,8(r20)
 c0079b4:	e5f9883a 	add	fp,fp,r23
 c0079b8:	95e5c83a 	sub	r18,r18,r23
 c0079bc:	15efc83a 	sub	r23,r2,r23
 c0079c0:	a5c00215 	stw	r23,8(r20)
 c0079c4:	b83f8426 	beq	r23,zero,c0077d8 <__alt_data_end+0xfc0077d8>
 c0079c8:	903fe11e 	bne	r18,zero,c007950 <__alt_data_end+0xfc007950>
 c0079cc:	8f000017 	ldw	fp,0(r17)
 c0079d0:	8c800117 	ldw	r18,4(r17)
 c0079d4:	0011883a 	mov	r8,zero
 c0079d8:	8c400204 	addi	r17,r17,8
 c0079dc:	003fdb06 	br	c00794c <__alt_data_end+0xfc00794c>
 c0079e0:	180d883a 	mov	r6,r3
 c0079e4:	e00b883a 	mov	r5,fp
 c0079e8:	da000115 	stw	r8,4(sp)
 c0079ec:	d8c00015 	stw	r3,0(sp)
 c0079f0:	c008a440 	call	c008a44 <memmove>
 c0079f4:	d8c00017 	ldw	r3,0(sp)
 c0079f8:	80800017 	ldw	r2,0(r16)
 c0079fc:	800b883a 	mov	r5,r16
 c007a00:	a809883a 	mov	r4,r21
 c007a04:	10c5883a 	add	r2,r2,r3
 c007a08:	80800015 	stw	r2,0(r16)
 c007a0c:	d8c00015 	stw	r3,0(sp)
 c007a10:	c006eb40 	call	c006eb4 <_fflush_r>
 c007a14:	d8c00017 	ldw	r3,0(sp)
 c007a18:	da000117 	ldw	r8,4(sp)
 c007a1c:	103fc21e 	bne	r2,zero,c007928 <__alt_data_end+0xfc007928>
 c007a20:	182f883a 	mov	r23,r3
 c007a24:	9de7c83a 	sub	r19,r19,r23
 c007a28:	983fe11e 	bne	r19,zero,c0079b0 <__alt_data_end+0xfc0079b0>
 c007a2c:	800b883a 	mov	r5,r16
 c007a30:	a809883a 	mov	r4,r21
 c007a34:	c006eb40 	call	c006eb4 <_fflush_r>
 c007a38:	103fbb1e 	bne	r2,zero,c007928 <__alt_data_end+0xfc007928>
 c007a3c:	0011883a 	mov	r8,zero
 c007a40:	003fdb06 	br	c0079b0 <__alt_data_end+0xfc0079b0>
 c007a44:	94c0012e 	bgeu	r18,r19,c007a4c <__sfvwrite_r+0x328>
 c007a48:	9027883a 	mov	r19,r18
 c007a4c:	980d883a 	mov	r6,r19
 c007a50:	e00b883a 	mov	r5,fp
 c007a54:	c008a440 	call	c008a44 <memmove>
 c007a58:	80800217 	ldw	r2,8(r16)
 c007a5c:	80c00017 	ldw	r3,0(r16)
 c007a60:	14c5c83a 	sub	r2,r2,r19
 c007a64:	1cc7883a 	add	r3,r3,r19
 c007a68:	80800215 	stw	r2,8(r16)
 c007a6c:	80c00015 	stw	r3,0(r16)
 c007a70:	10004326 	beq	r2,zero,c007b80 <__sfvwrite_r+0x45c>
 c007a74:	9805883a 	mov	r2,r19
 c007a78:	003f8306 	br	c007888 <__alt_data_end+0xfc007888>
 c007a7c:	b00d883a 	mov	r6,r22
 c007a80:	e00b883a 	mov	r5,fp
 c007a84:	da000115 	stw	r8,4(sp)
 c007a88:	c008a440 	call	c008a44 <memmove>
 c007a8c:	80800217 	ldw	r2,8(r16)
 c007a90:	80c00017 	ldw	r3,0(r16)
 c007a94:	da000117 	ldw	r8,4(sp)
 c007a98:	1585c83a 	sub	r2,r2,r22
 c007a9c:	1dad883a 	add	r22,r3,r22
 c007aa0:	80800215 	stw	r2,8(r16)
 c007aa4:	85800015 	stw	r22,0(r16)
 c007aa8:	003fbf06 	br	c0079a8 <__alt_data_end+0xfc0079a8>
 c007aac:	81000017 	ldw	r4,0(r16)
 c007ab0:	9027883a 	mov	r19,r18
 c007ab4:	902f883a 	mov	r23,r18
 c007ab8:	003f6906 	br	c007860 <__alt_data_end+0xfc007860>
 c007abc:	900d883a 	mov	r6,r18
 c007ac0:	01400284 	movi	r5,10
 c007ac4:	e009883a 	mov	r4,fp
 c007ac8:	c0088180 	call	c008818 <memchr>
 c007acc:	10003e26 	beq	r2,zero,c007bc8 <__sfvwrite_r+0x4a4>
 c007ad0:	10800044 	addi	r2,r2,1
 c007ad4:	1727c83a 	sub	r19,r2,fp
 c007ad8:	02000044 	movi	r8,1
 c007adc:	003f9d06 	br	c007954 <__alt_data_end+0xfc007954>
 c007ae0:	80800517 	ldw	r2,20(r16)
 c007ae4:	81400417 	ldw	r5,16(r16)
 c007ae8:	81c00017 	ldw	r7,0(r16)
 c007aec:	10a7883a 	add	r19,r2,r2
 c007af0:	9885883a 	add	r2,r19,r2
 c007af4:	1026d7fa 	srli	r19,r2,31
 c007af8:	396dc83a 	sub	r22,r7,r5
 c007afc:	b1000044 	addi	r4,r22,1
 c007b00:	9885883a 	add	r2,r19,r2
 c007b04:	1027d07a 	srai	r19,r2,1
 c007b08:	2485883a 	add	r2,r4,r18
 c007b0c:	980d883a 	mov	r6,r19
 c007b10:	9880022e 	bgeu	r19,r2,c007b1c <__sfvwrite_r+0x3f8>
 c007b14:	1027883a 	mov	r19,r2
 c007b18:	100d883a 	mov	r6,r2
 c007b1c:	18c1000c 	andi	r3,r3,1024
 c007b20:	18001c26 	beq	r3,zero,c007b94 <__sfvwrite_r+0x470>
 c007b24:	300b883a 	mov	r5,r6
 c007b28:	a809883a 	mov	r4,r21
 c007b2c:	c00800c0 	call	c00800c <_malloc_r>
 c007b30:	102f883a 	mov	r23,r2
 c007b34:	10002926 	beq	r2,zero,c007bdc <__sfvwrite_r+0x4b8>
 c007b38:	81400417 	ldw	r5,16(r16)
 c007b3c:	b00d883a 	mov	r6,r22
 c007b40:	1009883a 	mov	r4,r2
 c007b44:	c0088fc0 	call	c0088fc <memcpy>
 c007b48:	8080030b 	ldhu	r2,12(r16)
 c007b4c:	00fedfc4 	movi	r3,-1153
 c007b50:	10c4703a 	and	r2,r2,r3
 c007b54:	10802014 	ori	r2,r2,128
 c007b58:	8080030d 	sth	r2,12(r16)
 c007b5c:	bd89883a 	add	r4,r23,r22
 c007b60:	9d8fc83a 	sub	r7,r19,r22
 c007b64:	85c00415 	stw	r23,16(r16)
 c007b68:	84c00515 	stw	r19,20(r16)
 c007b6c:	81000015 	stw	r4,0(r16)
 c007b70:	9027883a 	mov	r19,r18
 c007b74:	81c00215 	stw	r7,8(r16)
 c007b78:	902f883a 	mov	r23,r18
 c007b7c:	003f3806 	br	c007860 <__alt_data_end+0xfc007860>
 c007b80:	800b883a 	mov	r5,r16
 c007b84:	a809883a 	mov	r4,r21
 c007b88:	c006eb40 	call	c006eb4 <_fflush_r>
 c007b8c:	103fb926 	beq	r2,zero,c007a74 <__alt_data_end+0xfc007a74>
 c007b90:	003f6506 	br	c007928 <__alt_data_end+0xfc007928>
 c007b94:	a809883a 	mov	r4,r21
 c007b98:	c009ee80 	call	c009ee8 <_realloc_r>
 c007b9c:	102f883a 	mov	r23,r2
 c007ba0:	103fee1e 	bne	r2,zero,c007b5c <__alt_data_end+0xfc007b5c>
 c007ba4:	81400417 	ldw	r5,16(r16)
 c007ba8:	a809883a 	mov	r4,r21
 c007bac:	c0074140 	call	c007414 <_free_r>
 c007bb0:	8080030b 	ldhu	r2,12(r16)
 c007bb4:	00ffdfc4 	movi	r3,-129
 c007bb8:	1884703a 	and	r2,r3,r2
 c007bbc:	00c00304 	movi	r3,12
 c007bc0:	a8c00015 	stw	r3,0(r21)
 c007bc4:	003f5906 	br	c00792c <__alt_data_end+0xfc00792c>
 c007bc8:	94c00044 	addi	r19,r18,1
 c007bcc:	02000044 	movi	r8,1
 c007bd0:	003f6006 	br	c007954 <__alt_data_end+0xfc007954>
 c007bd4:	00bfffc4 	movi	r2,-1
 c007bd8:	003f0006 	br	c0077dc <__alt_data_end+0xfc0077dc>
 c007bdc:	00800304 	movi	r2,12
 c007be0:	a8800015 	stw	r2,0(r21)
 c007be4:	8080030b 	ldhu	r2,12(r16)
 c007be8:	003f5006 	br	c00792c <__alt_data_end+0xfc00792c>

0c007bec <_fwalk>:
 c007bec:	defff704 	addi	sp,sp,-36
 c007bf0:	dd000415 	stw	r20,16(sp)
 c007bf4:	dfc00815 	stw	ra,32(sp)
 c007bf8:	ddc00715 	stw	r23,28(sp)
 c007bfc:	dd800615 	stw	r22,24(sp)
 c007c00:	dd400515 	stw	r21,20(sp)
 c007c04:	dcc00315 	stw	r19,12(sp)
 c007c08:	dc800215 	stw	r18,8(sp)
 c007c0c:	dc400115 	stw	r17,4(sp)
 c007c10:	dc000015 	stw	r16,0(sp)
 c007c14:	2500b804 	addi	r20,r4,736
 c007c18:	a0002326 	beq	r20,zero,c007ca8 <_fwalk+0xbc>
 c007c1c:	282b883a 	mov	r21,r5
 c007c20:	002f883a 	mov	r23,zero
 c007c24:	05800044 	movi	r22,1
 c007c28:	04ffffc4 	movi	r19,-1
 c007c2c:	a4400117 	ldw	r17,4(r20)
 c007c30:	a4800217 	ldw	r18,8(r20)
 c007c34:	8c7fffc4 	addi	r17,r17,-1
 c007c38:	88000d16 	blt	r17,zero,c007c70 <_fwalk+0x84>
 c007c3c:	94000304 	addi	r16,r18,12
 c007c40:	94800384 	addi	r18,r18,14
 c007c44:	8080000b 	ldhu	r2,0(r16)
 c007c48:	8c7fffc4 	addi	r17,r17,-1
 c007c4c:	813ffd04 	addi	r4,r16,-12
 c007c50:	b080042e 	bgeu	r22,r2,c007c64 <_fwalk+0x78>
 c007c54:	9080000f 	ldh	r2,0(r18)
 c007c58:	14c00226 	beq	r2,r19,c007c64 <_fwalk+0x78>
 c007c5c:	a83ee83a 	callr	r21
 c007c60:	b8aeb03a 	or	r23,r23,r2
 c007c64:	84001a04 	addi	r16,r16,104
 c007c68:	94801a04 	addi	r18,r18,104
 c007c6c:	8cfff51e 	bne	r17,r19,c007c44 <__alt_data_end+0xfc007c44>
 c007c70:	a5000017 	ldw	r20,0(r20)
 c007c74:	a03fed1e 	bne	r20,zero,c007c2c <__alt_data_end+0xfc007c2c>
 c007c78:	b805883a 	mov	r2,r23
 c007c7c:	dfc00817 	ldw	ra,32(sp)
 c007c80:	ddc00717 	ldw	r23,28(sp)
 c007c84:	dd800617 	ldw	r22,24(sp)
 c007c88:	dd400517 	ldw	r21,20(sp)
 c007c8c:	dd000417 	ldw	r20,16(sp)
 c007c90:	dcc00317 	ldw	r19,12(sp)
 c007c94:	dc800217 	ldw	r18,8(sp)
 c007c98:	dc400117 	ldw	r17,4(sp)
 c007c9c:	dc000017 	ldw	r16,0(sp)
 c007ca0:	dec00904 	addi	sp,sp,36
 c007ca4:	f800283a 	ret
 c007ca8:	002f883a 	mov	r23,zero
 c007cac:	003ff206 	br	c007c78 <__alt_data_end+0xfc007c78>

0c007cb0 <_fwalk_reent>:
 c007cb0:	defff704 	addi	sp,sp,-36
 c007cb4:	dd000415 	stw	r20,16(sp)
 c007cb8:	dfc00815 	stw	ra,32(sp)
 c007cbc:	ddc00715 	stw	r23,28(sp)
 c007cc0:	dd800615 	stw	r22,24(sp)
 c007cc4:	dd400515 	stw	r21,20(sp)
 c007cc8:	dcc00315 	stw	r19,12(sp)
 c007ccc:	dc800215 	stw	r18,8(sp)
 c007cd0:	dc400115 	stw	r17,4(sp)
 c007cd4:	dc000015 	stw	r16,0(sp)
 c007cd8:	2500b804 	addi	r20,r4,736
 c007cdc:	a0002326 	beq	r20,zero,c007d6c <_fwalk_reent+0xbc>
 c007ce0:	282b883a 	mov	r21,r5
 c007ce4:	2027883a 	mov	r19,r4
 c007ce8:	002f883a 	mov	r23,zero
 c007cec:	05800044 	movi	r22,1
 c007cf0:	04bfffc4 	movi	r18,-1
 c007cf4:	a4400117 	ldw	r17,4(r20)
 c007cf8:	a4000217 	ldw	r16,8(r20)
 c007cfc:	8c7fffc4 	addi	r17,r17,-1
 c007d00:	88000c16 	blt	r17,zero,c007d34 <_fwalk_reent+0x84>
 c007d04:	84000304 	addi	r16,r16,12
 c007d08:	8080000b 	ldhu	r2,0(r16)
 c007d0c:	8c7fffc4 	addi	r17,r17,-1
 c007d10:	817ffd04 	addi	r5,r16,-12
 c007d14:	b080052e 	bgeu	r22,r2,c007d2c <_fwalk_reent+0x7c>
 c007d18:	8080008f 	ldh	r2,2(r16)
 c007d1c:	9809883a 	mov	r4,r19
 c007d20:	14800226 	beq	r2,r18,c007d2c <_fwalk_reent+0x7c>
 c007d24:	a83ee83a 	callr	r21
 c007d28:	b8aeb03a 	or	r23,r23,r2
 c007d2c:	84001a04 	addi	r16,r16,104
 c007d30:	8cbff51e 	bne	r17,r18,c007d08 <__alt_data_end+0xfc007d08>
 c007d34:	a5000017 	ldw	r20,0(r20)
 c007d38:	a03fee1e 	bne	r20,zero,c007cf4 <__alt_data_end+0xfc007cf4>
 c007d3c:	b805883a 	mov	r2,r23
 c007d40:	dfc00817 	ldw	ra,32(sp)
 c007d44:	ddc00717 	ldw	r23,28(sp)
 c007d48:	dd800617 	ldw	r22,24(sp)
 c007d4c:	dd400517 	ldw	r21,20(sp)
 c007d50:	dd000417 	ldw	r20,16(sp)
 c007d54:	dcc00317 	ldw	r19,12(sp)
 c007d58:	dc800217 	ldw	r18,8(sp)
 c007d5c:	dc400117 	ldw	r17,4(sp)
 c007d60:	dc000017 	ldw	r16,0(sp)
 c007d64:	dec00904 	addi	sp,sp,36
 c007d68:	f800283a 	ret
 c007d6c:	002f883a 	mov	r23,zero
 c007d70:	003ff206 	br	c007d3c <__alt_data_end+0xfc007d3c>

0c007d74 <_setlocale_r>:
 c007d74:	30001b26 	beq	r6,zero,c007de4 <_setlocale_r+0x70>
 c007d78:	01430074 	movhi	r5,3073
 c007d7c:	defffe04 	addi	sp,sp,-8
 c007d80:	294a6d04 	addi	r5,r5,10676
 c007d84:	3009883a 	mov	r4,r6
 c007d88:	dc000015 	stw	r16,0(sp)
 c007d8c:	dfc00115 	stw	ra,4(sp)
 c007d90:	3021883a 	mov	r16,r6
 c007d94:	c00a6500 	call	c00a650 <strcmp>
 c007d98:	1000061e 	bne	r2,zero,c007db4 <_setlocale_r+0x40>
 c007d9c:	00830074 	movhi	r2,3073
 c007da0:	108a6c04 	addi	r2,r2,10672
 c007da4:	dfc00117 	ldw	ra,4(sp)
 c007da8:	dc000017 	ldw	r16,0(sp)
 c007dac:	dec00204 	addi	sp,sp,8
 c007db0:	f800283a 	ret
 c007db4:	01430074 	movhi	r5,3073
 c007db8:	294a6c04 	addi	r5,r5,10672
 c007dbc:	8009883a 	mov	r4,r16
 c007dc0:	c00a6500 	call	c00a650 <strcmp>
 c007dc4:	103ff526 	beq	r2,zero,c007d9c <__alt_data_end+0xfc007d9c>
 c007dc8:	01430074 	movhi	r5,3073
 c007dcc:	294a5704 	addi	r5,r5,10588
 c007dd0:	8009883a 	mov	r4,r16
 c007dd4:	c00a6500 	call	c00a650 <strcmp>
 c007dd8:	103ff026 	beq	r2,zero,c007d9c <__alt_data_end+0xfc007d9c>
 c007ddc:	0005883a 	mov	r2,zero
 c007de0:	003ff006 	br	c007da4 <__alt_data_end+0xfc007da4>
 c007de4:	00830074 	movhi	r2,3073
 c007de8:	108a6c04 	addi	r2,r2,10672
 c007dec:	f800283a 	ret

0c007df0 <__locale_charset>:
 c007df0:	00830074 	movhi	r2,3073
 c007df4:	108c2b04 	addi	r2,r2,12460
 c007df8:	f800283a 	ret

0c007dfc <__locale_mb_cur_max>:
 c007dfc:	00830074 	movhi	r2,3073
 c007e00:	1091cb04 	addi	r2,r2,18220
 c007e04:	10800017 	ldw	r2,0(r2)
 c007e08:	f800283a 	ret

0c007e0c <__locale_msgcharset>:
 c007e0c:	00830074 	movhi	r2,3073
 c007e10:	108c2304 	addi	r2,r2,12428
 c007e14:	f800283a 	ret

0c007e18 <__locale_cjk_lang>:
 c007e18:	0005883a 	mov	r2,zero
 c007e1c:	f800283a 	ret

0c007e20 <_localeconv_r>:
 c007e20:	00830074 	movhi	r2,3073
 c007e24:	108c3304 	addi	r2,r2,12492
 c007e28:	f800283a 	ret

0c007e2c <setlocale>:
 c007e2c:	00830074 	movhi	r2,3073
 c007e30:	1091ca04 	addi	r2,r2,18216
 c007e34:	280d883a 	mov	r6,r5
 c007e38:	200b883a 	mov	r5,r4
 c007e3c:	11000017 	ldw	r4,0(r2)
 c007e40:	c007d741 	jmpi	c007d74 <_setlocale_r>

0c007e44 <localeconv>:
 c007e44:	00830074 	movhi	r2,3073
 c007e48:	108c3304 	addi	r2,r2,12492
 c007e4c:	f800283a 	ret

0c007e50 <__smakebuf_r>:
 c007e50:	2880030b 	ldhu	r2,12(r5)
 c007e54:	10c0008c 	andi	r3,r2,2
 c007e58:	1800411e 	bne	r3,zero,c007f60 <__smakebuf_r+0x110>
 c007e5c:	deffec04 	addi	sp,sp,-80
 c007e60:	dc000f15 	stw	r16,60(sp)
 c007e64:	2821883a 	mov	r16,r5
 c007e68:	2940038f 	ldh	r5,14(r5)
 c007e6c:	dc401015 	stw	r17,64(sp)
 c007e70:	dfc01315 	stw	ra,76(sp)
 c007e74:	dcc01215 	stw	r19,72(sp)
 c007e78:	dc801115 	stw	r18,68(sp)
 c007e7c:	2023883a 	mov	r17,r4
 c007e80:	28001c16 	blt	r5,zero,c007ef4 <__smakebuf_r+0xa4>
 c007e84:	d80d883a 	mov	r6,sp
 c007e88:	c00c4180 	call	c00c418 <_fstat_r>
 c007e8c:	10001816 	blt	r2,zero,c007ef0 <__smakebuf_r+0xa0>
 c007e90:	d8800117 	ldw	r2,4(sp)
 c007e94:	00e00014 	movui	r3,32768
 c007e98:	10bc000c 	andi	r2,r2,61440
 c007e9c:	14c80020 	cmpeqi	r19,r2,8192
 c007ea0:	10c03726 	beq	r2,r3,c007f80 <__smakebuf_r+0x130>
 c007ea4:	80c0030b 	ldhu	r3,12(r16)
 c007ea8:	18c20014 	ori	r3,r3,2048
 c007eac:	80c0030d 	sth	r3,12(r16)
 c007eb0:	00c80004 	movi	r3,8192
 c007eb4:	10c0521e 	bne	r2,r3,c008000 <__smakebuf_r+0x1b0>
 c007eb8:	8140038f 	ldh	r5,14(r16)
 c007ebc:	8809883a 	mov	r4,r17
 c007ec0:	c00c4740 	call	c00c474 <_isatty_r>
 c007ec4:	10004c26 	beq	r2,zero,c007ff8 <__smakebuf_r+0x1a8>
 c007ec8:	8080030b 	ldhu	r2,12(r16)
 c007ecc:	80c010c4 	addi	r3,r16,67
 c007ed0:	80c00015 	stw	r3,0(r16)
 c007ed4:	10800054 	ori	r2,r2,1
 c007ed8:	8080030d 	sth	r2,12(r16)
 c007edc:	00800044 	movi	r2,1
 c007ee0:	80c00415 	stw	r3,16(r16)
 c007ee4:	80800515 	stw	r2,20(r16)
 c007ee8:	04810004 	movi	r18,1024
 c007eec:	00000706 	br	c007f0c <__smakebuf_r+0xbc>
 c007ef0:	8080030b 	ldhu	r2,12(r16)
 c007ef4:	10c0200c 	andi	r3,r2,128
 c007ef8:	18001f1e 	bne	r3,zero,c007f78 <__smakebuf_r+0x128>
 c007efc:	04810004 	movi	r18,1024
 c007f00:	10820014 	ori	r2,r2,2048
 c007f04:	8080030d 	sth	r2,12(r16)
 c007f08:	0027883a 	mov	r19,zero
 c007f0c:	900b883a 	mov	r5,r18
 c007f10:	8809883a 	mov	r4,r17
 c007f14:	c00800c0 	call	c00800c <_malloc_r>
 c007f18:	10002c26 	beq	r2,zero,c007fcc <__smakebuf_r+0x17c>
 c007f1c:	80c0030b 	ldhu	r3,12(r16)
 c007f20:	01030034 	movhi	r4,3072
 c007f24:	211bd204 	addi	r4,r4,28488
 c007f28:	89000f15 	stw	r4,60(r17)
 c007f2c:	18c02014 	ori	r3,r3,128
 c007f30:	80c0030d 	sth	r3,12(r16)
 c007f34:	80800015 	stw	r2,0(r16)
 c007f38:	80800415 	stw	r2,16(r16)
 c007f3c:	84800515 	stw	r18,20(r16)
 c007f40:	98001a1e 	bne	r19,zero,c007fac <__smakebuf_r+0x15c>
 c007f44:	dfc01317 	ldw	ra,76(sp)
 c007f48:	dcc01217 	ldw	r19,72(sp)
 c007f4c:	dc801117 	ldw	r18,68(sp)
 c007f50:	dc401017 	ldw	r17,64(sp)
 c007f54:	dc000f17 	ldw	r16,60(sp)
 c007f58:	dec01404 	addi	sp,sp,80
 c007f5c:	f800283a 	ret
 c007f60:	288010c4 	addi	r2,r5,67
 c007f64:	28800015 	stw	r2,0(r5)
 c007f68:	28800415 	stw	r2,16(r5)
 c007f6c:	00800044 	movi	r2,1
 c007f70:	28800515 	stw	r2,20(r5)
 c007f74:	f800283a 	ret
 c007f78:	04801004 	movi	r18,64
 c007f7c:	003fe006 	br	c007f00 <__alt_data_end+0xfc007f00>
 c007f80:	81000a17 	ldw	r4,40(r16)
 c007f84:	00c30074 	movhi	r3,3073
 c007f88:	18e97b04 	addi	r3,r3,-23060
 c007f8c:	20ffc51e 	bne	r4,r3,c007ea4 <__alt_data_end+0xfc007ea4>
 c007f90:	8080030b 	ldhu	r2,12(r16)
 c007f94:	04810004 	movi	r18,1024
 c007f98:	84801315 	stw	r18,76(r16)
 c007f9c:	1484b03a 	or	r2,r2,r18
 c007fa0:	8080030d 	sth	r2,12(r16)
 c007fa4:	0027883a 	mov	r19,zero
 c007fa8:	003fd806 	br	c007f0c <__alt_data_end+0xfc007f0c>
 c007fac:	8140038f 	ldh	r5,14(r16)
 c007fb0:	8809883a 	mov	r4,r17
 c007fb4:	c00c4740 	call	c00c474 <_isatty_r>
 c007fb8:	103fe226 	beq	r2,zero,c007f44 <__alt_data_end+0xfc007f44>
 c007fbc:	8080030b 	ldhu	r2,12(r16)
 c007fc0:	10800054 	ori	r2,r2,1
 c007fc4:	8080030d 	sth	r2,12(r16)
 c007fc8:	003fde06 	br	c007f44 <__alt_data_end+0xfc007f44>
 c007fcc:	8080030b 	ldhu	r2,12(r16)
 c007fd0:	10c0800c 	andi	r3,r2,512
 c007fd4:	183fdb1e 	bne	r3,zero,c007f44 <__alt_data_end+0xfc007f44>
 c007fd8:	10800094 	ori	r2,r2,2
 c007fdc:	80c010c4 	addi	r3,r16,67
 c007fe0:	8080030d 	sth	r2,12(r16)
 c007fe4:	00800044 	movi	r2,1
 c007fe8:	80c00015 	stw	r3,0(r16)
 c007fec:	80c00415 	stw	r3,16(r16)
 c007ff0:	80800515 	stw	r2,20(r16)
 c007ff4:	003fd306 	br	c007f44 <__alt_data_end+0xfc007f44>
 c007ff8:	04810004 	movi	r18,1024
 c007ffc:	003fc306 	br	c007f0c <__alt_data_end+0xfc007f0c>
 c008000:	0027883a 	mov	r19,zero
 c008004:	04810004 	movi	r18,1024
 c008008:	003fc006 	br	c007f0c <__alt_data_end+0xfc007f0c>

0c00800c <_malloc_r>:
 c00800c:	defff504 	addi	sp,sp,-44
 c008010:	dc800315 	stw	r18,12(sp)
 c008014:	dfc00a15 	stw	ra,40(sp)
 c008018:	df000915 	stw	fp,36(sp)
 c00801c:	ddc00815 	stw	r23,32(sp)
 c008020:	dd800715 	stw	r22,28(sp)
 c008024:	dd400615 	stw	r21,24(sp)
 c008028:	dd000515 	stw	r20,20(sp)
 c00802c:	dcc00415 	stw	r19,16(sp)
 c008030:	dc400215 	stw	r17,8(sp)
 c008034:	dc000115 	stw	r16,4(sp)
 c008038:	288002c4 	addi	r2,r5,11
 c00803c:	00c00584 	movi	r3,22
 c008040:	2025883a 	mov	r18,r4
 c008044:	18807f2e 	bgeu	r3,r2,c008244 <_malloc_r+0x238>
 c008048:	047ffe04 	movi	r17,-8
 c00804c:	1462703a 	and	r17,r2,r17
 c008050:	8800a316 	blt	r17,zero,c0082e0 <_malloc_r+0x2d4>
 c008054:	8940a236 	bltu	r17,r5,c0082e0 <_malloc_r+0x2d4>
 c008058:	c0101700 	call	c010170 <__malloc_lock>
 c00805c:	00807dc4 	movi	r2,503
 c008060:	1441e92e 	bgeu	r2,r17,c008808 <_malloc_r+0x7fc>
 c008064:	8804d27a 	srli	r2,r17,9
 c008068:	1000a126 	beq	r2,zero,c0082f0 <_malloc_r+0x2e4>
 c00806c:	00c00104 	movi	r3,4
 c008070:	18811e36 	bltu	r3,r2,c0084ec <_malloc_r+0x4e0>
 c008074:	8804d1ba 	srli	r2,r17,6
 c008078:	12000e44 	addi	r8,r2,57
 c00807c:	11c00e04 	addi	r7,r2,56
 c008080:	4209883a 	add	r4,r8,r8
 c008084:	04c30074 	movhi	r19,3073
 c008088:	2109883a 	add	r4,r4,r4
 c00808c:	9ccc4104 	addi	r19,r19,12548
 c008090:	2109883a 	add	r4,r4,r4
 c008094:	9909883a 	add	r4,r19,r4
 c008098:	24000117 	ldw	r16,4(r4)
 c00809c:	213ffe04 	addi	r4,r4,-8
 c0080a0:	24009726 	beq	r4,r16,c008300 <_malloc_r+0x2f4>
 c0080a4:	80800117 	ldw	r2,4(r16)
 c0080a8:	01bfff04 	movi	r6,-4
 c0080ac:	014003c4 	movi	r5,15
 c0080b0:	1184703a 	and	r2,r2,r6
 c0080b4:	1447c83a 	sub	r3,r2,r17
 c0080b8:	28c00716 	blt	r5,r3,c0080d8 <_malloc_r+0xcc>
 c0080bc:	1800920e 	bge	r3,zero,c008308 <_malloc_r+0x2fc>
 c0080c0:	84000317 	ldw	r16,12(r16)
 c0080c4:	24008e26 	beq	r4,r16,c008300 <_malloc_r+0x2f4>
 c0080c8:	80800117 	ldw	r2,4(r16)
 c0080cc:	1184703a 	and	r2,r2,r6
 c0080d0:	1447c83a 	sub	r3,r2,r17
 c0080d4:	28fff90e 	bge	r5,r3,c0080bc <__alt_data_end+0xfc0080bc>
 c0080d8:	3809883a 	mov	r4,r7
 c0080dc:	01830074 	movhi	r6,3073
 c0080e0:	9c000417 	ldw	r16,16(r19)
 c0080e4:	318c4104 	addi	r6,r6,12548
 c0080e8:	32000204 	addi	r8,r6,8
 c0080ec:	82013426 	beq	r16,r8,c0085c0 <_malloc_r+0x5b4>
 c0080f0:	80c00117 	ldw	r3,4(r16)
 c0080f4:	00bfff04 	movi	r2,-4
 c0080f8:	188e703a 	and	r7,r3,r2
 c0080fc:	3c45c83a 	sub	r2,r7,r17
 c008100:	00c003c4 	movi	r3,15
 c008104:	18811f16 	blt	r3,r2,c008584 <_malloc_r+0x578>
 c008108:	32000515 	stw	r8,20(r6)
 c00810c:	32000415 	stw	r8,16(r6)
 c008110:	10007f0e 	bge	r2,zero,c008310 <_malloc_r+0x304>
 c008114:	00807fc4 	movi	r2,511
 c008118:	11c0fd36 	bltu	r2,r7,c008510 <_malloc_r+0x504>
 c00811c:	3806d0fa 	srli	r3,r7,3
 c008120:	01c00044 	movi	r7,1
 c008124:	30800117 	ldw	r2,4(r6)
 c008128:	19400044 	addi	r5,r3,1
 c00812c:	294b883a 	add	r5,r5,r5
 c008130:	1807d0ba 	srai	r3,r3,2
 c008134:	294b883a 	add	r5,r5,r5
 c008138:	294b883a 	add	r5,r5,r5
 c00813c:	298b883a 	add	r5,r5,r6
 c008140:	38c6983a 	sll	r3,r7,r3
 c008144:	29c00017 	ldw	r7,0(r5)
 c008148:	2a7ffe04 	addi	r9,r5,-8
 c00814c:	1886b03a 	or	r3,r3,r2
 c008150:	82400315 	stw	r9,12(r16)
 c008154:	81c00215 	stw	r7,8(r16)
 c008158:	30c00115 	stw	r3,4(r6)
 c00815c:	2c000015 	stw	r16,0(r5)
 c008160:	3c000315 	stw	r16,12(r7)
 c008164:	2005d0ba 	srai	r2,r4,2
 c008168:	01400044 	movi	r5,1
 c00816c:	288a983a 	sll	r5,r5,r2
 c008170:	19406f36 	bltu	r3,r5,c008330 <_malloc_r+0x324>
 c008174:	28c4703a 	and	r2,r5,r3
 c008178:	10000a1e 	bne	r2,zero,c0081a4 <_malloc_r+0x198>
 c00817c:	00bfff04 	movi	r2,-4
 c008180:	294b883a 	add	r5,r5,r5
 c008184:	2088703a 	and	r4,r4,r2
 c008188:	28c4703a 	and	r2,r5,r3
 c00818c:	21000104 	addi	r4,r4,4
 c008190:	1000041e 	bne	r2,zero,c0081a4 <_malloc_r+0x198>
 c008194:	294b883a 	add	r5,r5,r5
 c008198:	28c4703a 	and	r2,r5,r3
 c00819c:	21000104 	addi	r4,r4,4
 c0081a0:	103ffc26 	beq	r2,zero,c008194 <__alt_data_end+0xfc008194>
 c0081a4:	02bfff04 	movi	r10,-4
 c0081a8:	024003c4 	movi	r9,15
 c0081ac:	21800044 	addi	r6,r4,1
 c0081b0:	318d883a 	add	r6,r6,r6
 c0081b4:	318d883a 	add	r6,r6,r6
 c0081b8:	318d883a 	add	r6,r6,r6
 c0081bc:	998d883a 	add	r6,r19,r6
 c0081c0:	333ffe04 	addi	r12,r6,-8
 c0081c4:	2017883a 	mov	r11,r4
 c0081c8:	31800104 	addi	r6,r6,4
 c0081cc:	34000017 	ldw	r16,0(r6)
 c0081d0:	31fffd04 	addi	r7,r6,-12
 c0081d4:	81c0041e 	bne	r16,r7,c0081e8 <_malloc_r+0x1dc>
 c0081d8:	0000fb06 	br	c0085c8 <_malloc_r+0x5bc>
 c0081dc:	1801030e 	bge	r3,zero,c0085ec <_malloc_r+0x5e0>
 c0081e0:	84000317 	ldw	r16,12(r16)
 c0081e4:	81c0f826 	beq	r16,r7,c0085c8 <_malloc_r+0x5bc>
 c0081e8:	80800117 	ldw	r2,4(r16)
 c0081ec:	1284703a 	and	r2,r2,r10
 c0081f0:	1447c83a 	sub	r3,r2,r17
 c0081f4:	48fff90e 	bge	r9,r3,c0081dc <__alt_data_end+0xfc0081dc>
 c0081f8:	80800317 	ldw	r2,12(r16)
 c0081fc:	81000217 	ldw	r4,8(r16)
 c008200:	89400054 	ori	r5,r17,1
 c008204:	81400115 	stw	r5,4(r16)
 c008208:	20800315 	stw	r2,12(r4)
 c00820c:	11000215 	stw	r4,8(r2)
 c008210:	8463883a 	add	r17,r16,r17
 c008214:	9c400515 	stw	r17,20(r19)
 c008218:	9c400415 	stw	r17,16(r19)
 c00821c:	18800054 	ori	r2,r3,1
 c008220:	88800115 	stw	r2,4(r17)
 c008224:	8a000315 	stw	r8,12(r17)
 c008228:	8a000215 	stw	r8,8(r17)
 c00822c:	88e3883a 	add	r17,r17,r3
 c008230:	88c00015 	stw	r3,0(r17)
 c008234:	9009883a 	mov	r4,r18
 c008238:	c0101940 	call	c010194 <__malloc_unlock>
 c00823c:	80800204 	addi	r2,r16,8
 c008240:	00001b06 	br	c0082b0 <_malloc_r+0x2a4>
 c008244:	04400404 	movi	r17,16
 c008248:	89402536 	bltu	r17,r5,c0082e0 <_malloc_r+0x2d4>
 c00824c:	c0101700 	call	c010170 <__malloc_lock>
 c008250:	00800184 	movi	r2,6
 c008254:	01000084 	movi	r4,2
 c008258:	04c30074 	movhi	r19,3073
 c00825c:	1085883a 	add	r2,r2,r2
 c008260:	9ccc4104 	addi	r19,r19,12548
 c008264:	1085883a 	add	r2,r2,r2
 c008268:	9885883a 	add	r2,r19,r2
 c00826c:	14000117 	ldw	r16,4(r2)
 c008270:	10fffe04 	addi	r3,r2,-8
 c008274:	80c0d926 	beq	r16,r3,c0085dc <_malloc_r+0x5d0>
 c008278:	80c00117 	ldw	r3,4(r16)
 c00827c:	81000317 	ldw	r4,12(r16)
 c008280:	00bfff04 	movi	r2,-4
 c008284:	1884703a 	and	r2,r3,r2
 c008288:	81400217 	ldw	r5,8(r16)
 c00828c:	8085883a 	add	r2,r16,r2
 c008290:	10c00117 	ldw	r3,4(r2)
 c008294:	29000315 	stw	r4,12(r5)
 c008298:	21400215 	stw	r5,8(r4)
 c00829c:	18c00054 	ori	r3,r3,1
 c0082a0:	10c00115 	stw	r3,4(r2)
 c0082a4:	9009883a 	mov	r4,r18
 c0082a8:	c0101940 	call	c010194 <__malloc_unlock>
 c0082ac:	80800204 	addi	r2,r16,8
 c0082b0:	dfc00a17 	ldw	ra,40(sp)
 c0082b4:	df000917 	ldw	fp,36(sp)
 c0082b8:	ddc00817 	ldw	r23,32(sp)
 c0082bc:	dd800717 	ldw	r22,28(sp)
 c0082c0:	dd400617 	ldw	r21,24(sp)
 c0082c4:	dd000517 	ldw	r20,20(sp)
 c0082c8:	dcc00417 	ldw	r19,16(sp)
 c0082cc:	dc800317 	ldw	r18,12(sp)
 c0082d0:	dc400217 	ldw	r17,8(sp)
 c0082d4:	dc000117 	ldw	r16,4(sp)
 c0082d8:	dec00b04 	addi	sp,sp,44
 c0082dc:	f800283a 	ret
 c0082e0:	00800304 	movi	r2,12
 c0082e4:	90800015 	stw	r2,0(r18)
 c0082e8:	0005883a 	mov	r2,zero
 c0082ec:	003ff006 	br	c0082b0 <__alt_data_end+0xfc0082b0>
 c0082f0:	01002004 	movi	r4,128
 c0082f4:	02001004 	movi	r8,64
 c0082f8:	01c00fc4 	movi	r7,63
 c0082fc:	003f6106 	br	c008084 <__alt_data_end+0xfc008084>
 c008300:	4009883a 	mov	r4,r8
 c008304:	003f7506 	br	c0080dc <__alt_data_end+0xfc0080dc>
 c008308:	81000317 	ldw	r4,12(r16)
 c00830c:	003fde06 	br	c008288 <__alt_data_end+0xfc008288>
 c008310:	81c5883a 	add	r2,r16,r7
 c008314:	11400117 	ldw	r5,4(r2)
 c008318:	9009883a 	mov	r4,r18
 c00831c:	29400054 	ori	r5,r5,1
 c008320:	11400115 	stw	r5,4(r2)
 c008324:	c0101940 	call	c010194 <__malloc_unlock>
 c008328:	80800204 	addi	r2,r16,8
 c00832c:	003fe006 	br	c0082b0 <__alt_data_end+0xfc0082b0>
 c008330:	9c000217 	ldw	r16,8(r19)
 c008334:	00bfff04 	movi	r2,-4
 c008338:	85800117 	ldw	r22,4(r16)
 c00833c:	b0ac703a 	and	r22,r22,r2
 c008340:	b4400336 	bltu	r22,r17,c008350 <_malloc_r+0x344>
 c008344:	b445c83a 	sub	r2,r22,r17
 c008348:	00c003c4 	movi	r3,15
 c00834c:	18805d16 	blt	r3,r2,c0084c4 <_malloc_r+0x4b8>
 c008350:	05c30074 	movhi	r23,3073
 c008354:	00830074 	movhi	r2,3073
 c008358:	1098af04 	addi	r2,r2,25276
 c00835c:	bdd1cc04 	addi	r23,r23,18224
 c008360:	15400017 	ldw	r21,0(r2)
 c008364:	b8c00017 	ldw	r3,0(r23)
 c008368:	00bfffc4 	movi	r2,-1
 c00836c:	858d883a 	add	r6,r16,r22
 c008370:	8d6b883a 	add	r21,r17,r21
 c008374:	1880ea26 	beq	r3,r2,c008720 <_malloc_r+0x714>
 c008378:	ad4403c4 	addi	r21,r21,4111
 c00837c:	00bc0004 	movi	r2,-4096
 c008380:	a8aa703a 	and	r21,r21,r2
 c008384:	a80b883a 	mov	r5,r21
 c008388:	9009883a 	mov	r4,r18
 c00838c:	d9800015 	stw	r6,0(sp)
 c008390:	c00a4c00 	call	c00a4c0 <_sbrk_r>
 c008394:	1029883a 	mov	r20,r2
 c008398:	00bfffc4 	movi	r2,-1
 c00839c:	d9800017 	ldw	r6,0(sp)
 c0083a0:	a080e826 	beq	r20,r2,c008744 <_malloc_r+0x738>
 c0083a4:	a180a636 	bltu	r20,r6,c008640 <_malloc_r+0x634>
 c0083a8:	07030074 	movhi	fp,3073
 c0083ac:	e718c204 	addi	fp,fp,25352
 c0083b0:	e0800017 	ldw	r2,0(fp)
 c0083b4:	a887883a 	add	r3,r21,r2
 c0083b8:	e0c00015 	stw	r3,0(fp)
 c0083bc:	3500e626 	beq	r6,r20,c008758 <_malloc_r+0x74c>
 c0083c0:	b9000017 	ldw	r4,0(r23)
 c0083c4:	00bfffc4 	movi	r2,-1
 c0083c8:	2080ee26 	beq	r4,r2,c008784 <_malloc_r+0x778>
 c0083cc:	a185c83a 	sub	r2,r20,r6
 c0083d0:	10c5883a 	add	r2,r2,r3
 c0083d4:	e0800015 	stw	r2,0(fp)
 c0083d8:	a0c001cc 	andi	r3,r20,7
 c0083dc:	1800bc26 	beq	r3,zero,c0086d0 <_malloc_r+0x6c4>
 c0083e0:	a0e9c83a 	sub	r20,r20,r3
 c0083e4:	00840204 	movi	r2,4104
 c0083e8:	a5000204 	addi	r20,r20,8
 c0083ec:	10c7c83a 	sub	r3,r2,r3
 c0083f0:	a545883a 	add	r2,r20,r21
 c0083f4:	1083ffcc 	andi	r2,r2,4095
 c0083f8:	18abc83a 	sub	r21,r3,r2
 c0083fc:	a80b883a 	mov	r5,r21
 c008400:	9009883a 	mov	r4,r18
 c008404:	c00a4c00 	call	c00a4c0 <_sbrk_r>
 c008408:	00ffffc4 	movi	r3,-1
 c00840c:	10c0e126 	beq	r2,r3,c008794 <_malloc_r+0x788>
 c008410:	1505c83a 	sub	r2,r2,r20
 c008414:	1545883a 	add	r2,r2,r21
 c008418:	10800054 	ori	r2,r2,1
 c00841c:	e0c00017 	ldw	r3,0(fp)
 c008420:	9d000215 	stw	r20,8(r19)
 c008424:	a0800115 	stw	r2,4(r20)
 c008428:	a8c7883a 	add	r3,r21,r3
 c00842c:	e0c00015 	stw	r3,0(fp)
 c008430:	84c00e26 	beq	r16,r19,c00846c <_malloc_r+0x460>
 c008434:	018003c4 	movi	r6,15
 c008438:	3580a72e 	bgeu	r6,r22,c0086d8 <_malloc_r+0x6cc>
 c00843c:	81400117 	ldw	r5,4(r16)
 c008440:	013ffe04 	movi	r4,-8
 c008444:	b0bffd04 	addi	r2,r22,-12
 c008448:	1104703a 	and	r2,r2,r4
 c00844c:	2900004c 	andi	r4,r5,1
 c008450:	2088b03a 	or	r4,r4,r2
 c008454:	81000115 	stw	r4,4(r16)
 c008458:	01400144 	movi	r5,5
 c00845c:	8089883a 	add	r4,r16,r2
 c008460:	21400115 	stw	r5,4(r4)
 c008464:	21400215 	stw	r5,8(r4)
 c008468:	3080cd36 	bltu	r6,r2,c0087a0 <_malloc_r+0x794>
 c00846c:	00830074 	movhi	r2,3073
 c008470:	1098ae04 	addi	r2,r2,25272
 c008474:	11000017 	ldw	r4,0(r2)
 c008478:	20c0012e 	bgeu	r4,r3,c008480 <_malloc_r+0x474>
 c00847c:	10c00015 	stw	r3,0(r2)
 c008480:	00830074 	movhi	r2,3073
 c008484:	1098ad04 	addi	r2,r2,25268
 c008488:	11000017 	ldw	r4,0(r2)
 c00848c:	9c000217 	ldw	r16,8(r19)
 c008490:	20c0012e 	bgeu	r4,r3,c008498 <_malloc_r+0x48c>
 c008494:	10c00015 	stw	r3,0(r2)
 c008498:	80c00117 	ldw	r3,4(r16)
 c00849c:	00bfff04 	movi	r2,-4
 c0084a0:	1886703a 	and	r3,r3,r2
 c0084a4:	1c45c83a 	sub	r2,r3,r17
 c0084a8:	1c400236 	bltu	r3,r17,c0084b4 <_malloc_r+0x4a8>
 c0084ac:	00c003c4 	movi	r3,15
 c0084b0:	18800416 	blt	r3,r2,c0084c4 <_malloc_r+0x4b8>
 c0084b4:	9009883a 	mov	r4,r18
 c0084b8:	c0101940 	call	c010194 <__malloc_unlock>
 c0084bc:	0005883a 	mov	r2,zero
 c0084c0:	003f7b06 	br	c0082b0 <__alt_data_end+0xfc0082b0>
 c0084c4:	88c00054 	ori	r3,r17,1
 c0084c8:	80c00115 	stw	r3,4(r16)
 c0084cc:	8463883a 	add	r17,r16,r17
 c0084d0:	10800054 	ori	r2,r2,1
 c0084d4:	9c400215 	stw	r17,8(r19)
 c0084d8:	88800115 	stw	r2,4(r17)
 c0084dc:	9009883a 	mov	r4,r18
 c0084e0:	c0101940 	call	c010194 <__malloc_unlock>
 c0084e4:	80800204 	addi	r2,r16,8
 c0084e8:	003f7106 	br	c0082b0 <__alt_data_end+0xfc0082b0>
 c0084ec:	00c00504 	movi	r3,20
 c0084f0:	18804a2e 	bgeu	r3,r2,c00861c <_malloc_r+0x610>
 c0084f4:	00c01504 	movi	r3,84
 c0084f8:	18806e36 	bltu	r3,r2,c0086b4 <_malloc_r+0x6a8>
 c0084fc:	8804d33a 	srli	r2,r17,12
 c008500:	12001bc4 	addi	r8,r2,111
 c008504:	11c01b84 	addi	r7,r2,110
 c008508:	4209883a 	add	r4,r8,r8
 c00850c:	003edd06 	br	c008084 <__alt_data_end+0xfc008084>
 c008510:	3804d27a 	srli	r2,r7,9
 c008514:	00c00104 	movi	r3,4
 c008518:	1880442e 	bgeu	r3,r2,c00862c <_malloc_r+0x620>
 c00851c:	00c00504 	movi	r3,20
 c008520:	18808136 	bltu	r3,r2,c008728 <_malloc_r+0x71c>
 c008524:	11401704 	addi	r5,r2,92
 c008528:	10c016c4 	addi	r3,r2,91
 c00852c:	294b883a 	add	r5,r5,r5
 c008530:	294b883a 	add	r5,r5,r5
 c008534:	294b883a 	add	r5,r5,r5
 c008538:	994b883a 	add	r5,r19,r5
 c00853c:	28800017 	ldw	r2,0(r5)
 c008540:	01830074 	movhi	r6,3073
 c008544:	297ffe04 	addi	r5,r5,-8
 c008548:	318c4104 	addi	r6,r6,12548
 c00854c:	28806526 	beq	r5,r2,c0086e4 <_malloc_r+0x6d8>
 c008550:	01bfff04 	movi	r6,-4
 c008554:	10c00117 	ldw	r3,4(r2)
 c008558:	1986703a 	and	r3,r3,r6
 c00855c:	38c0022e 	bgeu	r7,r3,c008568 <_malloc_r+0x55c>
 c008560:	10800217 	ldw	r2,8(r2)
 c008564:	28bffb1e 	bne	r5,r2,c008554 <__alt_data_end+0xfc008554>
 c008568:	11400317 	ldw	r5,12(r2)
 c00856c:	98c00117 	ldw	r3,4(r19)
 c008570:	81400315 	stw	r5,12(r16)
 c008574:	80800215 	stw	r2,8(r16)
 c008578:	2c000215 	stw	r16,8(r5)
 c00857c:	14000315 	stw	r16,12(r2)
 c008580:	003ef806 	br	c008164 <__alt_data_end+0xfc008164>
 c008584:	88c00054 	ori	r3,r17,1
 c008588:	80c00115 	stw	r3,4(r16)
 c00858c:	8463883a 	add	r17,r16,r17
 c008590:	34400515 	stw	r17,20(r6)
 c008594:	34400415 	stw	r17,16(r6)
 c008598:	10c00054 	ori	r3,r2,1
 c00859c:	8a000315 	stw	r8,12(r17)
 c0085a0:	8a000215 	stw	r8,8(r17)
 c0085a4:	88c00115 	stw	r3,4(r17)
 c0085a8:	88a3883a 	add	r17,r17,r2
 c0085ac:	88800015 	stw	r2,0(r17)
 c0085b0:	9009883a 	mov	r4,r18
 c0085b4:	c0101940 	call	c010194 <__malloc_unlock>
 c0085b8:	80800204 	addi	r2,r16,8
 c0085bc:	003f3c06 	br	c0082b0 <__alt_data_end+0xfc0082b0>
 c0085c0:	30c00117 	ldw	r3,4(r6)
 c0085c4:	003ee706 	br	c008164 <__alt_data_end+0xfc008164>
 c0085c8:	5ac00044 	addi	r11,r11,1
 c0085cc:	588000cc 	andi	r2,r11,3
 c0085d0:	31800204 	addi	r6,r6,8
 c0085d4:	103efd1e 	bne	r2,zero,c0081cc <__alt_data_end+0xfc0081cc>
 c0085d8:	00002406 	br	c00866c <_malloc_r+0x660>
 c0085dc:	14000317 	ldw	r16,12(r2)
 c0085e0:	143f251e 	bne	r2,r16,c008278 <__alt_data_end+0xfc008278>
 c0085e4:	21000084 	addi	r4,r4,2
 c0085e8:	003ebc06 	br	c0080dc <__alt_data_end+0xfc0080dc>
 c0085ec:	8085883a 	add	r2,r16,r2
 c0085f0:	10c00117 	ldw	r3,4(r2)
 c0085f4:	81000317 	ldw	r4,12(r16)
 c0085f8:	81400217 	ldw	r5,8(r16)
 c0085fc:	18c00054 	ori	r3,r3,1
 c008600:	10c00115 	stw	r3,4(r2)
 c008604:	29000315 	stw	r4,12(r5)
 c008608:	21400215 	stw	r5,8(r4)
 c00860c:	9009883a 	mov	r4,r18
 c008610:	c0101940 	call	c010194 <__malloc_unlock>
 c008614:	80800204 	addi	r2,r16,8
 c008618:	003f2506 	br	c0082b0 <__alt_data_end+0xfc0082b0>
 c00861c:	12001704 	addi	r8,r2,92
 c008620:	11c016c4 	addi	r7,r2,91
 c008624:	4209883a 	add	r4,r8,r8
 c008628:	003e9606 	br	c008084 <__alt_data_end+0xfc008084>
 c00862c:	3804d1ba 	srli	r2,r7,6
 c008630:	11400e44 	addi	r5,r2,57
 c008634:	10c00e04 	addi	r3,r2,56
 c008638:	294b883a 	add	r5,r5,r5
 c00863c:	003fbc06 	br	c008530 <__alt_data_end+0xfc008530>
 c008640:	84ff5926 	beq	r16,r19,c0083a8 <__alt_data_end+0xfc0083a8>
 c008644:	00830074 	movhi	r2,3073
 c008648:	108c4104 	addi	r2,r2,12548
 c00864c:	14000217 	ldw	r16,8(r2)
 c008650:	00bfff04 	movi	r2,-4
 c008654:	80c00117 	ldw	r3,4(r16)
 c008658:	1886703a 	and	r3,r3,r2
 c00865c:	003f9106 	br	c0084a4 <__alt_data_end+0xfc0084a4>
 c008660:	60800217 	ldw	r2,8(r12)
 c008664:	213fffc4 	addi	r4,r4,-1
 c008668:	1300651e 	bne	r2,r12,c008800 <_malloc_r+0x7f4>
 c00866c:	208000cc 	andi	r2,r4,3
 c008670:	633ffe04 	addi	r12,r12,-8
 c008674:	103ffa1e 	bne	r2,zero,c008660 <__alt_data_end+0xfc008660>
 c008678:	98800117 	ldw	r2,4(r19)
 c00867c:	0146303a 	nor	r3,zero,r5
 c008680:	1884703a 	and	r2,r3,r2
 c008684:	98800115 	stw	r2,4(r19)
 c008688:	294b883a 	add	r5,r5,r5
 c00868c:	117f2836 	bltu	r2,r5,c008330 <__alt_data_end+0xfc008330>
 c008690:	283f2726 	beq	r5,zero,c008330 <__alt_data_end+0xfc008330>
 c008694:	2886703a 	and	r3,r5,r2
 c008698:	5809883a 	mov	r4,r11
 c00869c:	183ec31e 	bne	r3,zero,c0081ac <__alt_data_end+0xfc0081ac>
 c0086a0:	294b883a 	add	r5,r5,r5
 c0086a4:	2886703a 	and	r3,r5,r2
 c0086a8:	21000104 	addi	r4,r4,4
 c0086ac:	183ffc26 	beq	r3,zero,c0086a0 <__alt_data_end+0xfc0086a0>
 c0086b0:	003ebe06 	br	c0081ac <__alt_data_end+0xfc0081ac>
 c0086b4:	00c05504 	movi	r3,340
 c0086b8:	18801236 	bltu	r3,r2,c008704 <_malloc_r+0x6f8>
 c0086bc:	8804d3fa 	srli	r2,r17,15
 c0086c0:	12001e04 	addi	r8,r2,120
 c0086c4:	11c01dc4 	addi	r7,r2,119
 c0086c8:	4209883a 	add	r4,r8,r8
 c0086cc:	003e6d06 	br	c008084 <__alt_data_end+0xfc008084>
 c0086d0:	00c40004 	movi	r3,4096
 c0086d4:	003f4606 	br	c0083f0 <__alt_data_end+0xfc0083f0>
 c0086d8:	00800044 	movi	r2,1
 c0086dc:	a0800115 	stw	r2,4(r20)
 c0086e0:	003f7406 	br	c0084b4 <__alt_data_end+0xfc0084b4>
 c0086e4:	1805d0ba 	srai	r2,r3,2
 c0086e8:	01c00044 	movi	r7,1
 c0086ec:	30c00117 	ldw	r3,4(r6)
 c0086f0:	388e983a 	sll	r7,r7,r2
 c0086f4:	2805883a 	mov	r2,r5
 c0086f8:	38c6b03a 	or	r3,r7,r3
 c0086fc:	30c00115 	stw	r3,4(r6)
 c008700:	003f9b06 	br	c008570 <__alt_data_end+0xfc008570>
 c008704:	00c15504 	movi	r3,1364
 c008708:	18801a36 	bltu	r3,r2,c008774 <_malloc_r+0x768>
 c00870c:	8804d4ba 	srli	r2,r17,18
 c008710:	12001f44 	addi	r8,r2,125
 c008714:	11c01f04 	addi	r7,r2,124
 c008718:	4209883a 	add	r4,r8,r8
 c00871c:	003e5906 	br	c008084 <__alt_data_end+0xfc008084>
 c008720:	ad400404 	addi	r21,r21,16
 c008724:	003f1706 	br	c008384 <__alt_data_end+0xfc008384>
 c008728:	00c01504 	movi	r3,84
 c00872c:	18802336 	bltu	r3,r2,c0087bc <_malloc_r+0x7b0>
 c008730:	3804d33a 	srli	r2,r7,12
 c008734:	11401bc4 	addi	r5,r2,111
 c008738:	10c01b84 	addi	r3,r2,110
 c00873c:	294b883a 	add	r5,r5,r5
 c008740:	003f7b06 	br	c008530 <__alt_data_end+0xfc008530>
 c008744:	9c000217 	ldw	r16,8(r19)
 c008748:	00bfff04 	movi	r2,-4
 c00874c:	80c00117 	ldw	r3,4(r16)
 c008750:	1886703a 	and	r3,r3,r2
 c008754:	003f5306 	br	c0084a4 <__alt_data_end+0xfc0084a4>
 c008758:	3083ffcc 	andi	r2,r6,4095
 c00875c:	103f181e 	bne	r2,zero,c0083c0 <__alt_data_end+0xfc0083c0>
 c008760:	99000217 	ldw	r4,8(r19)
 c008764:	b545883a 	add	r2,r22,r21
 c008768:	10800054 	ori	r2,r2,1
 c00876c:	20800115 	stw	r2,4(r4)
 c008770:	003f3e06 	br	c00846c <__alt_data_end+0xfc00846c>
 c008774:	01003f84 	movi	r4,254
 c008778:	02001fc4 	movi	r8,127
 c00877c:	01c01f84 	movi	r7,126
 c008780:	003e4006 	br	c008084 <__alt_data_end+0xfc008084>
 c008784:	00830074 	movhi	r2,3073
 c008788:	1091cc04 	addi	r2,r2,18224
 c00878c:	15000015 	stw	r20,0(r2)
 c008790:	003f1106 	br	c0083d8 <__alt_data_end+0xfc0083d8>
 c008794:	00800044 	movi	r2,1
 c008798:	002b883a 	mov	r21,zero
 c00879c:	003f1f06 	br	c00841c <__alt_data_end+0xfc00841c>
 c0087a0:	81400204 	addi	r5,r16,8
 c0087a4:	9009883a 	mov	r4,r18
 c0087a8:	c0074140 	call	c007414 <_free_r>
 c0087ac:	00830074 	movhi	r2,3073
 c0087b0:	1098c204 	addi	r2,r2,25352
 c0087b4:	10c00017 	ldw	r3,0(r2)
 c0087b8:	003f2c06 	br	c00846c <__alt_data_end+0xfc00846c>
 c0087bc:	00c05504 	movi	r3,340
 c0087c0:	18800536 	bltu	r3,r2,c0087d8 <_malloc_r+0x7cc>
 c0087c4:	3804d3fa 	srli	r2,r7,15
 c0087c8:	11401e04 	addi	r5,r2,120
 c0087cc:	10c01dc4 	addi	r3,r2,119
 c0087d0:	294b883a 	add	r5,r5,r5
 c0087d4:	003f5606 	br	c008530 <__alt_data_end+0xfc008530>
 c0087d8:	00c15504 	movi	r3,1364
 c0087dc:	18800536 	bltu	r3,r2,c0087f4 <_malloc_r+0x7e8>
 c0087e0:	3804d4ba 	srli	r2,r7,18
 c0087e4:	11401f44 	addi	r5,r2,125
 c0087e8:	10c01f04 	addi	r3,r2,124
 c0087ec:	294b883a 	add	r5,r5,r5
 c0087f0:	003f4f06 	br	c008530 <__alt_data_end+0xfc008530>
 c0087f4:	01403f84 	movi	r5,254
 c0087f8:	00c01f84 	movi	r3,126
 c0087fc:	003f4c06 	br	c008530 <__alt_data_end+0xfc008530>
 c008800:	98800117 	ldw	r2,4(r19)
 c008804:	003fa006 	br	c008688 <__alt_data_end+0xfc008688>
 c008808:	8808d0fa 	srli	r4,r17,3
 c00880c:	20800044 	addi	r2,r4,1
 c008810:	1085883a 	add	r2,r2,r2
 c008814:	003e9006 	br	c008258 <__alt_data_end+0xfc008258>

0c008818 <memchr>:
 c008818:	208000cc 	andi	r2,r4,3
 c00881c:	280f883a 	mov	r7,r5
 c008820:	10003426 	beq	r2,zero,c0088f4 <memchr+0xdc>
 c008824:	30bfffc4 	addi	r2,r6,-1
 c008828:	30001a26 	beq	r6,zero,c008894 <memchr+0x7c>
 c00882c:	20c00003 	ldbu	r3,0(r4)
 c008830:	29803fcc 	andi	r6,r5,255
 c008834:	30c0051e 	bne	r6,r3,c00884c <memchr+0x34>
 c008838:	00001806 	br	c00889c <memchr+0x84>
 c00883c:	10001526 	beq	r2,zero,c008894 <memchr+0x7c>
 c008840:	20c00003 	ldbu	r3,0(r4)
 c008844:	10bfffc4 	addi	r2,r2,-1
 c008848:	30c01426 	beq	r6,r3,c00889c <memchr+0x84>
 c00884c:	21000044 	addi	r4,r4,1
 c008850:	20c000cc 	andi	r3,r4,3
 c008854:	183ff91e 	bne	r3,zero,c00883c <__alt_data_end+0xfc00883c>
 c008858:	020000c4 	movi	r8,3
 c00885c:	40801136 	bltu	r8,r2,c0088a4 <memchr+0x8c>
 c008860:	10000c26 	beq	r2,zero,c008894 <memchr+0x7c>
 c008864:	20c00003 	ldbu	r3,0(r4)
 c008868:	29403fcc 	andi	r5,r5,255
 c00886c:	28c00b26 	beq	r5,r3,c00889c <memchr+0x84>
 c008870:	20c00044 	addi	r3,r4,1
 c008874:	39803fcc 	andi	r6,r7,255
 c008878:	2089883a 	add	r4,r4,r2
 c00887c:	00000306 	br	c00888c <memchr+0x74>
 c008880:	18c00044 	addi	r3,r3,1
 c008884:	197fffc3 	ldbu	r5,-1(r3)
 c008888:	31400526 	beq	r6,r5,c0088a0 <memchr+0x88>
 c00888c:	1805883a 	mov	r2,r3
 c008890:	20fffb1e 	bne	r4,r3,c008880 <__alt_data_end+0xfc008880>
 c008894:	0005883a 	mov	r2,zero
 c008898:	f800283a 	ret
 c00889c:	2005883a 	mov	r2,r4
 c0088a0:	f800283a 	ret
 c0088a4:	28c03fcc 	andi	r3,r5,255
 c0088a8:	1812923a 	slli	r9,r3,8
 c0088ac:	02ffbff4 	movhi	r11,65279
 c0088b0:	02a02074 	movhi	r10,32897
 c0088b4:	48d2b03a 	or	r9,r9,r3
 c0088b8:	4806943a 	slli	r3,r9,16
 c0088bc:	5affbfc4 	addi	r11,r11,-257
 c0088c0:	52a02004 	addi	r10,r10,-32640
 c0088c4:	48d2b03a 	or	r9,r9,r3
 c0088c8:	20c00017 	ldw	r3,0(r4)
 c0088cc:	48c6f03a 	xor	r3,r9,r3
 c0088d0:	1acd883a 	add	r6,r3,r11
 c0088d4:	00c6303a 	nor	r3,zero,r3
 c0088d8:	30c6703a 	and	r3,r6,r3
 c0088dc:	1a86703a 	and	r3,r3,r10
 c0088e0:	183fe01e 	bne	r3,zero,c008864 <__alt_data_end+0xfc008864>
 c0088e4:	10bfff04 	addi	r2,r2,-4
 c0088e8:	21000104 	addi	r4,r4,4
 c0088ec:	40bff636 	bltu	r8,r2,c0088c8 <__alt_data_end+0xfc0088c8>
 c0088f0:	003fdb06 	br	c008860 <__alt_data_end+0xfc008860>
 c0088f4:	3005883a 	mov	r2,r6
 c0088f8:	003fd706 	br	c008858 <__alt_data_end+0xfc008858>

0c0088fc <memcpy>:
 c0088fc:	defffd04 	addi	sp,sp,-12
 c008900:	dfc00215 	stw	ra,8(sp)
 c008904:	dc400115 	stw	r17,4(sp)
 c008908:	dc000015 	stw	r16,0(sp)
 c00890c:	00c003c4 	movi	r3,15
 c008910:	2005883a 	mov	r2,r4
 c008914:	1980452e 	bgeu	r3,r6,c008a2c <memcpy+0x130>
 c008918:	2906b03a 	or	r3,r5,r4
 c00891c:	18c000cc 	andi	r3,r3,3
 c008920:	1800441e 	bne	r3,zero,c008a34 <memcpy+0x138>
 c008924:	347ffc04 	addi	r17,r6,-16
 c008928:	8822d13a 	srli	r17,r17,4
 c00892c:	28c00104 	addi	r3,r5,4
 c008930:	23400104 	addi	r13,r4,4
 c008934:	8820913a 	slli	r16,r17,4
 c008938:	2b000204 	addi	r12,r5,8
 c00893c:	22c00204 	addi	r11,r4,8
 c008940:	84000504 	addi	r16,r16,20
 c008944:	2a800304 	addi	r10,r5,12
 c008948:	22400304 	addi	r9,r4,12
 c00894c:	2c21883a 	add	r16,r5,r16
 c008950:	2811883a 	mov	r8,r5
 c008954:	200f883a 	mov	r7,r4
 c008958:	41000017 	ldw	r4,0(r8)
 c00895c:	1fc00017 	ldw	ra,0(r3)
 c008960:	63c00017 	ldw	r15,0(r12)
 c008964:	39000015 	stw	r4,0(r7)
 c008968:	53800017 	ldw	r14,0(r10)
 c00896c:	6fc00015 	stw	ra,0(r13)
 c008970:	5bc00015 	stw	r15,0(r11)
 c008974:	4b800015 	stw	r14,0(r9)
 c008978:	18c00404 	addi	r3,r3,16
 c00897c:	39c00404 	addi	r7,r7,16
 c008980:	42000404 	addi	r8,r8,16
 c008984:	6b400404 	addi	r13,r13,16
 c008988:	63000404 	addi	r12,r12,16
 c00898c:	5ac00404 	addi	r11,r11,16
 c008990:	52800404 	addi	r10,r10,16
 c008994:	4a400404 	addi	r9,r9,16
 c008998:	1c3fef1e 	bne	r3,r16,c008958 <__alt_data_end+0xfc008958>
 c00899c:	89c00044 	addi	r7,r17,1
 c0089a0:	380e913a 	slli	r7,r7,4
 c0089a4:	310003cc 	andi	r4,r6,15
 c0089a8:	02c000c4 	movi	r11,3
 c0089ac:	11c7883a 	add	r3,r2,r7
 c0089b0:	29cb883a 	add	r5,r5,r7
 c0089b4:	5900212e 	bgeu	r11,r4,c008a3c <memcpy+0x140>
 c0089b8:	1813883a 	mov	r9,r3
 c0089bc:	2811883a 	mov	r8,r5
 c0089c0:	200f883a 	mov	r7,r4
 c0089c4:	42800017 	ldw	r10,0(r8)
 c0089c8:	4a400104 	addi	r9,r9,4
 c0089cc:	39ffff04 	addi	r7,r7,-4
 c0089d0:	4abfff15 	stw	r10,-4(r9)
 c0089d4:	42000104 	addi	r8,r8,4
 c0089d8:	59fffa36 	bltu	r11,r7,c0089c4 <__alt_data_end+0xfc0089c4>
 c0089dc:	213fff04 	addi	r4,r4,-4
 c0089e0:	2008d0ba 	srli	r4,r4,2
 c0089e4:	318000cc 	andi	r6,r6,3
 c0089e8:	21000044 	addi	r4,r4,1
 c0089ec:	2109883a 	add	r4,r4,r4
 c0089f0:	2109883a 	add	r4,r4,r4
 c0089f4:	1907883a 	add	r3,r3,r4
 c0089f8:	290b883a 	add	r5,r5,r4
 c0089fc:	30000626 	beq	r6,zero,c008a18 <memcpy+0x11c>
 c008a00:	198d883a 	add	r6,r3,r6
 c008a04:	29c00003 	ldbu	r7,0(r5)
 c008a08:	18c00044 	addi	r3,r3,1
 c008a0c:	29400044 	addi	r5,r5,1
 c008a10:	19ffffc5 	stb	r7,-1(r3)
 c008a14:	19bffb1e 	bne	r3,r6,c008a04 <__alt_data_end+0xfc008a04>
 c008a18:	dfc00217 	ldw	ra,8(sp)
 c008a1c:	dc400117 	ldw	r17,4(sp)
 c008a20:	dc000017 	ldw	r16,0(sp)
 c008a24:	dec00304 	addi	sp,sp,12
 c008a28:	f800283a 	ret
 c008a2c:	2007883a 	mov	r3,r4
 c008a30:	003ff206 	br	c0089fc <__alt_data_end+0xfc0089fc>
 c008a34:	2007883a 	mov	r3,r4
 c008a38:	003ff106 	br	c008a00 <__alt_data_end+0xfc008a00>
 c008a3c:	200d883a 	mov	r6,r4
 c008a40:	003fee06 	br	c0089fc <__alt_data_end+0xfc0089fc>

0c008a44 <memmove>:
 c008a44:	2005883a 	mov	r2,r4
 c008a48:	29000b2e 	bgeu	r5,r4,c008a78 <memmove+0x34>
 c008a4c:	298f883a 	add	r7,r5,r6
 c008a50:	21c0092e 	bgeu	r4,r7,c008a78 <memmove+0x34>
 c008a54:	2187883a 	add	r3,r4,r6
 c008a58:	198bc83a 	sub	r5,r3,r6
 c008a5c:	30004826 	beq	r6,zero,c008b80 <memmove+0x13c>
 c008a60:	39ffffc4 	addi	r7,r7,-1
 c008a64:	39000003 	ldbu	r4,0(r7)
 c008a68:	18ffffc4 	addi	r3,r3,-1
 c008a6c:	19000005 	stb	r4,0(r3)
 c008a70:	28fffb1e 	bne	r5,r3,c008a60 <__alt_data_end+0xfc008a60>
 c008a74:	f800283a 	ret
 c008a78:	00c003c4 	movi	r3,15
 c008a7c:	1980412e 	bgeu	r3,r6,c008b84 <memmove+0x140>
 c008a80:	2886b03a 	or	r3,r5,r2
 c008a84:	18c000cc 	andi	r3,r3,3
 c008a88:	1800401e 	bne	r3,zero,c008b8c <memmove+0x148>
 c008a8c:	33fffc04 	addi	r15,r6,-16
 c008a90:	781ed13a 	srli	r15,r15,4
 c008a94:	28c00104 	addi	r3,r5,4
 c008a98:	13400104 	addi	r13,r2,4
 c008a9c:	781c913a 	slli	r14,r15,4
 c008aa0:	2b000204 	addi	r12,r5,8
 c008aa4:	12c00204 	addi	r11,r2,8
 c008aa8:	73800504 	addi	r14,r14,20
 c008aac:	2a800304 	addi	r10,r5,12
 c008ab0:	12400304 	addi	r9,r2,12
 c008ab4:	2b9d883a 	add	r14,r5,r14
 c008ab8:	2811883a 	mov	r8,r5
 c008abc:	100f883a 	mov	r7,r2
 c008ac0:	41000017 	ldw	r4,0(r8)
 c008ac4:	39c00404 	addi	r7,r7,16
 c008ac8:	18c00404 	addi	r3,r3,16
 c008acc:	393ffc15 	stw	r4,-16(r7)
 c008ad0:	193ffc17 	ldw	r4,-16(r3)
 c008ad4:	6b400404 	addi	r13,r13,16
 c008ad8:	5ac00404 	addi	r11,r11,16
 c008adc:	693ffc15 	stw	r4,-16(r13)
 c008ae0:	61000017 	ldw	r4,0(r12)
 c008ae4:	4a400404 	addi	r9,r9,16
 c008ae8:	42000404 	addi	r8,r8,16
 c008aec:	593ffc15 	stw	r4,-16(r11)
 c008af0:	51000017 	ldw	r4,0(r10)
 c008af4:	63000404 	addi	r12,r12,16
 c008af8:	52800404 	addi	r10,r10,16
 c008afc:	493ffc15 	stw	r4,-16(r9)
 c008b00:	1bbfef1e 	bne	r3,r14,c008ac0 <__alt_data_end+0xfc008ac0>
 c008b04:	79000044 	addi	r4,r15,1
 c008b08:	2008913a 	slli	r4,r4,4
 c008b0c:	328003cc 	andi	r10,r6,15
 c008b10:	02c000c4 	movi	r11,3
 c008b14:	1107883a 	add	r3,r2,r4
 c008b18:	290b883a 	add	r5,r5,r4
 c008b1c:	5a801e2e 	bgeu	r11,r10,c008b98 <memmove+0x154>
 c008b20:	1813883a 	mov	r9,r3
 c008b24:	2811883a 	mov	r8,r5
 c008b28:	500f883a 	mov	r7,r10
 c008b2c:	41000017 	ldw	r4,0(r8)
 c008b30:	4a400104 	addi	r9,r9,4
 c008b34:	39ffff04 	addi	r7,r7,-4
 c008b38:	493fff15 	stw	r4,-4(r9)
 c008b3c:	42000104 	addi	r8,r8,4
 c008b40:	59fffa36 	bltu	r11,r7,c008b2c <__alt_data_end+0xfc008b2c>
 c008b44:	513fff04 	addi	r4,r10,-4
 c008b48:	2008d0ba 	srli	r4,r4,2
 c008b4c:	318000cc 	andi	r6,r6,3
 c008b50:	21000044 	addi	r4,r4,1
 c008b54:	2109883a 	add	r4,r4,r4
 c008b58:	2109883a 	add	r4,r4,r4
 c008b5c:	1907883a 	add	r3,r3,r4
 c008b60:	290b883a 	add	r5,r5,r4
 c008b64:	30000b26 	beq	r6,zero,c008b94 <memmove+0x150>
 c008b68:	198d883a 	add	r6,r3,r6
 c008b6c:	29c00003 	ldbu	r7,0(r5)
 c008b70:	18c00044 	addi	r3,r3,1
 c008b74:	29400044 	addi	r5,r5,1
 c008b78:	19ffffc5 	stb	r7,-1(r3)
 c008b7c:	19bffb1e 	bne	r3,r6,c008b6c <__alt_data_end+0xfc008b6c>
 c008b80:	f800283a 	ret
 c008b84:	1007883a 	mov	r3,r2
 c008b88:	003ff606 	br	c008b64 <__alt_data_end+0xfc008b64>
 c008b8c:	1007883a 	mov	r3,r2
 c008b90:	003ff506 	br	c008b68 <__alt_data_end+0xfc008b68>
 c008b94:	f800283a 	ret
 c008b98:	500d883a 	mov	r6,r10
 c008b9c:	003ff106 	br	c008b64 <__alt_data_end+0xfc008b64>

0c008ba0 <memset>:
 c008ba0:	20c000cc 	andi	r3,r4,3
 c008ba4:	2005883a 	mov	r2,r4
 c008ba8:	18004426 	beq	r3,zero,c008cbc <memset+0x11c>
 c008bac:	31ffffc4 	addi	r7,r6,-1
 c008bb0:	30004026 	beq	r6,zero,c008cb4 <memset+0x114>
 c008bb4:	2813883a 	mov	r9,r5
 c008bb8:	200d883a 	mov	r6,r4
 c008bbc:	2007883a 	mov	r3,r4
 c008bc0:	00000406 	br	c008bd4 <memset+0x34>
 c008bc4:	3a3fffc4 	addi	r8,r7,-1
 c008bc8:	31800044 	addi	r6,r6,1
 c008bcc:	38003926 	beq	r7,zero,c008cb4 <memset+0x114>
 c008bd0:	400f883a 	mov	r7,r8
 c008bd4:	18c00044 	addi	r3,r3,1
 c008bd8:	32400005 	stb	r9,0(r6)
 c008bdc:	1a0000cc 	andi	r8,r3,3
 c008be0:	403ff81e 	bne	r8,zero,c008bc4 <__alt_data_end+0xfc008bc4>
 c008be4:	010000c4 	movi	r4,3
 c008be8:	21c02d2e 	bgeu	r4,r7,c008ca0 <memset+0x100>
 c008bec:	29003fcc 	andi	r4,r5,255
 c008bf0:	200c923a 	slli	r6,r4,8
 c008bf4:	3108b03a 	or	r4,r6,r4
 c008bf8:	200c943a 	slli	r6,r4,16
 c008bfc:	218cb03a 	or	r6,r4,r6
 c008c00:	010003c4 	movi	r4,15
 c008c04:	21c0182e 	bgeu	r4,r7,c008c68 <memset+0xc8>
 c008c08:	3b3ffc04 	addi	r12,r7,-16
 c008c0c:	6018d13a 	srli	r12,r12,4
 c008c10:	1a000104 	addi	r8,r3,4
 c008c14:	1ac00204 	addi	r11,r3,8
 c008c18:	6008913a 	slli	r4,r12,4
 c008c1c:	1a800304 	addi	r10,r3,12
 c008c20:	1813883a 	mov	r9,r3
 c008c24:	21000504 	addi	r4,r4,20
 c008c28:	1909883a 	add	r4,r3,r4
 c008c2c:	49800015 	stw	r6,0(r9)
 c008c30:	41800015 	stw	r6,0(r8)
 c008c34:	59800015 	stw	r6,0(r11)
 c008c38:	51800015 	stw	r6,0(r10)
 c008c3c:	42000404 	addi	r8,r8,16
 c008c40:	4a400404 	addi	r9,r9,16
 c008c44:	5ac00404 	addi	r11,r11,16
 c008c48:	52800404 	addi	r10,r10,16
 c008c4c:	413ff71e 	bne	r8,r4,c008c2c <__alt_data_end+0xfc008c2c>
 c008c50:	63000044 	addi	r12,r12,1
 c008c54:	6018913a 	slli	r12,r12,4
 c008c58:	39c003cc 	andi	r7,r7,15
 c008c5c:	010000c4 	movi	r4,3
 c008c60:	1b07883a 	add	r3,r3,r12
 c008c64:	21c00e2e 	bgeu	r4,r7,c008ca0 <memset+0x100>
 c008c68:	1813883a 	mov	r9,r3
 c008c6c:	3811883a 	mov	r8,r7
 c008c70:	010000c4 	movi	r4,3
 c008c74:	49800015 	stw	r6,0(r9)
 c008c78:	423fff04 	addi	r8,r8,-4
 c008c7c:	4a400104 	addi	r9,r9,4
 c008c80:	223ffc36 	bltu	r4,r8,c008c74 <__alt_data_end+0xfc008c74>
 c008c84:	393fff04 	addi	r4,r7,-4
 c008c88:	2008d0ba 	srli	r4,r4,2
 c008c8c:	39c000cc 	andi	r7,r7,3
 c008c90:	21000044 	addi	r4,r4,1
 c008c94:	2109883a 	add	r4,r4,r4
 c008c98:	2109883a 	add	r4,r4,r4
 c008c9c:	1907883a 	add	r3,r3,r4
 c008ca0:	38000526 	beq	r7,zero,c008cb8 <memset+0x118>
 c008ca4:	19cf883a 	add	r7,r3,r7
 c008ca8:	19400005 	stb	r5,0(r3)
 c008cac:	18c00044 	addi	r3,r3,1
 c008cb0:	38fffd1e 	bne	r7,r3,c008ca8 <__alt_data_end+0xfc008ca8>
 c008cb4:	f800283a 	ret
 c008cb8:	f800283a 	ret
 c008cbc:	2007883a 	mov	r3,r4
 c008cc0:	300f883a 	mov	r7,r6
 c008cc4:	003fc706 	br	c008be4 <__alt_data_end+0xfc008be4>

0c008cc8 <_Balloc>:
 c008cc8:	20801317 	ldw	r2,76(r4)
 c008ccc:	defffc04 	addi	sp,sp,-16
 c008cd0:	dc400115 	stw	r17,4(sp)
 c008cd4:	dc000015 	stw	r16,0(sp)
 c008cd8:	dfc00315 	stw	ra,12(sp)
 c008cdc:	dc800215 	stw	r18,8(sp)
 c008ce0:	2023883a 	mov	r17,r4
 c008ce4:	2821883a 	mov	r16,r5
 c008ce8:	10000f26 	beq	r2,zero,c008d28 <_Balloc+0x60>
 c008cec:	8407883a 	add	r3,r16,r16
 c008cf0:	18c7883a 	add	r3,r3,r3
 c008cf4:	10c7883a 	add	r3,r2,r3
 c008cf8:	18800017 	ldw	r2,0(r3)
 c008cfc:	10001126 	beq	r2,zero,c008d44 <_Balloc+0x7c>
 c008d00:	11000017 	ldw	r4,0(r2)
 c008d04:	19000015 	stw	r4,0(r3)
 c008d08:	10000415 	stw	zero,16(r2)
 c008d0c:	10000315 	stw	zero,12(r2)
 c008d10:	dfc00317 	ldw	ra,12(sp)
 c008d14:	dc800217 	ldw	r18,8(sp)
 c008d18:	dc400117 	ldw	r17,4(sp)
 c008d1c:	dc000017 	ldw	r16,0(sp)
 c008d20:	dec00404 	addi	sp,sp,16
 c008d24:	f800283a 	ret
 c008d28:	01800844 	movi	r6,33
 c008d2c:	01400104 	movi	r5,4
 c008d30:	c00c0300 	call	c00c030 <_calloc_r>
 c008d34:	88801315 	stw	r2,76(r17)
 c008d38:	103fec1e 	bne	r2,zero,c008cec <__alt_data_end+0xfc008cec>
 c008d3c:	0005883a 	mov	r2,zero
 c008d40:	003ff306 	br	c008d10 <__alt_data_end+0xfc008d10>
 c008d44:	01400044 	movi	r5,1
 c008d48:	2c24983a 	sll	r18,r5,r16
 c008d4c:	8809883a 	mov	r4,r17
 c008d50:	91800144 	addi	r6,r18,5
 c008d54:	318d883a 	add	r6,r6,r6
 c008d58:	318d883a 	add	r6,r6,r6
 c008d5c:	c00c0300 	call	c00c030 <_calloc_r>
 c008d60:	103ff626 	beq	r2,zero,c008d3c <__alt_data_end+0xfc008d3c>
 c008d64:	14000115 	stw	r16,4(r2)
 c008d68:	14800215 	stw	r18,8(r2)
 c008d6c:	003fe606 	br	c008d08 <__alt_data_end+0xfc008d08>

0c008d70 <_Bfree>:
 c008d70:	28000826 	beq	r5,zero,c008d94 <_Bfree+0x24>
 c008d74:	28c00117 	ldw	r3,4(r5)
 c008d78:	20801317 	ldw	r2,76(r4)
 c008d7c:	18c7883a 	add	r3,r3,r3
 c008d80:	18c7883a 	add	r3,r3,r3
 c008d84:	10c5883a 	add	r2,r2,r3
 c008d88:	10c00017 	ldw	r3,0(r2)
 c008d8c:	28c00015 	stw	r3,0(r5)
 c008d90:	11400015 	stw	r5,0(r2)
 c008d94:	f800283a 	ret

0c008d98 <__multadd>:
 c008d98:	defff704 	addi	sp,sp,-36
 c008d9c:	dc800215 	stw	r18,8(sp)
 c008da0:	2c800417 	ldw	r18,16(r5)
 c008da4:	dd800615 	stw	r22,24(sp)
 c008da8:	dd400515 	stw	r21,20(sp)
 c008dac:	dd000415 	stw	r20,16(sp)
 c008db0:	dcc00315 	stw	r19,12(sp)
 c008db4:	dc400115 	stw	r17,4(sp)
 c008db8:	dc000015 	stw	r16,0(sp)
 c008dbc:	dfc00815 	stw	ra,32(sp)
 c008dc0:	ddc00715 	stw	r23,28(sp)
 c008dc4:	2827883a 	mov	r19,r5
 c008dc8:	2029883a 	mov	r20,r4
 c008dcc:	3023883a 	mov	r17,r6
 c008dd0:	3821883a 	mov	r16,r7
 c008dd4:	2d400504 	addi	r21,r5,20
 c008dd8:	002d883a 	mov	r22,zero
 c008ddc:	adc00017 	ldw	r23,0(r21)
 c008de0:	880b883a 	mov	r5,r17
 c008de4:	ad400104 	addi	r21,r21,4
 c008de8:	b93fffcc 	andi	r4,r23,65535
 c008dec:	c002cc00 	call	c002cc0 <__mulsi3>
 c008df0:	b808d43a 	srli	r4,r23,16
 c008df4:	880b883a 	mov	r5,r17
 c008df8:	1421883a 	add	r16,r2,r16
 c008dfc:	c002cc00 	call	c002cc0 <__mulsi3>
 c008e00:	800ed43a 	srli	r7,r16,16
 c008e04:	80ffffcc 	andi	r3,r16,65535
 c008e08:	b5800044 	addi	r22,r22,1
 c008e0c:	11c5883a 	add	r2,r2,r7
 c008e10:	100e943a 	slli	r7,r2,16
 c008e14:	1020d43a 	srli	r16,r2,16
 c008e18:	38c7883a 	add	r3,r7,r3
 c008e1c:	a8ffff15 	stw	r3,-4(r21)
 c008e20:	b4bfee16 	blt	r22,r18,c008ddc <__alt_data_end+0xfc008ddc>
 c008e24:	80000926 	beq	r16,zero,c008e4c <__multadd+0xb4>
 c008e28:	98800217 	ldw	r2,8(r19)
 c008e2c:	9080130e 	bge	r18,r2,c008e7c <__multadd+0xe4>
 c008e30:	90800144 	addi	r2,r18,5
 c008e34:	1085883a 	add	r2,r2,r2
 c008e38:	1085883a 	add	r2,r2,r2
 c008e3c:	9885883a 	add	r2,r19,r2
 c008e40:	14000015 	stw	r16,0(r2)
 c008e44:	94800044 	addi	r18,r18,1
 c008e48:	9c800415 	stw	r18,16(r19)
 c008e4c:	9805883a 	mov	r2,r19
 c008e50:	dfc00817 	ldw	ra,32(sp)
 c008e54:	ddc00717 	ldw	r23,28(sp)
 c008e58:	dd800617 	ldw	r22,24(sp)
 c008e5c:	dd400517 	ldw	r21,20(sp)
 c008e60:	dd000417 	ldw	r20,16(sp)
 c008e64:	dcc00317 	ldw	r19,12(sp)
 c008e68:	dc800217 	ldw	r18,8(sp)
 c008e6c:	dc400117 	ldw	r17,4(sp)
 c008e70:	dc000017 	ldw	r16,0(sp)
 c008e74:	dec00904 	addi	sp,sp,36
 c008e78:	f800283a 	ret
 c008e7c:	99400117 	ldw	r5,4(r19)
 c008e80:	a009883a 	mov	r4,r20
 c008e84:	29400044 	addi	r5,r5,1
 c008e88:	c008cc80 	call	c008cc8 <_Balloc>
 c008e8c:	99800417 	ldw	r6,16(r19)
 c008e90:	99400304 	addi	r5,r19,12
 c008e94:	11000304 	addi	r4,r2,12
 c008e98:	31800084 	addi	r6,r6,2
 c008e9c:	318d883a 	add	r6,r6,r6
 c008ea0:	318d883a 	add	r6,r6,r6
 c008ea4:	1023883a 	mov	r17,r2
 c008ea8:	c0088fc0 	call	c0088fc <memcpy>
 c008eac:	98000a26 	beq	r19,zero,c008ed8 <__multadd+0x140>
 c008eb0:	98c00117 	ldw	r3,4(r19)
 c008eb4:	a0801317 	ldw	r2,76(r20)
 c008eb8:	18c7883a 	add	r3,r3,r3
 c008ebc:	18c7883a 	add	r3,r3,r3
 c008ec0:	10c5883a 	add	r2,r2,r3
 c008ec4:	10c00017 	ldw	r3,0(r2)
 c008ec8:	98c00015 	stw	r3,0(r19)
 c008ecc:	14c00015 	stw	r19,0(r2)
 c008ed0:	8827883a 	mov	r19,r17
 c008ed4:	003fd606 	br	c008e30 <__alt_data_end+0xfc008e30>
 c008ed8:	8827883a 	mov	r19,r17
 c008edc:	003fd406 	br	c008e30 <__alt_data_end+0xfc008e30>

0c008ee0 <__s2b>:
 c008ee0:	defff904 	addi	sp,sp,-28
 c008ee4:	dc400115 	stw	r17,4(sp)
 c008ee8:	dc000015 	stw	r16,0(sp)
 c008eec:	2023883a 	mov	r17,r4
 c008ef0:	2821883a 	mov	r16,r5
 c008ef4:	39000204 	addi	r4,r7,8
 c008ef8:	01400244 	movi	r5,9
 c008efc:	dcc00315 	stw	r19,12(sp)
 c008f00:	dc800215 	stw	r18,8(sp)
 c008f04:	dfc00615 	stw	ra,24(sp)
 c008f08:	dd400515 	stw	r21,20(sp)
 c008f0c:	dd000415 	stw	r20,16(sp)
 c008f10:	3825883a 	mov	r18,r7
 c008f14:	3027883a 	mov	r19,r6
 c008f18:	c002b0c0 	call	c002b0c <__divsi3>
 c008f1c:	00c00044 	movi	r3,1
 c008f20:	000b883a 	mov	r5,zero
 c008f24:	1880030e 	bge	r3,r2,c008f34 <__s2b+0x54>
 c008f28:	18c7883a 	add	r3,r3,r3
 c008f2c:	29400044 	addi	r5,r5,1
 c008f30:	18bffd16 	blt	r3,r2,c008f28 <__alt_data_end+0xfc008f28>
 c008f34:	8809883a 	mov	r4,r17
 c008f38:	c008cc80 	call	c008cc8 <_Balloc>
 c008f3c:	d8c00717 	ldw	r3,28(sp)
 c008f40:	10c00515 	stw	r3,20(r2)
 c008f44:	00c00044 	movi	r3,1
 c008f48:	10c00415 	stw	r3,16(r2)
 c008f4c:	00c00244 	movi	r3,9
 c008f50:	1cc0210e 	bge	r3,r19,c008fd8 <__s2b+0xf8>
 c008f54:	80eb883a 	add	r21,r16,r3
 c008f58:	a829883a 	mov	r20,r21
 c008f5c:	84e1883a 	add	r16,r16,r19
 c008f60:	a1c00007 	ldb	r7,0(r20)
 c008f64:	01800284 	movi	r6,10
 c008f68:	a5000044 	addi	r20,r20,1
 c008f6c:	100b883a 	mov	r5,r2
 c008f70:	39fff404 	addi	r7,r7,-48
 c008f74:	8809883a 	mov	r4,r17
 c008f78:	c008d980 	call	c008d98 <__multadd>
 c008f7c:	a43ff81e 	bne	r20,r16,c008f60 <__alt_data_end+0xfc008f60>
 c008f80:	ace1883a 	add	r16,r21,r19
 c008f84:	843ffe04 	addi	r16,r16,-8
 c008f88:	9c800a0e 	bge	r19,r18,c008fb4 <__s2b+0xd4>
 c008f8c:	94e5c83a 	sub	r18,r18,r19
 c008f90:	84a5883a 	add	r18,r16,r18
 c008f94:	81c00007 	ldb	r7,0(r16)
 c008f98:	01800284 	movi	r6,10
 c008f9c:	84000044 	addi	r16,r16,1
 c008fa0:	100b883a 	mov	r5,r2
 c008fa4:	39fff404 	addi	r7,r7,-48
 c008fa8:	8809883a 	mov	r4,r17
 c008fac:	c008d980 	call	c008d98 <__multadd>
 c008fb0:	84bff81e 	bne	r16,r18,c008f94 <__alt_data_end+0xfc008f94>
 c008fb4:	dfc00617 	ldw	ra,24(sp)
 c008fb8:	dd400517 	ldw	r21,20(sp)
 c008fbc:	dd000417 	ldw	r20,16(sp)
 c008fc0:	dcc00317 	ldw	r19,12(sp)
 c008fc4:	dc800217 	ldw	r18,8(sp)
 c008fc8:	dc400117 	ldw	r17,4(sp)
 c008fcc:	dc000017 	ldw	r16,0(sp)
 c008fd0:	dec00704 	addi	sp,sp,28
 c008fd4:	f800283a 	ret
 c008fd8:	84000284 	addi	r16,r16,10
 c008fdc:	1827883a 	mov	r19,r3
 c008fe0:	003fe906 	br	c008f88 <__alt_data_end+0xfc008f88>

0c008fe4 <__hi0bits>:
 c008fe4:	20bfffec 	andhi	r2,r4,65535
 c008fe8:	1000141e 	bne	r2,zero,c00903c <__hi0bits+0x58>
 c008fec:	2008943a 	slli	r4,r4,16
 c008ff0:	00800404 	movi	r2,16
 c008ff4:	20ffc02c 	andhi	r3,r4,65280
 c008ff8:	1800021e 	bne	r3,zero,c009004 <__hi0bits+0x20>
 c008ffc:	2008923a 	slli	r4,r4,8
 c009000:	10800204 	addi	r2,r2,8
 c009004:	20fc002c 	andhi	r3,r4,61440
 c009008:	1800021e 	bne	r3,zero,c009014 <__hi0bits+0x30>
 c00900c:	2008913a 	slli	r4,r4,4
 c009010:	10800104 	addi	r2,r2,4
 c009014:	20f0002c 	andhi	r3,r4,49152
 c009018:	1800031e 	bne	r3,zero,c009028 <__hi0bits+0x44>
 c00901c:	2109883a 	add	r4,r4,r4
 c009020:	10800084 	addi	r2,r2,2
 c009024:	2109883a 	add	r4,r4,r4
 c009028:	20000316 	blt	r4,zero,c009038 <__hi0bits+0x54>
 c00902c:	2110002c 	andhi	r4,r4,16384
 c009030:	2000041e 	bne	r4,zero,c009044 <__hi0bits+0x60>
 c009034:	00800804 	movi	r2,32
 c009038:	f800283a 	ret
 c00903c:	0005883a 	mov	r2,zero
 c009040:	003fec06 	br	c008ff4 <__alt_data_end+0xfc008ff4>
 c009044:	10800044 	addi	r2,r2,1
 c009048:	f800283a 	ret

0c00904c <__lo0bits>:
 c00904c:	20c00017 	ldw	r3,0(r4)
 c009050:	188001cc 	andi	r2,r3,7
 c009054:	10000826 	beq	r2,zero,c009078 <__lo0bits+0x2c>
 c009058:	1880004c 	andi	r2,r3,1
 c00905c:	1000211e 	bne	r2,zero,c0090e4 <__lo0bits+0x98>
 c009060:	1880008c 	andi	r2,r3,2
 c009064:	1000211e 	bne	r2,zero,c0090ec <__lo0bits+0xa0>
 c009068:	1806d0ba 	srli	r3,r3,2
 c00906c:	00800084 	movi	r2,2
 c009070:	20c00015 	stw	r3,0(r4)
 c009074:	f800283a 	ret
 c009078:	18bfffcc 	andi	r2,r3,65535
 c00907c:	10001326 	beq	r2,zero,c0090cc <__lo0bits+0x80>
 c009080:	0005883a 	mov	r2,zero
 c009084:	19403fcc 	andi	r5,r3,255
 c009088:	2800021e 	bne	r5,zero,c009094 <__lo0bits+0x48>
 c00908c:	1806d23a 	srli	r3,r3,8
 c009090:	10800204 	addi	r2,r2,8
 c009094:	194003cc 	andi	r5,r3,15
 c009098:	2800021e 	bne	r5,zero,c0090a4 <__lo0bits+0x58>
 c00909c:	1806d13a 	srli	r3,r3,4
 c0090a0:	10800104 	addi	r2,r2,4
 c0090a4:	194000cc 	andi	r5,r3,3
 c0090a8:	2800021e 	bne	r5,zero,c0090b4 <__lo0bits+0x68>
 c0090ac:	1806d0ba 	srli	r3,r3,2
 c0090b0:	10800084 	addi	r2,r2,2
 c0090b4:	1940004c 	andi	r5,r3,1
 c0090b8:	2800081e 	bne	r5,zero,c0090dc <__lo0bits+0x90>
 c0090bc:	1806d07a 	srli	r3,r3,1
 c0090c0:	1800051e 	bne	r3,zero,c0090d8 <__lo0bits+0x8c>
 c0090c4:	00800804 	movi	r2,32
 c0090c8:	f800283a 	ret
 c0090cc:	1806d43a 	srli	r3,r3,16
 c0090d0:	00800404 	movi	r2,16
 c0090d4:	003feb06 	br	c009084 <__alt_data_end+0xfc009084>
 c0090d8:	10800044 	addi	r2,r2,1
 c0090dc:	20c00015 	stw	r3,0(r4)
 c0090e0:	f800283a 	ret
 c0090e4:	0005883a 	mov	r2,zero
 c0090e8:	f800283a 	ret
 c0090ec:	1806d07a 	srli	r3,r3,1
 c0090f0:	00800044 	movi	r2,1
 c0090f4:	20c00015 	stw	r3,0(r4)
 c0090f8:	f800283a 	ret

0c0090fc <__i2b>:
 c0090fc:	defffd04 	addi	sp,sp,-12
 c009100:	dc000015 	stw	r16,0(sp)
 c009104:	04000044 	movi	r16,1
 c009108:	dc400115 	stw	r17,4(sp)
 c00910c:	2823883a 	mov	r17,r5
 c009110:	800b883a 	mov	r5,r16
 c009114:	dfc00215 	stw	ra,8(sp)
 c009118:	c008cc80 	call	c008cc8 <_Balloc>
 c00911c:	14400515 	stw	r17,20(r2)
 c009120:	14000415 	stw	r16,16(r2)
 c009124:	dfc00217 	ldw	ra,8(sp)
 c009128:	dc400117 	ldw	r17,4(sp)
 c00912c:	dc000017 	ldw	r16,0(sp)
 c009130:	dec00304 	addi	sp,sp,12
 c009134:	f800283a 	ret

0c009138 <__multiply>:
 c009138:	deffef04 	addi	sp,sp,-68
 c00913c:	dc400815 	stw	r17,32(sp)
 c009140:	dc000715 	stw	r16,28(sp)
 c009144:	34400417 	ldw	r17,16(r6)
 c009148:	2c000417 	ldw	r16,16(r5)
 c00914c:	dd800d15 	stw	r22,52(sp)
 c009150:	dc800915 	stw	r18,36(sp)
 c009154:	dfc01015 	stw	ra,64(sp)
 c009158:	df000f15 	stw	fp,60(sp)
 c00915c:	ddc00e15 	stw	r23,56(sp)
 c009160:	dd400c15 	stw	r21,48(sp)
 c009164:	dd000b15 	stw	r20,44(sp)
 c009168:	dcc00a15 	stw	r19,40(sp)
 c00916c:	2825883a 	mov	r18,r5
 c009170:	302d883a 	mov	r22,r6
 c009174:	8440050e 	bge	r16,r17,c00918c <__multiply+0x54>
 c009178:	8007883a 	mov	r3,r16
 c00917c:	3025883a 	mov	r18,r6
 c009180:	8821883a 	mov	r16,r17
 c009184:	282d883a 	mov	r22,r5
 c009188:	1823883a 	mov	r17,r3
 c00918c:	90800217 	ldw	r2,8(r18)
 c009190:	8447883a 	add	r3,r16,r17
 c009194:	d8c00215 	stw	r3,8(sp)
 c009198:	91400117 	ldw	r5,4(r18)
 c00919c:	10c0010e 	bge	r2,r3,c0091a4 <__multiply+0x6c>
 c0091a0:	29400044 	addi	r5,r5,1
 c0091a4:	c008cc80 	call	c008cc8 <_Balloc>
 c0091a8:	d8c00217 	ldw	r3,8(sp)
 c0091ac:	d8800615 	stw	r2,24(sp)
 c0091b0:	18eb883a 	add	r21,r3,r3
 c0091b4:	ad6b883a 	add	r21,r21,r21
 c0091b8:	10c00504 	addi	r3,r2,20
 c0091bc:	1d6b883a 	add	r21,r3,r21
 c0091c0:	d8c00115 	stw	r3,4(sp)
 c0091c4:	dd400315 	stw	r21,12(sp)
 c0091c8:	1805883a 	mov	r2,r3
 c0091cc:	1d40042e 	bgeu	r3,r21,c0091e0 <__multiply+0xa8>
 c0091d0:	d8c00317 	ldw	r3,12(sp)
 c0091d4:	10000015 	stw	zero,0(r2)
 c0091d8:	10800104 	addi	r2,r2,4
 c0091dc:	10fffc36 	bltu	r2,r3,c0091d0 <__alt_data_end+0xfc0091d0>
 c0091e0:	8c63883a 	add	r17,r17,r17
 c0091e4:	b5800504 	addi	r22,r22,20
 c0091e8:	8c63883a 	add	r17,r17,r17
 c0091ec:	94800504 	addi	r18,r18,20
 c0091f0:	8421883a 	add	r16,r16,r16
 c0091f4:	b463883a 	add	r17,r22,r17
 c0091f8:	8421883a 	add	r16,r16,r16
 c0091fc:	dd800015 	stw	r22,0(sp)
 c009200:	dc800415 	stw	r18,16(sp)
 c009204:	dc400515 	stw	r17,20(sp)
 c009208:	9429883a 	add	r20,r18,r16
 c00920c:	b4404f2e 	bgeu	r22,r17,c00934c <__multiply+0x214>
 c009210:	d8c00017 	ldw	r3,0(sp)
 c009214:	1c800017 	ldw	r18,0(r3)
 c009218:	947fffcc 	andi	r17,r18,65535
 c00921c:	88001e26 	beq	r17,zero,c009298 <__multiply+0x160>
 c009220:	dd800117 	ldw	r22,4(sp)
 c009224:	dd400417 	ldw	r21,16(sp)
 c009228:	0027883a 	mov	r19,zero
 c00922c:	ac800017 	ldw	r18,0(r21)
 c009230:	b4000017 	ldw	r16,0(r22)
 c009234:	880b883a 	mov	r5,r17
 c009238:	913fffcc 	andi	r4,r18,65535
 c00923c:	c002cc00 	call	c002cc0 <__mulsi3>
 c009240:	9008d43a 	srli	r4,r18,16
 c009244:	84bfffcc 	andi	r18,r16,65535
 c009248:	1485883a 	add	r2,r2,r18
 c00924c:	14e5883a 	add	r18,r2,r19
 c009250:	8020d43a 	srli	r16,r16,16
 c009254:	9026d43a 	srli	r19,r18,16
 c009258:	880b883a 	mov	r5,r17
 c00925c:	c002cc00 	call	c002cc0 <__mulsi3>
 c009260:	1405883a 	add	r2,r2,r16
 c009264:	14e1883a 	add	r16,r2,r19
 c009268:	90ffffcc 	andi	r3,r18,65535
 c00926c:	8024943a 	slli	r18,r16,16
 c009270:	ad400104 	addi	r21,r21,4
 c009274:	b005883a 	mov	r2,r22
 c009278:	90c6b03a 	or	r3,r18,r3
 c00927c:	b0c00015 	stw	r3,0(r22)
 c009280:	8026d43a 	srli	r19,r16,16
 c009284:	b5800104 	addi	r22,r22,4
 c009288:	ad3fe836 	bltu	r21,r20,c00922c <__alt_data_end+0xfc00922c>
 c00928c:	d8c00017 	ldw	r3,0(sp)
 c009290:	14c00115 	stw	r19,4(r2)
 c009294:	1c800017 	ldw	r18,0(r3)
 c009298:	9024d43a 	srli	r18,r18,16
 c00929c:	90002226 	beq	r18,zero,c009328 <__multiply+0x1f0>
 c0092a0:	d8c00117 	ldw	r3,4(sp)
 c0092a4:	dd800417 	ldw	r22,16(sp)
 c0092a8:	002f883a 	mov	r23,zero
 c0092ac:	1f000017 	ldw	fp,0(r3)
 c0092b0:	1823883a 	mov	r17,r3
 c0092b4:	182b883a 	mov	r21,r3
 c0092b8:	e021883a 	mov	r16,fp
 c0092bc:	00000106 	br	c0092c4 <__multiply+0x18c>
 c0092c0:	982b883a 	mov	r21,r19
 c0092c4:	b100000b 	ldhu	r4,0(r22)
 c0092c8:	8020d43a 	srli	r16,r16,16
 c0092cc:	900b883a 	mov	r5,r18
 c0092d0:	c002cc00 	call	c002cc0 <__mulsi3>
 c0092d4:	1405883a 	add	r2,r2,r16
 c0092d8:	15ef883a 	add	r23,r2,r23
 c0092dc:	b804943a 	slli	r2,r23,16
 c0092e0:	e0ffffcc 	andi	r3,fp,65535
 c0092e4:	8c400104 	addi	r17,r17,4
 c0092e8:	10c6b03a 	or	r3,r2,r3
 c0092ec:	88ffff15 	stw	r3,-4(r17)
 c0092f0:	b5800104 	addi	r22,r22,4
 c0092f4:	b13fff17 	ldw	r4,-4(r22)
 c0092f8:	acc00104 	addi	r19,r21,4
 c0092fc:	900b883a 	mov	r5,r18
 c009300:	2008d43a 	srli	r4,r4,16
 c009304:	9c000017 	ldw	r16,0(r19)
 c009308:	c002cc00 	call	c002cc0 <__mulsi3>
 c00930c:	b806d43a 	srli	r3,r23,16
 c009310:	813fffcc 	andi	r4,r16,65535
 c009314:	1105883a 	add	r2,r2,r4
 c009318:	10f9883a 	add	fp,r2,r3
 c00931c:	e02ed43a 	srli	r23,fp,16
 c009320:	b53fe736 	bltu	r22,r20,c0092c0 <__alt_data_end+0xfc0092c0>
 c009324:	af000115 	stw	fp,4(r21)
 c009328:	d8c00017 	ldw	r3,0(sp)
 c00932c:	d9000517 	ldw	r4,20(sp)
 c009330:	18c00104 	addi	r3,r3,4
 c009334:	d8c00015 	stw	r3,0(sp)
 c009338:	d8c00117 	ldw	r3,4(sp)
 c00933c:	18c00104 	addi	r3,r3,4
 c009340:	d8c00115 	stw	r3,4(sp)
 c009344:	d8c00017 	ldw	r3,0(sp)
 c009348:	193fb136 	bltu	r3,r4,c009210 <__alt_data_end+0xfc009210>
 c00934c:	d8c00217 	ldw	r3,8(sp)
 c009350:	00c00c0e 	bge	zero,r3,c009384 <__multiply+0x24c>
 c009354:	d8c00317 	ldw	r3,12(sp)
 c009358:	18bfff17 	ldw	r2,-4(r3)
 c00935c:	1d7fff04 	addi	r21,r3,-4
 c009360:	10000326 	beq	r2,zero,c009370 <__multiply+0x238>
 c009364:	00000706 	br	c009384 <__multiply+0x24c>
 c009368:	a8800017 	ldw	r2,0(r21)
 c00936c:	1000051e 	bne	r2,zero,c009384 <__multiply+0x24c>
 c009370:	d8c00217 	ldw	r3,8(sp)
 c009374:	ad7fff04 	addi	r21,r21,-4
 c009378:	18ffffc4 	addi	r3,r3,-1
 c00937c:	d8c00215 	stw	r3,8(sp)
 c009380:	183ff91e 	bne	r3,zero,c009368 <__alt_data_end+0xfc009368>
 c009384:	d8c00617 	ldw	r3,24(sp)
 c009388:	d9000217 	ldw	r4,8(sp)
 c00938c:	1805883a 	mov	r2,r3
 c009390:	19000415 	stw	r4,16(r3)
 c009394:	dfc01017 	ldw	ra,64(sp)
 c009398:	df000f17 	ldw	fp,60(sp)
 c00939c:	ddc00e17 	ldw	r23,56(sp)
 c0093a0:	dd800d17 	ldw	r22,52(sp)
 c0093a4:	dd400c17 	ldw	r21,48(sp)
 c0093a8:	dd000b17 	ldw	r20,44(sp)
 c0093ac:	dcc00a17 	ldw	r19,40(sp)
 c0093b0:	dc800917 	ldw	r18,36(sp)
 c0093b4:	dc400817 	ldw	r17,32(sp)
 c0093b8:	dc000717 	ldw	r16,28(sp)
 c0093bc:	dec01104 	addi	sp,sp,68
 c0093c0:	f800283a 	ret

0c0093c4 <__pow5mult>:
 c0093c4:	defffa04 	addi	sp,sp,-24
 c0093c8:	dcc00315 	stw	r19,12(sp)
 c0093cc:	dc000015 	stw	r16,0(sp)
 c0093d0:	dfc00515 	stw	ra,20(sp)
 c0093d4:	dd000415 	stw	r20,16(sp)
 c0093d8:	dc800215 	stw	r18,8(sp)
 c0093dc:	dc400115 	stw	r17,4(sp)
 c0093e0:	308000cc 	andi	r2,r6,3
 c0093e4:	3021883a 	mov	r16,r6
 c0093e8:	2027883a 	mov	r19,r4
 c0093ec:	10002f1e 	bne	r2,zero,c0094ac <__pow5mult+0xe8>
 c0093f0:	2825883a 	mov	r18,r5
 c0093f4:	8021d0ba 	srai	r16,r16,2
 c0093f8:	80001a26 	beq	r16,zero,c009464 <__pow5mult+0xa0>
 c0093fc:	9c401217 	ldw	r17,72(r19)
 c009400:	8800061e 	bne	r17,zero,c00941c <__pow5mult+0x58>
 c009404:	00003406 	br	c0094d8 <__pow5mult+0x114>
 c009408:	8021d07a 	srai	r16,r16,1
 c00940c:	80001526 	beq	r16,zero,c009464 <__pow5mult+0xa0>
 c009410:	88800017 	ldw	r2,0(r17)
 c009414:	10001c26 	beq	r2,zero,c009488 <__pow5mult+0xc4>
 c009418:	1023883a 	mov	r17,r2
 c00941c:	8080004c 	andi	r2,r16,1
 c009420:	103ff926 	beq	r2,zero,c009408 <__alt_data_end+0xfc009408>
 c009424:	880d883a 	mov	r6,r17
 c009428:	900b883a 	mov	r5,r18
 c00942c:	9809883a 	mov	r4,r19
 c009430:	c0091380 	call	c009138 <__multiply>
 c009434:	90001b26 	beq	r18,zero,c0094a4 <__pow5mult+0xe0>
 c009438:	91000117 	ldw	r4,4(r18)
 c00943c:	98c01317 	ldw	r3,76(r19)
 c009440:	8021d07a 	srai	r16,r16,1
 c009444:	2109883a 	add	r4,r4,r4
 c009448:	2109883a 	add	r4,r4,r4
 c00944c:	1907883a 	add	r3,r3,r4
 c009450:	19000017 	ldw	r4,0(r3)
 c009454:	91000015 	stw	r4,0(r18)
 c009458:	1c800015 	stw	r18,0(r3)
 c00945c:	1025883a 	mov	r18,r2
 c009460:	803feb1e 	bne	r16,zero,c009410 <__alt_data_end+0xfc009410>
 c009464:	9005883a 	mov	r2,r18
 c009468:	dfc00517 	ldw	ra,20(sp)
 c00946c:	dd000417 	ldw	r20,16(sp)
 c009470:	dcc00317 	ldw	r19,12(sp)
 c009474:	dc800217 	ldw	r18,8(sp)
 c009478:	dc400117 	ldw	r17,4(sp)
 c00947c:	dc000017 	ldw	r16,0(sp)
 c009480:	dec00604 	addi	sp,sp,24
 c009484:	f800283a 	ret
 c009488:	880d883a 	mov	r6,r17
 c00948c:	880b883a 	mov	r5,r17
 c009490:	9809883a 	mov	r4,r19
 c009494:	c0091380 	call	c009138 <__multiply>
 c009498:	88800015 	stw	r2,0(r17)
 c00949c:	10000015 	stw	zero,0(r2)
 c0094a0:	003fdd06 	br	c009418 <__alt_data_end+0xfc009418>
 c0094a4:	1025883a 	mov	r18,r2
 c0094a8:	003fd706 	br	c009408 <__alt_data_end+0xfc009408>
 c0094ac:	10bfffc4 	addi	r2,r2,-1
 c0094b0:	1085883a 	add	r2,r2,r2
 c0094b4:	00c30074 	movhi	r3,3073
 c0094b8:	18ca7004 	addi	r3,r3,10688
 c0094bc:	1085883a 	add	r2,r2,r2
 c0094c0:	1885883a 	add	r2,r3,r2
 c0094c4:	11800017 	ldw	r6,0(r2)
 c0094c8:	000f883a 	mov	r7,zero
 c0094cc:	c008d980 	call	c008d98 <__multadd>
 c0094d0:	1025883a 	mov	r18,r2
 c0094d4:	003fc706 	br	c0093f4 <__alt_data_end+0xfc0093f4>
 c0094d8:	05000044 	movi	r20,1
 c0094dc:	a00b883a 	mov	r5,r20
 c0094e0:	9809883a 	mov	r4,r19
 c0094e4:	c008cc80 	call	c008cc8 <_Balloc>
 c0094e8:	1023883a 	mov	r17,r2
 c0094ec:	00809c44 	movi	r2,625
 c0094f0:	88800515 	stw	r2,20(r17)
 c0094f4:	8d000415 	stw	r20,16(r17)
 c0094f8:	9c401215 	stw	r17,72(r19)
 c0094fc:	88000015 	stw	zero,0(r17)
 c009500:	003fc606 	br	c00941c <__alt_data_end+0xfc00941c>

0c009504 <__lshift>:
 c009504:	defff904 	addi	sp,sp,-28
 c009508:	dd400515 	stw	r21,20(sp)
 c00950c:	dcc00315 	stw	r19,12(sp)
 c009510:	302bd17a 	srai	r21,r6,5
 c009514:	2cc00417 	ldw	r19,16(r5)
 c009518:	28800217 	ldw	r2,8(r5)
 c00951c:	dd000415 	stw	r20,16(sp)
 c009520:	ace7883a 	add	r19,r21,r19
 c009524:	dc800215 	stw	r18,8(sp)
 c009528:	dc400115 	stw	r17,4(sp)
 c00952c:	dc000015 	stw	r16,0(sp)
 c009530:	dfc00615 	stw	ra,24(sp)
 c009534:	9c000044 	addi	r16,r19,1
 c009538:	2823883a 	mov	r17,r5
 c00953c:	3029883a 	mov	r20,r6
 c009540:	2025883a 	mov	r18,r4
 c009544:	29400117 	ldw	r5,4(r5)
 c009548:	1400030e 	bge	r2,r16,c009558 <__lshift+0x54>
 c00954c:	1085883a 	add	r2,r2,r2
 c009550:	29400044 	addi	r5,r5,1
 c009554:	143ffd16 	blt	r2,r16,c00954c <__alt_data_end+0xfc00954c>
 c009558:	9009883a 	mov	r4,r18
 c00955c:	c008cc80 	call	c008cc8 <_Balloc>
 c009560:	10c00504 	addi	r3,r2,20
 c009564:	0540070e 	bge	zero,r21,c009584 <__lshift+0x80>
 c009568:	ad6b883a 	add	r21,r21,r21
 c00956c:	ad6b883a 	add	r21,r21,r21
 c009570:	1809883a 	mov	r4,r3
 c009574:	1d47883a 	add	r3,r3,r21
 c009578:	20000015 	stw	zero,0(r4)
 c00957c:	21000104 	addi	r4,r4,4
 c009580:	193ffd1e 	bne	r3,r4,c009578 <__alt_data_end+0xfc009578>
 c009584:	8a000417 	ldw	r8,16(r17)
 c009588:	89000504 	addi	r4,r17,20
 c00958c:	a18007cc 	andi	r6,r20,31
 c009590:	4211883a 	add	r8,r8,r8
 c009594:	4211883a 	add	r8,r8,r8
 c009598:	2211883a 	add	r8,r4,r8
 c00959c:	30002326 	beq	r6,zero,c00962c <__lshift+0x128>
 c0095a0:	02400804 	movi	r9,32
 c0095a4:	4993c83a 	sub	r9,r9,r6
 c0095a8:	000b883a 	mov	r5,zero
 c0095ac:	21c00017 	ldw	r7,0(r4)
 c0095b0:	1815883a 	mov	r10,r3
 c0095b4:	18c00104 	addi	r3,r3,4
 c0095b8:	398e983a 	sll	r7,r7,r6
 c0095bc:	21000104 	addi	r4,r4,4
 c0095c0:	394ab03a 	or	r5,r7,r5
 c0095c4:	197fff15 	stw	r5,-4(r3)
 c0095c8:	217fff17 	ldw	r5,-4(r4)
 c0095cc:	2a4ad83a 	srl	r5,r5,r9
 c0095d0:	223ff636 	bltu	r4,r8,c0095ac <__alt_data_end+0xfc0095ac>
 c0095d4:	51400115 	stw	r5,4(r10)
 c0095d8:	28001a1e 	bne	r5,zero,c009644 <__lshift+0x140>
 c0095dc:	843fffc4 	addi	r16,r16,-1
 c0095e0:	14000415 	stw	r16,16(r2)
 c0095e4:	88000826 	beq	r17,zero,c009608 <__lshift+0x104>
 c0095e8:	89000117 	ldw	r4,4(r17)
 c0095ec:	90c01317 	ldw	r3,76(r18)
 c0095f0:	2109883a 	add	r4,r4,r4
 c0095f4:	2109883a 	add	r4,r4,r4
 c0095f8:	1907883a 	add	r3,r3,r4
 c0095fc:	19000017 	ldw	r4,0(r3)
 c009600:	89000015 	stw	r4,0(r17)
 c009604:	1c400015 	stw	r17,0(r3)
 c009608:	dfc00617 	ldw	ra,24(sp)
 c00960c:	dd400517 	ldw	r21,20(sp)
 c009610:	dd000417 	ldw	r20,16(sp)
 c009614:	dcc00317 	ldw	r19,12(sp)
 c009618:	dc800217 	ldw	r18,8(sp)
 c00961c:	dc400117 	ldw	r17,4(sp)
 c009620:	dc000017 	ldw	r16,0(sp)
 c009624:	dec00704 	addi	sp,sp,28
 c009628:	f800283a 	ret
 c00962c:	21400017 	ldw	r5,0(r4)
 c009630:	18c00104 	addi	r3,r3,4
 c009634:	21000104 	addi	r4,r4,4
 c009638:	197fff15 	stw	r5,-4(r3)
 c00963c:	223ffb36 	bltu	r4,r8,c00962c <__alt_data_end+0xfc00962c>
 c009640:	003fe606 	br	c0095dc <__alt_data_end+0xfc0095dc>
 c009644:	9c000084 	addi	r16,r19,2
 c009648:	003fe406 	br	c0095dc <__alt_data_end+0xfc0095dc>

0c00964c <__mcmp>:
 c00964c:	20800417 	ldw	r2,16(r4)
 c009650:	28c00417 	ldw	r3,16(r5)
 c009654:	10c5c83a 	sub	r2,r2,r3
 c009658:	1000111e 	bne	r2,zero,c0096a0 <__mcmp+0x54>
 c00965c:	18c7883a 	add	r3,r3,r3
 c009660:	18c7883a 	add	r3,r3,r3
 c009664:	21000504 	addi	r4,r4,20
 c009668:	29400504 	addi	r5,r5,20
 c00966c:	20c5883a 	add	r2,r4,r3
 c009670:	28cb883a 	add	r5,r5,r3
 c009674:	00000106 	br	c00967c <__mcmp+0x30>
 c009678:	20800a2e 	bgeu	r4,r2,c0096a4 <__mcmp+0x58>
 c00967c:	10bfff04 	addi	r2,r2,-4
 c009680:	297fff04 	addi	r5,r5,-4
 c009684:	11800017 	ldw	r6,0(r2)
 c009688:	28c00017 	ldw	r3,0(r5)
 c00968c:	30fffa26 	beq	r6,r3,c009678 <__alt_data_end+0xfc009678>
 c009690:	30c00236 	bltu	r6,r3,c00969c <__mcmp+0x50>
 c009694:	00800044 	movi	r2,1
 c009698:	f800283a 	ret
 c00969c:	00bfffc4 	movi	r2,-1
 c0096a0:	f800283a 	ret
 c0096a4:	0005883a 	mov	r2,zero
 c0096a8:	f800283a 	ret

0c0096ac <__mdiff>:
 c0096ac:	28c00417 	ldw	r3,16(r5)
 c0096b0:	30800417 	ldw	r2,16(r6)
 c0096b4:	defffa04 	addi	sp,sp,-24
 c0096b8:	dcc00315 	stw	r19,12(sp)
 c0096bc:	dc800215 	stw	r18,8(sp)
 c0096c0:	dfc00515 	stw	ra,20(sp)
 c0096c4:	dd000415 	stw	r20,16(sp)
 c0096c8:	dc400115 	stw	r17,4(sp)
 c0096cc:	dc000015 	stw	r16,0(sp)
 c0096d0:	1887c83a 	sub	r3,r3,r2
 c0096d4:	2825883a 	mov	r18,r5
 c0096d8:	3027883a 	mov	r19,r6
 c0096dc:	1800141e 	bne	r3,zero,c009730 <__mdiff+0x84>
 c0096e0:	1085883a 	add	r2,r2,r2
 c0096e4:	1085883a 	add	r2,r2,r2
 c0096e8:	2a000504 	addi	r8,r5,20
 c0096ec:	34000504 	addi	r16,r6,20
 c0096f0:	4087883a 	add	r3,r8,r2
 c0096f4:	8085883a 	add	r2,r16,r2
 c0096f8:	00000106 	br	c009700 <__mdiff+0x54>
 c0096fc:	40c0592e 	bgeu	r8,r3,c009864 <__mdiff+0x1b8>
 c009700:	18ffff04 	addi	r3,r3,-4
 c009704:	10bfff04 	addi	r2,r2,-4
 c009708:	19c00017 	ldw	r7,0(r3)
 c00970c:	11400017 	ldw	r5,0(r2)
 c009710:	397ffa26 	beq	r7,r5,c0096fc <__alt_data_end+0xfc0096fc>
 c009714:	3940592e 	bgeu	r7,r5,c00987c <__mdiff+0x1d0>
 c009718:	9005883a 	mov	r2,r18
 c00971c:	4023883a 	mov	r17,r8
 c009720:	9825883a 	mov	r18,r19
 c009724:	05000044 	movi	r20,1
 c009728:	1027883a 	mov	r19,r2
 c00972c:	00000406 	br	c009740 <__mdiff+0x94>
 c009730:	18005616 	blt	r3,zero,c00988c <__mdiff+0x1e0>
 c009734:	34400504 	addi	r17,r6,20
 c009738:	2c000504 	addi	r16,r5,20
 c00973c:	0029883a 	mov	r20,zero
 c009740:	91400117 	ldw	r5,4(r18)
 c009744:	c008cc80 	call	c008cc8 <_Balloc>
 c009748:	92400417 	ldw	r9,16(r18)
 c00974c:	9b000417 	ldw	r12,16(r19)
 c009750:	12c00504 	addi	r11,r2,20
 c009754:	4a51883a 	add	r8,r9,r9
 c009758:	6319883a 	add	r12,r12,r12
 c00975c:	4211883a 	add	r8,r8,r8
 c009760:	6319883a 	add	r12,r12,r12
 c009764:	15000315 	stw	r20,12(r2)
 c009768:	8211883a 	add	r8,r16,r8
 c00976c:	8b19883a 	add	r12,r17,r12
 c009770:	0007883a 	mov	r3,zero
 c009774:	81400017 	ldw	r5,0(r16)
 c009778:	89c00017 	ldw	r7,0(r17)
 c00977c:	59800104 	addi	r6,r11,4
 c009780:	293fffcc 	andi	r4,r5,65535
 c009784:	20c7883a 	add	r3,r4,r3
 c009788:	393fffcc 	andi	r4,r7,65535
 c00978c:	1909c83a 	sub	r4,r3,r4
 c009790:	280ad43a 	srli	r5,r5,16
 c009794:	380ed43a 	srli	r7,r7,16
 c009798:	2007d43a 	srai	r3,r4,16
 c00979c:	213fffcc 	andi	r4,r4,65535
 c0097a0:	29cbc83a 	sub	r5,r5,r7
 c0097a4:	28c7883a 	add	r3,r5,r3
 c0097a8:	180a943a 	slli	r5,r3,16
 c0097ac:	8c400104 	addi	r17,r17,4
 c0097b0:	84000104 	addi	r16,r16,4
 c0097b4:	2908b03a 	or	r4,r5,r4
 c0097b8:	59000015 	stw	r4,0(r11)
 c0097bc:	1807d43a 	srai	r3,r3,16
 c0097c0:	3015883a 	mov	r10,r6
 c0097c4:	3017883a 	mov	r11,r6
 c0097c8:	8b3fea36 	bltu	r17,r12,c009774 <__alt_data_end+0xfc009774>
 c0097cc:	8200162e 	bgeu	r16,r8,c009828 <__mdiff+0x17c>
 c0097d0:	8017883a 	mov	r11,r16
 c0097d4:	59400017 	ldw	r5,0(r11)
 c0097d8:	31800104 	addi	r6,r6,4
 c0097dc:	5ac00104 	addi	r11,r11,4
 c0097e0:	293fffcc 	andi	r4,r5,65535
 c0097e4:	20c7883a 	add	r3,r4,r3
 c0097e8:	280ed43a 	srli	r7,r5,16
 c0097ec:	180bd43a 	srai	r5,r3,16
 c0097f0:	193fffcc 	andi	r4,r3,65535
 c0097f4:	3947883a 	add	r3,r7,r5
 c0097f8:	180a943a 	slli	r5,r3,16
 c0097fc:	1807d43a 	srai	r3,r3,16
 c009800:	2908b03a 	or	r4,r5,r4
 c009804:	313fff15 	stw	r4,-4(r6)
 c009808:	5a3ff236 	bltu	r11,r8,c0097d4 <__alt_data_end+0xfc0097d4>
 c00980c:	0406303a 	nor	r3,zero,r16
 c009810:	1a07883a 	add	r3,r3,r8
 c009814:	1806d0ba 	srli	r3,r3,2
 c009818:	18c00044 	addi	r3,r3,1
 c00981c:	18c7883a 	add	r3,r3,r3
 c009820:	18c7883a 	add	r3,r3,r3
 c009824:	50d5883a 	add	r10,r10,r3
 c009828:	50ffff04 	addi	r3,r10,-4
 c00982c:	2000041e 	bne	r4,zero,c009840 <__mdiff+0x194>
 c009830:	18ffff04 	addi	r3,r3,-4
 c009834:	19000017 	ldw	r4,0(r3)
 c009838:	4a7fffc4 	addi	r9,r9,-1
 c00983c:	203ffc26 	beq	r4,zero,c009830 <__alt_data_end+0xfc009830>
 c009840:	12400415 	stw	r9,16(r2)
 c009844:	dfc00517 	ldw	ra,20(sp)
 c009848:	dd000417 	ldw	r20,16(sp)
 c00984c:	dcc00317 	ldw	r19,12(sp)
 c009850:	dc800217 	ldw	r18,8(sp)
 c009854:	dc400117 	ldw	r17,4(sp)
 c009858:	dc000017 	ldw	r16,0(sp)
 c00985c:	dec00604 	addi	sp,sp,24
 c009860:	f800283a 	ret
 c009864:	000b883a 	mov	r5,zero
 c009868:	c008cc80 	call	c008cc8 <_Balloc>
 c00986c:	00c00044 	movi	r3,1
 c009870:	10c00415 	stw	r3,16(r2)
 c009874:	10000515 	stw	zero,20(r2)
 c009878:	003ff206 	br	c009844 <__alt_data_end+0xfc009844>
 c00987c:	8023883a 	mov	r17,r16
 c009880:	0029883a 	mov	r20,zero
 c009884:	4021883a 	mov	r16,r8
 c009888:	003fad06 	br	c009740 <__alt_data_end+0xfc009740>
 c00988c:	9005883a 	mov	r2,r18
 c009890:	94400504 	addi	r17,r18,20
 c009894:	9c000504 	addi	r16,r19,20
 c009898:	9825883a 	mov	r18,r19
 c00989c:	05000044 	movi	r20,1
 c0098a0:	1027883a 	mov	r19,r2
 c0098a4:	003fa606 	br	c009740 <__alt_data_end+0xfc009740>

0c0098a8 <__ulp>:
 c0098a8:	295ffc2c 	andhi	r5,r5,32752
 c0098ac:	00bf3034 	movhi	r2,64704
 c0098b0:	2887883a 	add	r3,r5,r2
 c0098b4:	00c0020e 	bge	zero,r3,c0098c0 <__ulp+0x18>
 c0098b8:	0005883a 	mov	r2,zero
 c0098bc:	f800283a 	ret
 c0098c0:	00c7c83a 	sub	r3,zero,r3
 c0098c4:	1807d53a 	srai	r3,r3,20
 c0098c8:	008004c4 	movi	r2,19
 c0098cc:	10c00b0e 	bge	r2,r3,c0098fc <__ulp+0x54>
 c0098d0:	18bffb04 	addi	r2,r3,-20
 c0098d4:	01000784 	movi	r4,30
 c0098d8:	0007883a 	mov	r3,zero
 c0098dc:	20800516 	blt	r4,r2,c0098f4 <__ulp+0x4c>
 c0098e0:	010007c4 	movi	r4,31
 c0098e4:	2089c83a 	sub	r4,r4,r2
 c0098e8:	00800044 	movi	r2,1
 c0098ec:	1104983a 	sll	r2,r2,r4
 c0098f0:	f800283a 	ret
 c0098f4:	00800044 	movi	r2,1
 c0098f8:	f800283a 	ret
 c0098fc:	01400234 	movhi	r5,8
 c009900:	28c7d83a 	sra	r3,r5,r3
 c009904:	0005883a 	mov	r2,zero
 c009908:	f800283a 	ret

0c00990c <__b2d>:
 c00990c:	defffa04 	addi	sp,sp,-24
 c009910:	dc000015 	stw	r16,0(sp)
 c009914:	24000417 	ldw	r16,16(r4)
 c009918:	dc400115 	stw	r17,4(sp)
 c00991c:	24400504 	addi	r17,r4,20
 c009920:	8421883a 	add	r16,r16,r16
 c009924:	8421883a 	add	r16,r16,r16
 c009928:	8c21883a 	add	r16,r17,r16
 c00992c:	dc800215 	stw	r18,8(sp)
 c009930:	84bfff17 	ldw	r18,-4(r16)
 c009934:	dd000415 	stw	r20,16(sp)
 c009938:	dcc00315 	stw	r19,12(sp)
 c00993c:	9009883a 	mov	r4,r18
 c009940:	2829883a 	mov	r20,r5
 c009944:	dfc00515 	stw	ra,20(sp)
 c009948:	c008fe40 	call	c008fe4 <__hi0bits>
 c00994c:	00c00804 	movi	r3,32
 c009950:	1889c83a 	sub	r4,r3,r2
 c009954:	a1000015 	stw	r4,0(r20)
 c009958:	01000284 	movi	r4,10
 c00995c:	84ffff04 	addi	r19,r16,-4
 c009960:	20801216 	blt	r4,r2,c0099ac <__b2d+0xa0>
 c009964:	018002c4 	movi	r6,11
 c009968:	308dc83a 	sub	r6,r6,r2
 c00996c:	9186d83a 	srl	r3,r18,r6
 c009970:	18cffc34 	orhi	r3,r3,16368
 c009974:	8cc0212e 	bgeu	r17,r19,c0099fc <__b2d+0xf0>
 c009978:	813ffe17 	ldw	r4,-8(r16)
 c00997c:	218cd83a 	srl	r6,r4,r6
 c009980:	10800544 	addi	r2,r2,21
 c009984:	9084983a 	sll	r2,r18,r2
 c009988:	1184b03a 	or	r2,r2,r6
 c00998c:	dfc00517 	ldw	ra,20(sp)
 c009990:	dd000417 	ldw	r20,16(sp)
 c009994:	dcc00317 	ldw	r19,12(sp)
 c009998:	dc800217 	ldw	r18,8(sp)
 c00999c:	dc400117 	ldw	r17,4(sp)
 c0099a0:	dc000017 	ldw	r16,0(sp)
 c0099a4:	dec00604 	addi	sp,sp,24
 c0099a8:	f800283a 	ret
 c0099ac:	8cc00f2e 	bgeu	r17,r19,c0099ec <__b2d+0xe0>
 c0099b0:	117ffd44 	addi	r5,r2,-11
 c0099b4:	80bffe17 	ldw	r2,-8(r16)
 c0099b8:	28000e26 	beq	r5,zero,c0099f4 <__b2d+0xe8>
 c0099bc:	1949c83a 	sub	r4,r3,r5
 c0099c0:	9164983a 	sll	r18,r18,r5
 c0099c4:	1106d83a 	srl	r3,r2,r4
 c0099c8:	81bffe04 	addi	r6,r16,-8
 c0099cc:	948ffc34 	orhi	r18,r18,16368
 c0099d0:	90c6b03a 	or	r3,r18,r3
 c0099d4:	89800e2e 	bgeu	r17,r6,c009a10 <__b2d+0x104>
 c0099d8:	81bffd17 	ldw	r6,-12(r16)
 c0099dc:	1144983a 	sll	r2,r2,r5
 c0099e0:	310ad83a 	srl	r5,r6,r4
 c0099e4:	2884b03a 	or	r2,r5,r2
 c0099e8:	003fe806 	br	c00998c <__alt_data_end+0xfc00998c>
 c0099ec:	10bffd44 	addi	r2,r2,-11
 c0099f0:	1000041e 	bne	r2,zero,c009a04 <__b2d+0xf8>
 c0099f4:	90cffc34 	orhi	r3,r18,16368
 c0099f8:	003fe406 	br	c00998c <__alt_data_end+0xfc00998c>
 c0099fc:	000d883a 	mov	r6,zero
 c009a00:	003fdf06 	br	c009980 <__alt_data_end+0xfc009980>
 c009a04:	90a4983a 	sll	r18,r18,r2
 c009a08:	0005883a 	mov	r2,zero
 c009a0c:	003ff906 	br	c0099f4 <__alt_data_end+0xfc0099f4>
 c009a10:	1144983a 	sll	r2,r2,r5
 c009a14:	003fdd06 	br	c00998c <__alt_data_end+0xfc00998c>

0c009a18 <__d2b>:
 c009a18:	defff804 	addi	sp,sp,-32
 c009a1c:	dc000215 	stw	r16,8(sp)
 c009a20:	3021883a 	mov	r16,r6
 c009a24:	dc400315 	stw	r17,12(sp)
 c009a28:	8022907a 	slli	r17,r16,1
 c009a2c:	dd000615 	stw	r20,24(sp)
 c009a30:	2829883a 	mov	r20,r5
 c009a34:	01400044 	movi	r5,1
 c009a38:	dcc00515 	stw	r19,20(sp)
 c009a3c:	dc800415 	stw	r18,16(sp)
 c009a40:	dfc00715 	stw	ra,28(sp)
 c009a44:	3825883a 	mov	r18,r7
 c009a48:	8822d57a 	srli	r17,r17,21
 c009a4c:	c008cc80 	call	c008cc8 <_Balloc>
 c009a50:	1027883a 	mov	r19,r2
 c009a54:	00800434 	movhi	r2,16
 c009a58:	10bfffc4 	addi	r2,r2,-1
 c009a5c:	808c703a 	and	r6,r16,r2
 c009a60:	88000126 	beq	r17,zero,c009a68 <__d2b+0x50>
 c009a64:	31800434 	orhi	r6,r6,16
 c009a68:	d9800015 	stw	r6,0(sp)
 c009a6c:	a0002426 	beq	r20,zero,c009b00 <__d2b+0xe8>
 c009a70:	d9000104 	addi	r4,sp,4
 c009a74:	dd000115 	stw	r20,4(sp)
 c009a78:	c00904c0 	call	c00904c <__lo0bits>
 c009a7c:	d8c00017 	ldw	r3,0(sp)
 c009a80:	10002f1e 	bne	r2,zero,c009b40 <__d2b+0x128>
 c009a84:	d9000117 	ldw	r4,4(sp)
 c009a88:	99000515 	stw	r4,20(r19)
 c009a8c:	1821003a 	cmpeq	r16,r3,zero
 c009a90:	01000084 	movi	r4,2
 c009a94:	2421c83a 	sub	r16,r4,r16
 c009a98:	98c00615 	stw	r3,24(r19)
 c009a9c:	9c000415 	stw	r16,16(r19)
 c009aa0:	88001f1e 	bne	r17,zero,c009b20 <__d2b+0x108>
 c009aa4:	10bef384 	addi	r2,r2,-1074
 c009aa8:	90800015 	stw	r2,0(r18)
 c009aac:	00900034 	movhi	r2,16384
 c009ab0:	10bfffc4 	addi	r2,r2,-1
 c009ab4:	8085883a 	add	r2,r16,r2
 c009ab8:	1085883a 	add	r2,r2,r2
 c009abc:	1085883a 	add	r2,r2,r2
 c009ac0:	9885883a 	add	r2,r19,r2
 c009ac4:	11000517 	ldw	r4,20(r2)
 c009ac8:	8020917a 	slli	r16,r16,5
 c009acc:	c008fe40 	call	c008fe4 <__hi0bits>
 c009ad0:	d8c00817 	ldw	r3,32(sp)
 c009ad4:	8085c83a 	sub	r2,r16,r2
 c009ad8:	18800015 	stw	r2,0(r3)
 c009adc:	9805883a 	mov	r2,r19
 c009ae0:	dfc00717 	ldw	ra,28(sp)
 c009ae4:	dd000617 	ldw	r20,24(sp)
 c009ae8:	dcc00517 	ldw	r19,20(sp)
 c009aec:	dc800417 	ldw	r18,16(sp)
 c009af0:	dc400317 	ldw	r17,12(sp)
 c009af4:	dc000217 	ldw	r16,8(sp)
 c009af8:	dec00804 	addi	sp,sp,32
 c009afc:	f800283a 	ret
 c009b00:	d809883a 	mov	r4,sp
 c009b04:	c00904c0 	call	c00904c <__lo0bits>
 c009b08:	d8c00017 	ldw	r3,0(sp)
 c009b0c:	04000044 	movi	r16,1
 c009b10:	9c000415 	stw	r16,16(r19)
 c009b14:	98c00515 	stw	r3,20(r19)
 c009b18:	10800804 	addi	r2,r2,32
 c009b1c:	883fe126 	beq	r17,zero,c009aa4 <__alt_data_end+0xfc009aa4>
 c009b20:	00c00d44 	movi	r3,53
 c009b24:	8c7ef344 	addi	r17,r17,-1075
 c009b28:	88a3883a 	add	r17,r17,r2
 c009b2c:	1885c83a 	sub	r2,r3,r2
 c009b30:	d8c00817 	ldw	r3,32(sp)
 c009b34:	94400015 	stw	r17,0(r18)
 c009b38:	18800015 	stw	r2,0(r3)
 c009b3c:	003fe706 	br	c009adc <__alt_data_end+0xfc009adc>
 c009b40:	01000804 	movi	r4,32
 c009b44:	2089c83a 	sub	r4,r4,r2
 c009b48:	1908983a 	sll	r4,r3,r4
 c009b4c:	d9400117 	ldw	r5,4(sp)
 c009b50:	1886d83a 	srl	r3,r3,r2
 c009b54:	2148b03a 	or	r4,r4,r5
 c009b58:	99000515 	stw	r4,20(r19)
 c009b5c:	d8c00015 	stw	r3,0(sp)
 c009b60:	003fca06 	br	c009a8c <__alt_data_end+0xfc009a8c>

0c009b64 <__ratio>:
 c009b64:	defff904 	addi	sp,sp,-28
 c009b68:	dc400315 	stw	r17,12(sp)
 c009b6c:	2823883a 	mov	r17,r5
 c009b70:	d9400104 	addi	r5,sp,4
 c009b74:	dfc00615 	stw	ra,24(sp)
 c009b78:	dcc00515 	stw	r19,20(sp)
 c009b7c:	dc800415 	stw	r18,16(sp)
 c009b80:	2027883a 	mov	r19,r4
 c009b84:	dc000215 	stw	r16,8(sp)
 c009b88:	c00990c0 	call	c00990c <__b2d>
 c009b8c:	d80b883a 	mov	r5,sp
 c009b90:	8809883a 	mov	r4,r17
 c009b94:	1025883a 	mov	r18,r2
 c009b98:	1821883a 	mov	r16,r3
 c009b9c:	c00990c0 	call	c00990c <__b2d>
 c009ba0:	8a000417 	ldw	r8,16(r17)
 c009ba4:	99000417 	ldw	r4,16(r19)
 c009ba8:	d9400117 	ldw	r5,4(sp)
 c009bac:	2209c83a 	sub	r4,r4,r8
 c009bb0:	2010917a 	slli	r8,r4,5
 c009bb4:	d9000017 	ldw	r4,0(sp)
 c009bb8:	2909c83a 	sub	r4,r5,r4
 c009bbc:	4109883a 	add	r4,r8,r4
 c009bc0:	01000e0e 	bge	zero,r4,c009bfc <__ratio+0x98>
 c009bc4:	2008953a 	slli	r4,r4,20
 c009bc8:	2421883a 	add	r16,r4,r16
 c009bcc:	100d883a 	mov	r6,r2
 c009bd0:	180f883a 	mov	r7,r3
 c009bd4:	9009883a 	mov	r4,r18
 c009bd8:	800b883a 	mov	r5,r16
 c009bdc:	c00dbdc0 	call	c00dbdc <__divdf3>
 c009be0:	dfc00617 	ldw	ra,24(sp)
 c009be4:	dcc00517 	ldw	r19,20(sp)
 c009be8:	dc800417 	ldw	r18,16(sp)
 c009bec:	dc400317 	ldw	r17,12(sp)
 c009bf0:	dc000217 	ldw	r16,8(sp)
 c009bf4:	dec00704 	addi	sp,sp,28
 c009bf8:	f800283a 	ret
 c009bfc:	2008953a 	slli	r4,r4,20
 c009c00:	1907c83a 	sub	r3,r3,r4
 c009c04:	003ff106 	br	c009bcc <__alt_data_end+0xfc009bcc>

0c009c08 <_mprec_log10>:
 c009c08:	defffe04 	addi	sp,sp,-8
 c009c0c:	dc000015 	stw	r16,0(sp)
 c009c10:	dfc00115 	stw	ra,4(sp)
 c009c14:	008005c4 	movi	r2,23
 c009c18:	2021883a 	mov	r16,r4
 c009c1c:	11000d0e 	bge	r2,r4,c009c54 <_mprec_log10+0x4c>
 c009c20:	0005883a 	mov	r2,zero
 c009c24:	00cffc34 	movhi	r3,16368
 c009c28:	843fffc4 	addi	r16,r16,-1
 c009c2c:	000d883a 	mov	r6,zero
 c009c30:	01d00934 	movhi	r7,16420
 c009c34:	1009883a 	mov	r4,r2
 c009c38:	180b883a 	mov	r5,r3
 c009c3c:	c00e8040 	call	c00e804 <__muldf3>
 c009c40:	803ff91e 	bne	r16,zero,c009c28 <__alt_data_end+0xfc009c28>
 c009c44:	dfc00117 	ldw	ra,4(sp)
 c009c48:	dc000017 	ldw	r16,0(sp)
 c009c4c:	dec00204 	addi	sp,sp,8
 c009c50:	f800283a 	ret
 c009c54:	202090fa 	slli	r16,r4,3
 c009c58:	00830074 	movhi	r2,3073
 c009c5c:	108a8704 	addi	r2,r2,10780
 c009c60:	1421883a 	add	r16,r2,r16
 c009c64:	80800017 	ldw	r2,0(r16)
 c009c68:	80c00117 	ldw	r3,4(r16)
 c009c6c:	dfc00117 	ldw	ra,4(sp)
 c009c70:	dc000017 	ldw	r16,0(sp)
 c009c74:	dec00204 	addi	sp,sp,8
 c009c78:	f800283a 	ret

0c009c7c <__copybits>:
 c009c7c:	297fffc4 	addi	r5,r5,-1
 c009c80:	280fd17a 	srai	r7,r5,5
 c009c84:	30c00417 	ldw	r3,16(r6)
 c009c88:	30800504 	addi	r2,r6,20
 c009c8c:	39c00044 	addi	r7,r7,1
 c009c90:	18c7883a 	add	r3,r3,r3
 c009c94:	39cf883a 	add	r7,r7,r7
 c009c98:	18c7883a 	add	r3,r3,r3
 c009c9c:	39cf883a 	add	r7,r7,r7
 c009ca0:	10c7883a 	add	r3,r2,r3
 c009ca4:	21cf883a 	add	r7,r4,r7
 c009ca8:	10c00d2e 	bgeu	r2,r3,c009ce0 <__copybits+0x64>
 c009cac:	200b883a 	mov	r5,r4
 c009cb0:	12000017 	ldw	r8,0(r2)
 c009cb4:	29400104 	addi	r5,r5,4
 c009cb8:	10800104 	addi	r2,r2,4
 c009cbc:	2a3fff15 	stw	r8,-4(r5)
 c009cc0:	10fffb36 	bltu	r2,r3,c009cb0 <__alt_data_end+0xfc009cb0>
 c009cc4:	1985c83a 	sub	r2,r3,r6
 c009cc8:	10bffac4 	addi	r2,r2,-21
 c009ccc:	1004d0ba 	srli	r2,r2,2
 c009cd0:	10800044 	addi	r2,r2,1
 c009cd4:	1085883a 	add	r2,r2,r2
 c009cd8:	1085883a 	add	r2,r2,r2
 c009cdc:	2089883a 	add	r4,r4,r2
 c009ce0:	21c0032e 	bgeu	r4,r7,c009cf0 <__copybits+0x74>
 c009ce4:	20000015 	stw	zero,0(r4)
 c009ce8:	21000104 	addi	r4,r4,4
 c009cec:	21fffd36 	bltu	r4,r7,c009ce4 <__alt_data_end+0xfc009ce4>
 c009cf0:	f800283a 	ret

0c009cf4 <__any_on>:
 c009cf4:	20c00417 	ldw	r3,16(r4)
 c009cf8:	2805d17a 	srai	r2,r5,5
 c009cfc:	21000504 	addi	r4,r4,20
 c009d00:	18800d0e 	bge	r3,r2,c009d38 <__any_on+0x44>
 c009d04:	18c7883a 	add	r3,r3,r3
 c009d08:	18c7883a 	add	r3,r3,r3
 c009d0c:	20c7883a 	add	r3,r4,r3
 c009d10:	20c0192e 	bgeu	r4,r3,c009d78 <__any_on+0x84>
 c009d14:	18bfff17 	ldw	r2,-4(r3)
 c009d18:	18ffff04 	addi	r3,r3,-4
 c009d1c:	1000041e 	bne	r2,zero,c009d30 <__any_on+0x3c>
 c009d20:	20c0142e 	bgeu	r4,r3,c009d74 <__any_on+0x80>
 c009d24:	18ffff04 	addi	r3,r3,-4
 c009d28:	19400017 	ldw	r5,0(r3)
 c009d2c:	283ffc26 	beq	r5,zero,c009d20 <__alt_data_end+0xfc009d20>
 c009d30:	00800044 	movi	r2,1
 c009d34:	f800283a 	ret
 c009d38:	10c00a0e 	bge	r2,r3,c009d64 <__any_on+0x70>
 c009d3c:	1085883a 	add	r2,r2,r2
 c009d40:	1085883a 	add	r2,r2,r2
 c009d44:	294007cc 	andi	r5,r5,31
 c009d48:	2087883a 	add	r3,r4,r2
 c009d4c:	283ff026 	beq	r5,zero,c009d10 <__alt_data_end+0xfc009d10>
 c009d50:	19800017 	ldw	r6,0(r3)
 c009d54:	3144d83a 	srl	r2,r6,r5
 c009d58:	114a983a 	sll	r5,r2,r5
 c009d5c:	317ff41e 	bne	r6,r5,c009d30 <__alt_data_end+0xfc009d30>
 c009d60:	003feb06 	br	c009d10 <__alt_data_end+0xfc009d10>
 c009d64:	1085883a 	add	r2,r2,r2
 c009d68:	1085883a 	add	r2,r2,r2
 c009d6c:	2087883a 	add	r3,r4,r2
 c009d70:	003fe706 	br	c009d10 <__alt_data_end+0xfc009d10>
 c009d74:	f800283a 	ret
 c009d78:	0005883a 	mov	r2,zero
 c009d7c:	f800283a 	ret

0c009d80 <_putc_r>:
 c009d80:	defffc04 	addi	sp,sp,-16
 c009d84:	dc000215 	stw	r16,8(sp)
 c009d88:	dfc00315 	stw	ra,12(sp)
 c009d8c:	2021883a 	mov	r16,r4
 c009d90:	20000226 	beq	r4,zero,c009d9c <_putc_r+0x1c>
 c009d94:	20800e17 	ldw	r2,56(r4)
 c009d98:	10001b26 	beq	r2,zero,c009e08 <_putc_r+0x88>
 c009d9c:	30800217 	ldw	r2,8(r6)
 c009da0:	10bfffc4 	addi	r2,r2,-1
 c009da4:	30800215 	stw	r2,8(r6)
 c009da8:	10000a16 	blt	r2,zero,c009dd4 <_putc_r+0x54>
 c009dac:	30800017 	ldw	r2,0(r6)
 c009db0:	11400005 	stb	r5,0(r2)
 c009db4:	30800017 	ldw	r2,0(r6)
 c009db8:	10c00044 	addi	r3,r2,1
 c009dbc:	30c00015 	stw	r3,0(r6)
 c009dc0:	10800003 	ldbu	r2,0(r2)
 c009dc4:	dfc00317 	ldw	ra,12(sp)
 c009dc8:	dc000217 	ldw	r16,8(sp)
 c009dcc:	dec00404 	addi	sp,sp,16
 c009dd0:	f800283a 	ret
 c009dd4:	30c00617 	ldw	r3,24(r6)
 c009dd8:	10c00616 	blt	r2,r3,c009df4 <_putc_r+0x74>
 c009ddc:	30800017 	ldw	r2,0(r6)
 c009de0:	00c00284 	movi	r3,10
 c009de4:	11400005 	stb	r5,0(r2)
 c009de8:	30800017 	ldw	r2,0(r6)
 c009dec:	11400003 	ldbu	r5,0(r2)
 c009df0:	28fff11e 	bne	r5,r3,c009db8 <__alt_data_end+0xfc009db8>
 c009df4:	8009883a 	mov	r4,r16
 c009df8:	dfc00317 	ldw	ra,12(sp)
 c009dfc:	dc000217 	ldw	r16,8(sp)
 c009e00:	dec00404 	addi	sp,sp,16
 c009e04:	c00be241 	jmpi	c00be24 <__swbuf_r>
 c009e08:	d9400015 	stw	r5,0(sp)
 c009e0c:	d9800115 	stw	r6,4(sp)
 c009e10:	c0072a00 	call	c0072a0 <__sinit>
 c009e14:	d9800117 	ldw	r6,4(sp)
 c009e18:	d9400017 	ldw	r5,0(sp)
 c009e1c:	003fdf06 	br	c009d9c <__alt_data_end+0xfc009d9c>

0c009e20 <putc>:
 c009e20:	00830074 	movhi	r2,3073
 c009e24:	defffc04 	addi	sp,sp,-16
 c009e28:	1091ca04 	addi	r2,r2,18216
 c009e2c:	dc000115 	stw	r16,4(sp)
 c009e30:	14000017 	ldw	r16,0(r2)
 c009e34:	dc400215 	stw	r17,8(sp)
 c009e38:	dfc00315 	stw	ra,12(sp)
 c009e3c:	2023883a 	mov	r17,r4
 c009e40:	80000226 	beq	r16,zero,c009e4c <putc+0x2c>
 c009e44:	80800e17 	ldw	r2,56(r16)
 c009e48:	10001a26 	beq	r2,zero,c009eb4 <putc+0x94>
 c009e4c:	28800217 	ldw	r2,8(r5)
 c009e50:	10bfffc4 	addi	r2,r2,-1
 c009e54:	28800215 	stw	r2,8(r5)
 c009e58:	10000b16 	blt	r2,zero,c009e88 <putc+0x68>
 c009e5c:	28800017 	ldw	r2,0(r5)
 c009e60:	14400005 	stb	r17,0(r2)
 c009e64:	28800017 	ldw	r2,0(r5)
 c009e68:	10c00044 	addi	r3,r2,1
 c009e6c:	28c00015 	stw	r3,0(r5)
 c009e70:	10800003 	ldbu	r2,0(r2)
 c009e74:	dfc00317 	ldw	ra,12(sp)
 c009e78:	dc400217 	ldw	r17,8(sp)
 c009e7c:	dc000117 	ldw	r16,4(sp)
 c009e80:	dec00404 	addi	sp,sp,16
 c009e84:	f800283a 	ret
 c009e88:	28c00617 	ldw	r3,24(r5)
 c009e8c:	10c00e16 	blt	r2,r3,c009ec8 <putc+0xa8>
 c009e90:	28800017 	ldw	r2,0(r5)
 c009e94:	01000284 	movi	r4,10
 c009e98:	14400005 	stb	r17,0(r2)
 c009e9c:	28800017 	ldw	r2,0(r5)
 c009ea0:	10c00003 	ldbu	r3,0(r2)
 c009ea4:	193ff01e 	bne	r3,r4,c009e68 <__alt_data_end+0xfc009e68>
 c009ea8:	280d883a 	mov	r6,r5
 c009eac:	180b883a 	mov	r5,r3
 c009eb0:	00000706 	br	c009ed0 <putc+0xb0>
 c009eb4:	8009883a 	mov	r4,r16
 c009eb8:	d9400015 	stw	r5,0(sp)
 c009ebc:	c0072a00 	call	c0072a0 <__sinit>
 c009ec0:	d9400017 	ldw	r5,0(sp)
 c009ec4:	003fe106 	br	c009e4c <__alt_data_end+0xfc009e4c>
 c009ec8:	280d883a 	mov	r6,r5
 c009ecc:	880b883a 	mov	r5,r17
 c009ed0:	8009883a 	mov	r4,r16
 c009ed4:	dfc00317 	ldw	ra,12(sp)
 c009ed8:	dc400217 	ldw	r17,8(sp)
 c009edc:	dc000117 	ldw	r16,4(sp)
 c009ee0:	dec00404 	addi	sp,sp,16
 c009ee4:	c00be241 	jmpi	c00be24 <__swbuf_r>

0c009ee8 <_realloc_r>:
 c009ee8:	defff604 	addi	sp,sp,-40
 c009eec:	dc800215 	stw	r18,8(sp)
 c009ef0:	dfc00915 	stw	ra,36(sp)
 c009ef4:	df000815 	stw	fp,32(sp)
 c009ef8:	ddc00715 	stw	r23,28(sp)
 c009efc:	dd800615 	stw	r22,24(sp)
 c009f00:	dd400515 	stw	r21,20(sp)
 c009f04:	dd000415 	stw	r20,16(sp)
 c009f08:	dcc00315 	stw	r19,12(sp)
 c009f0c:	dc400115 	stw	r17,4(sp)
 c009f10:	dc000015 	stw	r16,0(sp)
 c009f14:	3025883a 	mov	r18,r6
 c009f18:	2800b726 	beq	r5,zero,c00a1f8 <_realloc_r+0x310>
 c009f1c:	282b883a 	mov	r21,r5
 c009f20:	2029883a 	mov	r20,r4
 c009f24:	c0101700 	call	c010170 <__malloc_lock>
 c009f28:	a8bfff17 	ldw	r2,-4(r21)
 c009f2c:	043fff04 	movi	r16,-4
 c009f30:	90c002c4 	addi	r3,r18,11
 c009f34:	01000584 	movi	r4,22
 c009f38:	acfffe04 	addi	r19,r21,-8
 c009f3c:	1420703a 	and	r16,r2,r16
 c009f40:	20c0332e 	bgeu	r4,r3,c00a010 <_realloc_r+0x128>
 c009f44:	047ffe04 	movi	r17,-8
 c009f48:	1c62703a 	and	r17,r3,r17
 c009f4c:	8807883a 	mov	r3,r17
 c009f50:	88005816 	blt	r17,zero,c00a0b4 <_realloc_r+0x1cc>
 c009f54:	8c805736 	bltu	r17,r18,c00a0b4 <_realloc_r+0x1cc>
 c009f58:	80c0300e 	bge	r16,r3,c00a01c <_realloc_r+0x134>
 c009f5c:	07030074 	movhi	fp,3073
 c009f60:	e70c4104 	addi	fp,fp,12548
 c009f64:	e1c00217 	ldw	r7,8(fp)
 c009f68:	9c09883a 	add	r4,r19,r16
 c009f6c:	22000117 	ldw	r8,4(r4)
 c009f70:	21c06326 	beq	r4,r7,c00a100 <_realloc_r+0x218>
 c009f74:	017fff84 	movi	r5,-2
 c009f78:	414a703a 	and	r5,r8,r5
 c009f7c:	214b883a 	add	r5,r4,r5
 c009f80:	29800117 	ldw	r6,4(r5)
 c009f84:	3180004c 	andi	r6,r6,1
 c009f88:	30003f26 	beq	r6,zero,c00a088 <_realloc_r+0x1a0>
 c009f8c:	1080004c 	andi	r2,r2,1
 c009f90:	10008326 	beq	r2,zero,c00a1a0 <_realloc_r+0x2b8>
 c009f94:	900b883a 	mov	r5,r18
 c009f98:	a009883a 	mov	r4,r20
 c009f9c:	c00800c0 	call	c00800c <_malloc_r>
 c009fa0:	1025883a 	mov	r18,r2
 c009fa4:	10011e26 	beq	r2,zero,c00a420 <_realloc_r+0x538>
 c009fa8:	a93fff17 	ldw	r4,-4(r21)
 c009fac:	10fffe04 	addi	r3,r2,-8
 c009fb0:	00bfff84 	movi	r2,-2
 c009fb4:	2084703a 	and	r2,r4,r2
 c009fb8:	9885883a 	add	r2,r19,r2
 c009fbc:	1880ee26 	beq	r3,r2,c00a378 <_realloc_r+0x490>
 c009fc0:	81bfff04 	addi	r6,r16,-4
 c009fc4:	00800904 	movi	r2,36
 c009fc8:	1180b836 	bltu	r2,r6,c00a2ac <_realloc_r+0x3c4>
 c009fcc:	00c004c4 	movi	r3,19
 c009fd0:	19809636 	bltu	r3,r6,c00a22c <_realloc_r+0x344>
 c009fd4:	9005883a 	mov	r2,r18
 c009fd8:	a807883a 	mov	r3,r21
 c009fdc:	19000017 	ldw	r4,0(r3)
 c009fe0:	11000015 	stw	r4,0(r2)
 c009fe4:	19000117 	ldw	r4,4(r3)
 c009fe8:	11000115 	stw	r4,4(r2)
 c009fec:	18c00217 	ldw	r3,8(r3)
 c009ff0:	10c00215 	stw	r3,8(r2)
 c009ff4:	a80b883a 	mov	r5,r21
 c009ff8:	a009883a 	mov	r4,r20
 c009ffc:	c0074140 	call	c007414 <_free_r>
 c00a000:	a009883a 	mov	r4,r20
 c00a004:	c0101940 	call	c010194 <__malloc_unlock>
 c00a008:	9005883a 	mov	r2,r18
 c00a00c:	00001206 	br	c00a058 <_realloc_r+0x170>
 c00a010:	00c00404 	movi	r3,16
 c00a014:	1823883a 	mov	r17,r3
 c00a018:	003fce06 	br	c009f54 <__alt_data_end+0xfc009f54>
 c00a01c:	a825883a 	mov	r18,r21
 c00a020:	8445c83a 	sub	r2,r16,r17
 c00a024:	00c003c4 	movi	r3,15
 c00a028:	18802636 	bltu	r3,r2,c00a0c4 <_realloc_r+0x1dc>
 c00a02c:	99800117 	ldw	r6,4(r19)
 c00a030:	9c07883a 	add	r3,r19,r16
 c00a034:	3180004c 	andi	r6,r6,1
 c00a038:	3420b03a 	or	r16,r6,r16
 c00a03c:	9c000115 	stw	r16,4(r19)
 c00a040:	18800117 	ldw	r2,4(r3)
 c00a044:	10800054 	ori	r2,r2,1
 c00a048:	18800115 	stw	r2,4(r3)
 c00a04c:	a009883a 	mov	r4,r20
 c00a050:	c0101940 	call	c010194 <__malloc_unlock>
 c00a054:	9005883a 	mov	r2,r18
 c00a058:	dfc00917 	ldw	ra,36(sp)
 c00a05c:	df000817 	ldw	fp,32(sp)
 c00a060:	ddc00717 	ldw	r23,28(sp)
 c00a064:	dd800617 	ldw	r22,24(sp)
 c00a068:	dd400517 	ldw	r21,20(sp)
 c00a06c:	dd000417 	ldw	r20,16(sp)
 c00a070:	dcc00317 	ldw	r19,12(sp)
 c00a074:	dc800217 	ldw	r18,8(sp)
 c00a078:	dc400117 	ldw	r17,4(sp)
 c00a07c:	dc000017 	ldw	r16,0(sp)
 c00a080:	dec00a04 	addi	sp,sp,40
 c00a084:	f800283a 	ret
 c00a088:	017fff04 	movi	r5,-4
 c00a08c:	414a703a 	and	r5,r8,r5
 c00a090:	814d883a 	add	r6,r16,r5
 c00a094:	30c01f16 	blt	r6,r3,c00a114 <_realloc_r+0x22c>
 c00a098:	20800317 	ldw	r2,12(r4)
 c00a09c:	20c00217 	ldw	r3,8(r4)
 c00a0a0:	a825883a 	mov	r18,r21
 c00a0a4:	3021883a 	mov	r16,r6
 c00a0a8:	18800315 	stw	r2,12(r3)
 c00a0ac:	10c00215 	stw	r3,8(r2)
 c00a0b0:	003fdb06 	br	c00a020 <__alt_data_end+0xfc00a020>
 c00a0b4:	00800304 	movi	r2,12
 c00a0b8:	a0800015 	stw	r2,0(r20)
 c00a0bc:	0005883a 	mov	r2,zero
 c00a0c0:	003fe506 	br	c00a058 <__alt_data_end+0xfc00a058>
 c00a0c4:	98c00117 	ldw	r3,4(r19)
 c00a0c8:	9c4b883a 	add	r5,r19,r17
 c00a0cc:	11000054 	ori	r4,r2,1
 c00a0d0:	18c0004c 	andi	r3,r3,1
 c00a0d4:	1c62b03a 	or	r17,r3,r17
 c00a0d8:	9c400115 	stw	r17,4(r19)
 c00a0dc:	29000115 	stw	r4,4(r5)
 c00a0e0:	2885883a 	add	r2,r5,r2
 c00a0e4:	10c00117 	ldw	r3,4(r2)
 c00a0e8:	29400204 	addi	r5,r5,8
 c00a0ec:	a009883a 	mov	r4,r20
 c00a0f0:	18c00054 	ori	r3,r3,1
 c00a0f4:	10c00115 	stw	r3,4(r2)
 c00a0f8:	c0074140 	call	c007414 <_free_r>
 c00a0fc:	003fd306 	br	c00a04c <__alt_data_end+0xfc00a04c>
 c00a100:	017fff04 	movi	r5,-4
 c00a104:	414a703a 	and	r5,r8,r5
 c00a108:	89800404 	addi	r6,r17,16
 c00a10c:	8151883a 	add	r8,r16,r5
 c00a110:	4180590e 	bge	r8,r6,c00a278 <_realloc_r+0x390>
 c00a114:	1080004c 	andi	r2,r2,1
 c00a118:	103f9e1e 	bne	r2,zero,c009f94 <__alt_data_end+0xfc009f94>
 c00a11c:	adbffe17 	ldw	r22,-8(r21)
 c00a120:	00bfff04 	movi	r2,-4
 c00a124:	9dadc83a 	sub	r22,r19,r22
 c00a128:	b1800117 	ldw	r6,4(r22)
 c00a12c:	3084703a 	and	r2,r6,r2
 c00a130:	20002026 	beq	r4,zero,c00a1b4 <_realloc_r+0x2cc>
 c00a134:	80af883a 	add	r23,r16,r2
 c00a138:	b96f883a 	add	r23,r23,r5
 c00a13c:	21c05f26 	beq	r4,r7,c00a2bc <_realloc_r+0x3d4>
 c00a140:	b8c01c16 	blt	r23,r3,c00a1b4 <_realloc_r+0x2cc>
 c00a144:	20800317 	ldw	r2,12(r4)
 c00a148:	20c00217 	ldw	r3,8(r4)
 c00a14c:	81bfff04 	addi	r6,r16,-4
 c00a150:	01000904 	movi	r4,36
 c00a154:	18800315 	stw	r2,12(r3)
 c00a158:	10c00215 	stw	r3,8(r2)
 c00a15c:	b0c00217 	ldw	r3,8(r22)
 c00a160:	b0800317 	ldw	r2,12(r22)
 c00a164:	b4800204 	addi	r18,r22,8
 c00a168:	18800315 	stw	r2,12(r3)
 c00a16c:	10c00215 	stw	r3,8(r2)
 c00a170:	21801b36 	bltu	r4,r6,c00a1e0 <_realloc_r+0x2f8>
 c00a174:	008004c4 	movi	r2,19
 c00a178:	1180352e 	bgeu	r2,r6,c00a250 <_realloc_r+0x368>
 c00a17c:	a8800017 	ldw	r2,0(r21)
 c00a180:	b0800215 	stw	r2,8(r22)
 c00a184:	a8800117 	ldw	r2,4(r21)
 c00a188:	b0800315 	stw	r2,12(r22)
 c00a18c:	008006c4 	movi	r2,27
 c00a190:	11807f36 	bltu	r2,r6,c00a390 <_realloc_r+0x4a8>
 c00a194:	b0800404 	addi	r2,r22,16
 c00a198:	ad400204 	addi	r21,r21,8
 c00a19c:	00002d06 	br	c00a254 <_realloc_r+0x36c>
 c00a1a0:	adbffe17 	ldw	r22,-8(r21)
 c00a1a4:	00bfff04 	movi	r2,-4
 c00a1a8:	9dadc83a 	sub	r22,r19,r22
 c00a1ac:	b1000117 	ldw	r4,4(r22)
 c00a1b0:	2084703a 	and	r2,r4,r2
 c00a1b4:	b03f7726 	beq	r22,zero,c009f94 <__alt_data_end+0xfc009f94>
 c00a1b8:	80af883a 	add	r23,r16,r2
 c00a1bc:	b8ff7516 	blt	r23,r3,c009f94 <__alt_data_end+0xfc009f94>
 c00a1c0:	b0800317 	ldw	r2,12(r22)
 c00a1c4:	b0c00217 	ldw	r3,8(r22)
 c00a1c8:	81bfff04 	addi	r6,r16,-4
 c00a1cc:	01000904 	movi	r4,36
 c00a1d0:	18800315 	stw	r2,12(r3)
 c00a1d4:	10c00215 	stw	r3,8(r2)
 c00a1d8:	b4800204 	addi	r18,r22,8
 c00a1dc:	21bfe52e 	bgeu	r4,r6,c00a174 <__alt_data_end+0xfc00a174>
 c00a1e0:	a80b883a 	mov	r5,r21
 c00a1e4:	9009883a 	mov	r4,r18
 c00a1e8:	c008a440 	call	c008a44 <memmove>
 c00a1ec:	b821883a 	mov	r16,r23
 c00a1f0:	b027883a 	mov	r19,r22
 c00a1f4:	003f8a06 	br	c00a020 <__alt_data_end+0xfc00a020>
 c00a1f8:	300b883a 	mov	r5,r6
 c00a1fc:	dfc00917 	ldw	ra,36(sp)
 c00a200:	df000817 	ldw	fp,32(sp)
 c00a204:	ddc00717 	ldw	r23,28(sp)
 c00a208:	dd800617 	ldw	r22,24(sp)
 c00a20c:	dd400517 	ldw	r21,20(sp)
 c00a210:	dd000417 	ldw	r20,16(sp)
 c00a214:	dcc00317 	ldw	r19,12(sp)
 c00a218:	dc800217 	ldw	r18,8(sp)
 c00a21c:	dc400117 	ldw	r17,4(sp)
 c00a220:	dc000017 	ldw	r16,0(sp)
 c00a224:	dec00a04 	addi	sp,sp,40
 c00a228:	c00800c1 	jmpi	c00800c <_malloc_r>
 c00a22c:	a8c00017 	ldw	r3,0(r21)
 c00a230:	90c00015 	stw	r3,0(r18)
 c00a234:	a8c00117 	ldw	r3,4(r21)
 c00a238:	90c00115 	stw	r3,4(r18)
 c00a23c:	00c006c4 	movi	r3,27
 c00a240:	19804536 	bltu	r3,r6,c00a358 <_realloc_r+0x470>
 c00a244:	90800204 	addi	r2,r18,8
 c00a248:	a8c00204 	addi	r3,r21,8
 c00a24c:	003f6306 	br	c009fdc <__alt_data_end+0xfc009fdc>
 c00a250:	9005883a 	mov	r2,r18
 c00a254:	a8c00017 	ldw	r3,0(r21)
 c00a258:	b821883a 	mov	r16,r23
 c00a25c:	b027883a 	mov	r19,r22
 c00a260:	10c00015 	stw	r3,0(r2)
 c00a264:	a8c00117 	ldw	r3,4(r21)
 c00a268:	10c00115 	stw	r3,4(r2)
 c00a26c:	a8c00217 	ldw	r3,8(r21)
 c00a270:	10c00215 	stw	r3,8(r2)
 c00a274:	003f6a06 	br	c00a020 <__alt_data_end+0xfc00a020>
 c00a278:	9c67883a 	add	r19,r19,r17
 c00a27c:	4445c83a 	sub	r2,r8,r17
 c00a280:	e4c00215 	stw	r19,8(fp)
 c00a284:	10800054 	ori	r2,r2,1
 c00a288:	98800115 	stw	r2,4(r19)
 c00a28c:	a8bfff17 	ldw	r2,-4(r21)
 c00a290:	a009883a 	mov	r4,r20
 c00a294:	1080004c 	andi	r2,r2,1
 c00a298:	1462b03a 	or	r17,r2,r17
 c00a29c:	ac7fff15 	stw	r17,-4(r21)
 c00a2a0:	c0101940 	call	c010194 <__malloc_unlock>
 c00a2a4:	a805883a 	mov	r2,r21
 c00a2a8:	003f6b06 	br	c00a058 <__alt_data_end+0xfc00a058>
 c00a2ac:	a80b883a 	mov	r5,r21
 c00a2b0:	9009883a 	mov	r4,r18
 c00a2b4:	c008a440 	call	c008a44 <memmove>
 c00a2b8:	003f4e06 	br	c009ff4 <__alt_data_end+0xfc009ff4>
 c00a2bc:	89000404 	addi	r4,r17,16
 c00a2c0:	b93fbc16 	blt	r23,r4,c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00a2c4:	b0800317 	ldw	r2,12(r22)
 c00a2c8:	b0c00217 	ldw	r3,8(r22)
 c00a2cc:	81bfff04 	addi	r6,r16,-4
 c00a2d0:	01000904 	movi	r4,36
 c00a2d4:	18800315 	stw	r2,12(r3)
 c00a2d8:	10c00215 	stw	r3,8(r2)
 c00a2dc:	b4800204 	addi	r18,r22,8
 c00a2e0:	21804336 	bltu	r4,r6,c00a3f0 <_realloc_r+0x508>
 c00a2e4:	008004c4 	movi	r2,19
 c00a2e8:	11803f2e 	bgeu	r2,r6,c00a3e8 <_realloc_r+0x500>
 c00a2ec:	a8800017 	ldw	r2,0(r21)
 c00a2f0:	b0800215 	stw	r2,8(r22)
 c00a2f4:	a8800117 	ldw	r2,4(r21)
 c00a2f8:	b0800315 	stw	r2,12(r22)
 c00a2fc:	008006c4 	movi	r2,27
 c00a300:	11803f36 	bltu	r2,r6,c00a400 <_realloc_r+0x518>
 c00a304:	b0800404 	addi	r2,r22,16
 c00a308:	ad400204 	addi	r21,r21,8
 c00a30c:	a8c00017 	ldw	r3,0(r21)
 c00a310:	10c00015 	stw	r3,0(r2)
 c00a314:	a8c00117 	ldw	r3,4(r21)
 c00a318:	10c00115 	stw	r3,4(r2)
 c00a31c:	a8c00217 	ldw	r3,8(r21)
 c00a320:	10c00215 	stw	r3,8(r2)
 c00a324:	b447883a 	add	r3,r22,r17
 c00a328:	bc45c83a 	sub	r2,r23,r17
 c00a32c:	e0c00215 	stw	r3,8(fp)
 c00a330:	10800054 	ori	r2,r2,1
 c00a334:	18800115 	stw	r2,4(r3)
 c00a338:	b0800117 	ldw	r2,4(r22)
 c00a33c:	a009883a 	mov	r4,r20
 c00a340:	1080004c 	andi	r2,r2,1
 c00a344:	1462b03a 	or	r17,r2,r17
 c00a348:	b4400115 	stw	r17,4(r22)
 c00a34c:	c0101940 	call	c010194 <__malloc_unlock>
 c00a350:	9005883a 	mov	r2,r18
 c00a354:	003f4006 	br	c00a058 <__alt_data_end+0xfc00a058>
 c00a358:	a8c00217 	ldw	r3,8(r21)
 c00a35c:	90c00215 	stw	r3,8(r18)
 c00a360:	a8c00317 	ldw	r3,12(r21)
 c00a364:	90c00315 	stw	r3,12(r18)
 c00a368:	30801126 	beq	r6,r2,c00a3b0 <_realloc_r+0x4c8>
 c00a36c:	90800404 	addi	r2,r18,16
 c00a370:	a8c00404 	addi	r3,r21,16
 c00a374:	003f1906 	br	c009fdc <__alt_data_end+0xfc009fdc>
 c00a378:	90ffff17 	ldw	r3,-4(r18)
 c00a37c:	00bfff04 	movi	r2,-4
 c00a380:	a825883a 	mov	r18,r21
 c00a384:	1884703a 	and	r2,r3,r2
 c00a388:	80a1883a 	add	r16,r16,r2
 c00a38c:	003f2406 	br	c00a020 <__alt_data_end+0xfc00a020>
 c00a390:	a8800217 	ldw	r2,8(r21)
 c00a394:	b0800415 	stw	r2,16(r22)
 c00a398:	a8800317 	ldw	r2,12(r21)
 c00a39c:	b0800515 	stw	r2,20(r22)
 c00a3a0:	31000a26 	beq	r6,r4,c00a3cc <_realloc_r+0x4e4>
 c00a3a4:	b0800604 	addi	r2,r22,24
 c00a3a8:	ad400404 	addi	r21,r21,16
 c00a3ac:	003fa906 	br	c00a254 <__alt_data_end+0xfc00a254>
 c00a3b0:	a9000417 	ldw	r4,16(r21)
 c00a3b4:	90800604 	addi	r2,r18,24
 c00a3b8:	a8c00604 	addi	r3,r21,24
 c00a3bc:	91000415 	stw	r4,16(r18)
 c00a3c0:	a9000517 	ldw	r4,20(r21)
 c00a3c4:	91000515 	stw	r4,20(r18)
 c00a3c8:	003f0406 	br	c009fdc <__alt_data_end+0xfc009fdc>
 c00a3cc:	a8c00417 	ldw	r3,16(r21)
 c00a3d0:	ad400604 	addi	r21,r21,24
 c00a3d4:	b0800804 	addi	r2,r22,32
 c00a3d8:	b0c00615 	stw	r3,24(r22)
 c00a3dc:	a8ffff17 	ldw	r3,-4(r21)
 c00a3e0:	b0c00715 	stw	r3,28(r22)
 c00a3e4:	003f9b06 	br	c00a254 <__alt_data_end+0xfc00a254>
 c00a3e8:	9005883a 	mov	r2,r18
 c00a3ec:	003fc706 	br	c00a30c <__alt_data_end+0xfc00a30c>
 c00a3f0:	a80b883a 	mov	r5,r21
 c00a3f4:	9009883a 	mov	r4,r18
 c00a3f8:	c008a440 	call	c008a44 <memmove>
 c00a3fc:	003fc906 	br	c00a324 <__alt_data_end+0xfc00a324>
 c00a400:	a8800217 	ldw	r2,8(r21)
 c00a404:	b0800415 	stw	r2,16(r22)
 c00a408:	a8800317 	ldw	r2,12(r21)
 c00a40c:	b0800515 	stw	r2,20(r22)
 c00a410:	31000726 	beq	r6,r4,c00a430 <_realloc_r+0x548>
 c00a414:	b0800604 	addi	r2,r22,24
 c00a418:	ad400404 	addi	r21,r21,16
 c00a41c:	003fbb06 	br	c00a30c <__alt_data_end+0xfc00a30c>
 c00a420:	a009883a 	mov	r4,r20
 c00a424:	c0101940 	call	c010194 <__malloc_unlock>
 c00a428:	0005883a 	mov	r2,zero
 c00a42c:	003f0a06 	br	c00a058 <__alt_data_end+0xfc00a058>
 c00a430:	a8c00417 	ldw	r3,16(r21)
 c00a434:	ad400604 	addi	r21,r21,24
 c00a438:	b0800804 	addi	r2,r22,32
 c00a43c:	b0c00615 	stw	r3,24(r22)
 c00a440:	a8ffff17 	ldw	r3,-4(r21)
 c00a444:	b0c00715 	stw	r3,28(r22)
 c00a448:	003fb006 	br	c00a30c <__alt_data_end+0xfc00a30c>

0c00a44c <__fpclassifyd>:
 c00a44c:	00a00034 	movhi	r2,32768
 c00a450:	10bfffc4 	addi	r2,r2,-1
 c00a454:	2884703a 	and	r2,r5,r2
 c00a458:	10000726 	beq	r2,zero,c00a478 <__fpclassifyd+0x2c>
 c00a45c:	00fffc34 	movhi	r3,65520
 c00a460:	019ff834 	movhi	r6,32736
 c00a464:	28c7883a 	add	r3,r5,r3
 c00a468:	31bfffc4 	addi	r6,r6,-1
 c00a46c:	30c00536 	bltu	r6,r3,c00a484 <__fpclassifyd+0x38>
 c00a470:	00800104 	movi	r2,4
 c00a474:	f800283a 	ret
 c00a478:	2000021e 	bne	r4,zero,c00a484 <__fpclassifyd+0x38>
 c00a47c:	00800084 	movi	r2,2
 c00a480:	f800283a 	ret
 c00a484:	00dffc34 	movhi	r3,32752
 c00a488:	019ff834 	movhi	r6,32736
 c00a48c:	28cb883a 	add	r5,r5,r3
 c00a490:	31bfffc4 	addi	r6,r6,-1
 c00a494:	317ff62e 	bgeu	r6,r5,c00a470 <__alt_data_end+0xfc00a470>
 c00a498:	01400434 	movhi	r5,16
 c00a49c:	297fffc4 	addi	r5,r5,-1
 c00a4a0:	28800236 	bltu	r5,r2,c00a4ac <__fpclassifyd+0x60>
 c00a4a4:	008000c4 	movi	r2,3
 c00a4a8:	f800283a 	ret
 c00a4ac:	10c00226 	beq	r2,r3,c00a4b8 <__fpclassifyd+0x6c>
 c00a4b0:	0005883a 	mov	r2,zero
 c00a4b4:	f800283a 	ret
 c00a4b8:	2005003a 	cmpeq	r2,r4,zero
 c00a4bc:	f800283a 	ret

0c00a4c0 <_sbrk_r>:
 c00a4c0:	defffd04 	addi	sp,sp,-12
 c00a4c4:	dc000015 	stw	r16,0(sp)
 c00a4c8:	04030074 	movhi	r16,3073
 c00a4cc:	dc400115 	stw	r17,4(sp)
 c00a4d0:	8418b004 	addi	r16,r16,25280
 c00a4d4:	2023883a 	mov	r17,r4
 c00a4d8:	2809883a 	mov	r4,r5
 c00a4dc:	dfc00215 	stw	ra,8(sp)
 c00a4e0:	80000015 	stw	zero,0(r16)
 c00a4e4:	c01037c0 	call	c01037c <sbrk>
 c00a4e8:	00ffffc4 	movi	r3,-1
 c00a4ec:	10c00526 	beq	r2,r3,c00a504 <_sbrk_r+0x44>
 c00a4f0:	dfc00217 	ldw	ra,8(sp)
 c00a4f4:	dc400117 	ldw	r17,4(sp)
 c00a4f8:	dc000017 	ldw	r16,0(sp)
 c00a4fc:	dec00304 	addi	sp,sp,12
 c00a500:	f800283a 	ret
 c00a504:	80c00017 	ldw	r3,0(r16)
 c00a508:	183ff926 	beq	r3,zero,c00a4f0 <__alt_data_end+0xfc00a4f0>
 c00a50c:	88c00015 	stw	r3,0(r17)
 c00a510:	003ff706 	br	c00a4f0 <__alt_data_end+0xfc00a4f0>

0c00a514 <__sread>:
 c00a514:	defffe04 	addi	sp,sp,-8
 c00a518:	dc000015 	stw	r16,0(sp)
 c00a51c:	2821883a 	mov	r16,r5
 c00a520:	2940038f 	ldh	r5,14(r5)
 c00a524:	dfc00115 	stw	ra,4(sp)
 c00a528:	c00c5280 	call	c00c528 <_read_r>
 c00a52c:	10000716 	blt	r2,zero,c00a54c <__sread+0x38>
 c00a530:	80c01417 	ldw	r3,80(r16)
 c00a534:	1887883a 	add	r3,r3,r2
 c00a538:	80c01415 	stw	r3,80(r16)
 c00a53c:	dfc00117 	ldw	ra,4(sp)
 c00a540:	dc000017 	ldw	r16,0(sp)
 c00a544:	dec00204 	addi	sp,sp,8
 c00a548:	f800283a 	ret
 c00a54c:	80c0030b 	ldhu	r3,12(r16)
 c00a550:	18fbffcc 	andi	r3,r3,61439
 c00a554:	80c0030d 	sth	r3,12(r16)
 c00a558:	dfc00117 	ldw	ra,4(sp)
 c00a55c:	dc000017 	ldw	r16,0(sp)
 c00a560:	dec00204 	addi	sp,sp,8
 c00a564:	f800283a 	ret

0c00a568 <__seofread>:
 c00a568:	0005883a 	mov	r2,zero
 c00a56c:	f800283a 	ret

0c00a570 <__swrite>:
 c00a570:	2880030b 	ldhu	r2,12(r5)
 c00a574:	defffb04 	addi	sp,sp,-20
 c00a578:	dcc00315 	stw	r19,12(sp)
 c00a57c:	dc800215 	stw	r18,8(sp)
 c00a580:	dc400115 	stw	r17,4(sp)
 c00a584:	dc000015 	stw	r16,0(sp)
 c00a588:	dfc00415 	stw	ra,16(sp)
 c00a58c:	10c0400c 	andi	r3,r2,256
 c00a590:	2821883a 	mov	r16,r5
 c00a594:	2023883a 	mov	r17,r4
 c00a598:	3025883a 	mov	r18,r6
 c00a59c:	3827883a 	mov	r19,r7
 c00a5a0:	18000526 	beq	r3,zero,c00a5b8 <__swrite+0x48>
 c00a5a4:	2940038f 	ldh	r5,14(r5)
 c00a5a8:	01c00084 	movi	r7,2
 c00a5ac:	000d883a 	mov	r6,zero
 c00a5b0:	c00c4c80 	call	c00c4c8 <_lseek_r>
 c00a5b4:	8080030b 	ldhu	r2,12(r16)
 c00a5b8:	8140038f 	ldh	r5,14(r16)
 c00a5bc:	10bbffcc 	andi	r2,r2,61439
 c00a5c0:	980f883a 	mov	r7,r19
 c00a5c4:	900d883a 	mov	r6,r18
 c00a5c8:	8809883a 	mov	r4,r17
 c00a5cc:	8080030d 	sth	r2,12(r16)
 c00a5d0:	dfc00417 	ldw	ra,16(sp)
 c00a5d4:	dcc00317 	ldw	r19,12(sp)
 c00a5d8:	dc800217 	ldw	r18,8(sp)
 c00a5dc:	dc400117 	ldw	r17,4(sp)
 c00a5e0:	dc000017 	ldw	r16,0(sp)
 c00a5e4:	dec00504 	addi	sp,sp,20
 c00a5e8:	c00bf7c1 	jmpi	c00bf7c <_write_r>

0c00a5ec <__sseek>:
 c00a5ec:	defffe04 	addi	sp,sp,-8
 c00a5f0:	dc000015 	stw	r16,0(sp)
 c00a5f4:	2821883a 	mov	r16,r5
 c00a5f8:	2940038f 	ldh	r5,14(r5)
 c00a5fc:	dfc00115 	stw	ra,4(sp)
 c00a600:	c00c4c80 	call	c00c4c8 <_lseek_r>
 c00a604:	00ffffc4 	movi	r3,-1
 c00a608:	10c00826 	beq	r2,r3,c00a62c <__sseek+0x40>
 c00a60c:	80c0030b 	ldhu	r3,12(r16)
 c00a610:	80801415 	stw	r2,80(r16)
 c00a614:	18c40014 	ori	r3,r3,4096
 c00a618:	80c0030d 	sth	r3,12(r16)
 c00a61c:	dfc00117 	ldw	ra,4(sp)
 c00a620:	dc000017 	ldw	r16,0(sp)
 c00a624:	dec00204 	addi	sp,sp,8
 c00a628:	f800283a 	ret
 c00a62c:	80c0030b 	ldhu	r3,12(r16)
 c00a630:	18fbffcc 	andi	r3,r3,61439
 c00a634:	80c0030d 	sth	r3,12(r16)
 c00a638:	dfc00117 	ldw	ra,4(sp)
 c00a63c:	dc000017 	ldw	r16,0(sp)
 c00a640:	dec00204 	addi	sp,sp,8
 c00a644:	f800283a 	ret

0c00a648 <__sclose>:
 c00a648:	2940038f 	ldh	r5,14(r5)
 c00a64c:	c00bfdc1 	jmpi	c00bfdc <_close_r>

0c00a650 <strcmp>:
 c00a650:	2144b03a 	or	r2,r4,r5
 c00a654:	108000cc 	andi	r2,r2,3
 c00a658:	1000171e 	bne	r2,zero,c00a6b8 <strcmp+0x68>
 c00a65c:	20800017 	ldw	r2,0(r4)
 c00a660:	28c00017 	ldw	r3,0(r5)
 c00a664:	10c0141e 	bne	r2,r3,c00a6b8 <strcmp+0x68>
 c00a668:	027fbff4 	movhi	r9,65279
 c00a66c:	4a7fbfc4 	addi	r9,r9,-257
 c00a670:	0086303a 	nor	r3,zero,r2
 c00a674:	02202074 	movhi	r8,32897
 c00a678:	1245883a 	add	r2,r2,r9
 c00a67c:	42202004 	addi	r8,r8,-32640
 c00a680:	10c4703a 	and	r2,r2,r3
 c00a684:	1204703a 	and	r2,r2,r8
 c00a688:	10000226 	beq	r2,zero,c00a694 <strcmp+0x44>
 c00a68c:	00002306 	br	c00a71c <strcmp+0xcc>
 c00a690:	1000221e 	bne	r2,zero,c00a71c <strcmp+0xcc>
 c00a694:	21000104 	addi	r4,r4,4
 c00a698:	20c00017 	ldw	r3,0(r4)
 c00a69c:	29400104 	addi	r5,r5,4
 c00a6a0:	29800017 	ldw	r6,0(r5)
 c00a6a4:	1a4f883a 	add	r7,r3,r9
 c00a6a8:	00c4303a 	nor	r2,zero,r3
 c00a6ac:	3884703a 	and	r2,r7,r2
 c00a6b0:	1204703a 	and	r2,r2,r8
 c00a6b4:	19bff626 	beq	r3,r6,c00a690 <__alt_data_end+0xfc00a690>
 c00a6b8:	20800003 	ldbu	r2,0(r4)
 c00a6bc:	10c03fcc 	andi	r3,r2,255
 c00a6c0:	18c0201c 	xori	r3,r3,128
 c00a6c4:	18ffe004 	addi	r3,r3,-128
 c00a6c8:	18000c26 	beq	r3,zero,c00a6fc <strcmp+0xac>
 c00a6cc:	29800007 	ldb	r6,0(r5)
 c00a6d0:	19800326 	beq	r3,r6,c00a6e0 <strcmp+0x90>
 c00a6d4:	00001306 	br	c00a724 <strcmp+0xd4>
 c00a6d8:	29800007 	ldb	r6,0(r5)
 c00a6dc:	11800b1e 	bne	r2,r6,c00a70c <strcmp+0xbc>
 c00a6e0:	21000044 	addi	r4,r4,1
 c00a6e4:	20c00003 	ldbu	r3,0(r4)
 c00a6e8:	29400044 	addi	r5,r5,1
 c00a6ec:	18803fcc 	andi	r2,r3,255
 c00a6f0:	1080201c 	xori	r2,r2,128
 c00a6f4:	10bfe004 	addi	r2,r2,-128
 c00a6f8:	103ff71e 	bne	r2,zero,c00a6d8 <__alt_data_end+0xfc00a6d8>
 c00a6fc:	0007883a 	mov	r3,zero
 c00a700:	28800003 	ldbu	r2,0(r5)
 c00a704:	1885c83a 	sub	r2,r3,r2
 c00a708:	f800283a 	ret
 c00a70c:	28800003 	ldbu	r2,0(r5)
 c00a710:	18c03fcc 	andi	r3,r3,255
 c00a714:	1885c83a 	sub	r2,r3,r2
 c00a718:	f800283a 	ret
 c00a71c:	0005883a 	mov	r2,zero
 c00a720:	f800283a 	ret
 c00a724:	10c03fcc 	andi	r3,r2,255
 c00a728:	003ff506 	br	c00a700 <__alt_data_end+0xfc00a700>

0c00a72c <__sprint_r.part.0>:
 c00a72c:	28801917 	ldw	r2,100(r5)
 c00a730:	defff604 	addi	sp,sp,-40
 c00a734:	dd400515 	stw	r21,20(sp)
 c00a738:	dfc00915 	stw	ra,36(sp)
 c00a73c:	df000815 	stw	fp,32(sp)
 c00a740:	ddc00715 	stw	r23,28(sp)
 c00a744:	dd800615 	stw	r22,24(sp)
 c00a748:	dd000415 	stw	r20,16(sp)
 c00a74c:	dcc00315 	stw	r19,12(sp)
 c00a750:	dc800215 	stw	r18,8(sp)
 c00a754:	dc400115 	stw	r17,4(sp)
 c00a758:	dc000015 	stw	r16,0(sp)
 c00a75c:	1088000c 	andi	r2,r2,8192
 c00a760:	302b883a 	mov	r21,r6
 c00a764:	10002e26 	beq	r2,zero,c00a820 <__sprint_r.part.0+0xf4>
 c00a768:	30800217 	ldw	r2,8(r6)
 c00a76c:	35800017 	ldw	r22,0(r6)
 c00a770:	10002926 	beq	r2,zero,c00a818 <__sprint_r.part.0+0xec>
 c00a774:	2827883a 	mov	r19,r5
 c00a778:	2029883a 	mov	r20,r4
 c00a77c:	b5c00104 	addi	r23,r22,4
 c00a780:	04bfffc4 	movi	r18,-1
 c00a784:	bc400017 	ldw	r17,0(r23)
 c00a788:	b4000017 	ldw	r16,0(r22)
 c00a78c:	0039883a 	mov	fp,zero
 c00a790:	8822d0ba 	srli	r17,r17,2
 c00a794:	8800031e 	bne	r17,zero,c00a7a4 <__sprint_r.part.0+0x78>
 c00a798:	00001806 	br	c00a7fc <__sprint_r.part.0+0xd0>
 c00a79c:	84000104 	addi	r16,r16,4
 c00a7a0:	8f001526 	beq	r17,fp,c00a7f8 <__sprint_r.part.0+0xcc>
 c00a7a4:	81400017 	ldw	r5,0(r16)
 c00a7a8:	980d883a 	mov	r6,r19
 c00a7ac:	a009883a 	mov	r4,r20
 c00a7b0:	c00c3740 	call	c00c374 <_fputwc_r>
 c00a7b4:	e7000044 	addi	fp,fp,1
 c00a7b8:	14bff81e 	bne	r2,r18,c00a79c <__alt_data_end+0xfc00a79c>
 c00a7bc:	9005883a 	mov	r2,r18
 c00a7c0:	a8000215 	stw	zero,8(r21)
 c00a7c4:	a8000115 	stw	zero,4(r21)
 c00a7c8:	dfc00917 	ldw	ra,36(sp)
 c00a7cc:	df000817 	ldw	fp,32(sp)
 c00a7d0:	ddc00717 	ldw	r23,28(sp)
 c00a7d4:	dd800617 	ldw	r22,24(sp)
 c00a7d8:	dd400517 	ldw	r21,20(sp)
 c00a7dc:	dd000417 	ldw	r20,16(sp)
 c00a7e0:	dcc00317 	ldw	r19,12(sp)
 c00a7e4:	dc800217 	ldw	r18,8(sp)
 c00a7e8:	dc400117 	ldw	r17,4(sp)
 c00a7ec:	dc000017 	ldw	r16,0(sp)
 c00a7f0:	dec00a04 	addi	sp,sp,40
 c00a7f4:	f800283a 	ret
 c00a7f8:	a8800217 	ldw	r2,8(r21)
 c00a7fc:	8c63883a 	add	r17,r17,r17
 c00a800:	8c63883a 	add	r17,r17,r17
 c00a804:	1445c83a 	sub	r2,r2,r17
 c00a808:	a8800215 	stw	r2,8(r21)
 c00a80c:	b5800204 	addi	r22,r22,8
 c00a810:	bdc00204 	addi	r23,r23,8
 c00a814:	103fdb1e 	bne	r2,zero,c00a784 <__alt_data_end+0xfc00a784>
 c00a818:	0005883a 	mov	r2,zero
 c00a81c:	003fe806 	br	c00a7c0 <__alt_data_end+0xfc00a7c0>
 c00a820:	c0077240 	call	c007724 <__sfvwrite_r>
 c00a824:	003fe606 	br	c00a7c0 <__alt_data_end+0xfc00a7c0>

0c00a828 <__sprint_r>:
 c00a828:	30c00217 	ldw	r3,8(r6)
 c00a82c:	18000126 	beq	r3,zero,c00a834 <__sprint_r+0xc>
 c00a830:	c00a72c1 	jmpi	c00a72c <__sprint_r.part.0>
 c00a834:	30000115 	stw	zero,4(r6)
 c00a838:	0005883a 	mov	r2,zero
 c00a83c:	f800283a 	ret

0c00a840 <___vfiprintf_internal_r>:
 c00a840:	deffca04 	addi	sp,sp,-216
 c00a844:	dd403115 	stw	r21,196(sp)
 c00a848:	dfc03515 	stw	ra,212(sp)
 c00a84c:	df003415 	stw	fp,208(sp)
 c00a850:	ddc03315 	stw	r23,204(sp)
 c00a854:	dd803215 	stw	r22,200(sp)
 c00a858:	dd003015 	stw	r20,192(sp)
 c00a85c:	dcc02f15 	stw	r19,188(sp)
 c00a860:	dc802e15 	stw	r18,184(sp)
 c00a864:	dc402d15 	stw	r17,180(sp)
 c00a868:	dc002c15 	stw	r16,176(sp)
 c00a86c:	d9002115 	stw	r4,132(sp)
 c00a870:	d9402015 	stw	r5,128(sp)
 c00a874:	d9c02215 	stw	r7,136(sp)
 c00a878:	302b883a 	mov	r21,r6
 c00a87c:	20000226 	beq	r4,zero,c00a888 <___vfiprintf_internal_r+0x48>
 c00a880:	20800e17 	ldw	r2,56(r4)
 c00a884:	1000cf26 	beq	r2,zero,c00abc4 <___vfiprintf_internal_r+0x384>
 c00a888:	d8c02017 	ldw	r3,128(sp)
 c00a88c:	1880030b 	ldhu	r2,12(r3)
 c00a890:	10c8000c 	andi	r3,r2,8192
 c00a894:	1800071e 	bne	r3,zero,c00a8b4 <___vfiprintf_internal_r+0x74>
 c00a898:	d9402017 	ldw	r5,128(sp)
 c00a89c:	00f7ffc4 	movi	r3,-8193
 c00a8a0:	10880014 	ori	r2,r2,8192
 c00a8a4:	29001917 	ldw	r4,100(r5)
 c00a8a8:	2880030d 	sth	r2,12(r5)
 c00a8ac:	20c6703a 	and	r3,r4,r3
 c00a8b0:	28c01915 	stw	r3,100(r5)
 c00a8b4:	10c0020c 	andi	r3,r2,8
 c00a8b8:	1800a526 	beq	r3,zero,c00ab50 <___vfiprintf_internal_r+0x310>
 c00a8bc:	d9002017 	ldw	r4,128(sp)
 c00a8c0:	20c00417 	ldw	r3,16(r4)
 c00a8c4:	1800a226 	beq	r3,zero,c00ab50 <___vfiprintf_internal_r+0x310>
 c00a8c8:	1080068c 	andi	r2,r2,26
 c00a8cc:	00c00284 	movi	r3,10
 c00a8d0:	10c0a826 	beq	r2,r3,c00ab74 <___vfiprintf_internal_r+0x334>
 c00a8d4:	d9001a04 	addi	r4,sp,104
 c00a8d8:	d94019c4 	addi	r5,sp,103
 c00a8dc:	04830074 	movhi	r18,3073
 c00a8e0:	2145c83a 	sub	r2,r4,r5
 c00a8e4:	948ab904 	addi	r18,r18,10980
 c00a8e8:	d9001e15 	stw	r4,120(sp)
 c00a8ec:	d9401f15 	stw	r5,124(sp)
 c00a8f0:	dec01a15 	stw	sp,104(sp)
 c00a8f4:	d8001c15 	stw	zero,112(sp)
 c00a8f8:	d8001b15 	stw	zero,108(sp)
 c00a8fc:	d811883a 	mov	r8,sp
 c00a900:	d8002615 	stw	zero,152(sp)
 c00a904:	d8002415 	stw	zero,144(sp)
 c00a908:	d8802815 	stw	r2,160(sp)
 c00a90c:	a82d883a 	mov	r22,r21
 c00a910:	b0800007 	ldb	r2,0(r22)
 c00a914:	10040d26 	beq	r2,zero,c00b94c <___vfiprintf_internal_r+0x110c>
 c00a918:	00c00944 	movi	r3,37
 c00a91c:	b029883a 	mov	r20,r22
 c00a920:	10c0021e 	bne	r2,r3,c00a92c <___vfiprintf_internal_r+0xec>
 c00a924:	00001606 	br	c00a980 <___vfiprintf_internal_r+0x140>
 c00a928:	10c00326 	beq	r2,r3,c00a938 <___vfiprintf_internal_r+0xf8>
 c00a92c:	a5000044 	addi	r20,r20,1
 c00a930:	a0800007 	ldb	r2,0(r20)
 c00a934:	103ffc1e 	bne	r2,zero,c00a928 <__alt_data_end+0xfc00a928>
 c00a938:	a5a1c83a 	sub	r16,r20,r22
 c00a93c:	80001026 	beq	r16,zero,c00a980 <___vfiprintf_internal_r+0x140>
 c00a940:	d8c01c17 	ldw	r3,112(sp)
 c00a944:	d8801b17 	ldw	r2,108(sp)
 c00a948:	45800015 	stw	r22,0(r8)
 c00a94c:	80c7883a 	add	r3,r16,r3
 c00a950:	10800044 	addi	r2,r2,1
 c00a954:	44000115 	stw	r16,4(r8)
 c00a958:	d8c01c15 	stw	r3,112(sp)
 c00a95c:	d8801b15 	stw	r2,108(sp)
 c00a960:	010001c4 	movi	r4,7
 c00a964:	2080750e 	bge	r4,r2,c00ab3c <___vfiprintf_internal_r+0x2fc>
 c00a968:	1803951e 	bne	r3,zero,c00b7c0 <___vfiprintf_internal_r+0xf80>
 c00a96c:	d8c02417 	ldw	r3,144(sp)
 c00a970:	d8001b15 	stw	zero,108(sp)
 c00a974:	d811883a 	mov	r8,sp
 c00a978:	1c07883a 	add	r3,r3,r16
 c00a97c:	d8c02415 	stw	r3,144(sp)
 c00a980:	a0800007 	ldb	r2,0(r20)
 c00a984:	1002e026 	beq	r2,zero,c00b508 <___vfiprintf_internal_r+0xcc8>
 c00a988:	a5800044 	addi	r22,r20,1
 c00a98c:	a0c00047 	ldb	r3,1(r20)
 c00a990:	d8001d85 	stb	zero,118(sp)
 c00a994:	0027883a 	mov	r19,zero
 c00a998:	d8002305 	stb	zero,140(sp)
 c00a99c:	043fffc4 	movi	r16,-1
 c00a9a0:	d8002515 	stw	zero,148(sp)
 c00a9a4:	0023883a 	mov	r17,zero
 c00a9a8:	05001604 	movi	r20,88
 c00a9ac:	05400244 	movi	r21,9
 c00a9b0:	402f883a 	mov	r23,r8
 c00a9b4:	b5800044 	addi	r22,r22,1
 c00a9b8:	18bff804 	addi	r2,r3,-32
 c00a9bc:	a0827736 	bltu	r20,r2,c00b39c <___vfiprintf_internal_r+0xb5c>
 c00a9c0:	100490ba 	slli	r2,r2,2
 c00a9c4:	01030074 	movhi	r4,3073
 c00a9c8:	212a7604 	addi	r4,r4,-22056
 c00a9cc:	1105883a 	add	r2,r2,r4
 c00a9d0:	10800017 	ldw	r2,0(r2)
 c00a9d4:	1000683a 	jmp	r2
 c00a9d8:	0c00b09c 	xori	r16,at,706
 c00a9dc:	0c00b39c 	xori	r16,at,718
 c00a9e0:	0c00b39c 	xori	r16,at,718
 c00a9e4:	0c00b0b8 	rdprs	r16,at,706
 c00a9e8:	0c00b39c 	xori	r16,at,718
 c00a9ec:	0c00b39c 	xori	r16,at,718
 c00a9f0:	0c00b39c 	xori	r16,at,718
 c00a9f4:	0c00b39c 	xori	r16,at,718
 c00a9f8:	0c00b39c 	xori	r16,at,718
 c00a9fc:	0c00b39c 	xori	r16,at,718
 c00aa00:	0c00b2c0 	call	c00b2c <__alt_mem_onchip_memory2_0+0xc00b2c>
 c00aa04:	0c00b2e4 	muli	r16,at,715
 c00aa08:	0c00b39c 	xori	r16,at,718
 c00aa0c:	0c00abdc 	xori	r16,at,687
 c00aa10:	0c00b2f8 	rdprs	r16,at,715
 c00aa14:	0c00b39c 	xori	r16,at,718
 c00aa18:	0c00b0c4 	addi	r16,at,707
 c00aa1c:	0c00b0d0 	cmplti	r16,at,707
 c00aa20:	0c00b0d0 	cmplti	r16,at,707
 c00aa24:	0c00b0d0 	cmplti	r16,at,707
 c00aa28:	0c00b0d0 	cmplti	r16,at,707
 c00aa2c:	0c00b0d0 	cmplti	r16,at,707
 c00aa30:	0c00b0d0 	cmplti	r16,at,707
 c00aa34:	0c00b0d0 	cmplti	r16,at,707
 c00aa38:	0c00b0d0 	cmplti	r16,at,707
 c00aa3c:	0c00b0d0 	cmplti	r16,at,707
 c00aa40:	0c00b39c 	xori	r16,at,718
 c00aa44:	0c00b39c 	xori	r16,at,718
 c00aa48:	0c00b39c 	xori	r16,at,718
 c00aa4c:	0c00b39c 	xori	r16,at,718
 c00aa50:	0c00b39c 	xori	r16,at,718
 c00aa54:	0c00b39c 	xori	r16,at,718
 c00aa58:	0c00b39c 	xori	r16,at,718
 c00aa5c:	0c00b39c 	xori	r16,at,718
 c00aa60:	0c00b39c 	xori	r16,at,718
 c00aa64:	0c00b39c 	xori	r16,at,718
 c00aa68:	0c00b110 	cmplti	r16,at,708
 c00aa6c:	0c00b39c 	xori	r16,at,718
 c00aa70:	0c00b39c 	xori	r16,at,718
 c00aa74:	0c00b39c 	xori	r16,at,718
 c00aa78:	0c00b39c 	xori	r16,at,718
 c00aa7c:	0c00b39c 	xori	r16,at,718
 c00aa80:	0c00b39c 	xori	r16,at,718
 c00aa84:	0c00b39c 	xori	r16,at,718
 c00aa88:	0c00b39c 	xori	r16,at,718
 c00aa8c:	0c00b39c 	xori	r16,at,718
 c00aa90:	0c00b39c 	xori	r16,at,718
 c00aa94:	0c00b14c 	andi	r16,at,709
 c00aa98:	0c00b39c 	xori	r16,at,718
 c00aa9c:	0c00b39c 	xori	r16,at,718
 c00aaa0:	0c00b39c 	xori	r16,at,718
 c00aaa4:	0c00b39c 	xori	r16,at,718
 c00aaa8:	0c00b39c 	xori	r16,at,718
 c00aaac:	0c00b1a8 	cmpgeui	r16,at,710
 c00aab0:	0c00b39c 	xori	r16,at,718
 c00aab4:	0c00b39c 	xori	r16,at,718
 c00aab8:	0c00b21c 	xori	r16,at,712
 c00aabc:	0c00b39c 	xori	r16,at,718
 c00aac0:	0c00b39c 	xori	r16,at,718
 c00aac4:	0c00b39c 	xori	r16,at,718
 c00aac8:	0c00b39c 	xori	r16,at,718
 c00aacc:	0c00b39c 	xori	r16,at,718
 c00aad0:	0c00b39c 	xori	r16,at,718
 c00aad4:	0c00b39c 	xori	r16,at,718
 c00aad8:	0c00b39c 	xori	r16,at,718
 c00aadc:	0c00b39c 	xori	r16,at,718
 c00aae0:	0c00b39c 	xori	r16,at,718
 c00aae4:	0c00afc4 	addi	r16,at,703
 c00aae8:	0c00aff4 	orhi	r16,at,703
 c00aaec:	0c00b39c 	xori	r16,at,718
 c00aaf0:	0c00b39c 	xori	r16,at,718
 c00aaf4:	0c00b39c 	xori	r16,at,718
 c00aaf8:	0c00b344 	addi	r16,at,717
 c00aafc:	0c00aff4 	orhi	r16,at,703
 c00ab00:	0c00b39c 	xori	r16,at,718
 c00ab04:	0c00b39c 	xori	r16,at,718
 c00ab08:	0c00ae9c 	xori	r16,at,698
 c00ab0c:	0c00b39c 	xori	r16,at,718
 c00ab10:	0c00aeb0 	cmpltui	r16,at,698
 c00ab14:	0c00aee8 	cmpgeui	r16,at,699
 c00ab18:	0c00abe8 	cmpgeui	r16,at,687
 c00ab1c:	0c00ae90 	cmplti	r16,at,698
 c00ab20:	0c00b39c 	xori	r16,at,718
 c00ab24:	0c00b25c 	xori	r16,at,713
 c00ab28:	0c00b39c 	xori	r16,at,718
 c00ab2c:	0c00b2a8 	cmpgeui	r16,at,714
 c00ab30:	0c00b39c 	xori	r16,at,718
 c00ab34:	0c00b39c 	xori	r16,at,718
 c00ab38:	0c00af6c 	andhi	r16,at,701
 c00ab3c:	42000204 	addi	r8,r8,8
 c00ab40:	d8c02417 	ldw	r3,144(sp)
 c00ab44:	1c07883a 	add	r3,r3,r16
 c00ab48:	d8c02415 	stw	r3,144(sp)
 c00ab4c:	003f8c06 	br	c00a980 <__alt_data_end+0xfc00a980>
 c00ab50:	d9402017 	ldw	r5,128(sp)
 c00ab54:	d9002117 	ldw	r4,132(sp)
 c00ab58:	c0052940 	call	c005294 <__swsetup_r>
 c00ab5c:	1003c11e 	bne	r2,zero,c00ba64 <___vfiprintf_internal_r+0x1224>
 c00ab60:	d9402017 	ldw	r5,128(sp)
 c00ab64:	00c00284 	movi	r3,10
 c00ab68:	2880030b 	ldhu	r2,12(r5)
 c00ab6c:	1080068c 	andi	r2,r2,26
 c00ab70:	10ff581e 	bne	r2,r3,c00a8d4 <__alt_data_end+0xfc00a8d4>
 c00ab74:	d8c02017 	ldw	r3,128(sp)
 c00ab78:	1880038f 	ldh	r2,14(r3)
 c00ab7c:	103f5516 	blt	r2,zero,c00a8d4 <__alt_data_end+0xfc00a8d4>
 c00ab80:	d9c02217 	ldw	r7,136(sp)
 c00ab84:	d9002117 	ldw	r4,132(sp)
 c00ab88:	a80d883a 	mov	r6,r21
 c00ab8c:	180b883a 	mov	r5,r3
 c00ab90:	c00bd680 	call	c00bd68 <__sbprintf>
 c00ab94:	dfc03517 	ldw	ra,212(sp)
 c00ab98:	df003417 	ldw	fp,208(sp)
 c00ab9c:	ddc03317 	ldw	r23,204(sp)
 c00aba0:	dd803217 	ldw	r22,200(sp)
 c00aba4:	dd403117 	ldw	r21,196(sp)
 c00aba8:	dd003017 	ldw	r20,192(sp)
 c00abac:	dcc02f17 	ldw	r19,188(sp)
 c00abb0:	dc802e17 	ldw	r18,184(sp)
 c00abb4:	dc402d17 	ldw	r17,180(sp)
 c00abb8:	dc002c17 	ldw	r16,176(sp)
 c00abbc:	dec03604 	addi	sp,sp,216
 c00abc0:	f800283a 	ret
 c00abc4:	c0072a00 	call	c0072a0 <__sinit>
 c00abc8:	003f2f06 	br	c00a888 <__alt_data_end+0xfc00a888>
 c00abcc:	d8c02517 	ldw	r3,148(sp)
 c00abd0:	d8802215 	stw	r2,136(sp)
 c00abd4:	00c7c83a 	sub	r3,zero,r3
 c00abd8:	d8c02515 	stw	r3,148(sp)
 c00abdc:	8c400114 	ori	r17,r17,4
 c00abe0:	b0c00007 	ldb	r3,0(r22)
 c00abe4:	003f7306 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00abe8:	00800c04 	movi	r2,48
 c00abec:	d9402217 	ldw	r5,136(sp)
 c00abf0:	d8801d05 	stb	r2,116(sp)
 c00abf4:	00801e04 	movi	r2,120
 c00abf8:	d8801d45 	stb	r2,117(sp)
 c00abfc:	d8001d85 	stb	zero,118(sp)
 c00ac00:	b811883a 	mov	r8,r23
 c00ac04:	28c00104 	addi	r3,r5,4
 c00ac08:	2cc00017 	ldw	r19,0(r5)
 c00ac0c:	0029883a 	mov	r20,zero
 c00ac10:	88800094 	ori	r2,r17,2
 c00ac14:	80032516 	blt	r16,zero,c00b8ac <___vfiprintf_internal_r+0x106c>
 c00ac18:	00bfdfc4 	movi	r2,-129
 c00ac1c:	88a2703a 	and	r17,r17,r2
 c00ac20:	d8c02215 	stw	r3,136(sp)
 c00ac24:	8c400094 	ori	r17,r17,2
 c00ac28:	98032a1e 	bne	r19,zero,c00b8d4 <___vfiprintf_internal_r+0x1094>
 c00ac2c:	00830074 	movhi	r2,3073
 c00ac30:	108a5804 	addi	r2,r2,10592
 c00ac34:	d8802615 	stw	r2,152(sp)
 c00ac38:	002b883a 	mov	r21,zero
 c00ac3c:	8001741e 	bne	r16,zero,c00b210 <___vfiprintf_internal_r+0x9d0>
 c00ac40:	0021883a 	mov	r16,zero
 c00ac44:	0029883a 	mov	r20,zero
 c00ac48:	ddc01a04 	addi	r23,sp,104
 c00ac4c:	8027883a 	mov	r19,r16
 c00ac50:	8500010e 	bge	r16,r20,c00ac58 <___vfiprintf_internal_r+0x418>
 c00ac54:	a027883a 	mov	r19,r20
 c00ac58:	ad403fcc 	andi	r21,r21,255
 c00ac5c:	ad40201c 	xori	r21,r21,128
 c00ac60:	ad7fe004 	addi	r21,r21,-128
 c00ac64:	a8000126 	beq	r21,zero,c00ac6c <___vfiprintf_internal_r+0x42c>
 c00ac68:	9cc00044 	addi	r19,r19,1
 c00ac6c:	89c0008c 	andi	r7,r17,2
 c00ac70:	38000126 	beq	r7,zero,c00ac78 <___vfiprintf_internal_r+0x438>
 c00ac74:	9cc00084 	addi	r19,r19,2
 c00ac78:	88c0210c 	andi	r3,r17,132
 c00ac7c:	1801dd1e 	bne	r3,zero,c00b3f4 <___vfiprintf_internal_r+0xbb4>
 c00ac80:	d9402517 	ldw	r5,148(sp)
 c00ac84:	2cebc83a 	sub	r21,r5,r19
 c00ac88:	0541da0e 	bge	zero,r21,c00b3f4 <___vfiprintf_internal_r+0xbb4>
 c00ac8c:	07000404 	movi	fp,16
 c00ac90:	d8801c17 	ldw	r2,112(sp)
 c00ac94:	e543be0e 	bge	fp,r21,c00bb90 <___vfiprintf_internal_r+0x1350>
 c00ac98:	01430074 	movhi	r5,3073
 c00ac9c:	294abd04 	addi	r5,r5,10996
 c00aca0:	dc002715 	stw	r16,156(sp)
 c00aca4:	d9801b17 	ldw	r6,108(sp)
 c00aca8:	a821883a 	mov	r16,r21
 c00acac:	d9402315 	stw	r5,140(sp)
 c00acb0:	028001c4 	movi	r10,7
 c00acb4:	d9c02915 	stw	r7,164(sp)
 c00acb8:	182b883a 	mov	r21,r3
 c00acbc:	00000506 	br	c00acd4 <___vfiprintf_internal_r+0x494>
 c00acc0:	31000084 	addi	r4,r6,2
 c00acc4:	42000204 	addi	r8,r8,8
 c00acc8:	180d883a 	mov	r6,r3
 c00accc:	843ffc04 	addi	r16,r16,-16
 c00acd0:	e4000f0e 	bge	fp,r16,c00ad10 <___vfiprintf_internal_r+0x4d0>
 c00acd4:	01030074 	movhi	r4,3073
 c00acd8:	10800404 	addi	r2,r2,16
 c00acdc:	30c00044 	addi	r3,r6,1
 c00ace0:	210abd04 	addi	r4,r4,10996
 c00ace4:	41000015 	stw	r4,0(r8)
 c00ace8:	47000115 	stw	fp,4(r8)
 c00acec:	d8801c15 	stw	r2,112(sp)
 c00acf0:	d8c01b15 	stw	r3,108(sp)
 c00acf4:	50fff20e 	bge	r10,r3,c00acc0 <__alt_data_end+0xfc00acc0>
 c00acf8:	1001b21e 	bne	r2,zero,c00b3c4 <___vfiprintf_internal_r+0xb84>
 c00acfc:	843ffc04 	addi	r16,r16,-16
 c00ad00:	000d883a 	mov	r6,zero
 c00ad04:	01000044 	movi	r4,1
 c00ad08:	d811883a 	mov	r8,sp
 c00ad0c:	e43ff116 	blt	fp,r16,c00acd4 <__alt_data_end+0xfc00acd4>
 c00ad10:	a807883a 	mov	r3,r21
 c00ad14:	d9c02917 	ldw	r7,164(sp)
 c00ad18:	802b883a 	mov	r21,r16
 c00ad1c:	dc002717 	ldw	r16,156(sp)
 c00ad20:	d9402317 	ldw	r5,140(sp)
 c00ad24:	a885883a 	add	r2,r21,r2
 c00ad28:	45400115 	stw	r21,4(r8)
 c00ad2c:	41400015 	stw	r5,0(r8)
 c00ad30:	d8801c15 	stw	r2,112(sp)
 c00ad34:	d9001b15 	stw	r4,108(sp)
 c00ad38:	014001c4 	movi	r5,7
 c00ad3c:	29026216 	blt	r5,r4,c00b6c8 <___vfiprintf_internal_r+0xe88>
 c00ad40:	d9801d87 	ldb	r6,118(sp)
 c00ad44:	42000204 	addi	r8,r8,8
 c00ad48:	21400044 	addi	r5,r4,1
 c00ad4c:	3001ae1e 	bne	r6,zero,c00b408 <___vfiprintf_internal_r+0xbc8>
 c00ad50:	3801bb26 	beq	r7,zero,c00b440 <___vfiprintf_internal_r+0xc00>
 c00ad54:	d9001d04 	addi	r4,sp,116
 c00ad58:	10800084 	addi	r2,r2,2
 c00ad5c:	41000015 	stw	r4,0(r8)
 c00ad60:	01000084 	movi	r4,2
 c00ad64:	41000115 	stw	r4,4(r8)
 c00ad68:	d8801c15 	stw	r2,112(sp)
 c00ad6c:	d9401b15 	stw	r5,108(sp)
 c00ad70:	010001c4 	movi	r4,7
 c00ad74:	2142680e 	bge	r4,r5,c00b718 <___vfiprintf_internal_r+0xed8>
 c00ad78:	1002b11e 	bne	r2,zero,c00b840 <___vfiprintf_internal_r+0x1000>
 c00ad7c:	01802004 	movi	r6,128
 c00ad80:	01400044 	movi	r5,1
 c00ad84:	0009883a 	mov	r4,zero
 c00ad88:	d811883a 	mov	r8,sp
 c00ad8c:	1981ae1e 	bne	r3,r6,c00b448 <___vfiprintf_internal_r+0xc08>
 c00ad90:	d8c02517 	ldw	r3,148(sp)
 c00ad94:	1cf9c83a 	sub	fp,r3,r19
 c00ad98:	0701ab0e 	bge	zero,fp,c00b448 <___vfiprintf_internal_r+0xc08>
 c00ad9c:	05400404 	movi	r21,16
 c00ada0:	af03a90e 	bge	r21,fp,c00bc48 <___vfiprintf_internal_r+0x1408>
 c00ada4:	01430074 	movhi	r5,3073
 c00ada8:	294ab904 	addi	r5,r5,10980
 c00adac:	d9402315 	stw	r5,140(sp)
 c00adb0:	01c001c4 	movi	r7,7
 c00adb4:	00000506 	br	c00adcc <___vfiprintf_internal_r+0x58c>
 c00adb8:	21800084 	addi	r6,r4,2
 c00adbc:	42000204 	addi	r8,r8,8
 c00adc0:	1809883a 	mov	r4,r3
 c00adc4:	e73ffc04 	addi	fp,fp,-16
 c00adc8:	af000d0e 	bge	r21,fp,c00ae00 <___vfiprintf_internal_r+0x5c0>
 c00adcc:	10800404 	addi	r2,r2,16
 c00add0:	20c00044 	addi	r3,r4,1
 c00add4:	44800015 	stw	r18,0(r8)
 c00add8:	45400115 	stw	r21,4(r8)
 c00addc:	d8801c15 	stw	r2,112(sp)
 c00ade0:	d8c01b15 	stw	r3,108(sp)
 c00ade4:	38fff40e 	bge	r7,r3,c00adb8 <__alt_data_end+0xfc00adb8>
 c00ade8:	10022b1e 	bne	r2,zero,c00b698 <___vfiprintf_internal_r+0xe58>
 c00adec:	e73ffc04 	addi	fp,fp,-16
 c00adf0:	01800044 	movi	r6,1
 c00adf4:	0009883a 	mov	r4,zero
 c00adf8:	d811883a 	mov	r8,sp
 c00adfc:	af3ff316 	blt	r21,fp,c00adcc <__alt_data_end+0xfc00adcc>
 c00ae00:	d8c02317 	ldw	r3,140(sp)
 c00ae04:	1705883a 	add	r2,r2,fp
 c00ae08:	47000115 	stw	fp,4(r8)
 c00ae0c:	40c00015 	stw	r3,0(r8)
 c00ae10:	d8801c15 	stw	r2,112(sp)
 c00ae14:	d9801b15 	stw	r6,108(sp)
 c00ae18:	00c001c4 	movi	r3,7
 c00ae1c:	19829416 	blt	r3,r6,c00b870 <___vfiprintf_internal_r+0x1030>
 c00ae20:	8521c83a 	sub	r16,r16,r20
 c00ae24:	42000204 	addi	r8,r8,8
 c00ae28:	31400044 	addi	r5,r6,1
 c00ae2c:	3009883a 	mov	r4,r6
 c00ae30:	04018716 	blt	zero,r16,c00b450 <___vfiprintf_internal_r+0xc10>
 c00ae34:	a085883a 	add	r2,r20,r2
 c00ae38:	45c00015 	stw	r23,0(r8)
 c00ae3c:	45000115 	stw	r20,4(r8)
 c00ae40:	d8801c15 	stw	r2,112(sp)
 c00ae44:	d9401b15 	stw	r5,108(sp)
 c00ae48:	00c001c4 	movi	r3,7
 c00ae4c:	1941c20e 	bge	r3,r5,c00b558 <___vfiprintf_internal_r+0xd18>
 c00ae50:	1002531e 	bne	r2,zero,c00b7a0 <___vfiprintf_internal_r+0xf60>
 c00ae54:	d8001b15 	stw	zero,108(sp)
 c00ae58:	8c40010c 	andi	r17,r17,4
 c00ae5c:	88023226 	beq	r17,zero,c00b728 <___vfiprintf_internal_r+0xee8>
 c00ae60:	d9002517 	ldw	r4,148(sp)
 c00ae64:	24e3c83a 	sub	r17,r4,r19
 c00ae68:	04432916 	blt	zero,r17,c00bb10 <___vfiprintf_internal_r+0x12d0>
 c00ae6c:	d8802517 	ldw	r2,148(sp)
 c00ae70:	14c0010e 	bge	r2,r19,c00ae78 <___vfiprintf_internal_r+0x638>
 c00ae74:	9805883a 	mov	r2,r19
 c00ae78:	d8c02417 	ldw	r3,144(sp)
 c00ae7c:	1887883a 	add	r3,r3,r2
 c00ae80:	d8c02415 	stw	r3,144(sp)
 c00ae84:	d8001b15 	stw	zero,108(sp)
 c00ae88:	d811883a 	mov	r8,sp
 c00ae8c:	003ea006 	br	c00a910 <__alt_data_end+0xfc00a910>
 c00ae90:	8c400814 	ori	r17,r17,32
 c00ae94:	b0c00007 	ldb	r3,0(r22)
 c00ae98:	003ec606 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00ae9c:	b0c00007 	ldb	r3,0(r22)
 c00aea0:	00801b04 	movi	r2,108
 c00aea4:	18832026 	beq	r3,r2,c00bb28 <___vfiprintf_internal_r+0x12e8>
 c00aea8:	8c400414 	ori	r17,r17,16
 c00aeac:	003ec106 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00aeb0:	9cc03fcc 	andi	r19,r19,255
 c00aeb4:	b811883a 	mov	r8,r23
 c00aeb8:	9803981e 	bne	r19,zero,c00bd1c <___vfiprintf_internal_r+0x14dc>
 c00aebc:	8880080c 	andi	r2,r17,32
 c00aec0:	1002be26 	beq	r2,zero,c00b9bc <___vfiprintf_internal_r+0x117c>
 c00aec4:	d9002217 	ldw	r4,136(sp)
 c00aec8:	d9402417 	ldw	r5,144(sp)
 c00aecc:	20800017 	ldw	r2,0(r4)
 c00aed0:	2807d7fa 	srai	r3,r5,31
 c00aed4:	21000104 	addi	r4,r4,4
 c00aed8:	d9002215 	stw	r4,136(sp)
 c00aedc:	11400015 	stw	r5,0(r2)
 c00aee0:	10c00115 	stw	r3,4(r2)
 c00aee4:	003e8a06 	br	c00a910 <__alt_data_end+0xfc00a910>
 c00aee8:	9cc03fcc 	andi	r19,r19,255
 c00aeec:	b811883a 	mov	r8,r23
 c00aef0:	9803871e 	bne	r19,zero,c00bd10 <___vfiprintf_internal_r+0x14d0>
 c00aef4:	8880080c 	andi	r2,r17,32
 c00aef8:	10009a26 	beq	r2,zero,c00b164 <___vfiprintf_internal_r+0x924>
 c00aefc:	d9002217 	ldw	r4,136(sp)
 c00af00:	d8001d85 	stb	zero,118(sp)
 c00af04:	20800204 	addi	r2,r4,8
 c00af08:	24c00017 	ldw	r19,0(r4)
 c00af0c:	25000117 	ldw	r20,4(r4)
 c00af10:	8002a416 	blt	r16,zero,c00b9a4 <___vfiprintf_internal_r+0x1164>
 c00af14:	013fdfc4 	movi	r4,-129
 c00af18:	9d06b03a 	or	r3,r19,r20
 c00af1c:	d8802215 	stw	r2,136(sp)
 c00af20:	8922703a 	and	r17,r17,r4
 c00af24:	18009b26 	beq	r3,zero,c00b194 <___vfiprintf_internal_r+0x954>
 c00af28:	002b883a 	mov	r21,zero
 c00af2c:	ddc01a04 	addi	r23,sp,104
 c00af30:	9806d0fa 	srli	r3,r19,3
 c00af34:	a008977a 	slli	r4,r20,29
 c00af38:	a028d0fa 	srli	r20,r20,3
 c00af3c:	9cc001cc 	andi	r19,r19,7
 c00af40:	98800c04 	addi	r2,r19,48
 c00af44:	bdffffc4 	addi	r23,r23,-1
 c00af48:	20e6b03a 	or	r19,r4,r3
 c00af4c:	b8800005 	stb	r2,0(r23)
 c00af50:	9d06b03a 	or	r3,r19,r20
 c00af54:	183ff61e 	bne	r3,zero,c00af30 <__alt_data_end+0xfc00af30>
 c00af58:	88c0004c 	andi	r3,r17,1
 c00af5c:	18021f1e 	bne	r3,zero,c00b7dc <___vfiprintf_internal_r+0xf9c>
 c00af60:	d9401e17 	ldw	r5,120(sp)
 c00af64:	2de9c83a 	sub	r20,r5,r23
 c00af68:	003f3806 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00af6c:	9cc03fcc 	andi	r19,r19,255
 c00af70:	b811883a 	mov	r8,r23
 c00af74:	98034f1e 	bne	r19,zero,c00bcb4 <___vfiprintf_internal_r+0x1474>
 c00af78:	00830074 	movhi	r2,3073
 c00af7c:	108a5804 	addi	r2,r2,10592
 c00af80:	d8802615 	stw	r2,152(sp)
 c00af84:	8880080c 	andi	r2,r17,32
 c00af88:	1000ac26 	beq	r2,zero,c00b23c <___vfiprintf_internal_r+0x9fc>
 c00af8c:	d9002217 	ldw	r4,136(sp)
 c00af90:	24c00017 	ldw	r19,0(r4)
 c00af94:	25000117 	ldw	r20,4(r4)
 c00af98:	21000204 	addi	r4,r4,8
 c00af9c:	d9002215 	stw	r4,136(sp)
 c00afa0:	8880004c 	andi	r2,r17,1
 c00afa4:	1001e726 	beq	r2,zero,c00b744 <___vfiprintf_internal_r+0xf04>
 c00afa8:	9d04b03a 	or	r2,r19,r20
 c00afac:	10025c1e 	bne	r2,zero,c00b920 <___vfiprintf_internal_r+0x10e0>
 c00afb0:	d8001d85 	stb	zero,118(sp)
 c00afb4:	80024416 	blt	r16,zero,c00b8c8 <___vfiprintf_internal_r+0x1088>
 c00afb8:	00bfdfc4 	movi	r2,-129
 c00afbc:	88a2703a 	and	r17,r17,r2
 c00afc0:	003f1d06 	br	c00ac38 <__alt_data_end+0xfc00ac38>
 c00afc4:	d8c02217 	ldw	r3,136(sp)
 c00afc8:	04c00044 	movi	r19,1
 c00afcc:	b811883a 	mov	r8,r23
 c00afd0:	18800017 	ldw	r2,0(r3)
 c00afd4:	18c00104 	addi	r3,r3,4
 c00afd8:	d8001d85 	stb	zero,118(sp)
 c00afdc:	d8801005 	stb	r2,64(sp)
 c00afe0:	d8c02215 	stw	r3,136(sp)
 c00afe4:	9829883a 	mov	r20,r19
 c00afe8:	ddc01004 	addi	r23,sp,64
 c00afec:	0021883a 	mov	r16,zero
 c00aff0:	003f1e06 	br	c00ac6c <__alt_data_end+0xfc00ac6c>
 c00aff4:	9cc03fcc 	andi	r19,r19,255
 c00aff8:	b811883a 	mov	r8,r23
 c00affc:	9803331e 	bne	r19,zero,c00bccc <___vfiprintf_internal_r+0x148c>
 c00b000:	8880080c 	andi	r2,r17,32
 c00b004:	10004826 	beq	r2,zero,c00b128 <___vfiprintf_internal_r+0x8e8>
 c00b008:	d9002217 	ldw	r4,136(sp)
 c00b00c:	20800117 	ldw	r2,4(r4)
 c00b010:	24c00017 	ldw	r19,0(r4)
 c00b014:	21000204 	addi	r4,r4,8
 c00b018:	d9002215 	stw	r4,136(sp)
 c00b01c:	1029883a 	mov	r20,r2
 c00b020:	10024c16 	blt	r2,zero,c00b954 <___vfiprintf_internal_r+0x1114>
 c00b024:	dd401d83 	ldbu	r21,118(sp)
 c00b028:	80007116 	blt	r16,zero,c00b1f0 <___vfiprintf_internal_r+0x9b0>
 c00b02c:	00ffdfc4 	movi	r3,-129
 c00b030:	9d04b03a 	or	r2,r19,r20
 c00b034:	88e2703a 	and	r17,r17,r3
 c00b038:	1000d126 	beq	r2,zero,c00b380 <___vfiprintf_internal_r+0xb40>
 c00b03c:	a0023526 	beq	r20,zero,c00b914 <___vfiprintf_internal_r+0x10d4>
 c00b040:	ddc01a04 	addi	r23,sp,104
 c00b044:	4039883a 	mov	fp,r8
 c00b048:	9809883a 	mov	r4,r19
 c00b04c:	a00b883a 	mov	r5,r20
 c00b050:	01800284 	movi	r6,10
 c00b054:	000f883a 	mov	r7,zero
 c00b058:	c00cd6c0 	call	c00cd6c <__umoddi3>
 c00b05c:	10800c04 	addi	r2,r2,48
 c00b060:	bdffffc4 	addi	r23,r23,-1
 c00b064:	9809883a 	mov	r4,r19
 c00b068:	a00b883a 	mov	r5,r20
 c00b06c:	b8800005 	stb	r2,0(r23)
 c00b070:	01800284 	movi	r6,10
 c00b074:	000f883a 	mov	r7,zero
 c00b078:	c00c7700 	call	c00c770 <__udivdi3>
 c00b07c:	1027883a 	mov	r19,r2
 c00b080:	10c4b03a 	or	r2,r2,r3
 c00b084:	1829883a 	mov	r20,r3
 c00b088:	103fef1e 	bne	r2,zero,c00b048 <__alt_data_end+0xfc00b048>
 c00b08c:	d9001e17 	ldw	r4,120(sp)
 c00b090:	e011883a 	mov	r8,fp
 c00b094:	25e9c83a 	sub	r20,r4,r23
 c00b098:	003eec06 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00b09c:	d8802307 	ldb	r2,140(sp)
 c00b0a0:	1002361e 	bne	r2,zero,c00b97c <___vfiprintf_internal_r+0x113c>
 c00b0a4:	00c00804 	movi	r3,32
 c00b0a8:	d8c02305 	stb	r3,140(sp)
 c00b0ac:	04c00044 	movi	r19,1
 c00b0b0:	b0c00007 	ldb	r3,0(r22)
 c00b0b4:	003e3f06 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00b0b8:	8c400054 	ori	r17,r17,1
 c00b0bc:	b0c00007 	ldb	r3,0(r22)
 c00b0c0:	003e3c06 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00b0c4:	8c402014 	ori	r17,r17,128
 c00b0c8:	b0c00007 	ldb	r3,0(r22)
 c00b0cc:	003e3906 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00b0d0:	dc002715 	stw	r16,156(sp)
 c00b0d4:	d8002515 	stw	zero,148(sp)
 c00b0d8:	1f3ff404 	addi	fp,r3,-48
 c00b0dc:	0009883a 	mov	r4,zero
 c00b0e0:	b021883a 	mov	r16,r22
 c00b0e4:	01400284 	movi	r5,10
 c00b0e8:	c002cc00 	call	c002cc0 <__mulsi3>
 c00b0ec:	80c00007 	ldb	r3,0(r16)
 c00b0f0:	e089883a 	add	r4,fp,r2
 c00b0f4:	b5800044 	addi	r22,r22,1
 c00b0f8:	1f3ff404 	addi	fp,r3,-48
 c00b0fc:	b021883a 	mov	r16,r22
 c00b100:	af3ff82e 	bgeu	r21,fp,c00b0e4 <__alt_data_end+0xfc00b0e4>
 c00b104:	d9002515 	stw	r4,148(sp)
 c00b108:	dc002717 	ldw	r16,156(sp)
 c00b10c:	003e2a06 	br	c00a9b8 <__alt_data_end+0xfc00a9b8>
 c00b110:	9cc03fcc 	andi	r19,r19,255
 c00b114:	b811883a 	mov	r8,r23
 c00b118:	9802e91e 	bne	r19,zero,c00bcc0 <___vfiprintf_internal_r+0x1480>
 c00b11c:	8c400414 	ori	r17,r17,16
 c00b120:	8880080c 	andi	r2,r17,32
 c00b124:	103fb81e 	bne	r2,zero,c00b008 <__alt_data_end+0xfc00b008>
 c00b128:	8880040c 	andi	r2,r17,16
 c00b12c:	10022e26 	beq	r2,zero,c00b9e8 <___vfiprintf_internal_r+0x11a8>
 c00b130:	d9402217 	ldw	r5,136(sp)
 c00b134:	2cc00017 	ldw	r19,0(r5)
 c00b138:	29400104 	addi	r5,r5,4
 c00b13c:	d9402215 	stw	r5,136(sp)
 c00b140:	9829d7fa 	srai	r20,r19,31
 c00b144:	a005883a 	mov	r2,r20
 c00b148:	003fb506 	br	c00b020 <__alt_data_end+0xfc00b020>
 c00b14c:	9cc03fcc 	andi	r19,r19,255
 c00b150:	b811883a 	mov	r8,r23
 c00b154:	9802fa1e 	bne	r19,zero,c00bd40 <___vfiprintf_internal_r+0x1500>
 c00b158:	8c400414 	ori	r17,r17,16
 c00b15c:	8880080c 	andi	r2,r17,32
 c00b160:	103f661e 	bne	r2,zero,c00aefc <__alt_data_end+0xfc00aefc>
 c00b164:	8880040c 	andi	r2,r17,16
 c00b168:	10020626 	beq	r2,zero,c00b984 <___vfiprintf_internal_r+0x1144>
 c00b16c:	d9402217 	ldw	r5,136(sp)
 c00b170:	d8001d85 	stb	zero,118(sp)
 c00b174:	0029883a 	mov	r20,zero
 c00b178:	28800104 	addi	r2,r5,4
 c00b17c:	2cc00017 	ldw	r19,0(r5)
 c00b180:	80020816 	blt	r16,zero,c00b9a4 <___vfiprintf_internal_r+0x1164>
 c00b184:	00ffdfc4 	movi	r3,-129
 c00b188:	d8802215 	stw	r2,136(sp)
 c00b18c:	88e2703a 	and	r17,r17,r3
 c00b190:	983f651e 	bne	r19,zero,c00af28 <__alt_data_end+0xfc00af28>
 c00b194:	002b883a 	mov	r21,zero
 c00b198:	8002cf26 	beq	r16,zero,c00bcd8 <___vfiprintf_internal_r+0x1498>
 c00b19c:	0027883a 	mov	r19,zero
 c00b1a0:	0029883a 	mov	r20,zero
 c00b1a4:	003f6106 	br	c00af2c <__alt_data_end+0xfc00af2c>
 c00b1a8:	9cc03fcc 	andi	r19,r19,255
 c00b1ac:	b811883a 	mov	r8,r23
 c00b1b0:	9802e01e 	bne	r19,zero,c00bd34 <___vfiprintf_internal_r+0x14f4>
 c00b1b4:	8c400414 	ori	r17,r17,16
 c00b1b8:	8880080c 	andi	r2,r17,32
 c00b1bc:	1000641e 	bne	r2,zero,c00b350 <___vfiprintf_internal_r+0xb10>
 c00b1c0:	8880040c 	andi	r2,r17,16
 c00b1c4:	1001c81e 	bne	r2,zero,c00b8e8 <___vfiprintf_internal_r+0x10a8>
 c00b1c8:	8880100c 	andi	r2,r17,64
 c00b1cc:	d8001d85 	stb	zero,118(sp)
 c00b1d0:	1002281e 	bne	r2,zero,c00ba74 <___vfiprintf_internal_r+0x1234>
 c00b1d4:	d9002217 	ldw	r4,136(sp)
 c00b1d8:	0029883a 	mov	r20,zero
 c00b1dc:	20800104 	addi	r2,r4,4
 c00b1e0:	24c00017 	ldw	r19,0(r4)
 c00b1e4:	8001c60e 	bge	r16,zero,c00b900 <___vfiprintf_internal_r+0x10c0>
 c00b1e8:	d8802215 	stw	r2,136(sp)
 c00b1ec:	002b883a 	mov	r21,zero
 c00b1f0:	9d04b03a 	or	r2,r19,r20
 c00b1f4:	103f911e 	bne	r2,zero,c00b03c <__alt_data_end+0xfc00b03c>
 c00b1f8:	00800044 	movi	r2,1
 c00b1fc:	10803fcc 	andi	r2,r2,255
 c00b200:	00c00044 	movi	r3,1
 c00b204:	10c05f26 	beq	r2,r3,c00b384 <___vfiprintf_internal_r+0xb44>
 c00b208:	00c00084 	movi	r3,2
 c00b20c:	10ffe31e 	bne	r2,r3,c00b19c <__alt_data_end+0xfc00b19c>
 c00b210:	0027883a 	mov	r19,zero
 c00b214:	0029883a 	mov	r20,zero
 c00b218:	00015106 	br	c00b760 <___vfiprintf_internal_r+0xf20>
 c00b21c:	9cc03fcc 	andi	r19,r19,255
 c00b220:	b811883a 	mov	r8,r23
 c00b224:	9802c01e 	bne	r19,zero,c00bd28 <___vfiprintf_internal_r+0x14e8>
 c00b228:	01430074 	movhi	r5,3073
 c00b22c:	294a5304 	addi	r5,r5,10572
 c00b230:	d9402615 	stw	r5,152(sp)
 c00b234:	8880080c 	andi	r2,r17,32
 c00b238:	103f541e 	bne	r2,zero,c00af8c <__alt_data_end+0xfc00af8c>
 c00b23c:	8880040c 	andi	r2,r17,16
 c00b240:	1001f226 	beq	r2,zero,c00ba0c <___vfiprintf_internal_r+0x11cc>
 c00b244:	d9402217 	ldw	r5,136(sp)
 c00b248:	0029883a 	mov	r20,zero
 c00b24c:	2cc00017 	ldw	r19,0(r5)
 c00b250:	29400104 	addi	r5,r5,4
 c00b254:	d9402215 	stw	r5,136(sp)
 c00b258:	003f5106 	br	c00afa0 <__alt_data_end+0xfc00afa0>
 c00b25c:	d8c02217 	ldw	r3,136(sp)
 c00b260:	b811883a 	mov	r8,r23
 c00b264:	d8001d85 	stb	zero,118(sp)
 c00b268:	1dc00017 	ldw	r23,0(r3)
 c00b26c:	1f000104 	addi	fp,r3,4
 c00b270:	b8025926 	beq	r23,zero,c00bbd8 <___vfiprintf_internal_r+0x1398>
 c00b274:	80023316 	blt	r16,zero,c00bb44 <___vfiprintf_internal_r+0x1304>
 c00b278:	800d883a 	mov	r6,r16
 c00b27c:	000b883a 	mov	r5,zero
 c00b280:	b809883a 	mov	r4,r23
 c00b284:	da002a15 	stw	r8,168(sp)
 c00b288:	c0088180 	call	c008818 <memchr>
 c00b28c:	da002a17 	ldw	r8,168(sp)
 c00b290:	10026826 	beq	r2,zero,c00bc34 <___vfiprintf_internal_r+0x13f4>
 c00b294:	15e9c83a 	sub	r20,r2,r23
 c00b298:	dd401d83 	ldbu	r21,118(sp)
 c00b29c:	df002215 	stw	fp,136(sp)
 c00b2a0:	0021883a 	mov	r16,zero
 c00b2a4:	003e6906 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00b2a8:	9cc03fcc 	andi	r19,r19,255
 c00b2ac:	b811883a 	mov	r8,r23
 c00b2b0:	983fc126 	beq	r19,zero,c00b1b8 <__alt_data_end+0xfc00b1b8>
 c00b2b4:	d8c02303 	ldbu	r3,140(sp)
 c00b2b8:	d8c01d85 	stb	r3,118(sp)
 c00b2bc:	003fbe06 	br	c00b1b8 <__alt_data_end+0xfc00b1b8>
 c00b2c0:	d9002217 	ldw	r4,136(sp)
 c00b2c4:	d9402217 	ldw	r5,136(sp)
 c00b2c8:	21000017 	ldw	r4,0(r4)
 c00b2cc:	28800104 	addi	r2,r5,4
 c00b2d0:	d9002515 	stw	r4,148(sp)
 c00b2d4:	203e3d16 	blt	r4,zero,c00abcc <__alt_data_end+0xfc00abcc>
 c00b2d8:	d8802215 	stw	r2,136(sp)
 c00b2dc:	b0c00007 	ldb	r3,0(r22)
 c00b2e0:	003db406 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00b2e4:	00c00ac4 	movi	r3,43
 c00b2e8:	d8c02305 	stb	r3,140(sp)
 c00b2ec:	04c00044 	movi	r19,1
 c00b2f0:	b0c00007 	ldb	r3,0(r22)
 c00b2f4:	003daf06 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00b2f8:	b0c00007 	ldb	r3,0(r22)
 c00b2fc:	01000a84 	movi	r4,42
 c00b300:	b4000044 	addi	r16,r22,1
 c00b304:	19025e26 	beq	r3,r4,c00bc80 <___vfiprintf_internal_r+0x1440>
 c00b308:	1f3ff404 	addi	fp,r3,-48
 c00b30c:	0009883a 	mov	r4,zero
 c00b310:	af025236 	bltu	r21,fp,c00bc5c <___vfiprintf_internal_r+0x141c>
 c00b314:	01400284 	movi	r5,10
 c00b318:	c002cc00 	call	c002cc0 <__mulsi3>
 c00b31c:	80c00007 	ldb	r3,0(r16)
 c00b320:	1709883a 	add	r4,r2,fp
 c00b324:	85800044 	addi	r22,r16,1
 c00b328:	1f3ff404 	addi	fp,r3,-48
 c00b32c:	b021883a 	mov	r16,r22
 c00b330:	af3ff82e 	bgeu	r21,fp,c00b314 <__alt_data_end+0xfc00b314>
 c00b334:	2021883a 	mov	r16,r4
 c00b338:	203d9f0e 	bge	r4,zero,c00a9b8 <__alt_data_end+0xfc00a9b8>
 c00b33c:	043fffc4 	movi	r16,-1
 c00b340:	003d9d06 	br	c00a9b8 <__alt_data_end+0xfc00a9b8>
 c00b344:	8c401014 	ori	r17,r17,64
 c00b348:	b0c00007 	ldb	r3,0(r22)
 c00b34c:	003d9906 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00b350:	d9002217 	ldw	r4,136(sp)
 c00b354:	d8001d85 	stb	zero,118(sp)
 c00b358:	20c00204 	addi	r3,r4,8
 c00b35c:	24c00017 	ldw	r19,0(r4)
 c00b360:	25000117 	ldw	r20,4(r4)
 c00b364:	8001e716 	blt	r16,zero,c00bb04 <___vfiprintf_internal_r+0x12c4>
 c00b368:	013fdfc4 	movi	r4,-129
 c00b36c:	9d04b03a 	or	r2,r19,r20
 c00b370:	d8c02215 	stw	r3,136(sp)
 c00b374:	8922703a 	and	r17,r17,r4
 c00b378:	002b883a 	mov	r21,zero
 c00b37c:	103f2f1e 	bne	r2,zero,c00b03c <__alt_data_end+0xfc00b03c>
 c00b380:	803e2f26 	beq	r16,zero,c00ac40 <__alt_data_end+0xfc00ac40>
 c00b384:	0027883a 	mov	r19,zero
 c00b388:	9cc00c04 	addi	r19,r19,48
 c00b38c:	dcc019c5 	stb	r19,103(sp)
 c00b390:	dd002817 	ldw	r20,160(sp)
 c00b394:	ddc019c4 	addi	r23,sp,103
 c00b398:	003e2c06 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00b39c:	9cc03fcc 	andi	r19,r19,255
 c00b3a0:	b811883a 	mov	r8,r23
 c00b3a4:	9802571e 	bne	r19,zero,c00bd04 <___vfiprintf_internal_r+0x14c4>
 c00b3a8:	18005726 	beq	r3,zero,c00b508 <___vfiprintf_internal_r+0xcc8>
 c00b3ac:	04c00044 	movi	r19,1
 c00b3b0:	d8c01005 	stb	r3,64(sp)
 c00b3b4:	d8001d85 	stb	zero,118(sp)
 c00b3b8:	9829883a 	mov	r20,r19
 c00b3bc:	ddc01004 	addi	r23,sp,64
 c00b3c0:	003f0a06 	br	c00afec <__alt_data_end+0xfc00afec>
 c00b3c4:	d9402017 	ldw	r5,128(sp)
 c00b3c8:	d9002117 	ldw	r4,132(sp)
 c00b3cc:	d9801a04 	addi	r6,sp,104
 c00b3d0:	da802a15 	stw	r10,168(sp)
 c00b3d4:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b3d8:	da802a17 	ldw	r10,168(sp)
 c00b3dc:	1000501e 	bne	r2,zero,c00b520 <___vfiprintf_internal_r+0xce0>
 c00b3e0:	d9801b17 	ldw	r6,108(sp)
 c00b3e4:	d8801c17 	ldw	r2,112(sp)
 c00b3e8:	d811883a 	mov	r8,sp
 c00b3ec:	31000044 	addi	r4,r6,1
 c00b3f0:	003e3606 	br	c00accc <__alt_data_end+0xfc00accc>
 c00b3f4:	d9001b17 	ldw	r4,108(sp)
 c00b3f8:	d8801c17 	ldw	r2,112(sp)
 c00b3fc:	21400044 	addi	r5,r4,1
 c00b400:	d9801d87 	ldb	r6,118(sp)
 c00b404:	303e5226 	beq	r6,zero,c00ad50 <__alt_data_end+0xfc00ad50>
 c00b408:	01800044 	movi	r6,1
 c00b40c:	d9001d84 	addi	r4,sp,118
 c00b410:	1185883a 	add	r2,r2,r6
 c00b414:	41000015 	stw	r4,0(r8)
 c00b418:	41800115 	stw	r6,4(r8)
 c00b41c:	d8801c15 	stw	r2,112(sp)
 c00b420:	d9401b15 	stw	r5,108(sp)
 c00b424:	010001c4 	movi	r4,7
 c00b428:	2140b00e 	bge	r4,r5,c00b6ec <___vfiprintf_internal_r+0xeac>
 c00b42c:	1000f61e 	bne	r2,zero,c00b808 <___vfiprintf_internal_r+0xfc8>
 c00b430:	3800b31e 	bne	r7,zero,c00b700 <___vfiprintf_internal_r+0xec0>
 c00b434:	0009883a 	mov	r4,zero
 c00b438:	300b883a 	mov	r5,r6
 c00b43c:	d811883a 	mov	r8,sp
 c00b440:	01802004 	movi	r6,128
 c00b444:	19be5226 	beq	r3,r6,c00ad90 <__alt_data_end+0xfc00ad90>
 c00b448:	8521c83a 	sub	r16,r16,r20
 c00b44c:	043e790e 	bge	zero,r16,c00ae34 <__alt_data_end+0xfc00ae34>
 c00b450:	05400404 	movi	r21,16
 c00b454:	ac01b00e 	bge	r21,r16,c00bb18 <___vfiprintf_internal_r+0x12d8>
 c00b458:	01430074 	movhi	r5,3073
 c00b45c:	294ab904 	addi	r5,r5,10980
 c00b460:	d9402315 	stw	r5,140(sp)
 c00b464:	070001c4 	movi	fp,7
 c00b468:	00000506 	br	c00b480 <___vfiprintf_internal_r+0xc40>
 c00b46c:	21400084 	addi	r5,r4,2
 c00b470:	42000204 	addi	r8,r8,8
 c00b474:	1809883a 	mov	r4,r3
 c00b478:	843ffc04 	addi	r16,r16,-16
 c00b47c:	ac000d0e 	bge	r21,r16,c00b4b4 <___vfiprintf_internal_r+0xc74>
 c00b480:	10800404 	addi	r2,r2,16
 c00b484:	20c00044 	addi	r3,r4,1
 c00b488:	44800015 	stw	r18,0(r8)
 c00b48c:	45400115 	stw	r21,4(r8)
 c00b490:	d8801c15 	stw	r2,112(sp)
 c00b494:	d8c01b15 	stw	r3,108(sp)
 c00b498:	e0fff40e 	bge	fp,r3,c00b46c <__alt_data_end+0xfc00b46c>
 c00b49c:	1000101e 	bne	r2,zero,c00b4e0 <___vfiprintf_internal_r+0xca0>
 c00b4a0:	843ffc04 	addi	r16,r16,-16
 c00b4a4:	01400044 	movi	r5,1
 c00b4a8:	0009883a 	mov	r4,zero
 c00b4ac:	d811883a 	mov	r8,sp
 c00b4b0:	ac3ff316 	blt	r21,r16,c00b480 <__alt_data_end+0xfc00b480>
 c00b4b4:	d8c02317 	ldw	r3,140(sp)
 c00b4b8:	1405883a 	add	r2,r2,r16
 c00b4bc:	44000115 	stw	r16,4(r8)
 c00b4c0:	40c00015 	stw	r3,0(r8)
 c00b4c4:	d8801c15 	stw	r2,112(sp)
 c00b4c8:	d9401b15 	stw	r5,108(sp)
 c00b4cc:	00c001c4 	movi	r3,7
 c00b4d0:	19401916 	blt	r3,r5,c00b538 <___vfiprintf_internal_r+0xcf8>
 c00b4d4:	42000204 	addi	r8,r8,8
 c00b4d8:	29400044 	addi	r5,r5,1
 c00b4dc:	003e5506 	br	c00ae34 <__alt_data_end+0xfc00ae34>
 c00b4e0:	d9402017 	ldw	r5,128(sp)
 c00b4e4:	d9002117 	ldw	r4,132(sp)
 c00b4e8:	d9801a04 	addi	r6,sp,104
 c00b4ec:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b4f0:	10000b1e 	bne	r2,zero,c00b520 <___vfiprintf_internal_r+0xce0>
 c00b4f4:	d9001b17 	ldw	r4,108(sp)
 c00b4f8:	d8801c17 	ldw	r2,112(sp)
 c00b4fc:	d811883a 	mov	r8,sp
 c00b500:	21400044 	addi	r5,r4,1
 c00b504:	003fdc06 	br	c00b478 <__alt_data_end+0xfc00b478>
 c00b508:	d8801c17 	ldw	r2,112(sp)
 c00b50c:	10000426 	beq	r2,zero,c00b520 <___vfiprintf_internal_r+0xce0>
 c00b510:	d9402017 	ldw	r5,128(sp)
 c00b514:	d9002117 	ldw	r4,132(sp)
 c00b518:	d9801a04 	addi	r6,sp,104
 c00b51c:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b520:	d9402017 	ldw	r5,128(sp)
 c00b524:	2880030b 	ldhu	r2,12(r5)
 c00b528:	1080100c 	andi	r2,r2,64
 c00b52c:	10014d1e 	bne	r2,zero,c00ba64 <___vfiprintf_internal_r+0x1224>
 c00b530:	d8802417 	ldw	r2,144(sp)
 c00b534:	003d9706 	br	c00ab94 <__alt_data_end+0xfc00ab94>
 c00b538:	1000d21e 	bne	r2,zero,c00b884 <___vfiprintf_internal_r+0x1044>
 c00b53c:	00c00044 	movi	r3,1
 c00b540:	a005883a 	mov	r2,r20
 c00b544:	ddc00015 	stw	r23,0(sp)
 c00b548:	dd000115 	stw	r20,4(sp)
 c00b54c:	dd001c15 	stw	r20,112(sp)
 c00b550:	d8c01b15 	stw	r3,108(sp)
 c00b554:	d811883a 	mov	r8,sp
 c00b558:	42000204 	addi	r8,r8,8
 c00b55c:	8c40010c 	andi	r17,r17,4
 c00b560:	88004026 	beq	r17,zero,c00b664 <___vfiprintf_internal_r+0xe24>
 c00b564:	d9002517 	ldw	r4,148(sp)
 c00b568:	24e3c83a 	sub	r17,r4,r19
 c00b56c:	04403d0e 	bge	zero,r17,c00b664 <___vfiprintf_internal_r+0xe24>
 c00b570:	04000404 	movi	r16,16
 c00b574:	8441a90e 	bge	r16,r17,c00bc1c <___vfiprintf_internal_r+0x13dc>
 c00b578:	00c30074 	movhi	r3,3073
 c00b57c:	18cabd04 	addi	r3,r3,10996
 c00b580:	d9001b17 	ldw	r4,108(sp)
 c00b584:	d8c02315 	stw	r3,140(sp)
 c00b588:	050001c4 	movi	r20,7
 c00b58c:	dd402117 	ldw	r21,132(sp)
 c00b590:	ddc02017 	ldw	r23,128(sp)
 c00b594:	00000506 	br	c00b5ac <___vfiprintf_internal_r+0xd6c>
 c00b598:	21400084 	addi	r5,r4,2
 c00b59c:	42000204 	addi	r8,r8,8
 c00b5a0:	1809883a 	mov	r4,r3
 c00b5a4:	8c7ffc04 	addi	r17,r17,-16
 c00b5a8:	84400f0e 	bge	r16,r17,c00b5e8 <___vfiprintf_internal_r+0xda8>
 c00b5ac:	01430074 	movhi	r5,3073
 c00b5b0:	10800404 	addi	r2,r2,16
 c00b5b4:	20c00044 	addi	r3,r4,1
 c00b5b8:	294abd04 	addi	r5,r5,10996
 c00b5bc:	41400015 	stw	r5,0(r8)
 c00b5c0:	44000115 	stw	r16,4(r8)
 c00b5c4:	d8801c15 	stw	r2,112(sp)
 c00b5c8:	d8c01b15 	stw	r3,108(sp)
 c00b5cc:	a0fff20e 	bge	r20,r3,c00b598 <__alt_data_end+0xfc00b598>
 c00b5d0:	1000141e 	bne	r2,zero,c00b624 <___vfiprintf_internal_r+0xde4>
 c00b5d4:	8c7ffc04 	addi	r17,r17,-16
 c00b5d8:	01400044 	movi	r5,1
 c00b5dc:	0009883a 	mov	r4,zero
 c00b5e0:	d811883a 	mov	r8,sp
 c00b5e4:	847ff116 	blt	r16,r17,c00b5ac <__alt_data_end+0xfc00b5ac>
 c00b5e8:	d8c02317 	ldw	r3,140(sp)
 c00b5ec:	1445883a 	add	r2,r2,r17
 c00b5f0:	44400115 	stw	r17,4(r8)
 c00b5f4:	40c00015 	stw	r3,0(r8)
 c00b5f8:	d8801c15 	stw	r2,112(sp)
 c00b5fc:	d9401b15 	stw	r5,108(sp)
 c00b600:	00c001c4 	movi	r3,7
 c00b604:	1940170e 	bge	r3,r5,c00b664 <___vfiprintf_internal_r+0xe24>
 c00b608:	1000101e 	bne	r2,zero,c00b64c <___vfiprintf_internal_r+0xe0c>
 c00b60c:	d8802517 	ldw	r2,148(sp)
 c00b610:	14c11616 	blt	r2,r19,c00ba6c <___vfiprintf_internal_r+0x122c>
 c00b614:	d9002417 	ldw	r4,144(sp)
 c00b618:	2089883a 	add	r4,r4,r2
 c00b61c:	d9002415 	stw	r4,144(sp)
 c00b620:	003e1806 	br	c00ae84 <__alt_data_end+0xfc00ae84>
 c00b624:	d9801a04 	addi	r6,sp,104
 c00b628:	b80b883a 	mov	r5,r23
 c00b62c:	a809883a 	mov	r4,r21
 c00b630:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b634:	103fba1e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00b638:	d9001b17 	ldw	r4,108(sp)
 c00b63c:	d8801c17 	ldw	r2,112(sp)
 c00b640:	d811883a 	mov	r8,sp
 c00b644:	21400044 	addi	r5,r4,1
 c00b648:	003fd606 	br	c00b5a4 <__alt_data_end+0xfc00b5a4>
 c00b64c:	d9402017 	ldw	r5,128(sp)
 c00b650:	d9002117 	ldw	r4,132(sp)
 c00b654:	d9801a04 	addi	r6,sp,104
 c00b658:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b65c:	103fb01e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00b660:	d8801c17 	ldw	r2,112(sp)
 c00b664:	d8c02517 	ldw	r3,148(sp)
 c00b668:	1cc0010e 	bge	r3,r19,c00b670 <___vfiprintf_internal_r+0xe30>
 c00b66c:	9807883a 	mov	r3,r19
 c00b670:	d9002417 	ldw	r4,144(sp)
 c00b674:	20c9883a 	add	r4,r4,r3
 c00b678:	d9002415 	stw	r4,144(sp)
 c00b67c:	103e0126 	beq	r2,zero,c00ae84 <__alt_data_end+0xfc00ae84>
 c00b680:	d9402017 	ldw	r5,128(sp)
 c00b684:	d9002117 	ldw	r4,132(sp)
 c00b688:	d9801a04 	addi	r6,sp,104
 c00b68c:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b690:	103dfc26 	beq	r2,zero,c00ae84 <__alt_data_end+0xfc00ae84>
 c00b694:	003fa206 	br	c00b520 <__alt_data_end+0xfc00b520>
 c00b698:	d9402017 	ldw	r5,128(sp)
 c00b69c:	d9002117 	ldw	r4,132(sp)
 c00b6a0:	d9801a04 	addi	r6,sp,104
 c00b6a4:	d9c02b15 	stw	r7,172(sp)
 c00b6a8:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b6ac:	d9c02b17 	ldw	r7,172(sp)
 c00b6b0:	103f9b1e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00b6b4:	d9001b17 	ldw	r4,108(sp)
 c00b6b8:	d8801c17 	ldw	r2,112(sp)
 c00b6bc:	d811883a 	mov	r8,sp
 c00b6c0:	21800044 	addi	r6,r4,1
 c00b6c4:	003dbf06 	br	c00adc4 <__alt_data_end+0xfc00adc4>
 c00b6c8:	1000d81e 	bne	r2,zero,c00ba2c <___vfiprintf_internal_r+0x11ec>
 c00b6cc:	d9001d87 	ldb	r4,118(sp)
 c00b6d0:	20000a26 	beq	r4,zero,c00b6fc <___vfiprintf_internal_r+0xebc>
 c00b6d4:	00800044 	movi	r2,1
 c00b6d8:	d9001d84 	addi	r4,sp,118
 c00b6dc:	100b883a 	mov	r5,r2
 c00b6e0:	d9000015 	stw	r4,0(sp)
 c00b6e4:	d8800115 	stw	r2,4(sp)
 c00b6e8:	d811883a 	mov	r8,sp
 c00b6ec:	2809883a 	mov	r4,r5
 c00b6f0:	42000204 	addi	r8,r8,8
 c00b6f4:	29400044 	addi	r5,r5,1
 c00b6f8:	003d9506 	br	c00ad50 <__alt_data_end+0xfc00ad50>
 c00b6fc:	3800fd26 	beq	r7,zero,c00baf4 <___vfiprintf_internal_r+0x12b4>
 c00b700:	00800084 	movi	r2,2
 c00b704:	d9001d04 	addi	r4,sp,116
 c00b708:	d9000015 	stw	r4,0(sp)
 c00b70c:	d8800115 	stw	r2,4(sp)
 c00b710:	01400044 	movi	r5,1
 c00b714:	d811883a 	mov	r8,sp
 c00b718:	2809883a 	mov	r4,r5
 c00b71c:	42000204 	addi	r8,r8,8
 c00b720:	29400044 	addi	r5,r5,1
 c00b724:	003f4606 	br	c00b440 <__alt_data_end+0xfc00b440>
 c00b728:	d8802517 	ldw	r2,148(sp)
 c00b72c:	14c0010e 	bge	r2,r19,c00b734 <___vfiprintf_internal_r+0xef4>
 c00b730:	9805883a 	mov	r2,r19
 c00b734:	d9402417 	ldw	r5,144(sp)
 c00b738:	288b883a 	add	r5,r5,r2
 c00b73c:	d9402415 	stw	r5,144(sp)
 c00b740:	003dd006 	br	c00ae84 <__alt_data_end+0xfc00ae84>
 c00b744:	d8001d85 	stb	zero,118(sp)
 c00b748:	80005d16 	blt	r16,zero,c00b8c0 <___vfiprintf_internal_r+0x1080>
 c00b74c:	00ffdfc4 	movi	r3,-129
 c00b750:	9d04b03a 	or	r2,r19,r20
 c00b754:	88e2703a 	and	r17,r17,r3
 c00b758:	103d3726 	beq	r2,zero,c00ac38 <__alt_data_end+0xfc00ac38>
 c00b75c:	002b883a 	mov	r21,zero
 c00b760:	d9002617 	ldw	r4,152(sp)
 c00b764:	ddc01a04 	addi	r23,sp,104
 c00b768:	988003cc 	andi	r2,r19,15
 c00b76c:	a006973a 	slli	r3,r20,28
 c00b770:	2085883a 	add	r2,r4,r2
 c00b774:	9826d13a 	srli	r19,r19,4
 c00b778:	10800003 	ldbu	r2,0(r2)
 c00b77c:	a028d13a 	srli	r20,r20,4
 c00b780:	bdffffc4 	addi	r23,r23,-1
 c00b784:	1ce6b03a 	or	r19,r3,r19
 c00b788:	b8800005 	stb	r2,0(r23)
 c00b78c:	9d04b03a 	or	r2,r19,r20
 c00b790:	103ff51e 	bne	r2,zero,c00b768 <__alt_data_end+0xfc00b768>
 c00b794:	d8801e17 	ldw	r2,120(sp)
 c00b798:	15e9c83a 	sub	r20,r2,r23
 c00b79c:	003d2b06 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00b7a0:	d9402017 	ldw	r5,128(sp)
 c00b7a4:	d9002117 	ldw	r4,132(sp)
 c00b7a8:	d9801a04 	addi	r6,sp,104
 c00b7ac:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b7b0:	103f5b1e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00b7b4:	d8801c17 	ldw	r2,112(sp)
 c00b7b8:	d811883a 	mov	r8,sp
 c00b7bc:	003f6706 	br	c00b55c <__alt_data_end+0xfc00b55c>
 c00b7c0:	d9402017 	ldw	r5,128(sp)
 c00b7c4:	d9002117 	ldw	r4,132(sp)
 c00b7c8:	d9801a04 	addi	r6,sp,104
 c00b7cc:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b7d0:	103f531e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00b7d4:	d811883a 	mov	r8,sp
 c00b7d8:	003cd906 	br	c00ab40 <__alt_data_end+0xfc00ab40>
 c00b7dc:	10803fcc 	andi	r2,r2,255
 c00b7e0:	1080201c 	xori	r2,r2,128
 c00b7e4:	10bfe004 	addi	r2,r2,-128
 c00b7e8:	00c00c04 	movi	r3,48
 c00b7ec:	10ffe926 	beq	r2,r3,c00b794 <__alt_data_end+0xfc00b794>
 c00b7f0:	b8ffffc5 	stb	r3,-1(r23)
 c00b7f4:	d8c01e17 	ldw	r3,120(sp)
 c00b7f8:	b8bfffc4 	addi	r2,r23,-1
 c00b7fc:	102f883a 	mov	r23,r2
 c00b800:	18a9c83a 	sub	r20,r3,r2
 c00b804:	003d1106 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00b808:	d9402017 	ldw	r5,128(sp)
 c00b80c:	d9002117 	ldw	r4,132(sp)
 c00b810:	d9801a04 	addi	r6,sp,104
 c00b814:	d8c02a15 	stw	r3,168(sp)
 c00b818:	d9c02b15 	stw	r7,172(sp)
 c00b81c:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b820:	d8c02a17 	ldw	r3,168(sp)
 c00b824:	d9c02b17 	ldw	r7,172(sp)
 c00b828:	103f3d1e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00b82c:	d9001b17 	ldw	r4,108(sp)
 c00b830:	d8801c17 	ldw	r2,112(sp)
 c00b834:	d811883a 	mov	r8,sp
 c00b838:	21400044 	addi	r5,r4,1
 c00b83c:	003d4406 	br	c00ad50 <__alt_data_end+0xfc00ad50>
 c00b840:	d9402017 	ldw	r5,128(sp)
 c00b844:	d9002117 	ldw	r4,132(sp)
 c00b848:	d9801a04 	addi	r6,sp,104
 c00b84c:	d8c02a15 	stw	r3,168(sp)
 c00b850:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b854:	d8c02a17 	ldw	r3,168(sp)
 c00b858:	103f311e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00b85c:	d9001b17 	ldw	r4,108(sp)
 c00b860:	d8801c17 	ldw	r2,112(sp)
 c00b864:	d811883a 	mov	r8,sp
 c00b868:	21400044 	addi	r5,r4,1
 c00b86c:	003ef406 	br	c00b440 <__alt_data_end+0xfc00b440>
 c00b870:	1000bd1e 	bne	r2,zero,c00bb68 <___vfiprintf_internal_r+0x1328>
 c00b874:	01400044 	movi	r5,1
 c00b878:	0009883a 	mov	r4,zero
 c00b87c:	d811883a 	mov	r8,sp
 c00b880:	003ef106 	br	c00b448 <__alt_data_end+0xfc00b448>
 c00b884:	d9402017 	ldw	r5,128(sp)
 c00b888:	d9002117 	ldw	r4,132(sp)
 c00b88c:	d9801a04 	addi	r6,sp,104
 c00b890:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00b894:	103f221e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00b898:	d9401b17 	ldw	r5,108(sp)
 c00b89c:	d8801c17 	ldw	r2,112(sp)
 c00b8a0:	d811883a 	mov	r8,sp
 c00b8a4:	29400044 	addi	r5,r5,1
 c00b8a8:	003d6206 	br	c00ae34 <__alt_data_end+0xfc00ae34>
 c00b8ac:	01430074 	movhi	r5,3073
 c00b8b0:	294a5804 	addi	r5,r5,10592
 c00b8b4:	d9402615 	stw	r5,152(sp)
 c00b8b8:	d8c02215 	stw	r3,136(sp)
 c00b8bc:	1023883a 	mov	r17,r2
 c00b8c0:	9d04b03a 	or	r2,r19,r20
 c00b8c4:	103fa51e 	bne	r2,zero,c00b75c <__alt_data_end+0xfc00b75c>
 c00b8c8:	002b883a 	mov	r21,zero
 c00b8cc:	00800084 	movi	r2,2
 c00b8d0:	003e4a06 	br	c00b1fc <__alt_data_end+0xfc00b1fc>
 c00b8d4:	01430074 	movhi	r5,3073
 c00b8d8:	294a5804 	addi	r5,r5,10592
 c00b8dc:	002b883a 	mov	r21,zero
 c00b8e0:	d9402615 	stw	r5,152(sp)
 c00b8e4:	003f9e06 	br	c00b760 <__alt_data_end+0xfc00b760>
 c00b8e8:	d9402217 	ldw	r5,136(sp)
 c00b8ec:	d8001d85 	stb	zero,118(sp)
 c00b8f0:	0029883a 	mov	r20,zero
 c00b8f4:	28800104 	addi	r2,r5,4
 c00b8f8:	2cc00017 	ldw	r19,0(r5)
 c00b8fc:	803e3a16 	blt	r16,zero,c00b1e8 <__alt_data_end+0xfc00b1e8>
 c00b900:	00ffdfc4 	movi	r3,-129
 c00b904:	d8802215 	stw	r2,136(sp)
 c00b908:	88e2703a 	and	r17,r17,r3
 c00b90c:	002b883a 	mov	r21,zero
 c00b910:	983e9b26 	beq	r19,zero,c00b380 <__alt_data_end+0xfc00b380>
 c00b914:	00800244 	movi	r2,9
 c00b918:	14fdc936 	bltu	r2,r19,c00b040 <__alt_data_end+0xfc00b040>
 c00b91c:	003e9a06 	br	c00b388 <__alt_data_end+0xfc00b388>
 c00b920:	00800c04 	movi	r2,48
 c00b924:	d8c01d45 	stb	r3,117(sp)
 c00b928:	d8801d05 	stb	r2,116(sp)
 c00b92c:	d8001d85 	stb	zero,118(sp)
 c00b930:	88c00094 	ori	r3,r17,2
 c00b934:	80009c16 	blt	r16,zero,c00bba8 <___vfiprintf_internal_r+0x1368>
 c00b938:	00bfdfc4 	movi	r2,-129
 c00b93c:	88a2703a 	and	r17,r17,r2
 c00b940:	8c400094 	ori	r17,r17,2
 c00b944:	002b883a 	mov	r21,zero
 c00b948:	003f8506 	br	c00b760 <__alt_data_end+0xfc00b760>
 c00b94c:	b029883a 	mov	r20,r22
 c00b950:	003c0b06 	br	c00a980 <__alt_data_end+0xfc00a980>
 c00b954:	04e7c83a 	sub	r19,zero,r19
 c00b958:	05400b44 	movi	r21,45
 c00b95c:	9804c03a 	cmpne	r2,r19,zero
 c00b960:	0529c83a 	sub	r20,zero,r20
 c00b964:	dd401d85 	stb	r21,118(sp)
 c00b968:	a0a9c83a 	sub	r20,r20,r2
 c00b96c:	80009716 	blt	r16,zero,c00bbcc <___vfiprintf_internal_r+0x138c>
 c00b970:	00bfdfc4 	movi	r2,-129
 c00b974:	88a2703a 	and	r17,r17,r2
 c00b978:	003db006 	br	c00b03c <__alt_data_end+0xfc00b03c>
 c00b97c:	b0c00007 	ldb	r3,0(r22)
 c00b980:	003c0c06 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00b984:	8880100c 	andi	r2,r17,64
 c00b988:	d8001d85 	stb	zero,118(sp)
 c00b98c:	1000461e 	bne	r2,zero,c00baa8 <___vfiprintf_internal_r+0x1268>
 c00b990:	d9002217 	ldw	r4,136(sp)
 c00b994:	0029883a 	mov	r20,zero
 c00b998:	20800104 	addi	r2,r4,4
 c00b99c:	24c00017 	ldw	r19,0(r4)
 c00b9a0:	803df80e 	bge	r16,zero,c00b184 <__alt_data_end+0xfc00b184>
 c00b9a4:	9d06b03a 	or	r3,r19,r20
 c00b9a8:	d8802215 	stw	r2,136(sp)
 c00b9ac:	183d5e1e 	bne	r3,zero,c00af28 <__alt_data_end+0xfc00af28>
 c00b9b0:	002b883a 	mov	r21,zero
 c00b9b4:	0005883a 	mov	r2,zero
 c00b9b8:	003e1006 	br	c00b1fc <__alt_data_end+0xfc00b1fc>
 c00b9bc:	8880040c 	andi	r2,r17,16
 c00b9c0:	1000321e 	bne	r2,zero,c00ba8c <___vfiprintf_internal_r+0x124c>
 c00b9c4:	8c40100c 	andi	r17,r17,64
 c00b9c8:	88008d26 	beq	r17,zero,c00bc00 <___vfiprintf_internal_r+0x13c0>
 c00b9cc:	d9402217 	ldw	r5,136(sp)
 c00b9d0:	d8c02417 	ldw	r3,144(sp)
 c00b9d4:	28800017 	ldw	r2,0(r5)
 c00b9d8:	29400104 	addi	r5,r5,4
 c00b9dc:	d9402215 	stw	r5,136(sp)
 c00b9e0:	10c0000d 	sth	r3,0(r2)
 c00b9e4:	003bca06 	br	c00a910 <__alt_data_end+0xfc00a910>
 c00b9e8:	8880100c 	andi	r2,r17,64
 c00b9ec:	10003a26 	beq	r2,zero,c00bad8 <___vfiprintf_internal_r+0x1298>
 c00b9f0:	d8802217 	ldw	r2,136(sp)
 c00b9f4:	14c0000f 	ldh	r19,0(r2)
 c00b9f8:	10800104 	addi	r2,r2,4
 c00b9fc:	d8802215 	stw	r2,136(sp)
 c00ba00:	9829d7fa 	srai	r20,r19,31
 c00ba04:	a005883a 	mov	r2,r20
 c00ba08:	003d8506 	br	c00b020 <__alt_data_end+0xfc00b020>
 c00ba0c:	8880100c 	andi	r2,r17,64
 c00ba10:	10002b26 	beq	r2,zero,c00bac0 <___vfiprintf_internal_r+0x1280>
 c00ba14:	d8802217 	ldw	r2,136(sp)
 c00ba18:	0029883a 	mov	r20,zero
 c00ba1c:	14c0000b 	ldhu	r19,0(r2)
 c00ba20:	10800104 	addi	r2,r2,4
 c00ba24:	d8802215 	stw	r2,136(sp)
 c00ba28:	003d5d06 	br	c00afa0 <__alt_data_end+0xfc00afa0>
 c00ba2c:	d9402017 	ldw	r5,128(sp)
 c00ba30:	d9002117 	ldw	r4,132(sp)
 c00ba34:	d9801a04 	addi	r6,sp,104
 c00ba38:	d8c02a15 	stw	r3,168(sp)
 c00ba3c:	d9c02b15 	stw	r7,172(sp)
 c00ba40:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00ba44:	d8c02a17 	ldw	r3,168(sp)
 c00ba48:	d9c02b17 	ldw	r7,172(sp)
 c00ba4c:	103eb41e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00ba50:	d9001b17 	ldw	r4,108(sp)
 c00ba54:	d8801c17 	ldw	r2,112(sp)
 c00ba58:	d811883a 	mov	r8,sp
 c00ba5c:	21400044 	addi	r5,r4,1
 c00ba60:	003e6706 	br	c00b400 <__alt_data_end+0xfc00b400>
 c00ba64:	00bfffc4 	movi	r2,-1
 c00ba68:	003c4a06 	br	c00ab94 <__alt_data_end+0xfc00ab94>
 c00ba6c:	9805883a 	mov	r2,r19
 c00ba70:	003ee806 	br	c00b614 <__alt_data_end+0xfc00b614>
 c00ba74:	d8c02217 	ldw	r3,136(sp)
 c00ba78:	0029883a 	mov	r20,zero
 c00ba7c:	18800104 	addi	r2,r3,4
 c00ba80:	1cc0000b 	ldhu	r19,0(r3)
 c00ba84:	803f9e0e 	bge	r16,zero,c00b900 <__alt_data_end+0xfc00b900>
 c00ba88:	003dd706 	br	c00b1e8 <__alt_data_end+0xfc00b1e8>
 c00ba8c:	d8c02217 	ldw	r3,136(sp)
 c00ba90:	d9002417 	ldw	r4,144(sp)
 c00ba94:	18800017 	ldw	r2,0(r3)
 c00ba98:	18c00104 	addi	r3,r3,4
 c00ba9c:	d8c02215 	stw	r3,136(sp)
 c00baa0:	11000015 	stw	r4,0(r2)
 c00baa4:	003b9a06 	br	c00a910 <__alt_data_end+0xfc00a910>
 c00baa8:	d8c02217 	ldw	r3,136(sp)
 c00baac:	0029883a 	mov	r20,zero
 c00bab0:	18800104 	addi	r2,r3,4
 c00bab4:	1cc0000b 	ldhu	r19,0(r3)
 c00bab8:	803db20e 	bge	r16,zero,c00b184 <__alt_data_end+0xfc00b184>
 c00babc:	003fb906 	br	c00b9a4 <__alt_data_end+0xfc00b9a4>
 c00bac0:	d9002217 	ldw	r4,136(sp)
 c00bac4:	0029883a 	mov	r20,zero
 c00bac8:	24c00017 	ldw	r19,0(r4)
 c00bacc:	21000104 	addi	r4,r4,4
 c00bad0:	d9002215 	stw	r4,136(sp)
 c00bad4:	003d3206 	br	c00afa0 <__alt_data_end+0xfc00afa0>
 c00bad8:	d8c02217 	ldw	r3,136(sp)
 c00badc:	1cc00017 	ldw	r19,0(r3)
 c00bae0:	18c00104 	addi	r3,r3,4
 c00bae4:	d8c02215 	stw	r3,136(sp)
 c00bae8:	9829d7fa 	srai	r20,r19,31
 c00baec:	a005883a 	mov	r2,r20
 c00baf0:	003d4b06 	br	c00b020 <__alt_data_end+0xfc00b020>
 c00baf4:	0009883a 	mov	r4,zero
 c00baf8:	01400044 	movi	r5,1
 c00bafc:	d811883a 	mov	r8,sp
 c00bb00:	003e4f06 	br	c00b440 <__alt_data_end+0xfc00b440>
 c00bb04:	d8c02215 	stw	r3,136(sp)
 c00bb08:	002b883a 	mov	r21,zero
 c00bb0c:	003db806 	br	c00b1f0 <__alt_data_end+0xfc00b1f0>
 c00bb10:	d811883a 	mov	r8,sp
 c00bb14:	003e9606 	br	c00b570 <__alt_data_end+0xfc00b570>
 c00bb18:	01030074 	movhi	r4,3073
 c00bb1c:	210ab904 	addi	r4,r4,10980
 c00bb20:	d9002315 	stw	r4,140(sp)
 c00bb24:	003e6306 	br	c00b4b4 <__alt_data_end+0xfc00b4b4>
 c00bb28:	b0c00043 	ldbu	r3,1(r22)
 c00bb2c:	8c400814 	ori	r17,r17,32
 c00bb30:	b5800044 	addi	r22,r22,1
 c00bb34:	18c03fcc 	andi	r3,r3,255
 c00bb38:	18c0201c 	xori	r3,r3,128
 c00bb3c:	18ffe004 	addi	r3,r3,-128
 c00bb40:	003b9c06 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00bb44:	b809883a 	mov	r4,r23
 c00bb48:	da002a15 	stw	r8,168(sp)
 c00bb4c:	c002e480 	call	c002e48 <strlen>
 c00bb50:	1029883a 	mov	r20,r2
 c00bb54:	dd401d83 	ldbu	r21,118(sp)
 c00bb58:	df002215 	stw	fp,136(sp)
 c00bb5c:	0021883a 	mov	r16,zero
 c00bb60:	da002a17 	ldw	r8,168(sp)
 c00bb64:	003c3906 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00bb68:	d9402017 	ldw	r5,128(sp)
 c00bb6c:	d9002117 	ldw	r4,132(sp)
 c00bb70:	d9801a04 	addi	r6,sp,104
 c00bb74:	c00a72c0 	call	c00a72c <__sprint_r.part.0>
 c00bb78:	103e691e 	bne	r2,zero,c00b520 <__alt_data_end+0xfc00b520>
 c00bb7c:	d9001b17 	ldw	r4,108(sp)
 c00bb80:	d8801c17 	ldw	r2,112(sp)
 c00bb84:	d811883a 	mov	r8,sp
 c00bb88:	21400044 	addi	r5,r4,1
 c00bb8c:	003e2e06 	br	c00b448 <__alt_data_end+0xfc00b448>
 c00bb90:	01030074 	movhi	r4,3073
 c00bb94:	210abd04 	addi	r4,r4,10996
 c00bb98:	d9002315 	stw	r4,140(sp)
 c00bb9c:	d9001b17 	ldw	r4,108(sp)
 c00bba0:	21000044 	addi	r4,r4,1
 c00bba4:	003c5e06 	br	c00ad20 <__alt_data_end+0xfc00ad20>
 c00bba8:	002b883a 	mov	r21,zero
 c00bbac:	00800084 	movi	r2,2
 c00bbb0:	10803fcc 	andi	r2,r2,255
 c00bbb4:	01000044 	movi	r4,1
 c00bbb8:	11002b26 	beq	r2,r4,c00bc68 <___vfiprintf_internal_r+0x1428>
 c00bbbc:	01000084 	movi	r4,2
 c00bbc0:	11002b1e 	bne	r2,r4,c00bc70 <___vfiprintf_internal_r+0x1430>
 c00bbc4:	1823883a 	mov	r17,r3
 c00bbc8:	003ee506 	br	c00b760 <__alt_data_end+0xfc00b760>
 c00bbcc:	8807883a 	mov	r3,r17
 c00bbd0:	00800044 	movi	r2,1
 c00bbd4:	003ff606 	br	c00bbb0 <__alt_data_end+0xfc00bbb0>
 c00bbd8:	00800184 	movi	r2,6
 c00bbdc:	1400012e 	bgeu	r2,r16,c00bbe4 <___vfiprintf_internal_r+0x13a4>
 c00bbe0:	1021883a 	mov	r16,r2
 c00bbe4:	8029883a 	mov	r20,r16
 c00bbe8:	8027883a 	mov	r19,r16
 c00bbec:	80002216 	blt	r16,zero,c00bc78 <___vfiprintf_internal_r+0x1438>
 c00bbf0:	05c30074 	movhi	r23,3073
 c00bbf4:	df002215 	stw	fp,136(sp)
 c00bbf8:	bdca5d04 	addi	r23,r23,10612
 c00bbfc:	003cfb06 	br	c00afec <__alt_data_end+0xfc00afec>
 c00bc00:	d9002217 	ldw	r4,136(sp)
 c00bc04:	d9402417 	ldw	r5,144(sp)
 c00bc08:	20800017 	ldw	r2,0(r4)
 c00bc0c:	21000104 	addi	r4,r4,4
 c00bc10:	d9002215 	stw	r4,136(sp)
 c00bc14:	11400015 	stw	r5,0(r2)
 c00bc18:	003b3d06 	br	c00a910 <__alt_data_end+0xfc00a910>
 c00bc1c:	01430074 	movhi	r5,3073
 c00bc20:	294abd04 	addi	r5,r5,10996
 c00bc24:	d9402315 	stw	r5,140(sp)
 c00bc28:	d9401b17 	ldw	r5,108(sp)
 c00bc2c:	29400044 	addi	r5,r5,1
 c00bc30:	003e6d06 	br	c00b5e8 <__alt_data_end+0xfc00b5e8>
 c00bc34:	8029883a 	mov	r20,r16
 c00bc38:	dd401d83 	ldbu	r21,118(sp)
 c00bc3c:	df002215 	stw	fp,136(sp)
 c00bc40:	0021883a 	mov	r16,zero
 c00bc44:	003c0106 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00bc48:	00c30074 	movhi	r3,3073
 c00bc4c:	18cab904 	addi	r3,r3,10980
 c00bc50:	d8c02315 	stw	r3,140(sp)
 c00bc54:	280d883a 	mov	r6,r5
 c00bc58:	003c6906 	br	c00ae00 <__alt_data_end+0xfc00ae00>
 c00bc5c:	802d883a 	mov	r22,r16
 c00bc60:	0021883a 	mov	r16,zero
 c00bc64:	003b5406 	br	c00a9b8 <__alt_data_end+0xfc00a9b8>
 c00bc68:	1823883a 	mov	r17,r3
 c00bc6c:	003cf306 	br	c00b03c <__alt_data_end+0xfc00b03c>
 c00bc70:	1823883a 	mov	r17,r3
 c00bc74:	003cad06 	br	c00af2c <__alt_data_end+0xfc00af2c>
 c00bc78:	0027883a 	mov	r19,zero
 c00bc7c:	003fdc06 	br	c00bbf0 <__alt_data_end+0xfc00bbf0>
 c00bc80:	d9402217 	ldw	r5,136(sp)
 c00bc84:	8005883a 	mov	r2,r16
 c00bc88:	b0c00043 	ldbu	r3,1(r22)
 c00bc8c:	2c000017 	ldw	r16,0(r5)
 c00bc90:	29000104 	addi	r4,r5,4
 c00bc94:	d9002215 	stw	r4,136(sp)
 c00bc98:	102d883a 	mov	r22,r2
 c00bc9c:	803fa50e 	bge	r16,zero,c00bb34 <__alt_data_end+0xfc00bb34>
 c00bca0:	18c03fcc 	andi	r3,r3,255
 c00bca4:	18c0201c 	xori	r3,r3,128
 c00bca8:	043fffc4 	movi	r16,-1
 c00bcac:	18ffe004 	addi	r3,r3,-128
 c00bcb0:	003b4006 	br	c00a9b4 <__alt_data_end+0xfc00a9b4>
 c00bcb4:	d9402303 	ldbu	r5,140(sp)
 c00bcb8:	d9401d85 	stb	r5,118(sp)
 c00bcbc:	003cae06 	br	c00af78 <__alt_data_end+0xfc00af78>
 c00bcc0:	d8c02303 	ldbu	r3,140(sp)
 c00bcc4:	d8c01d85 	stb	r3,118(sp)
 c00bcc8:	003d1406 	br	c00b11c <__alt_data_end+0xfc00b11c>
 c00bccc:	d8c02303 	ldbu	r3,140(sp)
 c00bcd0:	d8c01d85 	stb	r3,118(sp)
 c00bcd4:	003cca06 	br	c00b000 <__alt_data_end+0xfc00b000>
 c00bcd8:	8880004c 	andi	r2,r17,1
 c00bcdc:	002b883a 	mov	r21,zero
 c00bce0:	10000526 	beq	r2,zero,c00bcf8 <___vfiprintf_internal_r+0x14b8>
 c00bce4:	00800c04 	movi	r2,48
 c00bce8:	d88019c5 	stb	r2,103(sp)
 c00bcec:	dd002817 	ldw	r20,160(sp)
 c00bcf0:	ddc019c4 	addi	r23,sp,103
 c00bcf4:	003bd506 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00bcf8:	0029883a 	mov	r20,zero
 c00bcfc:	ddc01a04 	addi	r23,sp,104
 c00bd00:	003bd206 	br	c00ac4c <__alt_data_end+0xfc00ac4c>
 c00bd04:	d9002303 	ldbu	r4,140(sp)
 c00bd08:	d9001d85 	stb	r4,118(sp)
 c00bd0c:	003da606 	br	c00b3a8 <__alt_data_end+0xfc00b3a8>
 c00bd10:	d8c02303 	ldbu	r3,140(sp)
 c00bd14:	d8c01d85 	stb	r3,118(sp)
 c00bd18:	003c7606 	br	c00aef4 <__alt_data_end+0xfc00aef4>
 c00bd1c:	d8c02303 	ldbu	r3,140(sp)
 c00bd20:	d8c01d85 	stb	r3,118(sp)
 c00bd24:	003c6506 	br	c00aebc <__alt_data_end+0xfc00aebc>
 c00bd28:	d9002303 	ldbu	r4,140(sp)
 c00bd2c:	d9001d85 	stb	r4,118(sp)
 c00bd30:	003d3d06 	br	c00b228 <__alt_data_end+0xfc00b228>
 c00bd34:	d8c02303 	ldbu	r3,140(sp)
 c00bd38:	d8c01d85 	stb	r3,118(sp)
 c00bd3c:	003d1d06 	br	c00b1b4 <__alt_data_end+0xfc00b1b4>
 c00bd40:	d8c02303 	ldbu	r3,140(sp)
 c00bd44:	d8c01d85 	stb	r3,118(sp)
 c00bd48:	003d0306 	br	c00b158 <__alt_data_end+0xfc00b158>

0c00bd4c <__vfiprintf_internal>:
 c00bd4c:	00830074 	movhi	r2,3073
 c00bd50:	1091ca04 	addi	r2,r2,18216
 c00bd54:	300f883a 	mov	r7,r6
 c00bd58:	280d883a 	mov	r6,r5
 c00bd5c:	200b883a 	mov	r5,r4
 c00bd60:	11000017 	ldw	r4,0(r2)
 c00bd64:	c00a8401 	jmpi	c00a840 <___vfiprintf_internal_r>

0c00bd68 <__sbprintf>:
 c00bd68:	2880030b 	ldhu	r2,12(r5)
 c00bd6c:	2ac01917 	ldw	r11,100(r5)
 c00bd70:	2a80038b 	ldhu	r10,14(r5)
 c00bd74:	2a400717 	ldw	r9,28(r5)
 c00bd78:	2a000917 	ldw	r8,36(r5)
 c00bd7c:	defee204 	addi	sp,sp,-1144
 c00bd80:	00c10004 	movi	r3,1024
 c00bd84:	dc011a15 	stw	r16,1128(sp)
 c00bd88:	10bfff4c 	andi	r2,r2,65533
 c00bd8c:	2821883a 	mov	r16,r5
 c00bd90:	d8cb883a 	add	r5,sp,r3
 c00bd94:	dc811c15 	stw	r18,1136(sp)
 c00bd98:	dc411b15 	stw	r17,1132(sp)
 c00bd9c:	dfc11d15 	stw	ra,1140(sp)
 c00bda0:	2025883a 	mov	r18,r4
 c00bda4:	d881030d 	sth	r2,1036(sp)
 c00bda8:	dac11915 	stw	r11,1124(sp)
 c00bdac:	da81038d 	sth	r10,1038(sp)
 c00bdb0:	da410715 	stw	r9,1052(sp)
 c00bdb4:	da010915 	stw	r8,1060(sp)
 c00bdb8:	dec10015 	stw	sp,1024(sp)
 c00bdbc:	dec10415 	stw	sp,1040(sp)
 c00bdc0:	d8c10215 	stw	r3,1032(sp)
 c00bdc4:	d8c10515 	stw	r3,1044(sp)
 c00bdc8:	d8010615 	stw	zero,1048(sp)
 c00bdcc:	c00a8400 	call	c00a840 <___vfiprintf_internal_r>
 c00bdd0:	1023883a 	mov	r17,r2
 c00bdd4:	10000416 	blt	r2,zero,c00bde8 <__sbprintf+0x80>
 c00bdd8:	d9410004 	addi	r5,sp,1024
 c00bddc:	9009883a 	mov	r4,r18
 c00bde0:	c006eb40 	call	c006eb4 <_fflush_r>
 c00bde4:	10000d1e 	bne	r2,zero,c00be1c <__sbprintf+0xb4>
 c00bde8:	d881030b 	ldhu	r2,1036(sp)
 c00bdec:	1080100c 	andi	r2,r2,64
 c00bdf0:	10000326 	beq	r2,zero,c00be00 <__sbprintf+0x98>
 c00bdf4:	8080030b 	ldhu	r2,12(r16)
 c00bdf8:	10801014 	ori	r2,r2,64
 c00bdfc:	8080030d 	sth	r2,12(r16)
 c00be00:	8805883a 	mov	r2,r17
 c00be04:	dfc11d17 	ldw	ra,1140(sp)
 c00be08:	dc811c17 	ldw	r18,1136(sp)
 c00be0c:	dc411b17 	ldw	r17,1132(sp)
 c00be10:	dc011a17 	ldw	r16,1128(sp)
 c00be14:	dec11e04 	addi	sp,sp,1144
 c00be18:	f800283a 	ret
 c00be1c:	047fffc4 	movi	r17,-1
 c00be20:	003ff106 	br	c00bde8 <__alt_data_end+0xfc00bde8>

0c00be24 <__swbuf_r>:
 c00be24:	defffb04 	addi	sp,sp,-20
 c00be28:	dcc00315 	stw	r19,12(sp)
 c00be2c:	dc800215 	stw	r18,8(sp)
 c00be30:	dc000015 	stw	r16,0(sp)
 c00be34:	dfc00415 	stw	ra,16(sp)
 c00be38:	dc400115 	stw	r17,4(sp)
 c00be3c:	2025883a 	mov	r18,r4
 c00be40:	2827883a 	mov	r19,r5
 c00be44:	3021883a 	mov	r16,r6
 c00be48:	20000226 	beq	r4,zero,c00be54 <__swbuf_r+0x30>
 c00be4c:	20800e17 	ldw	r2,56(r4)
 c00be50:	10004226 	beq	r2,zero,c00bf5c <__swbuf_r+0x138>
 c00be54:	80800617 	ldw	r2,24(r16)
 c00be58:	8100030b 	ldhu	r4,12(r16)
 c00be5c:	80800215 	stw	r2,8(r16)
 c00be60:	2080020c 	andi	r2,r4,8
 c00be64:	10003626 	beq	r2,zero,c00bf40 <__swbuf_r+0x11c>
 c00be68:	80c00417 	ldw	r3,16(r16)
 c00be6c:	18003426 	beq	r3,zero,c00bf40 <__swbuf_r+0x11c>
 c00be70:	2088000c 	andi	r2,r4,8192
 c00be74:	9c403fcc 	andi	r17,r19,255
 c00be78:	10001a26 	beq	r2,zero,c00bee4 <__swbuf_r+0xc0>
 c00be7c:	80800017 	ldw	r2,0(r16)
 c00be80:	81000517 	ldw	r4,20(r16)
 c00be84:	10c7c83a 	sub	r3,r2,r3
 c00be88:	1900200e 	bge	r3,r4,c00bf0c <__swbuf_r+0xe8>
 c00be8c:	18c00044 	addi	r3,r3,1
 c00be90:	81000217 	ldw	r4,8(r16)
 c00be94:	11400044 	addi	r5,r2,1
 c00be98:	81400015 	stw	r5,0(r16)
 c00be9c:	213fffc4 	addi	r4,r4,-1
 c00bea0:	81000215 	stw	r4,8(r16)
 c00bea4:	14c00005 	stb	r19,0(r2)
 c00bea8:	80800517 	ldw	r2,20(r16)
 c00beac:	10c01e26 	beq	r2,r3,c00bf28 <__swbuf_r+0x104>
 c00beb0:	8080030b 	ldhu	r2,12(r16)
 c00beb4:	1080004c 	andi	r2,r2,1
 c00beb8:	10000226 	beq	r2,zero,c00bec4 <__swbuf_r+0xa0>
 c00bebc:	00800284 	movi	r2,10
 c00bec0:	88801926 	beq	r17,r2,c00bf28 <__swbuf_r+0x104>
 c00bec4:	8805883a 	mov	r2,r17
 c00bec8:	dfc00417 	ldw	ra,16(sp)
 c00becc:	dcc00317 	ldw	r19,12(sp)
 c00bed0:	dc800217 	ldw	r18,8(sp)
 c00bed4:	dc400117 	ldw	r17,4(sp)
 c00bed8:	dc000017 	ldw	r16,0(sp)
 c00bedc:	dec00504 	addi	sp,sp,20
 c00bee0:	f800283a 	ret
 c00bee4:	81401917 	ldw	r5,100(r16)
 c00bee8:	00b7ffc4 	movi	r2,-8193
 c00beec:	21080014 	ori	r4,r4,8192
 c00bef0:	2884703a 	and	r2,r5,r2
 c00bef4:	80801915 	stw	r2,100(r16)
 c00bef8:	80800017 	ldw	r2,0(r16)
 c00befc:	8100030d 	sth	r4,12(r16)
 c00bf00:	81000517 	ldw	r4,20(r16)
 c00bf04:	10c7c83a 	sub	r3,r2,r3
 c00bf08:	193fe016 	blt	r3,r4,c00be8c <__alt_data_end+0xfc00be8c>
 c00bf0c:	800b883a 	mov	r5,r16
 c00bf10:	9009883a 	mov	r4,r18
 c00bf14:	c006eb40 	call	c006eb4 <_fflush_r>
 c00bf18:	1000071e 	bne	r2,zero,c00bf38 <__swbuf_r+0x114>
 c00bf1c:	80800017 	ldw	r2,0(r16)
 c00bf20:	00c00044 	movi	r3,1
 c00bf24:	003fda06 	br	c00be90 <__alt_data_end+0xfc00be90>
 c00bf28:	800b883a 	mov	r5,r16
 c00bf2c:	9009883a 	mov	r4,r18
 c00bf30:	c006eb40 	call	c006eb4 <_fflush_r>
 c00bf34:	103fe326 	beq	r2,zero,c00bec4 <__alt_data_end+0xfc00bec4>
 c00bf38:	00bfffc4 	movi	r2,-1
 c00bf3c:	003fe206 	br	c00bec8 <__alt_data_end+0xfc00bec8>
 c00bf40:	800b883a 	mov	r5,r16
 c00bf44:	9009883a 	mov	r4,r18
 c00bf48:	c0052940 	call	c005294 <__swsetup_r>
 c00bf4c:	103ffa1e 	bne	r2,zero,c00bf38 <__alt_data_end+0xfc00bf38>
 c00bf50:	8100030b 	ldhu	r4,12(r16)
 c00bf54:	80c00417 	ldw	r3,16(r16)
 c00bf58:	003fc506 	br	c00be70 <__alt_data_end+0xfc00be70>
 c00bf5c:	c0072a00 	call	c0072a0 <__sinit>
 c00bf60:	003fbc06 	br	c00be54 <__alt_data_end+0xfc00be54>

0c00bf64 <__swbuf>:
 c00bf64:	00830074 	movhi	r2,3073
 c00bf68:	1091ca04 	addi	r2,r2,18216
 c00bf6c:	280d883a 	mov	r6,r5
 c00bf70:	200b883a 	mov	r5,r4
 c00bf74:	11000017 	ldw	r4,0(r2)
 c00bf78:	c00be241 	jmpi	c00be24 <__swbuf_r>

0c00bf7c <_write_r>:
 c00bf7c:	defffd04 	addi	sp,sp,-12
 c00bf80:	2805883a 	mov	r2,r5
 c00bf84:	dc000015 	stw	r16,0(sp)
 c00bf88:	04030074 	movhi	r16,3073
 c00bf8c:	dc400115 	stw	r17,4(sp)
 c00bf90:	300b883a 	mov	r5,r6
 c00bf94:	8418b004 	addi	r16,r16,25280
 c00bf98:	2023883a 	mov	r17,r4
 c00bf9c:	380d883a 	mov	r6,r7
 c00bfa0:	1009883a 	mov	r4,r2
 c00bfa4:	dfc00215 	stw	ra,8(sp)
 c00bfa8:	80000015 	stw	zero,0(r16)
 c00bfac:	c01063c0 	call	c01063c <write>
 c00bfb0:	00ffffc4 	movi	r3,-1
 c00bfb4:	10c00526 	beq	r2,r3,c00bfcc <_write_r+0x50>
 c00bfb8:	dfc00217 	ldw	ra,8(sp)
 c00bfbc:	dc400117 	ldw	r17,4(sp)
 c00bfc0:	dc000017 	ldw	r16,0(sp)
 c00bfc4:	dec00304 	addi	sp,sp,12
 c00bfc8:	f800283a 	ret
 c00bfcc:	80c00017 	ldw	r3,0(r16)
 c00bfd0:	183ff926 	beq	r3,zero,c00bfb8 <__alt_data_end+0xfc00bfb8>
 c00bfd4:	88c00015 	stw	r3,0(r17)
 c00bfd8:	003ff706 	br	c00bfb8 <__alt_data_end+0xfc00bfb8>

0c00bfdc <_close_r>:
 c00bfdc:	defffd04 	addi	sp,sp,-12
 c00bfe0:	dc000015 	stw	r16,0(sp)
 c00bfe4:	04030074 	movhi	r16,3073
 c00bfe8:	dc400115 	stw	r17,4(sp)
 c00bfec:	8418b004 	addi	r16,r16,25280
 c00bff0:	2023883a 	mov	r17,r4
 c00bff4:	2809883a 	mov	r4,r5
 c00bff8:	dfc00215 	stw	ra,8(sp)
 c00bffc:	80000015 	stw	zero,0(r16)
 c00c000:	c00fc100 	call	c00fc10 <close>
 c00c004:	00ffffc4 	movi	r3,-1
 c00c008:	10c00526 	beq	r2,r3,c00c020 <_close_r+0x44>
 c00c00c:	dfc00217 	ldw	ra,8(sp)
 c00c010:	dc400117 	ldw	r17,4(sp)
 c00c014:	dc000017 	ldw	r16,0(sp)
 c00c018:	dec00304 	addi	sp,sp,12
 c00c01c:	f800283a 	ret
 c00c020:	80c00017 	ldw	r3,0(r16)
 c00c024:	183ff926 	beq	r3,zero,c00c00c <__alt_data_end+0xfc00c00c>
 c00c028:	88c00015 	stw	r3,0(r17)
 c00c02c:	003ff706 	br	c00c00c <__alt_data_end+0xfc00c00c>

0c00c030 <_calloc_r>:
 c00c030:	defffe04 	addi	sp,sp,-8
 c00c034:	2805883a 	mov	r2,r5
 c00c038:	dc000015 	stw	r16,0(sp)
 c00c03c:	300b883a 	mov	r5,r6
 c00c040:	2021883a 	mov	r16,r4
 c00c044:	1009883a 	mov	r4,r2
 c00c048:	dfc00115 	stw	ra,4(sp)
 c00c04c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00c050:	100b883a 	mov	r5,r2
 c00c054:	8009883a 	mov	r4,r16
 c00c058:	c00800c0 	call	c00800c <_malloc_r>
 c00c05c:	10002926 	beq	r2,zero,c00c104 <_calloc_r+0xd4>
 c00c060:	11bfff17 	ldw	r6,-4(r2)
 c00c064:	1021883a 	mov	r16,r2
 c00c068:	00bfff04 	movi	r2,-4
 c00c06c:	308c703a 	and	r6,r6,r2
 c00c070:	00c00904 	movi	r3,36
 c00c074:	308d883a 	add	r6,r6,r2
 c00c078:	19801636 	bltu	r3,r6,c00c0d4 <_calloc_r+0xa4>
 c00c07c:	008004c4 	movi	r2,19
 c00c080:	11800b2e 	bgeu	r2,r6,c00c0b0 <_calloc_r+0x80>
 c00c084:	80000015 	stw	zero,0(r16)
 c00c088:	80000115 	stw	zero,4(r16)
 c00c08c:	008006c4 	movi	r2,27
 c00c090:	11801a2e 	bgeu	r2,r6,c00c0fc <_calloc_r+0xcc>
 c00c094:	80000215 	stw	zero,8(r16)
 c00c098:	80000315 	stw	zero,12(r16)
 c00c09c:	30c0151e 	bne	r6,r3,c00c0f4 <_calloc_r+0xc4>
 c00c0a0:	80000415 	stw	zero,16(r16)
 c00c0a4:	80800604 	addi	r2,r16,24
 c00c0a8:	80000515 	stw	zero,20(r16)
 c00c0ac:	00000106 	br	c00c0b4 <_calloc_r+0x84>
 c00c0b0:	8005883a 	mov	r2,r16
 c00c0b4:	10000015 	stw	zero,0(r2)
 c00c0b8:	10000115 	stw	zero,4(r2)
 c00c0bc:	10000215 	stw	zero,8(r2)
 c00c0c0:	8005883a 	mov	r2,r16
 c00c0c4:	dfc00117 	ldw	ra,4(sp)
 c00c0c8:	dc000017 	ldw	r16,0(sp)
 c00c0cc:	dec00204 	addi	sp,sp,8
 c00c0d0:	f800283a 	ret
 c00c0d4:	000b883a 	mov	r5,zero
 c00c0d8:	8009883a 	mov	r4,r16
 c00c0dc:	c008ba00 	call	c008ba0 <memset>
 c00c0e0:	8005883a 	mov	r2,r16
 c00c0e4:	dfc00117 	ldw	ra,4(sp)
 c00c0e8:	dc000017 	ldw	r16,0(sp)
 c00c0ec:	dec00204 	addi	sp,sp,8
 c00c0f0:	f800283a 	ret
 c00c0f4:	80800404 	addi	r2,r16,16
 c00c0f8:	003fee06 	br	c00c0b4 <__alt_data_end+0xfc00c0b4>
 c00c0fc:	80800204 	addi	r2,r16,8
 c00c100:	003fec06 	br	c00c0b4 <__alt_data_end+0xfc00c0b4>
 c00c104:	0005883a 	mov	r2,zero
 c00c108:	003fee06 	br	c00c0c4 <__alt_data_end+0xfc00c0c4>

0c00c10c <_fclose_r>:
 c00c10c:	28003926 	beq	r5,zero,c00c1f4 <_fclose_r+0xe8>
 c00c110:	defffc04 	addi	sp,sp,-16
 c00c114:	dc400115 	stw	r17,4(sp)
 c00c118:	dc000015 	stw	r16,0(sp)
 c00c11c:	dfc00315 	stw	ra,12(sp)
 c00c120:	dc800215 	stw	r18,8(sp)
 c00c124:	2023883a 	mov	r17,r4
 c00c128:	2821883a 	mov	r16,r5
 c00c12c:	20000226 	beq	r4,zero,c00c138 <_fclose_r+0x2c>
 c00c130:	20800e17 	ldw	r2,56(r4)
 c00c134:	10002726 	beq	r2,zero,c00c1d4 <_fclose_r+0xc8>
 c00c138:	8080030f 	ldh	r2,12(r16)
 c00c13c:	1000071e 	bne	r2,zero,c00c15c <_fclose_r+0x50>
 c00c140:	0005883a 	mov	r2,zero
 c00c144:	dfc00317 	ldw	ra,12(sp)
 c00c148:	dc800217 	ldw	r18,8(sp)
 c00c14c:	dc400117 	ldw	r17,4(sp)
 c00c150:	dc000017 	ldw	r16,0(sp)
 c00c154:	dec00404 	addi	sp,sp,16
 c00c158:	f800283a 	ret
 c00c15c:	800b883a 	mov	r5,r16
 c00c160:	8809883a 	mov	r4,r17
 c00c164:	c006c980 	call	c006c98 <__sflush_r>
 c00c168:	1025883a 	mov	r18,r2
 c00c16c:	80800b17 	ldw	r2,44(r16)
 c00c170:	10000426 	beq	r2,zero,c00c184 <_fclose_r+0x78>
 c00c174:	81400717 	ldw	r5,28(r16)
 c00c178:	8809883a 	mov	r4,r17
 c00c17c:	103ee83a 	callr	r2
 c00c180:	10001616 	blt	r2,zero,c00c1dc <_fclose_r+0xd0>
 c00c184:	8080030b 	ldhu	r2,12(r16)
 c00c188:	1080200c 	andi	r2,r2,128
 c00c18c:	1000151e 	bne	r2,zero,c00c1e4 <_fclose_r+0xd8>
 c00c190:	81400c17 	ldw	r5,48(r16)
 c00c194:	28000526 	beq	r5,zero,c00c1ac <_fclose_r+0xa0>
 c00c198:	80801004 	addi	r2,r16,64
 c00c19c:	28800226 	beq	r5,r2,c00c1a8 <_fclose_r+0x9c>
 c00c1a0:	8809883a 	mov	r4,r17
 c00c1a4:	c0074140 	call	c007414 <_free_r>
 c00c1a8:	80000c15 	stw	zero,48(r16)
 c00c1ac:	81401117 	ldw	r5,68(r16)
 c00c1b0:	28000326 	beq	r5,zero,c00c1c0 <_fclose_r+0xb4>
 c00c1b4:	8809883a 	mov	r4,r17
 c00c1b8:	c0074140 	call	c007414 <_free_r>
 c00c1bc:	80001115 	stw	zero,68(r16)
 c00c1c0:	c0072b00 	call	c0072b0 <__sfp_lock_acquire>
 c00c1c4:	8000030d 	sth	zero,12(r16)
 c00c1c8:	c0072b40 	call	c0072b4 <__sfp_lock_release>
 c00c1cc:	9005883a 	mov	r2,r18
 c00c1d0:	003fdc06 	br	c00c144 <__alt_data_end+0xfc00c144>
 c00c1d4:	c0072a00 	call	c0072a0 <__sinit>
 c00c1d8:	003fd706 	br	c00c138 <__alt_data_end+0xfc00c138>
 c00c1dc:	04bfffc4 	movi	r18,-1
 c00c1e0:	003fe806 	br	c00c184 <__alt_data_end+0xfc00c184>
 c00c1e4:	81400417 	ldw	r5,16(r16)
 c00c1e8:	8809883a 	mov	r4,r17
 c00c1ec:	c0074140 	call	c007414 <_free_r>
 c00c1f0:	003fe706 	br	c00c190 <__alt_data_end+0xfc00c190>
 c00c1f4:	0005883a 	mov	r2,zero
 c00c1f8:	f800283a 	ret

0c00c1fc <fclose>:
 c00c1fc:	00830074 	movhi	r2,3073
 c00c200:	1091ca04 	addi	r2,r2,18216
 c00c204:	200b883a 	mov	r5,r4
 c00c208:	11000017 	ldw	r4,0(r2)
 c00c20c:	c00c10c1 	jmpi	c00c10c <_fclose_r>

0c00c210 <__fputwc>:
 c00c210:	defff804 	addi	sp,sp,-32
 c00c214:	dcc00415 	stw	r19,16(sp)
 c00c218:	dc800315 	stw	r18,12(sp)
 c00c21c:	dc000115 	stw	r16,4(sp)
 c00c220:	dfc00715 	stw	ra,28(sp)
 c00c224:	dd400615 	stw	r21,24(sp)
 c00c228:	dd000515 	stw	r20,20(sp)
 c00c22c:	dc400215 	stw	r17,8(sp)
 c00c230:	2027883a 	mov	r19,r4
 c00c234:	2825883a 	mov	r18,r5
 c00c238:	3021883a 	mov	r16,r6
 c00c23c:	c007dfc0 	call	c007dfc <__locale_mb_cur_max>
 c00c240:	00c00044 	movi	r3,1
 c00c244:	10c03e26 	beq	r2,r3,c00c340 <__fputwc+0x130>
 c00c248:	81c01704 	addi	r7,r16,92
 c00c24c:	900d883a 	mov	r6,r18
 c00c250:	d80b883a 	mov	r5,sp
 c00c254:	9809883a 	mov	r4,r19
 c00c258:	c00c5880 	call	c00c588 <_wcrtomb_r>
 c00c25c:	1029883a 	mov	r20,r2
 c00c260:	00bfffc4 	movi	r2,-1
 c00c264:	a0802026 	beq	r20,r2,c00c2e8 <__fputwc+0xd8>
 c00c268:	d9400003 	ldbu	r5,0(sp)
 c00c26c:	a0001c26 	beq	r20,zero,c00c2e0 <__fputwc+0xd0>
 c00c270:	0023883a 	mov	r17,zero
 c00c274:	05400284 	movi	r21,10
 c00c278:	00000906 	br	c00c2a0 <__fputwc+0x90>
 c00c27c:	80800017 	ldw	r2,0(r16)
 c00c280:	11400005 	stb	r5,0(r2)
 c00c284:	80c00017 	ldw	r3,0(r16)
 c00c288:	18c00044 	addi	r3,r3,1
 c00c28c:	80c00015 	stw	r3,0(r16)
 c00c290:	8c400044 	addi	r17,r17,1
 c00c294:	dc45883a 	add	r2,sp,r17
 c00c298:	8d00112e 	bgeu	r17,r20,c00c2e0 <__fputwc+0xd0>
 c00c29c:	11400003 	ldbu	r5,0(r2)
 c00c2a0:	80c00217 	ldw	r3,8(r16)
 c00c2a4:	18ffffc4 	addi	r3,r3,-1
 c00c2a8:	80c00215 	stw	r3,8(r16)
 c00c2ac:	183ff30e 	bge	r3,zero,c00c27c <__alt_data_end+0xfc00c27c>
 c00c2b0:	80800617 	ldw	r2,24(r16)
 c00c2b4:	18801916 	blt	r3,r2,c00c31c <__fputwc+0x10c>
 c00c2b8:	80800017 	ldw	r2,0(r16)
 c00c2bc:	11400005 	stb	r5,0(r2)
 c00c2c0:	80800017 	ldw	r2,0(r16)
 c00c2c4:	10c00003 	ldbu	r3,0(r2)
 c00c2c8:	10800044 	addi	r2,r2,1
 c00c2cc:	1d402326 	beq	r3,r21,c00c35c <__fputwc+0x14c>
 c00c2d0:	80800015 	stw	r2,0(r16)
 c00c2d4:	8c400044 	addi	r17,r17,1
 c00c2d8:	dc45883a 	add	r2,sp,r17
 c00c2dc:	8d3fef36 	bltu	r17,r20,c00c29c <__alt_data_end+0xfc00c29c>
 c00c2e0:	9005883a 	mov	r2,r18
 c00c2e4:	00000406 	br	c00c2f8 <__fputwc+0xe8>
 c00c2e8:	80c0030b 	ldhu	r3,12(r16)
 c00c2ec:	a005883a 	mov	r2,r20
 c00c2f0:	18c01014 	ori	r3,r3,64
 c00c2f4:	80c0030d 	sth	r3,12(r16)
 c00c2f8:	dfc00717 	ldw	ra,28(sp)
 c00c2fc:	dd400617 	ldw	r21,24(sp)
 c00c300:	dd000517 	ldw	r20,20(sp)
 c00c304:	dcc00417 	ldw	r19,16(sp)
 c00c308:	dc800317 	ldw	r18,12(sp)
 c00c30c:	dc400217 	ldw	r17,8(sp)
 c00c310:	dc000117 	ldw	r16,4(sp)
 c00c314:	dec00804 	addi	sp,sp,32
 c00c318:	f800283a 	ret
 c00c31c:	800d883a 	mov	r6,r16
 c00c320:	29403fcc 	andi	r5,r5,255
 c00c324:	9809883a 	mov	r4,r19
 c00c328:	c00be240 	call	c00be24 <__swbuf_r>
 c00c32c:	10bfffe0 	cmpeqi	r2,r2,-1
 c00c330:	10803fcc 	andi	r2,r2,255
 c00c334:	103fd626 	beq	r2,zero,c00c290 <__alt_data_end+0xfc00c290>
 c00c338:	00bfffc4 	movi	r2,-1
 c00c33c:	003fee06 	br	c00c2f8 <__alt_data_end+0xfc00c2f8>
 c00c340:	90ffffc4 	addi	r3,r18,-1
 c00c344:	01003f84 	movi	r4,254
 c00c348:	20ffbf36 	bltu	r4,r3,c00c248 <__alt_data_end+0xfc00c248>
 c00c34c:	900b883a 	mov	r5,r18
 c00c350:	dc800005 	stb	r18,0(sp)
 c00c354:	1029883a 	mov	r20,r2
 c00c358:	003fc506 	br	c00c270 <__alt_data_end+0xfc00c270>
 c00c35c:	800d883a 	mov	r6,r16
 c00c360:	a80b883a 	mov	r5,r21
 c00c364:	9809883a 	mov	r4,r19
 c00c368:	c00be240 	call	c00be24 <__swbuf_r>
 c00c36c:	10bfffe0 	cmpeqi	r2,r2,-1
 c00c370:	003fef06 	br	c00c330 <__alt_data_end+0xfc00c330>

0c00c374 <_fputwc_r>:
 c00c374:	3080030b 	ldhu	r2,12(r6)
 c00c378:	10c8000c 	andi	r3,r2,8192
 c00c37c:	1800051e 	bne	r3,zero,c00c394 <_fputwc_r+0x20>
 c00c380:	30c01917 	ldw	r3,100(r6)
 c00c384:	10880014 	ori	r2,r2,8192
 c00c388:	3080030d 	sth	r2,12(r6)
 c00c38c:	18880014 	ori	r2,r3,8192
 c00c390:	30801915 	stw	r2,100(r6)
 c00c394:	c00c2101 	jmpi	c00c210 <__fputwc>

0c00c398 <fputwc>:
 c00c398:	00830074 	movhi	r2,3073
 c00c39c:	defffc04 	addi	sp,sp,-16
 c00c3a0:	1091ca04 	addi	r2,r2,18216
 c00c3a4:	dc000115 	stw	r16,4(sp)
 c00c3a8:	14000017 	ldw	r16,0(r2)
 c00c3ac:	dc400215 	stw	r17,8(sp)
 c00c3b0:	dfc00315 	stw	ra,12(sp)
 c00c3b4:	2023883a 	mov	r17,r4
 c00c3b8:	80000226 	beq	r16,zero,c00c3c4 <fputwc+0x2c>
 c00c3bc:	80800e17 	ldw	r2,56(r16)
 c00c3c0:	10001026 	beq	r2,zero,c00c404 <fputwc+0x6c>
 c00c3c4:	2880030b 	ldhu	r2,12(r5)
 c00c3c8:	10c8000c 	andi	r3,r2,8192
 c00c3cc:	1800051e 	bne	r3,zero,c00c3e4 <fputwc+0x4c>
 c00c3d0:	28c01917 	ldw	r3,100(r5)
 c00c3d4:	10880014 	ori	r2,r2,8192
 c00c3d8:	2880030d 	sth	r2,12(r5)
 c00c3dc:	18880014 	ori	r2,r3,8192
 c00c3e0:	28801915 	stw	r2,100(r5)
 c00c3e4:	280d883a 	mov	r6,r5
 c00c3e8:	8009883a 	mov	r4,r16
 c00c3ec:	880b883a 	mov	r5,r17
 c00c3f0:	dfc00317 	ldw	ra,12(sp)
 c00c3f4:	dc400217 	ldw	r17,8(sp)
 c00c3f8:	dc000117 	ldw	r16,4(sp)
 c00c3fc:	dec00404 	addi	sp,sp,16
 c00c400:	c00c2101 	jmpi	c00c210 <__fputwc>
 c00c404:	8009883a 	mov	r4,r16
 c00c408:	d9400015 	stw	r5,0(sp)
 c00c40c:	c0072a00 	call	c0072a0 <__sinit>
 c00c410:	d9400017 	ldw	r5,0(sp)
 c00c414:	003feb06 	br	c00c3c4 <__alt_data_end+0xfc00c3c4>

0c00c418 <_fstat_r>:
 c00c418:	defffd04 	addi	sp,sp,-12
 c00c41c:	2805883a 	mov	r2,r5
 c00c420:	dc000015 	stw	r16,0(sp)
 c00c424:	04030074 	movhi	r16,3073
 c00c428:	dc400115 	stw	r17,4(sp)
 c00c42c:	8418b004 	addi	r16,r16,25280
 c00c430:	2023883a 	mov	r17,r4
 c00c434:	300b883a 	mov	r5,r6
 c00c438:	1009883a 	mov	r4,r2
 c00c43c:	dfc00215 	stw	ra,8(sp)
 c00c440:	80000015 	stw	zero,0(r16)
 c00c444:	c00fd500 	call	c00fd50 <fstat>
 c00c448:	00ffffc4 	movi	r3,-1
 c00c44c:	10c00526 	beq	r2,r3,c00c464 <_fstat_r+0x4c>
 c00c450:	dfc00217 	ldw	ra,8(sp)
 c00c454:	dc400117 	ldw	r17,4(sp)
 c00c458:	dc000017 	ldw	r16,0(sp)
 c00c45c:	dec00304 	addi	sp,sp,12
 c00c460:	f800283a 	ret
 c00c464:	80c00017 	ldw	r3,0(r16)
 c00c468:	183ff926 	beq	r3,zero,c00c450 <__alt_data_end+0xfc00c450>
 c00c46c:	88c00015 	stw	r3,0(r17)
 c00c470:	003ff706 	br	c00c450 <__alt_data_end+0xfc00c450>

0c00c474 <_isatty_r>:
 c00c474:	defffd04 	addi	sp,sp,-12
 c00c478:	dc000015 	stw	r16,0(sp)
 c00c47c:	04030074 	movhi	r16,3073
 c00c480:	dc400115 	stw	r17,4(sp)
 c00c484:	8418b004 	addi	r16,r16,25280
 c00c488:	2023883a 	mov	r17,r4
 c00c48c:	2809883a 	mov	r4,r5
 c00c490:	dfc00215 	stw	ra,8(sp)
 c00c494:	80000015 	stw	zero,0(r16)
 c00c498:	c00fe440 	call	c00fe44 <isatty>
 c00c49c:	00ffffc4 	movi	r3,-1
 c00c4a0:	10c00526 	beq	r2,r3,c00c4b8 <_isatty_r+0x44>
 c00c4a4:	dfc00217 	ldw	ra,8(sp)
 c00c4a8:	dc400117 	ldw	r17,4(sp)
 c00c4ac:	dc000017 	ldw	r16,0(sp)
 c00c4b0:	dec00304 	addi	sp,sp,12
 c00c4b4:	f800283a 	ret
 c00c4b8:	80c00017 	ldw	r3,0(r16)
 c00c4bc:	183ff926 	beq	r3,zero,c00c4a4 <__alt_data_end+0xfc00c4a4>
 c00c4c0:	88c00015 	stw	r3,0(r17)
 c00c4c4:	003ff706 	br	c00c4a4 <__alt_data_end+0xfc00c4a4>

0c00c4c8 <_lseek_r>:
 c00c4c8:	defffd04 	addi	sp,sp,-12
 c00c4cc:	2805883a 	mov	r2,r5
 c00c4d0:	dc000015 	stw	r16,0(sp)
 c00c4d4:	04030074 	movhi	r16,3073
 c00c4d8:	dc400115 	stw	r17,4(sp)
 c00c4dc:	300b883a 	mov	r5,r6
 c00c4e0:	8418b004 	addi	r16,r16,25280
 c00c4e4:	2023883a 	mov	r17,r4
 c00c4e8:	380d883a 	mov	r6,r7
 c00c4ec:	1009883a 	mov	r4,r2
 c00c4f0:	dfc00215 	stw	ra,8(sp)
 c00c4f4:	80000015 	stw	zero,0(r16)
 c00c4f8:	c0100180 	call	c010018 <lseek>
 c00c4fc:	00ffffc4 	movi	r3,-1
 c00c500:	10c00526 	beq	r2,r3,c00c518 <_lseek_r+0x50>
 c00c504:	dfc00217 	ldw	ra,8(sp)
 c00c508:	dc400117 	ldw	r17,4(sp)
 c00c50c:	dc000017 	ldw	r16,0(sp)
 c00c510:	dec00304 	addi	sp,sp,12
 c00c514:	f800283a 	ret
 c00c518:	80c00017 	ldw	r3,0(r16)
 c00c51c:	183ff926 	beq	r3,zero,c00c504 <__alt_data_end+0xfc00c504>
 c00c520:	88c00015 	stw	r3,0(r17)
 c00c524:	003ff706 	br	c00c504 <__alt_data_end+0xfc00c504>

0c00c528 <_read_r>:
 c00c528:	defffd04 	addi	sp,sp,-12
 c00c52c:	2805883a 	mov	r2,r5
 c00c530:	dc000015 	stw	r16,0(sp)
 c00c534:	04030074 	movhi	r16,3073
 c00c538:	dc400115 	stw	r17,4(sp)
 c00c53c:	300b883a 	mov	r5,r6
 c00c540:	8418b004 	addi	r16,r16,25280
 c00c544:	2023883a 	mov	r17,r4
 c00c548:	380d883a 	mov	r6,r7
 c00c54c:	1009883a 	mov	r4,r2
 c00c550:	dfc00215 	stw	ra,8(sp)
 c00c554:	80000015 	stw	zero,0(r16)
 c00c558:	c0101f40 	call	c0101f4 <read>
 c00c55c:	00ffffc4 	movi	r3,-1
 c00c560:	10c00526 	beq	r2,r3,c00c578 <_read_r+0x50>
 c00c564:	dfc00217 	ldw	ra,8(sp)
 c00c568:	dc400117 	ldw	r17,4(sp)
 c00c56c:	dc000017 	ldw	r16,0(sp)
 c00c570:	dec00304 	addi	sp,sp,12
 c00c574:	f800283a 	ret
 c00c578:	80c00017 	ldw	r3,0(r16)
 c00c57c:	183ff926 	beq	r3,zero,c00c564 <__alt_data_end+0xfc00c564>
 c00c580:	88c00015 	stw	r3,0(r17)
 c00c584:	003ff706 	br	c00c564 <__alt_data_end+0xfc00c564>

0c00c588 <_wcrtomb_r>:
 c00c588:	defff604 	addi	sp,sp,-40
 c00c58c:	00830074 	movhi	r2,3073
 c00c590:	dc800815 	stw	r18,32(sp)
 c00c594:	dc400715 	stw	r17,28(sp)
 c00c598:	dc000615 	stw	r16,24(sp)
 c00c59c:	1091ce04 	addi	r2,r2,18232
 c00c5a0:	dfc00915 	stw	ra,36(sp)
 c00c5a4:	2021883a 	mov	r16,r4
 c00c5a8:	3823883a 	mov	r17,r7
 c00c5ac:	14800017 	ldw	r18,0(r2)
 c00c5b0:	28001426 	beq	r5,zero,c00c604 <_wcrtomb_r+0x7c>
 c00c5b4:	d9400415 	stw	r5,16(sp)
 c00c5b8:	d9800515 	stw	r6,20(sp)
 c00c5bc:	c007df00 	call	c007df0 <__locale_charset>
 c00c5c0:	d9800517 	ldw	r6,20(sp)
 c00c5c4:	d9400417 	ldw	r5,16(sp)
 c00c5c8:	100f883a 	mov	r7,r2
 c00c5cc:	dc400015 	stw	r17,0(sp)
 c00c5d0:	8009883a 	mov	r4,r16
 c00c5d4:	903ee83a 	callr	r18
 c00c5d8:	00ffffc4 	movi	r3,-1
 c00c5dc:	10c0031e 	bne	r2,r3,c00c5ec <_wcrtomb_r+0x64>
 c00c5e0:	88000015 	stw	zero,0(r17)
 c00c5e4:	00c02284 	movi	r3,138
 c00c5e8:	80c00015 	stw	r3,0(r16)
 c00c5ec:	dfc00917 	ldw	ra,36(sp)
 c00c5f0:	dc800817 	ldw	r18,32(sp)
 c00c5f4:	dc400717 	ldw	r17,28(sp)
 c00c5f8:	dc000617 	ldw	r16,24(sp)
 c00c5fc:	dec00a04 	addi	sp,sp,40
 c00c600:	f800283a 	ret
 c00c604:	c007df00 	call	c007df0 <__locale_charset>
 c00c608:	100f883a 	mov	r7,r2
 c00c60c:	dc400015 	stw	r17,0(sp)
 c00c610:	000d883a 	mov	r6,zero
 c00c614:	d9400104 	addi	r5,sp,4
 c00c618:	8009883a 	mov	r4,r16
 c00c61c:	903ee83a 	callr	r18
 c00c620:	003fed06 	br	c00c5d8 <__alt_data_end+0xfc00c5d8>

0c00c624 <wcrtomb>:
 c00c624:	defff604 	addi	sp,sp,-40
 c00c628:	00830074 	movhi	r2,3073
 c00c62c:	dc800615 	stw	r18,24(sp)
 c00c630:	dc400515 	stw	r17,20(sp)
 c00c634:	1091ca04 	addi	r2,r2,18216
 c00c638:	dfc00915 	stw	ra,36(sp)
 c00c63c:	dd000815 	stw	r20,32(sp)
 c00c640:	dcc00715 	stw	r19,28(sp)
 c00c644:	dc000415 	stw	r16,16(sp)
 c00c648:	3025883a 	mov	r18,r6
 c00c64c:	14400017 	ldw	r17,0(r2)
 c00c650:	20001926 	beq	r4,zero,c00c6b8 <wcrtomb+0x94>
 c00c654:	00830074 	movhi	r2,3073
 c00c658:	1091ce04 	addi	r2,r2,18232
 c00c65c:	15000017 	ldw	r20,0(r2)
 c00c660:	2021883a 	mov	r16,r4
 c00c664:	2827883a 	mov	r19,r5
 c00c668:	c007df00 	call	c007df0 <__locale_charset>
 c00c66c:	100f883a 	mov	r7,r2
 c00c670:	dc800015 	stw	r18,0(sp)
 c00c674:	980d883a 	mov	r6,r19
 c00c678:	800b883a 	mov	r5,r16
 c00c67c:	8809883a 	mov	r4,r17
 c00c680:	a03ee83a 	callr	r20
 c00c684:	00ffffc4 	movi	r3,-1
 c00c688:	10c0031e 	bne	r2,r3,c00c698 <wcrtomb+0x74>
 c00c68c:	90000015 	stw	zero,0(r18)
 c00c690:	00c02284 	movi	r3,138
 c00c694:	88c00015 	stw	r3,0(r17)
 c00c698:	dfc00917 	ldw	ra,36(sp)
 c00c69c:	dd000817 	ldw	r20,32(sp)
 c00c6a0:	dcc00717 	ldw	r19,28(sp)
 c00c6a4:	dc800617 	ldw	r18,24(sp)
 c00c6a8:	dc400517 	ldw	r17,20(sp)
 c00c6ac:	dc000417 	ldw	r16,16(sp)
 c00c6b0:	dec00a04 	addi	sp,sp,40
 c00c6b4:	f800283a 	ret
 c00c6b8:	00830074 	movhi	r2,3073
 c00c6bc:	1091ce04 	addi	r2,r2,18232
 c00c6c0:	14000017 	ldw	r16,0(r2)
 c00c6c4:	c007df00 	call	c007df0 <__locale_charset>
 c00c6c8:	100f883a 	mov	r7,r2
 c00c6cc:	dc800015 	stw	r18,0(sp)
 c00c6d0:	000d883a 	mov	r6,zero
 c00c6d4:	d9400104 	addi	r5,sp,4
 c00c6d8:	8809883a 	mov	r4,r17
 c00c6dc:	803ee83a 	callr	r16
 c00c6e0:	003fe806 	br	c00c684 <__alt_data_end+0xfc00c684>

0c00c6e4 <__ascii_wctomb>:
 c00c6e4:	28000526 	beq	r5,zero,c00c6fc <__ascii_wctomb+0x18>
 c00c6e8:	00803fc4 	movi	r2,255
 c00c6ec:	11800536 	bltu	r2,r6,c00c704 <__ascii_wctomb+0x20>
 c00c6f0:	29800005 	stb	r6,0(r5)
 c00c6f4:	00800044 	movi	r2,1
 c00c6f8:	f800283a 	ret
 c00c6fc:	0005883a 	mov	r2,zero
 c00c700:	f800283a 	ret
 c00c704:	00802284 	movi	r2,138
 c00c708:	20800015 	stw	r2,0(r4)
 c00c70c:	00bfffc4 	movi	r2,-1
 c00c710:	f800283a 	ret

0c00c714 <_wctomb_r>:
 c00c714:	00830074 	movhi	r2,3073
 c00c718:	defff904 	addi	sp,sp,-28
 c00c71c:	1091ce04 	addi	r2,r2,18232
 c00c720:	dfc00615 	stw	ra,24(sp)
 c00c724:	dc400515 	stw	r17,20(sp)
 c00c728:	dc000415 	stw	r16,16(sp)
 c00c72c:	3823883a 	mov	r17,r7
 c00c730:	14000017 	ldw	r16,0(r2)
 c00c734:	d9000115 	stw	r4,4(sp)
 c00c738:	d9400215 	stw	r5,8(sp)
 c00c73c:	d9800315 	stw	r6,12(sp)
 c00c740:	c007df00 	call	c007df0 <__locale_charset>
 c00c744:	d9800317 	ldw	r6,12(sp)
 c00c748:	d9400217 	ldw	r5,8(sp)
 c00c74c:	d9000117 	ldw	r4,4(sp)
 c00c750:	100f883a 	mov	r7,r2
 c00c754:	dc400015 	stw	r17,0(sp)
 c00c758:	803ee83a 	callr	r16
 c00c75c:	dfc00617 	ldw	ra,24(sp)
 c00c760:	dc400517 	ldw	r17,20(sp)
 c00c764:	dc000417 	ldw	r16,16(sp)
 c00c768:	dec00704 	addi	sp,sp,28
 c00c76c:	f800283a 	ret

0c00c770 <__udivdi3>:
 c00c770:	defff404 	addi	sp,sp,-48
 c00c774:	dcc00515 	stw	r19,20(sp)
 c00c778:	dc000215 	stw	r16,8(sp)
 c00c77c:	dfc00b15 	stw	ra,44(sp)
 c00c780:	df000a15 	stw	fp,40(sp)
 c00c784:	ddc00915 	stw	r23,36(sp)
 c00c788:	dd800815 	stw	r22,32(sp)
 c00c78c:	dd400715 	stw	r21,28(sp)
 c00c790:	dd000615 	stw	r20,24(sp)
 c00c794:	dc800415 	stw	r18,16(sp)
 c00c798:	dc400315 	stw	r17,12(sp)
 c00c79c:	2027883a 	mov	r19,r4
 c00c7a0:	2821883a 	mov	r16,r5
 c00c7a4:	3800461e 	bne	r7,zero,c00c8c0 <__udivdi3+0x150>
 c00c7a8:	3023883a 	mov	r17,r6
 c00c7ac:	2025883a 	mov	r18,r4
 c00c7b0:	2980572e 	bgeu	r5,r6,c00c910 <__udivdi3+0x1a0>
 c00c7b4:	00bfffd4 	movui	r2,65535
 c00c7b8:	282d883a 	mov	r22,r5
 c00c7bc:	1180b236 	bltu	r2,r6,c00ca88 <__udivdi3+0x318>
 c00c7c0:	00803fc4 	movi	r2,255
 c00c7c4:	1185803a 	cmpltu	r2,r2,r6
 c00c7c8:	100490fa 	slli	r2,r2,3
 c00c7cc:	3086d83a 	srl	r3,r6,r2
 c00c7d0:	01030074 	movhi	r4,3073
 c00c7d4:	210ac104 	addi	r4,r4,11012
 c00c7d8:	20c7883a 	add	r3,r4,r3
 c00c7dc:	18c00003 	ldbu	r3,0(r3)
 c00c7e0:	1885883a 	add	r2,r3,r2
 c00c7e4:	00c00804 	movi	r3,32
 c00c7e8:	1887c83a 	sub	r3,r3,r2
 c00c7ec:	18000526 	beq	r3,zero,c00c804 <__udivdi3+0x94>
 c00c7f0:	80e0983a 	sll	r16,r16,r3
 c00c7f4:	9884d83a 	srl	r2,r19,r2
 c00c7f8:	30e2983a 	sll	r17,r6,r3
 c00c7fc:	98e4983a 	sll	r18,r19,r3
 c00c800:	142cb03a 	or	r22,r2,r16
 c00c804:	882ad43a 	srli	r21,r17,16
 c00c808:	b009883a 	mov	r4,r22
 c00c80c:	8d3fffcc 	andi	r20,r17,65535
 c00c810:	a80b883a 	mov	r5,r21
 c00c814:	c002c680 	call	c002c68 <__umodsi3>
 c00c818:	b009883a 	mov	r4,r22
 c00c81c:	a80b883a 	mov	r5,r21
 c00c820:	1027883a 	mov	r19,r2
 c00c824:	c002c040 	call	c002c04 <__udivsi3>
 c00c828:	100b883a 	mov	r5,r2
 c00c82c:	a009883a 	mov	r4,r20
 c00c830:	102d883a 	mov	r22,r2
 c00c834:	c002cc00 	call	c002cc0 <__mulsi3>
 c00c838:	9826943a 	slli	r19,r19,16
 c00c83c:	9006d43a 	srli	r3,r18,16
 c00c840:	1cc6b03a 	or	r3,r3,r19
 c00c844:	1880052e 	bgeu	r3,r2,c00c85c <__udivdi3+0xec>
 c00c848:	1c47883a 	add	r3,r3,r17
 c00c84c:	b13fffc4 	addi	r4,r22,-1
 c00c850:	1c400136 	bltu	r3,r17,c00c858 <__udivdi3+0xe8>
 c00c854:	18814236 	bltu	r3,r2,c00cd60 <__udivdi3+0x5f0>
 c00c858:	202d883a 	mov	r22,r4
 c00c85c:	18a1c83a 	sub	r16,r3,r2
 c00c860:	8009883a 	mov	r4,r16
 c00c864:	a80b883a 	mov	r5,r21
 c00c868:	c002c680 	call	c002c68 <__umodsi3>
 c00c86c:	1027883a 	mov	r19,r2
 c00c870:	8009883a 	mov	r4,r16
 c00c874:	a80b883a 	mov	r5,r21
 c00c878:	9826943a 	slli	r19,r19,16
 c00c87c:	c002c040 	call	c002c04 <__udivsi3>
 c00c880:	100b883a 	mov	r5,r2
 c00c884:	a009883a 	mov	r4,r20
 c00c888:	94bfffcc 	andi	r18,r18,65535
 c00c88c:	1021883a 	mov	r16,r2
 c00c890:	94e4b03a 	or	r18,r18,r19
 c00c894:	c002cc00 	call	c002cc0 <__mulsi3>
 c00c898:	9080052e 	bgeu	r18,r2,c00c8b0 <__udivdi3+0x140>
 c00c89c:	8ca5883a 	add	r18,r17,r18
 c00c8a0:	80ffffc4 	addi	r3,r16,-1
 c00c8a4:	94410c36 	bltu	r18,r17,c00ccd8 <__udivdi3+0x568>
 c00c8a8:	90810b2e 	bgeu	r18,r2,c00ccd8 <__udivdi3+0x568>
 c00c8ac:	843fff84 	addi	r16,r16,-2
 c00c8b0:	b004943a 	slli	r2,r22,16
 c00c8b4:	0007883a 	mov	r3,zero
 c00c8b8:	1404b03a 	or	r2,r2,r16
 c00c8bc:	00005e06 	br	c00ca38 <__udivdi3+0x2c8>
 c00c8c0:	29c05b36 	bltu	r5,r7,c00ca30 <__udivdi3+0x2c0>
 c00c8c4:	00bfffd4 	movui	r2,65535
 c00c8c8:	11c0672e 	bgeu	r2,r7,c00ca68 <__udivdi3+0x2f8>
 c00c8cc:	00804034 	movhi	r2,256
 c00c8d0:	10bfffc4 	addi	r2,r2,-1
 c00c8d4:	11c10a36 	bltu	r2,r7,c00cd00 <__udivdi3+0x590>
 c00c8d8:	00800404 	movi	r2,16
 c00c8dc:	3886d83a 	srl	r3,r7,r2
 c00c8e0:	01030074 	movhi	r4,3073
 c00c8e4:	210ac104 	addi	r4,r4,11012
 c00c8e8:	20c7883a 	add	r3,r4,r3
 c00c8ec:	18c00003 	ldbu	r3,0(r3)
 c00c8f0:	05c00804 	movi	r23,32
 c00c8f4:	1885883a 	add	r2,r3,r2
 c00c8f8:	b8afc83a 	sub	r23,r23,r2
 c00c8fc:	b800671e 	bne	r23,zero,c00ca9c <__udivdi3+0x32c>
 c00c900:	3c010536 	bltu	r7,r16,c00cd18 <__udivdi3+0x5a8>
 c00c904:	9985403a 	cmpgeu	r2,r19,r6
 c00c908:	0007883a 	mov	r3,zero
 c00c90c:	00004a06 	br	c00ca38 <__udivdi3+0x2c8>
 c00c910:	3000041e 	bne	r6,zero,c00c924 <__udivdi3+0x1b4>
 c00c914:	000b883a 	mov	r5,zero
 c00c918:	01000044 	movi	r4,1
 c00c91c:	c002c040 	call	c002c04 <__udivsi3>
 c00c920:	1023883a 	mov	r17,r2
 c00c924:	00bfffd4 	movui	r2,65535
 c00c928:	1440532e 	bgeu	r2,r17,c00ca78 <__udivdi3+0x308>
 c00c92c:	00804034 	movhi	r2,256
 c00c930:	10bfffc4 	addi	r2,r2,-1
 c00c934:	1440f436 	bltu	r2,r17,c00cd08 <__udivdi3+0x598>
 c00c938:	00800404 	movi	r2,16
 c00c93c:	8886d83a 	srl	r3,r17,r2
 c00c940:	01030074 	movhi	r4,3073
 c00c944:	210ac104 	addi	r4,r4,11012
 c00c948:	20c7883a 	add	r3,r4,r3
 c00c94c:	18c00003 	ldbu	r3,0(r3)
 c00c950:	1885883a 	add	r2,r3,r2
 c00c954:	00c00804 	movi	r3,32
 c00c958:	1887c83a 	sub	r3,r3,r2
 c00c95c:	1800a51e 	bne	r3,zero,c00cbf4 <__udivdi3+0x484>
 c00c960:	882ad43a 	srli	r21,r17,16
 c00c964:	8461c83a 	sub	r16,r16,r17
 c00c968:	8d3fffcc 	andi	r20,r17,65535
 c00c96c:	00c00044 	movi	r3,1
 c00c970:	a80b883a 	mov	r5,r21
 c00c974:	8009883a 	mov	r4,r16
 c00c978:	d8c00115 	stw	r3,4(sp)
 c00c97c:	c002c680 	call	c002c68 <__umodsi3>
 c00c980:	a80b883a 	mov	r5,r21
 c00c984:	8009883a 	mov	r4,r16
 c00c988:	1027883a 	mov	r19,r2
 c00c98c:	c002c040 	call	c002c04 <__udivsi3>
 c00c990:	a00b883a 	mov	r5,r20
 c00c994:	1009883a 	mov	r4,r2
 c00c998:	102d883a 	mov	r22,r2
 c00c99c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00c9a0:	9826943a 	slli	r19,r19,16
 c00c9a4:	900ed43a 	srli	r7,r18,16
 c00c9a8:	d8c00117 	ldw	r3,4(sp)
 c00c9ac:	3cceb03a 	or	r7,r7,r19
 c00c9b0:	3880052e 	bgeu	r7,r2,c00c9c8 <__udivdi3+0x258>
 c00c9b4:	3c4f883a 	add	r7,r7,r17
 c00c9b8:	b13fffc4 	addi	r4,r22,-1
 c00c9bc:	3c400136 	bltu	r7,r17,c00c9c4 <__udivdi3+0x254>
 c00c9c0:	3880e436 	bltu	r7,r2,c00cd54 <__udivdi3+0x5e4>
 c00c9c4:	202d883a 	mov	r22,r4
 c00c9c8:	38a1c83a 	sub	r16,r7,r2
 c00c9cc:	8009883a 	mov	r4,r16
 c00c9d0:	a80b883a 	mov	r5,r21
 c00c9d4:	d8c00115 	stw	r3,4(sp)
 c00c9d8:	c002c680 	call	c002c68 <__umodsi3>
 c00c9dc:	1027883a 	mov	r19,r2
 c00c9e0:	8009883a 	mov	r4,r16
 c00c9e4:	a80b883a 	mov	r5,r21
 c00c9e8:	9826943a 	slli	r19,r19,16
 c00c9ec:	c002c040 	call	c002c04 <__udivsi3>
 c00c9f0:	a00b883a 	mov	r5,r20
 c00c9f4:	1009883a 	mov	r4,r2
 c00c9f8:	94bfffcc 	andi	r18,r18,65535
 c00c9fc:	1021883a 	mov	r16,r2
 c00ca00:	94e4b03a 	or	r18,r18,r19
 c00ca04:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ca08:	d8c00117 	ldw	r3,4(sp)
 c00ca0c:	9080052e 	bgeu	r18,r2,c00ca24 <__udivdi3+0x2b4>
 c00ca10:	8ca5883a 	add	r18,r17,r18
 c00ca14:	813fffc4 	addi	r4,r16,-1
 c00ca18:	9440ad36 	bltu	r18,r17,c00ccd0 <__udivdi3+0x560>
 c00ca1c:	9080ac2e 	bgeu	r18,r2,c00ccd0 <__udivdi3+0x560>
 c00ca20:	843fff84 	addi	r16,r16,-2
 c00ca24:	b004943a 	slli	r2,r22,16
 c00ca28:	1404b03a 	or	r2,r2,r16
 c00ca2c:	00000206 	br	c00ca38 <__udivdi3+0x2c8>
 c00ca30:	0007883a 	mov	r3,zero
 c00ca34:	0005883a 	mov	r2,zero
 c00ca38:	dfc00b17 	ldw	ra,44(sp)
 c00ca3c:	df000a17 	ldw	fp,40(sp)
 c00ca40:	ddc00917 	ldw	r23,36(sp)
 c00ca44:	dd800817 	ldw	r22,32(sp)
 c00ca48:	dd400717 	ldw	r21,28(sp)
 c00ca4c:	dd000617 	ldw	r20,24(sp)
 c00ca50:	dcc00517 	ldw	r19,20(sp)
 c00ca54:	dc800417 	ldw	r18,16(sp)
 c00ca58:	dc400317 	ldw	r17,12(sp)
 c00ca5c:	dc000217 	ldw	r16,8(sp)
 c00ca60:	dec00c04 	addi	sp,sp,48
 c00ca64:	f800283a 	ret
 c00ca68:	00803fc4 	movi	r2,255
 c00ca6c:	11c5803a 	cmpltu	r2,r2,r7
 c00ca70:	100490fa 	slli	r2,r2,3
 c00ca74:	003f9906 	br	c00c8dc <__alt_data_end+0xfc00c8dc>
 c00ca78:	00803fc4 	movi	r2,255
 c00ca7c:	1445803a 	cmpltu	r2,r2,r17
 c00ca80:	100490fa 	slli	r2,r2,3
 c00ca84:	003fad06 	br	c00c93c <__alt_data_end+0xfc00c93c>
 c00ca88:	00804034 	movhi	r2,256
 c00ca8c:	10bfffc4 	addi	r2,r2,-1
 c00ca90:	11809f36 	bltu	r2,r6,c00cd10 <__udivdi3+0x5a0>
 c00ca94:	00800404 	movi	r2,16
 c00ca98:	003f4c06 	br	c00c7cc <__alt_data_end+0xfc00c7cc>
 c00ca9c:	3dce983a 	sll	r7,r7,r23
 c00caa0:	30b8d83a 	srl	fp,r6,r2
 c00caa4:	80a2d83a 	srl	r17,r16,r2
 c00caa8:	35cc983a 	sll	r6,r6,r23
 c00caac:	3f38b03a 	or	fp,r7,fp
 c00cab0:	e024d43a 	srli	r18,fp,16
 c00cab4:	9884d83a 	srl	r2,r19,r2
 c00cab8:	85e0983a 	sll	r16,r16,r23
 c00cabc:	8809883a 	mov	r4,r17
 c00cac0:	900b883a 	mov	r5,r18
 c00cac4:	d9800015 	stw	r6,0(sp)
 c00cac8:	1420b03a 	or	r16,r2,r16
 c00cacc:	c002c680 	call	c002c68 <__umodsi3>
 c00cad0:	900b883a 	mov	r5,r18
 c00cad4:	8809883a 	mov	r4,r17
 c00cad8:	1029883a 	mov	r20,r2
 c00cadc:	e5bfffcc 	andi	r22,fp,65535
 c00cae0:	c002c040 	call	c002c04 <__udivsi3>
 c00cae4:	100b883a 	mov	r5,r2
 c00cae8:	b009883a 	mov	r4,r22
 c00caec:	102b883a 	mov	r21,r2
 c00caf0:	c002cc00 	call	c002cc0 <__mulsi3>
 c00caf4:	a028943a 	slli	r20,r20,16
 c00caf8:	8006d43a 	srli	r3,r16,16
 c00cafc:	1d06b03a 	or	r3,r3,r20
 c00cb00:	1880042e 	bgeu	r3,r2,c00cb14 <__udivdi3+0x3a4>
 c00cb04:	1f07883a 	add	r3,r3,fp
 c00cb08:	a93fffc4 	addi	r4,r21,-1
 c00cb0c:	1f00892e 	bgeu	r3,fp,c00cd34 <__udivdi3+0x5c4>
 c00cb10:	202b883a 	mov	r21,r4
 c00cb14:	18a3c83a 	sub	r17,r3,r2
 c00cb18:	8809883a 	mov	r4,r17
 c00cb1c:	900b883a 	mov	r5,r18
 c00cb20:	c002c680 	call	c002c68 <__umodsi3>
 c00cb24:	1029883a 	mov	r20,r2
 c00cb28:	8809883a 	mov	r4,r17
 c00cb2c:	900b883a 	mov	r5,r18
 c00cb30:	a028943a 	slli	r20,r20,16
 c00cb34:	c002c040 	call	c002c04 <__udivsi3>
 c00cb38:	100b883a 	mov	r5,r2
 c00cb3c:	b009883a 	mov	r4,r22
 c00cb40:	843fffcc 	andi	r16,r16,65535
 c00cb44:	1023883a 	mov	r17,r2
 c00cb48:	8520b03a 	or	r16,r16,r20
 c00cb4c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cb50:	8080042e 	bgeu	r16,r2,c00cb64 <__udivdi3+0x3f4>
 c00cb54:	8721883a 	add	r16,r16,fp
 c00cb58:	88ffffc4 	addi	r3,r17,-1
 c00cb5c:	8700712e 	bgeu	r16,fp,c00cd24 <__udivdi3+0x5b4>
 c00cb60:	1823883a 	mov	r17,r3
 c00cb64:	a80e943a 	slli	r7,r21,16
 c00cb68:	d8c00017 	ldw	r3,0(sp)
 c00cb6c:	80a1c83a 	sub	r16,r16,r2
 c00cb70:	3c64b03a 	or	r18,r7,r17
 c00cb74:	1d3fffcc 	andi	r20,r3,65535
 c00cb78:	9022d43a 	srli	r17,r18,16
 c00cb7c:	95bfffcc 	andi	r22,r18,65535
 c00cb80:	a00b883a 	mov	r5,r20
 c00cb84:	b009883a 	mov	r4,r22
 c00cb88:	182ad43a 	srli	r21,r3,16
 c00cb8c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cb90:	a00b883a 	mov	r5,r20
 c00cb94:	8809883a 	mov	r4,r17
 c00cb98:	1039883a 	mov	fp,r2
 c00cb9c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cba0:	8809883a 	mov	r4,r17
 c00cba4:	a80b883a 	mov	r5,r21
 c00cba8:	1029883a 	mov	r20,r2
 c00cbac:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cbb0:	a80b883a 	mov	r5,r21
 c00cbb4:	b009883a 	mov	r4,r22
 c00cbb8:	1023883a 	mov	r17,r2
 c00cbbc:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cbc0:	e006d43a 	srli	r3,fp,16
 c00cbc4:	1505883a 	add	r2,r2,r20
 c00cbc8:	1887883a 	add	r3,r3,r2
 c00cbcc:	1d00022e 	bgeu	r3,r20,c00cbd8 <__udivdi3+0x468>
 c00cbd0:	00800074 	movhi	r2,1
 c00cbd4:	88a3883a 	add	r17,r17,r2
 c00cbd8:	1804d43a 	srli	r2,r3,16
 c00cbdc:	1463883a 	add	r17,r2,r17
 c00cbe0:	84404436 	bltu	r16,r17,c00ccf4 <__udivdi3+0x584>
 c00cbe4:	84403e26 	beq	r16,r17,c00cce0 <__udivdi3+0x570>
 c00cbe8:	9005883a 	mov	r2,r18
 c00cbec:	0007883a 	mov	r3,zero
 c00cbf0:	003f9106 	br	c00ca38 <__alt_data_end+0xfc00ca38>
 c00cbf4:	88e2983a 	sll	r17,r17,r3
 c00cbf8:	80aed83a 	srl	r23,r16,r2
 c00cbfc:	80e0983a 	sll	r16,r16,r3
 c00cc00:	882ad43a 	srli	r21,r17,16
 c00cc04:	9884d83a 	srl	r2,r19,r2
 c00cc08:	b809883a 	mov	r4,r23
 c00cc0c:	a80b883a 	mov	r5,r21
 c00cc10:	98e4983a 	sll	r18,r19,r3
 c00cc14:	142cb03a 	or	r22,r2,r16
 c00cc18:	c002c680 	call	c002c68 <__umodsi3>
 c00cc1c:	b809883a 	mov	r4,r23
 c00cc20:	a80b883a 	mov	r5,r21
 c00cc24:	1027883a 	mov	r19,r2
 c00cc28:	8d3fffcc 	andi	r20,r17,65535
 c00cc2c:	c002c040 	call	c002c04 <__udivsi3>
 c00cc30:	a009883a 	mov	r4,r20
 c00cc34:	100b883a 	mov	r5,r2
 c00cc38:	102f883a 	mov	r23,r2
 c00cc3c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cc40:	9826943a 	slli	r19,r19,16
 c00cc44:	b008d43a 	srli	r4,r22,16
 c00cc48:	24c8b03a 	or	r4,r4,r19
 c00cc4c:	2080062e 	bgeu	r4,r2,c00cc68 <__udivdi3+0x4f8>
 c00cc50:	2449883a 	add	r4,r4,r17
 c00cc54:	b8ffffc4 	addi	r3,r23,-1
 c00cc58:	24403c36 	bltu	r4,r17,c00cd4c <__udivdi3+0x5dc>
 c00cc5c:	20803b2e 	bgeu	r4,r2,c00cd4c <__udivdi3+0x5dc>
 c00cc60:	bdffff84 	addi	r23,r23,-2
 c00cc64:	2449883a 	add	r4,r4,r17
 c00cc68:	20a1c83a 	sub	r16,r4,r2
 c00cc6c:	a80b883a 	mov	r5,r21
 c00cc70:	8009883a 	mov	r4,r16
 c00cc74:	c002c680 	call	c002c68 <__umodsi3>
 c00cc78:	a80b883a 	mov	r5,r21
 c00cc7c:	8009883a 	mov	r4,r16
 c00cc80:	1027883a 	mov	r19,r2
 c00cc84:	c002c040 	call	c002c04 <__udivsi3>
 c00cc88:	a009883a 	mov	r4,r20
 c00cc8c:	100b883a 	mov	r5,r2
 c00cc90:	9826943a 	slli	r19,r19,16
 c00cc94:	1039883a 	mov	fp,r2
 c00cc98:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cc9c:	b13fffcc 	andi	r4,r22,65535
 c00cca0:	24c8b03a 	or	r4,r4,r19
 c00cca4:	2080062e 	bgeu	r4,r2,c00ccc0 <__udivdi3+0x550>
 c00cca8:	2449883a 	add	r4,r4,r17
 c00ccac:	e0ffffc4 	addi	r3,fp,-1
 c00ccb0:	24402436 	bltu	r4,r17,c00cd44 <__udivdi3+0x5d4>
 c00ccb4:	2080232e 	bgeu	r4,r2,c00cd44 <__udivdi3+0x5d4>
 c00ccb8:	e73fff84 	addi	fp,fp,-2
 c00ccbc:	2449883a 	add	r4,r4,r17
 c00ccc0:	b82e943a 	slli	r23,r23,16
 c00ccc4:	20a1c83a 	sub	r16,r4,r2
 c00ccc8:	bf06b03a 	or	r3,r23,fp
 c00cccc:	003f2806 	br	c00c970 <__alt_data_end+0xfc00c970>
 c00ccd0:	2021883a 	mov	r16,r4
 c00ccd4:	003f5306 	br	c00ca24 <__alt_data_end+0xfc00ca24>
 c00ccd8:	1821883a 	mov	r16,r3
 c00ccdc:	003ef406 	br	c00c8b0 <__alt_data_end+0xfc00c8b0>
 c00cce0:	1806943a 	slli	r3,r3,16
 c00cce4:	9de6983a 	sll	r19,r19,r23
 c00cce8:	e73fffcc 	andi	fp,fp,65535
 c00ccec:	1f07883a 	add	r3,r3,fp
 c00ccf0:	98ffbd2e 	bgeu	r19,r3,c00cbe8 <__alt_data_end+0xfc00cbe8>
 c00ccf4:	90bfffc4 	addi	r2,r18,-1
 c00ccf8:	0007883a 	mov	r3,zero
 c00ccfc:	003f4e06 	br	c00ca38 <__alt_data_end+0xfc00ca38>
 c00cd00:	00800604 	movi	r2,24
 c00cd04:	003ef506 	br	c00c8dc <__alt_data_end+0xfc00c8dc>
 c00cd08:	00800604 	movi	r2,24
 c00cd0c:	003f0b06 	br	c00c93c <__alt_data_end+0xfc00c93c>
 c00cd10:	00800604 	movi	r2,24
 c00cd14:	003ead06 	br	c00c7cc <__alt_data_end+0xfc00c7cc>
 c00cd18:	0007883a 	mov	r3,zero
 c00cd1c:	00800044 	movi	r2,1
 c00cd20:	003f4506 	br	c00ca38 <__alt_data_end+0xfc00ca38>
 c00cd24:	80bf8e2e 	bgeu	r16,r2,c00cb60 <__alt_data_end+0xfc00cb60>
 c00cd28:	8c7fff84 	addi	r17,r17,-2
 c00cd2c:	8721883a 	add	r16,r16,fp
 c00cd30:	003f8c06 	br	c00cb64 <__alt_data_end+0xfc00cb64>
 c00cd34:	18bf762e 	bgeu	r3,r2,c00cb10 <__alt_data_end+0xfc00cb10>
 c00cd38:	ad7fff84 	addi	r21,r21,-2
 c00cd3c:	1f07883a 	add	r3,r3,fp
 c00cd40:	003f7406 	br	c00cb14 <__alt_data_end+0xfc00cb14>
 c00cd44:	1839883a 	mov	fp,r3
 c00cd48:	003fdd06 	br	c00ccc0 <__alt_data_end+0xfc00ccc0>
 c00cd4c:	182f883a 	mov	r23,r3
 c00cd50:	003fc506 	br	c00cc68 <__alt_data_end+0xfc00cc68>
 c00cd54:	b5bfff84 	addi	r22,r22,-2
 c00cd58:	3c4f883a 	add	r7,r7,r17
 c00cd5c:	003f1a06 	br	c00c9c8 <__alt_data_end+0xfc00c9c8>
 c00cd60:	b5bfff84 	addi	r22,r22,-2
 c00cd64:	1c47883a 	add	r3,r3,r17
 c00cd68:	003ebc06 	br	c00c85c <__alt_data_end+0xfc00c85c>

0c00cd6c <__umoddi3>:
 c00cd6c:	defff304 	addi	sp,sp,-52
 c00cd70:	df000b15 	stw	fp,44(sp)
 c00cd74:	dc400415 	stw	r17,16(sp)
 c00cd78:	dc000315 	stw	r16,12(sp)
 c00cd7c:	dfc00c15 	stw	ra,48(sp)
 c00cd80:	ddc00a15 	stw	r23,40(sp)
 c00cd84:	dd800915 	stw	r22,36(sp)
 c00cd88:	dd400815 	stw	r21,32(sp)
 c00cd8c:	dd000715 	stw	r20,28(sp)
 c00cd90:	dcc00615 	stw	r19,24(sp)
 c00cd94:	dc800515 	stw	r18,20(sp)
 c00cd98:	2021883a 	mov	r16,r4
 c00cd9c:	2823883a 	mov	r17,r5
 c00cda0:	2839883a 	mov	fp,r5
 c00cda4:	3800401e 	bne	r7,zero,c00cea8 <__umoddi3+0x13c>
 c00cda8:	3027883a 	mov	r19,r6
 c00cdac:	2029883a 	mov	r20,r4
 c00cdb0:	2980552e 	bgeu	r5,r6,c00cf08 <__umoddi3+0x19c>
 c00cdb4:	00bfffd4 	movui	r2,65535
 c00cdb8:	1180a236 	bltu	r2,r6,c00d044 <__umoddi3+0x2d8>
 c00cdbc:	01003fc4 	movi	r4,255
 c00cdc0:	2189803a 	cmpltu	r4,r4,r6
 c00cdc4:	200890fa 	slli	r4,r4,3
 c00cdc8:	3104d83a 	srl	r2,r6,r4
 c00cdcc:	00c30074 	movhi	r3,3073
 c00cdd0:	18cac104 	addi	r3,r3,11012
 c00cdd4:	1885883a 	add	r2,r3,r2
 c00cdd8:	10c00003 	ldbu	r3,0(r2)
 c00cddc:	00800804 	movi	r2,32
 c00cde0:	1909883a 	add	r4,r3,r4
 c00cde4:	1125c83a 	sub	r18,r2,r4
 c00cde8:	90000526 	beq	r18,zero,c00ce00 <__umoddi3+0x94>
 c00cdec:	8ca2983a 	sll	r17,r17,r18
 c00cdf0:	8108d83a 	srl	r4,r16,r4
 c00cdf4:	34a6983a 	sll	r19,r6,r18
 c00cdf8:	84a8983a 	sll	r20,r16,r18
 c00cdfc:	2478b03a 	or	fp,r4,r17
 c00ce00:	982cd43a 	srli	r22,r19,16
 c00ce04:	e009883a 	mov	r4,fp
 c00ce08:	9dffffcc 	andi	r23,r19,65535
 c00ce0c:	b00b883a 	mov	r5,r22
 c00ce10:	c002c680 	call	c002c68 <__umodsi3>
 c00ce14:	b00b883a 	mov	r5,r22
 c00ce18:	e009883a 	mov	r4,fp
 c00ce1c:	102b883a 	mov	r21,r2
 c00ce20:	c002c040 	call	c002c04 <__udivsi3>
 c00ce24:	100b883a 	mov	r5,r2
 c00ce28:	b809883a 	mov	r4,r23
 c00ce2c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ce30:	a82a943a 	slli	r21,r21,16
 c00ce34:	a006d43a 	srli	r3,r20,16
 c00ce38:	1d46b03a 	or	r3,r3,r21
 c00ce3c:	1880032e 	bgeu	r3,r2,c00ce4c <__umoddi3+0xe0>
 c00ce40:	1cc7883a 	add	r3,r3,r19
 c00ce44:	1cc00136 	bltu	r3,r19,c00ce4c <__umoddi3+0xe0>
 c00ce48:	18813136 	bltu	r3,r2,c00d310 <__umoddi3+0x5a4>
 c00ce4c:	18a1c83a 	sub	r16,r3,r2
 c00ce50:	b00b883a 	mov	r5,r22
 c00ce54:	8009883a 	mov	r4,r16
 c00ce58:	c002c680 	call	c002c68 <__umodsi3>
 c00ce5c:	b00b883a 	mov	r5,r22
 c00ce60:	8009883a 	mov	r4,r16
 c00ce64:	1023883a 	mov	r17,r2
 c00ce68:	c002c040 	call	c002c04 <__udivsi3>
 c00ce6c:	100b883a 	mov	r5,r2
 c00ce70:	b809883a 	mov	r4,r23
 c00ce74:	8822943a 	slli	r17,r17,16
 c00ce78:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ce7c:	a0ffffcc 	andi	r3,r20,65535
 c00ce80:	1c46b03a 	or	r3,r3,r17
 c00ce84:	1880042e 	bgeu	r3,r2,c00ce98 <__umoddi3+0x12c>
 c00ce88:	1cc7883a 	add	r3,r3,r19
 c00ce8c:	1cc00236 	bltu	r3,r19,c00ce98 <__umoddi3+0x12c>
 c00ce90:	1880012e 	bgeu	r3,r2,c00ce98 <__umoddi3+0x12c>
 c00ce94:	1cc7883a 	add	r3,r3,r19
 c00ce98:	1885c83a 	sub	r2,r3,r2
 c00ce9c:	1484d83a 	srl	r2,r2,r18
 c00cea0:	0007883a 	mov	r3,zero
 c00cea4:	00005306 	br	c00cff4 <__umoddi3+0x288>
 c00cea8:	29c05036 	bltu	r5,r7,c00cfec <__umoddi3+0x280>
 c00ceac:	00bfffd4 	movui	r2,65535
 c00ceb0:	11c05c2e 	bgeu	r2,r7,c00d024 <__umoddi3+0x2b8>
 c00ceb4:	00804034 	movhi	r2,256
 c00ceb8:	10bfffc4 	addi	r2,r2,-1
 c00cebc:	11c10636 	bltu	r2,r7,c00d2d8 <__umoddi3+0x56c>
 c00cec0:	01000404 	movi	r4,16
 c00cec4:	3904d83a 	srl	r2,r7,r4
 c00cec8:	00c30074 	movhi	r3,3073
 c00cecc:	18cac104 	addi	r3,r3,11012
 c00ced0:	1885883a 	add	r2,r3,r2
 c00ced4:	14c00003 	ldbu	r19,0(r2)
 c00ced8:	00c00804 	movi	r3,32
 c00cedc:	9927883a 	add	r19,r19,r4
 c00cee0:	1ce9c83a 	sub	r20,r3,r19
 c00cee4:	a0005c1e 	bne	r20,zero,c00d058 <__umoddi3+0x2ec>
 c00cee8:	3c400136 	bltu	r7,r17,c00cef0 <__umoddi3+0x184>
 c00ceec:	81810a36 	bltu	r16,r6,c00d318 <__umoddi3+0x5ac>
 c00cef0:	8185c83a 	sub	r2,r16,r6
 c00cef4:	89e3c83a 	sub	r17,r17,r7
 c00cef8:	8089803a 	cmpltu	r4,r16,r2
 c00cefc:	8939c83a 	sub	fp,r17,r4
 c00cf00:	e007883a 	mov	r3,fp
 c00cf04:	00003b06 	br	c00cff4 <__umoddi3+0x288>
 c00cf08:	3000041e 	bne	r6,zero,c00cf1c <__umoddi3+0x1b0>
 c00cf0c:	000b883a 	mov	r5,zero
 c00cf10:	01000044 	movi	r4,1
 c00cf14:	c002c040 	call	c002c04 <__udivsi3>
 c00cf18:	1027883a 	mov	r19,r2
 c00cf1c:	00bfffd4 	movui	r2,65535
 c00cf20:	14c0442e 	bgeu	r2,r19,c00d034 <__umoddi3+0x2c8>
 c00cf24:	00804034 	movhi	r2,256
 c00cf28:	10bfffc4 	addi	r2,r2,-1
 c00cf2c:	14c0ec36 	bltu	r2,r19,c00d2e0 <__umoddi3+0x574>
 c00cf30:	00800404 	movi	r2,16
 c00cf34:	9886d83a 	srl	r3,r19,r2
 c00cf38:	01030074 	movhi	r4,3073
 c00cf3c:	210ac104 	addi	r4,r4,11012
 c00cf40:	20c7883a 	add	r3,r4,r3
 c00cf44:	18c00003 	ldbu	r3,0(r3)
 c00cf48:	1887883a 	add	r3,r3,r2
 c00cf4c:	00800804 	movi	r2,32
 c00cf50:	10e5c83a 	sub	r18,r2,r3
 c00cf54:	9000ab1e 	bne	r18,zero,c00d204 <__umoddi3+0x498>
 c00cf58:	982cd43a 	srli	r22,r19,16
 c00cf5c:	8ce3c83a 	sub	r17,r17,r19
 c00cf60:	9dffffcc 	andi	r23,r19,65535
 c00cf64:	b00b883a 	mov	r5,r22
 c00cf68:	8809883a 	mov	r4,r17
 c00cf6c:	c002c680 	call	c002c68 <__umodsi3>
 c00cf70:	b00b883a 	mov	r5,r22
 c00cf74:	8809883a 	mov	r4,r17
 c00cf78:	102b883a 	mov	r21,r2
 c00cf7c:	c002c040 	call	c002c04 <__udivsi3>
 c00cf80:	b80b883a 	mov	r5,r23
 c00cf84:	1009883a 	mov	r4,r2
 c00cf88:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cf8c:	a82a943a 	slli	r21,r21,16
 c00cf90:	a006d43a 	srli	r3,r20,16
 c00cf94:	1d46b03a 	or	r3,r3,r21
 c00cf98:	1880042e 	bgeu	r3,r2,c00cfac <__umoddi3+0x240>
 c00cf9c:	1cc7883a 	add	r3,r3,r19
 c00cfa0:	1cc00236 	bltu	r3,r19,c00cfac <__umoddi3+0x240>
 c00cfa4:	1880012e 	bgeu	r3,r2,c00cfac <__umoddi3+0x240>
 c00cfa8:	1cc7883a 	add	r3,r3,r19
 c00cfac:	18a1c83a 	sub	r16,r3,r2
 c00cfb0:	b00b883a 	mov	r5,r22
 c00cfb4:	8009883a 	mov	r4,r16
 c00cfb8:	c002c680 	call	c002c68 <__umodsi3>
 c00cfbc:	1023883a 	mov	r17,r2
 c00cfc0:	b00b883a 	mov	r5,r22
 c00cfc4:	8009883a 	mov	r4,r16
 c00cfc8:	c002c040 	call	c002c04 <__udivsi3>
 c00cfcc:	8822943a 	slli	r17,r17,16
 c00cfd0:	b80b883a 	mov	r5,r23
 c00cfd4:	1009883a 	mov	r4,r2
 c00cfd8:	c002cc00 	call	c002cc0 <__mulsi3>
 c00cfdc:	a53fffcc 	andi	r20,r20,65535
 c00cfe0:	a446b03a 	or	r3,r20,r17
 c00cfe4:	18bfac2e 	bgeu	r3,r2,c00ce98 <__alt_data_end+0xfc00ce98>
 c00cfe8:	003fa706 	br	c00ce88 <__alt_data_end+0xfc00ce88>
 c00cfec:	2005883a 	mov	r2,r4
 c00cff0:	2807883a 	mov	r3,r5
 c00cff4:	dfc00c17 	ldw	ra,48(sp)
 c00cff8:	df000b17 	ldw	fp,44(sp)
 c00cffc:	ddc00a17 	ldw	r23,40(sp)
 c00d000:	dd800917 	ldw	r22,36(sp)
 c00d004:	dd400817 	ldw	r21,32(sp)
 c00d008:	dd000717 	ldw	r20,28(sp)
 c00d00c:	dcc00617 	ldw	r19,24(sp)
 c00d010:	dc800517 	ldw	r18,20(sp)
 c00d014:	dc400417 	ldw	r17,16(sp)
 c00d018:	dc000317 	ldw	r16,12(sp)
 c00d01c:	dec00d04 	addi	sp,sp,52
 c00d020:	f800283a 	ret
 c00d024:	04c03fc4 	movi	r19,255
 c00d028:	99c9803a 	cmpltu	r4,r19,r7
 c00d02c:	200890fa 	slli	r4,r4,3
 c00d030:	003fa406 	br	c00cec4 <__alt_data_end+0xfc00cec4>
 c00d034:	00803fc4 	movi	r2,255
 c00d038:	14c5803a 	cmpltu	r2,r2,r19
 c00d03c:	100490fa 	slli	r2,r2,3
 c00d040:	003fbc06 	br	c00cf34 <__alt_data_end+0xfc00cf34>
 c00d044:	00804034 	movhi	r2,256
 c00d048:	10bfffc4 	addi	r2,r2,-1
 c00d04c:	1180a636 	bltu	r2,r6,c00d2e8 <__umoddi3+0x57c>
 c00d050:	01000404 	movi	r4,16
 c00d054:	003f5c06 	br	c00cdc8 <__alt_data_end+0xfc00cdc8>
 c00d058:	3d0e983a 	sll	r7,r7,r20
 c00d05c:	34ead83a 	srl	r21,r6,r19
 c00d060:	8cc6d83a 	srl	r3,r17,r19
 c00d064:	8d10983a 	sll	r8,r17,r20
 c00d068:	3d6ab03a 	or	r21,r7,r21
 c00d06c:	a82cd43a 	srli	r22,r21,16
 c00d070:	84e2d83a 	srl	r17,r16,r19
 c00d074:	1809883a 	mov	r4,r3
 c00d078:	b00b883a 	mov	r5,r22
 c00d07c:	8a22b03a 	or	r17,r17,r8
 c00d080:	3524983a 	sll	r18,r6,r20
 c00d084:	dc400015 	stw	r17,0(sp)
 c00d088:	d8c00115 	stw	r3,4(sp)
 c00d08c:	c002c680 	call	c002c68 <__umodsi3>
 c00d090:	d8c00117 	ldw	r3,4(sp)
 c00d094:	b00b883a 	mov	r5,r22
 c00d098:	1039883a 	mov	fp,r2
 c00d09c:	1809883a 	mov	r4,r3
 c00d0a0:	c002c040 	call	c002c04 <__udivsi3>
 c00d0a4:	adffffcc 	andi	r23,r21,65535
 c00d0a8:	100b883a 	mov	r5,r2
 c00d0ac:	b809883a 	mov	r4,r23
 c00d0b0:	1023883a 	mov	r17,r2
 c00d0b4:	c002cc00 	call	c002cc0 <__mulsi3>
 c00d0b8:	d9400017 	ldw	r5,0(sp)
 c00d0bc:	e008943a 	slli	r4,fp,16
 c00d0c0:	8520983a 	sll	r16,r16,r20
 c00d0c4:	2806d43a 	srli	r3,r5,16
 c00d0c8:	1906b03a 	or	r3,r3,r4
 c00d0cc:	1880042e 	bgeu	r3,r2,c00d0e0 <__umoddi3+0x374>
 c00d0d0:	1d47883a 	add	r3,r3,r21
 c00d0d4:	893fffc4 	addi	r4,r17,-1
 c00d0d8:	1d40892e 	bgeu	r3,r21,c00d300 <__umoddi3+0x594>
 c00d0dc:	2023883a 	mov	r17,r4
 c00d0e0:	18b9c83a 	sub	fp,r3,r2
 c00d0e4:	b00b883a 	mov	r5,r22
 c00d0e8:	e009883a 	mov	r4,fp
 c00d0ec:	c002c680 	call	c002c68 <__umodsi3>
 c00d0f0:	b00b883a 	mov	r5,r22
 c00d0f4:	e009883a 	mov	r4,fp
 c00d0f8:	d8800215 	stw	r2,8(sp)
 c00d0fc:	c002c040 	call	c002c04 <__udivsi3>
 c00d100:	100b883a 	mov	r5,r2
 c00d104:	b809883a 	mov	r4,r23
 c00d108:	102d883a 	mov	r22,r2
 c00d10c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00d110:	d9800217 	ldw	r6,8(sp)
 c00d114:	d8c00017 	ldw	r3,0(sp)
 c00d118:	300c943a 	slli	r6,r6,16
 c00d11c:	1a3fffcc 	andi	r8,r3,65535
 c00d120:	4190b03a 	or	r8,r8,r6
 c00d124:	4080042e 	bgeu	r8,r2,c00d138 <__umoddi3+0x3cc>
 c00d128:	4551883a 	add	r8,r8,r21
 c00d12c:	b0ffffc4 	addi	r3,r22,-1
 c00d130:	45406f2e 	bgeu	r8,r21,c00d2f0 <__umoddi3+0x584>
 c00d134:	182d883a 	mov	r22,r3
 c00d138:	880e943a 	slli	r7,r17,16
 c00d13c:	9006d43a 	srli	r3,r18,16
 c00d140:	91bfffcc 	andi	r6,r18,65535
 c00d144:	3dacb03a 	or	r22,r7,r22
 c00d148:	b02ed43a 	srli	r23,r22,16
 c00d14c:	b5bfffcc 	andi	r22,r22,65535
 c00d150:	300b883a 	mov	r5,r6
 c00d154:	b009883a 	mov	r4,r22
 c00d158:	40a3c83a 	sub	r17,r8,r2
 c00d15c:	d8c00115 	stw	r3,4(sp)
 c00d160:	d9800215 	stw	r6,8(sp)
 c00d164:	c002cc00 	call	c002cc0 <__mulsi3>
 c00d168:	d9800217 	ldw	r6,8(sp)
 c00d16c:	b809883a 	mov	r4,r23
 c00d170:	1039883a 	mov	fp,r2
 c00d174:	300b883a 	mov	r5,r6
 c00d178:	c002cc00 	call	c002cc0 <__mulsi3>
 c00d17c:	d8c00117 	ldw	r3,4(sp)
 c00d180:	b809883a 	mov	r4,r23
 c00d184:	d8800215 	stw	r2,8(sp)
 c00d188:	180b883a 	mov	r5,r3
 c00d18c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00d190:	d8c00117 	ldw	r3,4(sp)
 c00d194:	b009883a 	mov	r4,r22
 c00d198:	102f883a 	mov	r23,r2
 c00d19c:	180b883a 	mov	r5,r3
 c00d1a0:	c002cc00 	call	c002cc0 <__mulsi3>
 c00d1a4:	d9800217 	ldw	r6,8(sp)
 c00d1a8:	e006d43a 	srli	r3,fp,16
 c00d1ac:	1185883a 	add	r2,r2,r6
 c00d1b0:	1885883a 	add	r2,r3,r2
 c00d1b4:	1180022e 	bgeu	r2,r6,c00d1c0 <__umoddi3+0x454>
 c00d1b8:	00c00074 	movhi	r3,1
 c00d1bc:	b8ef883a 	add	r23,r23,r3
 c00d1c0:	1006d43a 	srli	r3,r2,16
 c00d1c4:	1004943a 	slli	r2,r2,16
 c00d1c8:	e73fffcc 	andi	fp,fp,65535
 c00d1cc:	1dc7883a 	add	r3,r3,r23
 c00d1d0:	1739883a 	add	fp,r2,fp
 c00d1d4:	88c03a36 	bltu	r17,r3,c00d2c0 <__umoddi3+0x554>
 c00d1d8:	88c05126 	beq	r17,r3,c00d320 <__umoddi3+0x5b4>
 c00d1dc:	88c9c83a 	sub	r4,r17,r3
 c00d1e0:	e00f883a 	mov	r7,fp
 c00d1e4:	81cfc83a 	sub	r7,r16,r7
 c00d1e8:	81c7803a 	cmpltu	r3,r16,r7
 c00d1ec:	20c7c83a 	sub	r3,r4,r3
 c00d1f0:	1cc4983a 	sll	r2,r3,r19
 c00d1f4:	3d0ed83a 	srl	r7,r7,r20
 c00d1f8:	1d06d83a 	srl	r3,r3,r20
 c00d1fc:	11c4b03a 	or	r2,r2,r7
 c00d200:	003f7c06 	br	c00cff4 <__alt_data_end+0xfc00cff4>
 c00d204:	9ca6983a 	sll	r19,r19,r18
 c00d208:	88f8d83a 	srl	fp,r17,r3
 c00d20c:	80c4d83a 	srl	r2,r16,r3
 c00d210:	982cd43a 	srli	r22,r19,16
 c00d214:	8ca2983a 	sll	r17,r17,r18
 c00d218:	e009883a 	mov	r4,fp
 c00d21c:	b00b883a 	mov	r5,r22
 c00d220:	146ab03a 	or	r21,r2,r17
 c00d224:	c002c680 	call	c002c68 <__umodsi3>
 c00d228:	b00b883a 	mov	r5,r22
 c00d22c:	e009883a 	mov	r4,fp
 c00d230:	1029883a 	mov	r20,r2
 c00d234:	9dffffcc 	andi	r23,r19,65535
 c00d238:	c002c040 	call	c002c04 <__udivsi3>
 c00d23c:	b809883a 	mov	r4,r23
 c00d240:	100b883a 	mov	r5,r2
 c00d244:	c002cc00 	call	c002cc0 <__mulsi3>
 c00d248:	a008943a 	slli	r4,r20,16
 c00d24c:	a806d43a 	srli	r3,r21,16
 c00d250:	84a8983a 	sll	r20,r16,r18
 c00d254:	1906b03a 	or	r3,r3,r4
 c00d258:	1880042e 	bgeu	r3,r2,c00d26c <__umoddi3+0x500>
 c00d25c:	1cc7883a 	add	r3,r3,r19
 c00d260:	1cc00236 	bltu	r3,r19,c00d26c <__umoddi3+0x500>
 c00d264:	1880012e 	bgeu	r3,r2,c00d26c <__umoddi3+0x500>
 c00d268:	1cc7883a 	add	r3,r3,r19
 c00d26c:	18a3c83a 	sub	r17,r3,r2
 c00d270:	b00b883a 	mov	r5,r22
 c00d274:	8809883a 	mov	r4,r17
 c00d278:	c002c680 	call	c002c68 <__umodsi3>
 c00d27c:	b00b883a 	mov	r5,r22
 c00d280:	8809883a 	mov	r4,r17
 c00d284:	1021883a 	mov	r16,r2
 c00d288:	c002c040 	call	c002c04 <__udivsi3>
 c00d28c:	100b883a 	mov	r5,r2
 c00d290:	b809883a 	mov	r4,r23
 c00d294:	8020943a 	slli	r16,r16,16
 c00d298:	c002cc00 	call	c002cc0 <__mulsi3>
 c00d29c:	a8ffffcc 	andi	r3,r21,65535
 c00d2a0:	1c06b03a 	or	r3,r3,r16
 c00d2a4:	1880042e 	bgeu	r3,r2,c00d2b8 <__umoddi3+0x54c>
 c00d2a8:	1cc7883a 	add	r3,r3,r19
 c00d2ac:	1cc00236 	bltu	r3,r19,c00d2b8 <__umoddi3+0x54c>
 c00d2b0:	1880012e 	bgeu	r3,r2,c00d2b8 <__umoddi3+0x54c>
 c00d2b4:	1cc7883a 	add	r3,r3,r19
 c00d2b8:	18a3c83a 	sub	r17,r3,r2
 c00d2bc:	003f2906 	br	c00cf64 <__alt_data_end+0xfc00cf64>
 c00d2c0:	e48fc83a 	sub	r7,fp,r18
 c00d2c4:	1d49c83a 	sub	r4,r3,r21
 c00d2c8:	e1f9803a 	cmpltu	fp,fp,r7
 c00d2cc:	2739c83a 	sub	fp,r4,fp
 c00d2d0:	8f09c83a 	sub	r4,r17,fp
 c00d2d4:	003fc306 	br	c00d1e4 <__alt_data_end+0xfc00d1e4>
 c00d2d8:	01000604 	movi	r4,24
 c00d2dc:	003ef906 	br	c00cec4 <__alt_data_end+0xfc00cec4>
 c00d2e0:	00800604 	movi	r2,24
 c00d2e4:	003f1306 	br	c00cf34 <__alt_data_end+0xfc00cf34>
 c00d2e8:	01000604 	movi	r4,24
 c00d2ec:	003eb606 	br	c00cdc8 <__alt_data_end+0xfc00cdc8>
 c00d2f0:	40bf902e 	bgeu	r8,r2,c00d134 <__alt_data_end+0xfc00d134>
 c00d2f4:	b5bfff84 	addi	r22,r22,-2
 c00d2f8:	4551883a 	add	r8,r8,r21
 c00d2fc:	003f8e06 	br	c00d138 <__alt_data_end+0xfc00d138>
 c00d300:	18bf762e 	bgeu	r3,r2,c00d0dc <__alt_data_end+0xfc00d0dc>
 c00d304:	8c7fff84 	addi	r17,r17,-2
 c00d308:	1d47883a 	add	r3,r3,r21
 c00d30c:	003f7406 	br	c00d0e0 <__alt_data_end+0xfc00d0e0>
 c00d310:	1cc7883a 	add	r3,r3,r19
 c00d314:	003ecd06 	br	c00ce4c <__alt_data_end+0xfc00ce4c>
 c00d318:	8005883a 	mov	r2,r16
 c00d31c:	003ef806 	br	c00cf00 <__alt_data_end+0xfc00cf00>
 c00d320:	873fe736 	bltu	r16,fp,c00d2c0 <__alt_data_end+0xfc00d2c0>
 c00d324:	e00f883a 	mov	r7,fp
 c00d328:	0009883a 	mov	r4,zero
 c00d32c:	003fad06 	br	c00d1e4 <__alt_data_end+0xfc00d1e4>

0c00d330 <__adddf3>:
 c00d330:	02c00434 	movhi	r11,16
 c00d334:	5affffc4 	addi	r11,r11,-1
 c00d338:	2806d7fa 	srli	r3,r5,31
 c00d33c:	2ad4703a 	and	r10,r5,r11
 c00d340:	3ad2703a 	and	r9,r7,r11
 c00d344:	3804d53a 	srli	r2,r7,20
 c00d348:	3018d77a 	srli	r12,r6,29
 c00d34c:	280ad53a 	srli	r5,r5,20
 c00d350:	501490fa 	slli	r10,r10,3
 c00d354:	2010d77a 	srli	r8,r4,29
 c00d358:	481290fa 	slli	r9,r9,3
 c00d35c:	380ed7fa 	srli	r7,r7,31
 c00d360:	defffb04 	addi	sp,sp,-20
 c00d364:	dc800215 	stw	r18,8(sp)
 c00d368:	dc400115 	stw	r17,4(sp)
 c00d36c:	dc000015 	stw	r16,0(sp)
 c00d370:	dfc00415 	stw	ra,16(sp)
 c00d374:	dcc00315 	stw	r19,12(sp)
 c00d378:	1c803fcc 	andi	r18,r3,255
 c00d37c:	2c01ffcc 	andi	r16,r5,2047
 c00d380:	5210b03a 	or	r8,r10,r8
 c00d384:	202290fa 	slli	r17,r4,3
 c00d388:	1081ffcc 	andi	r2,r2,2047
 c00d38c:	4b12b03a 	or	r9,r9,r12
 c00d390:	300c90fa 	slli	r6,r6,3
 c00d394:	91c07526 	beq	r18,r7,c00d56c <__adddf3+0x23c>
 c00d398:	8087c83a 	sub	r3,r16,r2
 c00d39c:	00c0ab0e 	bge	zero,r3,c00d64c <__adddf3+0x31c>
 c00d3a0:	10002a1e 	bne	r2,zero,c00d44c <__adddf3+0x11c>
 c00d3a4:	4984b03a 	or	r2,r9,r6
 c00d3a8:	1000961e 	bne	r2,zero,c00d604 <__adddf3+0x2d4>
 c00d3ac:	888001cc 	andi	r2,r17,7
 c00d3b0:	10000726 	beq	r2,zero,c00d3d0 <__adddf3+0xa0>
 c00d3b4:	888003cc 	andi	r2,r17,15
 c00d3b8:	00c00104 	movi	r3,4
 c00d3bc:	10c00426 	beq	r2,r3,c00d3d0 <__adddf3+0xa0>
 c00d3c0:	88c7883a 	add	r3,r17,r3
 c00d3c4:	1c63803a 	cmpltu	r17,r3,r17
 c00d3c8:	4451883a 	add	r8,r8,r17
 c00d3cc:	1823883a 	mov	r17,r3
 c00d3d0:	4080202c 	andhi	r2,r8,128
 c00d3d4:	10005926 	beq	r2,zero,c00d53c <__adddf3+0x20c>
 c00d3d8:	84000044 	addi	r16,r16,1
 c00d3dc:	0081ffc4 	movi	r2,2047
 c00d3e0:	8080ba26 	beq	r16,r2,c00d6cc <__adddf3+0x39c>
 c00d3e4:	00bfe034 	movhi	r2,65408
 c00d3e8:	10bfffc4 	addi	r2,r2,-1
 c00d3ec:	4090703a 	and	r8,r8,r2
 c00d3f0:	4004977a 	slli	r2,r8,29
 c00d3f4:	4010927a 	slli	r8,r8,9
 c00d3f8:	8822d0fa 	srli	r17,r17,3
 c00d3fc:	8401ffcc 	andi	r16,r16,2047
 c00d400:	4010d33a 	srli	r8,r8,12
 c00d404:	9007883a 	mov	r3,r18
 c00d408:	1444b03a 	or	r2,r2,r17
 c00d40c:	8401ffcc 	andi	r16,r16,2047
 c00d410:	8020953a 	slli	r16,r16,20
 c00d414:	18c03fcc 	andi	r3,r3,255
 c00d418:	01000434 	movhi	r4,16
 c00d41c:	213fffc4 	addi	r4,r4,-1
 c00d420:	180697fa 	slli	r3,r3,31
 c00d424:	4110703a 	and	r8,r8,r4
 c00d428:	4410b03a 	or	r8,r8,r16
 c00d42c:	40c6b03a 	or	r3,r8,r3
 c00d430:	dfc00417 	ldw	ra,16(sp)
 c00d434:	dcc00317 	ldw	r19,12(sp)
 c00d438:	dc800217 	ldw	r18,8(sp)
 c00d43c:	dc400117 	ldw	r17,4(sp)
 c00d440:	dc000017 	ldw	r16,0(sp)
 c00d444:	dec00504 	addi	sp,sp,20
 c00d448:	f800283a 	ret
 c00d44c:	0081ffc4 	movi	r2,2047
 c00d450:	80bfd626 	beq	r16,r2,c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d454:	4a402034 	orhi	r9,r9,128
 c00d458:	00800e04 	movi	r2,56
 c00d45c:	10c09f16 	blt	r2,r3,c00d6dc <__adddf3+0x3ac>
 c00d460:	008007c4 	movi	r2,31
 c00d464:	10c0c216 	blt	r2,r3,c00d770 <__adddf3+0x440>
 c00d468:	00800804 	movi	r2,32
 c00d46c:	10c5c83a 	sub	r2,r2,r3
 c00d470:	488a983a 	sll	r5,r9,r2
 c00d474:	30c8d83a 	srl	r4,r6,r3
 c00d478:	3084983a 	sll	r2,r6,r2
 c00d47c:	48c6d83a 	srl	r3,r9,r3
 c00d480:	290cb03a 	or	r6,r5,r4
 c00d484:	1004c03a 	cmpne	r2,r2,zero
 c00d488:	308cb03a 	or	r6,r6,r2
 c00d48c:	898dc83a 	sub	r6,r17,r6
 c00d490:	89a3803a 	cmpltu	r17,r17,r6
 c00d494:	40d1c83a 	sub	r8,r8,r3
 c00d498:	4451c83a 	sub	r8,r8,r17
 c00d49c:	3023883a 	mov	r17,r6
 c00d4a0:	4080202c 	andhi	r2,r8,128
 c00d4a4:	10002326 	beq	r2,zero,c00d534 <__adddf3+0x204>
 c00d4a8:	04c02034 	movhi	r19,128
 c00d4ac:	9cffffc4 	addi	r19,r19,-1
 c00d4b0:	44e6703a 	and	r19,r8,r19
 c00d4b4:	98007626 	beq	r19,zero,c00d690 <__adddf3+0x360>
 c00d4b8:	9809883a 	mov	r4,r19
 c00d4bc:	c00fb700 	call	c00fb70 <__clzsi2>
 c00d4c0:	10fffe04 	addi	r3,r2,-8
 c00d4c4:	010007c4 	movi	r4,31
 c00d4c8:	20c07716 	blt	r4,r3,c00d6a8 <__adddf3+0x378>
 c00d4cc:	00800804 	movi	r2,32
 c00d4d0:	10c5c83a 	sub	r2,r2,r3
 c00d4d4:	8884d83a 	srl	r2,r17,r2
 c00d4d8:	98d0983a 	sll	r8,r19,r3
 c00d4dc:	88e2983a 	sll	r17,r17,r3
 c00d4e0:	1204b03a 	or	r2,r2,r8
 c00d4e4:	1c007416 	blt	r3,r16,c00d6b8 <__adddf3+0x388>
 c00d4e8:	1c21c83a 	sub	r16,r3,r16
 c00d4ec:	82000044 	addi	r8,r16,1
 c00d4f0:	00c007c4 	movi	r3,31
 c00d4f4:	1a009116 	blt	r3,r8,c00d73c <__adddf3+0x40c>
 c00d4f8:	00c00804 	movi	r3,32
 c00d4fc:	1a07c83a 	sub	r3,r3,r8
 c00d500:	8a08d83a 	srl	r4,r17,r8
 c00d504:	88e2983a 	sll	r17,r17,r3
 c00d508:	10c6983a 	sll	r3,r2,r3
 c00d50c:	1210d83a 	srl	r8,r2,r8
 c00d510:	8804c03a 	cmpne	r2,r17,zero
 c00d514:	1906b03a 	or	r3,r3,r4
 c00d518:	18a2b03a 	or	r17,r3,r2
 c00d51c:	0021883a 	mov	r16,zero
 c00d520:	003fa206 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d524:	1890b03a 	or	r8,r3,r2
 c00d528:	40017d26 	beq	r8,zero,c00db20 <__adddf3+0x7f0>
 c00d52c:	1011883a 	mov	r8,r2
 c00d530:	1823883a 	mov	r17,r3
 c00d534:	888001cc 	andi	r2,r17,7
 c00d538:	103f9e1e 	bne	r2,zero,c00d3b4 <__alt_data_end+0xfc00d3b4>
 c00d53c:	4004977a 	slli	r2,r8,29
 c00d540:	8822d0fa 	srli	r17,r17,3
 c00d544:	4010d0fa 	srli	r8,r8,3
 c00d548:	9007883a 	mov	r3,r18
 c00d54c:	1444b03a 	or	r2,r2,r17
 c00d550:	0101ffc4 	movi	r4,2047
 c00d554:	81002426 	beq	r16,r4,c00d5e8 <__adddf3+0x2b8>
 c00d558:	8120703a 	and	r16,r16,r4
 c00d55c:	01000434 	movhi	r4,16
 c00d560:	213fffc4 	addi	r4,r4,-1
 c00d564:	4110703a 	and	r8,r8,r4
 c00d568:	003fa806 	br	c00d40c <__alt_data_end+0xfc00d40c>
 c00d56c:	8089c83a 	sub	r4,r16,r2
 c00d570:	01005e0e 	bge	zero,r4,c00d6ec <__adddf3+0x3bc>
 c00d574:	10002b26 	beq	r2,zero,c00d624 <__adddf3+0x2f4>
 c00d578:	0081ffc4 	movi	r2,2047
 c00d57c:	80bf8b26 	beq	r16,r2,c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d580:	4a402034 	orhi	r9,r9,128
 c00d584:	00800e04 	movi	r2,56
 c00d588:	1100a40e 	bge	r2,r4,c00d81c <__adddf3+0x4ec>
 c00d58c:	498cb03a 	or	r6,r9,r6
 c00d590:	300ac03a 	cmpne	r5,r6,zero
 c00d594:	0013883a 	mov	r9,zero
 c00d598:	2c4b883a 	add	r5,r5,r17
 c00d59c:	2c63803a 	cmpltu	r17,r5,r17
 c00d5a0:	4a11883a 	add	r8,r9,r8
 c00d5a4:	8a11883a 	add	r8,r17,r8
 c00d5a8:	2823883a 	mov	r17,r5
 c00d5ac:	4080202c 	andhi	r2,r8,128
 c00d5b0:	103fe026 	beq	r2,zero,c00d534 <__alt_data_end+0xfc00d534>
 c00d5b4:	84000044 	addi	r16,r16,1
 c00d5b8:	0081ffc4 	movi	r2,2047
 c00d5bc:	8080d226 	beq	r16,r2,c00d908 <__adddf3+0x5d8>
 c00d5c0:	00bfe034 	movhi	r2,65408
 c00d5c4:	10bfffc4 	addi	r2,r2,-1
 c00d5c8:	4090703a 	and	r8,r8,r2
 c00d5cc:	880ad07a 	srli	r5,r17,1
 c00d5d0:	400897fa 	slli	r4,r8,31
 c00d5d4:	88c0004c 	andi	r3,r17,1
 c00d5d8:	28e2b03a 	or	r17,r5,r3
 c00d5dc:	4010d07a 	srli	r8,r8,1
 c00d5e0:	2462b03a 	or	r17,r4,r17
 c00d5e4:	003f7106 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d5e8:	4088b03a 	or	r4,r8,r2
 c00d5ec:	20014526 	beq	r4,zero,c00db04 <__adddf3+0x7d4>
 c00d5f0:	01000434 	movhi	r4,16
 c00d5f4:	42000234 	orhi	r8,r8,8
 c00d5f8:	213fffc4 	addi	r4,r4,-1
 c00d5fc:	4110703a 	and	r8,r8,r4
 c00d600:	003f8206 	br	c00d40c <__alt_data_end+0xfc00d40c>
 c00d604:	18ffffc4 	addi	r3,r3,-1
 c00d608:	1800491e 	bne	r3,zero,c00d730 <__adddf3+0x400>
 c00d60c:	898bc83a 	sub	r5,r17,r6
 c00d610:	8963803a 	cmpltu	r17,r17,r5
 c00d614:	4251c83a 	sub	r8,r8,r9
 c00d618:	4451c83a 	sub	r8,r8,r17
 c00d61c:	2823883a 	mov	r17,r5
 c00d620:	003f9f06 	br	c00d4a0 <__alt_data_end+0xfc00d4a0>
 c00d624:	4984b03a 	or	r2,r9,r6
 c00d628:	103f6026 	beq	r2,zero,c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d62c:	213fffc4 	addi	r4,r4,-1
 c00d630:	2000931e 	bne	r4,zero,c00d880 <__adddf3+0x550>
 c00d634:	898d883a 	add	r6,r17,r6
 c00d638:	3463803a 	cmpltu	r17,r6,r17
 c00d63c:	4251883a 	add	r8,r8,r9
 c00d640:	8a11883a 	add	r8,r17,r8
 c00d644:	3023883a 	mov	r17,r6
 c00d648:	003fd806 	br	c00d5ac <__alt_data_end+0xfc00d5ac>
 c00d64c:	1800541e 	bne	r3,zero,c00d7a0 <__adddf3+0x470>
 c00d650:	80800044 	addi	r2,r16,1
 c00d654:	1081ffcc 	andi	r2,r2,2047
 c00d658:	00c00044 	movi	r3,1
 c00d65c:	1880a00e 	bge	r3,r2,c00d8e0 <__adddf3+0x5b0>
 c00d660:	8989c83a 	sub	r4,r17,r6
 c00d664:	8905803a 	cmpltu	r2,r17,r4
 c00d668:	4267c83a 	sub	r19,r8,r9
 c00d66c:	98a7c83a 	sub	r19,r19,r2
 c00d670:	9880202c 	andhi	r2,r19,128
 c00d674:	10006326 	beq	r2,zero,c00d804 <__adddf3+0x4d4>
 c00d678:	3463c83a 	sub	r17,r6,r17
 c00d67c:	4a07c83a 	sub	r3,r9,r8
 c00d680:	344d803a 	cmpltu	r6,r6,r17
 c00d684:	19a7c83a 	sub	r19,r3,r6
 c00d688:	3825883a 	mov	r18,r7
 c00d68c:	983f8a1e 	bne	r19,zero,c00d4b8 <__alt_data_end+0xfc00d4b8>
 c00d690:	8809883a 	mov	r4,r17
 c00d694:	c00fb700 	call	c00fb70 <__clzsi2>
 c00d698:	10800804 	addi	r2,r2,32
 c00d69c:	10fffe04 	addi	r3,r2,-8
 c00d6a0:	010007c4 	movi	r4,31
 c00d6a4:	20ff890e 	bge	r4,r3,c00d4cc <__alt_data_end+0xfc00d4cc>
 c00d6a8:	10bff604 	addi	r2,r2,-40
 c00d6ac:	8884983a 	sll	r2,r17,r2
 c00d6b0:	0023883a 	mov	r17,zero
 c00d6b4:	1c3f8c0e 	bge	r3,r16,c00d4e8 <__alt_data_end+0xfc00d4e8>
 c00d6b8:	023fe034 	movhi	r8,65408
 c00d6bc:	423fffc4 	addi	r8,r8,-1
 c00d6c0:	80e1c83a 	sub	r16,r16,r3
 c00d6c4:	1210703a 	and	r8,r2,r8
 c00d6c8:	003f3806 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d6cc:	9007883a 	mov	r3,r18
 c00d6d0:	0011883a 	mov	r8,zero
 c00d6d4:	0005883a 	mov	r2,zero
 c00d6d8:	003f4c06 	br	c00d40c <__alt_data_end+0xfc00d40c>
 c00d6dc:	498cb03a 	or	r6,r9,r6
 c00d6e0:	300cc03a 	cmpne	r6,r6,zero
 c00d6e4:	0007883a 	mov	r3,zero
 c00d6e8:	003f6806 	br	c00d48c <__alt_data_end+0xfc00d48c>
 c00d6ec:	20009c1e 	bne	r4,zero,c00d960 <__adddf3+0x630>
 c00d6f0:	80800044 	addi	r2,r16,1
 c00d6f4:	1141ffcc 	andi	r5,r2,2047
 c00d6f8:	01000044 	movi	r4,1
 c00d6fc:	2140670e 	bge	r4,r5,c00d89c <__adddf3+0x56c>
 c00d700:	0101ffc4 	movi	r4,2047
 c00d704:	11007f26 	beq	r2,r4,c00d904 <__adddf3+0x5d4>
 c00d708:	898d883a 	add	r6,r17,r6
 c00d70c:	4247883a 	add	r3,r8,r9
 c00d710:	3451803a 	cmpltu	r8,r6,r17
 c00d714:	40d1883a 	add	r8,r8,r3
 c00d718:	402297fa 	slli	r17,r8,31
 c00d71c:	300cd07a 	srli	r6,r6,1
 c00d720:	4010d07a 	srli	r8,r8,1
 c00d724:	1021883a 	mov	r16,r2
 c00d728:	89a2b03a 	or	r17,r17,r6
 c00d72c:	003f1f06 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d730:	0081ffc4 	movi	r2,2047
 c00d734:	80bf481e 	bne	r16,r2,c00d458 <__alt_data_end+0xfc00d458>
 c00d738:	003f1c06 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d73c:	843ff844 	addi	r16,r16,-31
 c00d740:	01000804 	movi	r4,32
 c00d744:	1406d83a 	srl	r3,r2,r16
 c00d748:	41005026 	beq	r8,r4,c00d88c <__adddf3+0x55c>
 c00d74c:	01001004 	movi	r4,64
 c00d750:	2211c83a 	sub	r8,r4,r8
 c00d754:	1204983a 	sll	r2,r2,r8
 c00d758:	88a2b03a 	or	r17,r17,r2
 c00d75c:	8822c03a 	cmpne	r17,r17,zero
 c00d760:	1c62b03a 	or	r17,r3,r17
 c00d764:	0011883a 	mov	r8,zero
 c00d768:	0021883a 	mov	r16,zero
 c00d76c:	003f7106 	br	c00d534 <__alt_data_end+0xfc00d534>
 c00d770:	193ff804 	addi	r4,r3,-32
 c00d774:	00800804 	movi	r2,32
 c00d778:	4908d83a 	srl	r4,r9,r4
 c00d77c:	18804526 	beq	r3,r2,c00d894 <__adddf3+0x564>
 c00d780:	00801004 	movi	r2,64
 c00d784:	10c5c83a 	sub	r2,r2,r3
 c00d788:	4886983a 	sll	r3,r9,r2
 c00d78c:	198cb03a 	or	r6,r3,r6
 c00d790:	300cc03a 	cmpne	r6,r6,zero
 c00d794:	218cb03a 	or	r6,r4,r6
 c00d798:	0007883a 	mov	r3,zero
 c00d79c:	003f3b06 	br	c00d48c <__alt_data_end+0xfc00d48c>
 c00d7a0:	80002a26 	beq	r16,zero,c00d84c <__adddf3+0x51c>
 c00d7a4:	0101ffc4 	movi	r4,2047
 c00d7a8:	11006826 	beq	r2,r4,c00d94c <__adddf3+0x61c>
 c00d7ac:	00c7c83a 	sub	r3,zero,r3
 c00d7b0:	42002034 	orhi	r8,r8,128
 c00d7b4:	01000e04 	movi	r4,56
 c00d7b8:	20c07c16 	blt	r4,r3,c00d9ac <__adddf3+0x67c>
 c00d7bc:	010007c4 	movi	r4,31
 c00d7c0:	20c0da16 	blt	r4,r3,c00db2c <__adddf3+0x7fc>
 c00d7c4:	01000804 	movi	r4,32
 c00d7c8:	20c9c83a 	sub	r4,r4,r3
 c00d7cc:	4114983a 	sll	r10,r8,r4
 c00d7d0:	88cad83a 	srl	r5,r17,r3
 c00d7d4:	8908983a 	sll	r4,r17,r4
 c00d7d8:	40c6d83a 	srl	r3,r8,r3
 c00d7dc:	5162b03a 	or	r17,r10,r5
 c00d7e0:	2008c03a 	cmpne	r4,r4,zero
 c00d7e4:	8922b03a 	or	r17,r17,r4
 c00d7e8:	3463c83a 	sub	r17,r6,r17
 c00d7ec:	48c7c83a 	sub	r3,r9,r3
 c00d7f0:	344d803a 	cmpltu	r6,r6,r17
 c00d7f4:	1991c83a 	sub	r8,r3,r6
 c00d7f8:	1021883a 	mov	r16,r2
 c00d7fc:	3825883a 	mov	r18,r7
 c00d800:	003f2706 	br	c00d4a0 <__alt_data_end+0xfc00d4a0>
 c00d804:	24d0b03a 	or	r8,r4,r19
 c00d808:	40001b1e 	bne	r8,zero,c00d878 <__adddf3+0x548>
 c00d80c:	0005883a 	mov	r2,zero
 c00d810:	0007883a 	mov	r3,zero
 c00d814:	0021883a 	mov	r16,zero
 c00d818:	003f4d06 	br	c00d550 <__alt_data_end+0xfc00d550>
 c00d81c:	008007c4 	movi	r2,31
 c00d820:	11003c16 	blt	r2,r4,c00d914 <__adddf3+0x5e4>
 c00d824:	00800804 	movi	r2,32
 c00d828:	1105c83a 	sub	r2,r2,r4
 c00d82c:	488e983a 	sll	r7,r9,r2
 c00d830:	310ad83a 	srl	r5,r6,r4
 c00d834:	3084983a 	sll	r2,r6,r2
 c00d838:	4912d83a 	srl	r9,r9,r4
 c00d83c:	394ab03a 	or	r5,r7,r5
 c00d840:	1004c03a 	cmpne	r2,r2,zero
 c00d844:	288ab03a 	or	r5,r5,r2
 c00d848:	003f5306 	br	c00d598 <__alt_data_end+0xfc00d598>
 c00d84c:	4448b03a 	or	r4,r8,r17
 c00d850:	20003e26 	beq	r4,zero,c00d94c <__adddf3+0x61c>
 c00d854:	00c6303a 	nor	r3,zero,r3
 c00d858:	18003a1e 	bne	r3,zero,c00d944 <__adddf3+0x614>
 c00d85c:	3463c83a 	sub	r17,r6,r17
 c00d860:	4a07c83a 	sub	r3,r9,r8
 c00d864:	344d803a 	cmpltu	r6,r6,r17
 c00d868:	1991c83a 	sub	r8,r3,r6
 c00d86c:	1021883a 	mov	r16,r2
 c00d870:	3825883a 	mov	r18,r7
 c00d874:	003f0a06 	br	c00d4a0 <__alt_data_end+0xfc00d4a0>
 c00d878:	2023883a 	mov	r17,r4
 c00d87c:	003f0d06 	br	c00d4b4 <__alt_data_end+0xfc00d4b4>
 c00d880:	0081ffc4 	movi	r2,2047
 c00d884:	80bf3f1e 	bne	r16,r2,c00d584 <__alt_data_end+0xfc00d584>
 c00d888:	003ec806 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d88c:	0005883a 	mov	r2,zero
 c00d890:	003fb106 	br	c00d758 <__alt_data_end+0xfc00d758>
 c00d894:	0007883a 	mov	r3,zero
 c00d898:	003fbc06 	br	c00d78c <__alt_data_end+0xfc00d78c>
 c00d89c:	4444b03a 	or	r2,r8,r17
 c00d8a0:	8000871e 	bne	r16,zero,c00dac0 <__adddf3+0x790>
 c00d8a4:	1000ba26 	beq	r2,zero,c00db90 <__adddf3+0x860>
 c00d8a8:	4984b03a 	or	r2,r9,r6
 c00d8ac:	103ebf26 	beq	r2,zero,c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d8b0:	8985883a 	add	r2,r17,r6
 c00d8b4:	4247883a 	add	r3,r8,r9
 c00d8b8:	1451803a 	cmpltu	r8,r2,r17
 c00d8bc:	40d1883a 	add	r8,r8,r3
 c00d8c0:	40c0202c 	andhi	r3,r8,128
 c00d8c4:	1023883a 	mov	r17,r2
 c00d8c8:	183f1a26 	beq	r3,zero,c00d534 <__alt_data_end+0xfc00d534>
 c00d8cc:	00bfe034 	movhi	r2,65408
 c00d8d0:	10bfffc4 	addi	r2,r2,-1
 c00d8d4:	2021883a 	mov	r16,r4
 c00d8d8:	4090703a 	and	r8,r8,r2
 c00d8dc:	003eb306 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d8e0:	4444b03a 	or	r2,r8,r17
 c00d8e4:	8000291e 	bne	r16,zero,c00d98c <__adddf3+0x65c>
 c00d8e8:	10004b1e 	bne	r2,zero,c00da18 <__adddf3+0x6e8>
 c00d8ec:	4990b03a 	or	r8,r9,r6
 c00d8f0:	40008b26 	beq	r8,zero,c00db20 <__adddf3+0x7f0>
 c00d8f4:	4811883a 	mov	r8,r9
 c00d8f8:	3023883a 	mov	r17,r6
 c00d8fc:	3825883a 	mov	r18,r7
 c00d900:	003eaa06 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d904:	1021883a 	mov	r16,r2
 c00d908:	0011883a 	mov	r8,zero
 c00d90c:	0005883a 	mov	r2,zero
 c00d910:	003f0f06 	br	c00d550 <__alt_data_end+0xfc00d550>
 c00d914:	217ff804 	addi	r5,r4,-32
 c00d918:	00800804 	movi	r2,32
 c00d91c:	494ad83a 	srl	r5,r9,r5
 c00d920:	20807d26 	beq	r4,r2,c00db18 <__adddf3+0x7e8>
 c00d924:	00801004 	movi	r2,64
 c00d928:	1109c83a 	sub	r4,r2,r4
 c00d92c:	4912983a 	sll	r9,r9,r4
 c00d930:	498cb03a 	or	r6,r9,r6
 c00d934:	300cc03a 	cmpne	r6,r6,zero
 c00d938:	298ab03a 	or	r5,r5,r6
 c00d93c:	0013883a 	mov	r9,zero
 c00d940:	003f1506 	br	c00d598 <__alt_data_end+0xfc00d598>
 c00d944:	0101ffc4 	movi	r4,2047
 c00d948:	113f9a1e 	bne	r2,r4,c00d7b4 <__alt_data_end+0xfc00d7b4>
 c00d94c:	4811883a 	mov	r8,r9
 c00d950:	3023883a 	mov	r17,r6
 c00d954:	1021883a 	mov	r16,r2
 c00d958:	3825883a 	mov	r18,r7
 c00d95c:	003e9306 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d960:	8000161e 	bne	r16,zero,c00d9bc <__adddf3+0x68c>
 c00d964:	444ab03a 	or	r5,r8,r17
 c00d968:	28005126 	beq	r5,zero,c00dab0 <__adddf3+0x780>
 c00d96c:	0108303a 	nor	r4,zero,r4
 c00d970:	20004d1e 	bne	r4,zero,c00daa8 <__adddf3+0x778>
 c00d974:	89a3883a 	add	r17,r17,r6
 c00d978:	4253883a 	add	r9,r8,r9
 c00d97c:	898d803a 	cmpltu	r6,r17,r6
 c00d980:	3251883a 	add	r8,r6,r9
 c00d984:	1021883a 	mov	r16,r2
 c00d988:	003f0806 	br	c00d5ac <__alt_data_end+0xfc00d5ac>
 c00d98c:	1000301e 	bne	r2,zero,c00da50 <__adddf3+0x720>
 c00d990:	4984b03a 	or	r2,r9,r6
 c00d994:	10007126 	beq	r2,zero,c00db5c <__adddf3+0x82c>
 c00d998:	4811883a 	mov	r8,r9
 c00d99c:	3023883a 	mov	r17,r6
 c00d9a0:	3825883a 	mov	r18,r7
 c00d9a4:	0401ffc4 	movi	r16,2047
 c00d9a8:	003e8006 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00d9ac:	4462b03a 	or	r17,r8,r17
 c00d9b0:	8822c03a 	cmpne	r17,r17,zero
 c00d9b4:	0007883a 	mov	r3,zero
 c00d9b8:	003f8b06 	br	c00d7e8 <__alt_data_end+0xfc00d7e8>
 c00d9bc:	0141ffc4 	movi	r5,2047
 c00d9c0:	11403b26 	beq	r2,r5,c00dab0 <__adddf3+0x780>
 c00d9c4:	0109c83a 	sub	r4,zero,r4
 c00d9c8:	42002034 	orhi	r8,r8,128
 c00d9cc:	01400e04 	movi	r5,56
 c00d9d0:	29006716 	blt	r5,r4,c00db70 <__adddf3+0x840>
 c00d9d4:	014007c4 	movi	r5,31
 c00d9d8:	29007016 	blt	r5,r4,c00db9c <__adddf3+0x86c>
 c00d9dc:	01400804 	movi	r5,32
 c00d9e0:	290bc83a 	sub	r5,r5,r4
 c00d9e4:	4154983a 	sll	r10,r8,r5
 c00d9e8:	890ed83a 	srl	r7,r17,r4
 c00d9ec:	894a983a 	sll	r5,r17,r5
 c00d9f0:	4108d83a 	srl	r4,r8,r4
 c00d9f4:	51e2b03a 	or	r17,r10,r7
 c00d9f8:	280ac03a 	cmpne	r5,r5,zero
 c00d9fc:	8962b03a 	or	r17,r17,r5
 c00da00:	89a3883a 	add	r17,r17,r6
 c00da04:	2253883a 	add	r9,r4,r9
 c00da08:	898d803a 	cmpltu	r6,r17,r6
 c00da0c:	3251883a 	add	r8,r6,r9
 c00da10:	1021883a 	mov	r16,r2
 c00da14:	003ee506 	br	c00d5ac <__alt_data_end+0xfc00d5ac>
 c00da18:	4984b03a 	or	r2,r9,r6
 c00da1c:	103e6326 	beq	r2,zero,c00d3ac <__alt_data_end+0xfc00d3ac>
 c00da20:	8987c83a 	sub	r3,r17,r6
 c00da24:	88c9803a 	cmpltu	r4,r17,r3
 c00da28:	4245c83a 	sub	r2,r8,r9
 c00da2c:	1105c83a 	sub	r2,r2,r4
 c00da30:	1100202c 	andhi	r4,r2,128
 c00da34:	203ebb26 	beq	r4,zero,c00d524 <__alt_data_end+0xfc00d524>
 c00da38:	3463c83a 	sub	r17,r6,r17
 c00da3c:	4a07c83a 	sub	r3,r9,r8
 c00da40:	344d803a 	cmpltu	r6,r6,r17
 c00da44:	1991c83a 	sub	r8,r3,r6
 c00da48:	3825883a 	mov	r18,r7
 c00da4c:	003e5706 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00da50:	4984b03a 	or	r2,r9,r6
 c00da54:	10002e26 	beq	r2,zero,c00db10 <__adddf3+0x7e0>
 c00da58:	4004d0fa 	srli	r2,r8,3
 c00da5c:	8822d0fa 	srli	r17,r17,3
 c00da60:	4010977a 	slli	r8,r8,29
 c00da64:	10c0022c 	andhi	r3,r2,8
 c00da68:	4462b03a 	or	r17,r8,r17
 c00da6c:	18000826 	beq	r3,zero,c00da90 <__adddf3+0x760>
 c00da70:	4808d0fa 	srli	r4,r9,3
 c00da74:	20c0022c 	andhi	r3,r4,8
 c00da78:	1800051e 	bne	r3,zero,c00da90 <__adddf3+0x760>
 c00da7c:	300cd0fa 	srli	r6,r6,3
 c00da80:	4806977a 	slli	r3,r9,29
 c00da84:	2005883a 	mov	r2,r4
 c00da88:	3825883a 	mov	r18,r7
 c00da8c:	19a2b03a 	or	r17,r3,r6
 c00da90:	8810d77a 	srli	r8,r17,29
 c00da94:	100490fa 	slli	r2,r2,3
 c00da98:	882290fa 	slli	r17,r17,3
 c00da9c:	0401ffc4 	movi	r16,2047
 c00daa0:	4090b03a 	or	r8,r8,r2
 c00daa4:	003e4106 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00daa8:	0141ffc4 	movi	r5,2047
 c00daac:	117fc71e 	bne	r2,r5,c00d9cc <__alt_data_end+0xfc00d9cc>
 c00dab0:	4811883a 	mov	r8,r9
 c00dab4:	3023883a 	mov	r17,r6
 c00dab8:	1021883a 	mov	r16,r2
 c00dabc:	003e3b06 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00dac0:	10002f26 	beq	r2,zero,c00db80 <__adddf3+0x850>
 c00dac4:	4984b03a 	or	r2,r9,r6
 c00dac8:	10001126 	beq	r2,zero,c00db10 <__adddf3+0x7e0>
 c00dacc:	4004d0fa 	srli	r2,r8,3
 c00dad0:	8822d0fa 	srli	r17,r17,3
 c00dad4:	4010977a 	slli	r8,r8,29
 c00dad8:	10c0022c 	andhi	r3,r2,8
 c00dadc:	4462b03a 	or	r17,r8,r17
 c00dae0:	183feb26 	beq	r3,zero,c00da90 <__alt_data_end+0xfc00da90>
 c00dae4:	4808d0fa 	srli	r4,r9,3
 c00dae8:	20c0022c 	andhi	r3,r4,8
 c00daec:	183fe81e 	bne	r3,zero,c00da90 <__alt_data_end+0xfc00da90>
 c00daf0:	300cd0fa 	srli	r6,r6,3
 c00daf4:	4806977a 	slli	r3,r9,29
 c00daf8:	2005883a 	mov	r2,r4
 c00dafc:	19a2b03a 	or	r17,r3,r6
 c00db00:	003fe306 	br	c00da90 <__alt_data_end+0xfc00da90>
 c00db04:	0011883a 	mov	r8,zero
 c00db08:	0005883a 	mov	r2,zero
 c00db0c:	003e3f06 	br	c00d40c <__alt_data_end+0xfc00d40c>
 c00db10:	0401ffc4 	movi	r16,2047
 c00db14:	003e2506 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00db18:	0013883a 	mov	r9,zero
 c00db1c:	003f8406 	br	c00d930 <__alt_data_end+0xfc00d930>
 c00db20:	0005883a 	mov	r2,zero
 c00db24:	0007883a 	mov	r3,zero
 c00db28:	003e8906 	br	c00d550 <__alt_data_end+0xfc00d550>
 c00db2c:	197ff804 	addi	r5,r3,-32
 c00db30:	01000804 	movi	r4,32
 c00db34:	414ad83a 	srl	r5,r8,r5
 c00db38:	19002426 	beq	r3,r4,c00dbcc <__adddf3+0x89c>
 c00db3c:	01001004 	movi	r4,64
 c00db40:	20c7c83a 	sub	r3,r4,r3
 c00db44:	40c6983a 	sll	r3,r8,r3
 c00db48:	1c46b03a 	or	r3,r3,r17
 c00db4c:	1806c03a 	cmpne	r3,r3,zero
 c00db50:	28e2b03a 	or	r17,r5,r3
 c00db54:	0007883a 	mov	r3,zero
 c00db58:	003f2306 	br	c00d7e8 <__alt_data_end+0xfc00d7e8>
 c00db5c:	0007883a 	mov	r3,zero
 c00db60:	5811883a 	mov	r8,r11
 c00db64:	00bfffc4 	movi	r2,-1
 c00db68:	0401ffc4 	movi	r16,2047
 c00db6c:	003e7806 	br	c00d550 <__alt_data_end+0xfc00d550>
 c00db70:	4462b03a 	or	r17,r8,r17
 c00db74:	8822c03a 	cmpne	r17,r17,zero
 c00db78:	0009883a 	mov	r4,zero
 c00db7c:	003fa006 	br	c00da00 <__alt_data_end+0xfc00da00>
 c00db80:	4811883a 	mov	r8,r9
 c00db84:	3023883a 	mov	r17,r6
 c00db88:	0401ffc4 	movi	r16,2047
 c00db8c:	003e0706 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00db90:	4811883a 	mov	r8,r9
 c00db94:	3023883a 	mov	r17,r6
 c00db98:	003e0406 	br	c00d3ac <__alt_data_end+0xfc00d3ac>
 c00db9c:	21fff804 	addi	r7,r4,-32
 c00dba0:	01400804 	movi	r5,32
 c00dba4:	41ced83a 	srl	r7,r8,r7
 c00dba8:	21400a26 	beq	r4,r5,c00dbd4 <__adddf3+0x8a4>
 c00dbac:	01401004 	movi	r5,64
 c00dbb0:	2909c83a 	sub	r4,r5,r4
 c00dbb4:	4108983a 	sll	r4,r8,r4
 c00dbb8:	2448b03a 	or	r4,r4,r17
 c00dbbc:	2008c03a 	cmpne	r4,r4,zero
 c00dbc0:	3922b03a 	or	r17,r7,r4
 c00dbc4:	0009883a 	mov	r4,zero
 c00dbc8:	003f8d06 	br	c00da00 <__alt_data_end+0xfc00da00>
 c00dbcc:	0007883a 	mov	r3,zero
 c00dbd0:	003fdd06 	br	c00db48 <__alt_data_end+0xfc00db48>
 c00dbd4:	0009883a 	mov	r4,zero
 c00dbd8:	003ff706 	br	c00dbb8 <__alt_data_end+0xfc00dbb8>

0c00dbdc <__divdf3>:
 c00dbdc:	defff004 	addi	sp,sp,-64
 c00dbe0:	dc800815 	stw	r18,32(sp)
 c00dbe4:	2824d53a 	srli	r18,r5,20
 c00dbe8:	dd800c15 	stw	r22,48(sp)
 c00dbec:	282cd7fa 	srli	r22,r5,31
 c00dbf0:	dc000615 	stw	r16,24(sp)
 c00dbf4:	04000434 	movhi	r16,16
 c00dbf8:	843fffc4 	addi	r16,r16,-1
 c00dbfc:	dfc00f15 	stw	ra,60(sp)
 c00dc00:	df000e15 	stw	fp,56(sp)
 c00dc04:	ddc00d15 	stw	r23,52(sp)
 c00dc08:	dd400b15 	stw	r21,44(sp)
 c00dc0c:	dd000a15 	stw	r20,40(sp)
 c00dc10:	dcc00915 	stw	r19,36(sp)
 c00dc14:	dc400715 	stw	r17,28(sp)
 c00dc18:	9481ffcc 	andi	r18,r18,2047
 c00dc1c:	2c20703a 	and	r16,r5,r16
 c00dc20:	b2003fcc 	andi	r8,r22,255
 c00dc24:	90006126 	beq	r18,zero,c00ddac <__divdf3+0x1d0>
 c00dc28:	0081ffc4 	movi	r2,2047
 c00dc2c:	202b883a 	mov	r21,r4
 c00dc30:	90803726 	beq	r18,r2,c00dd10 <__divdf3+0x134>
 c00dc34:	80800434 	orhi	r2,r16,16
 c00dc38:	100490fa 	slli	r2,r2,3
 c00dc3c:	2020d77a 	srli	r16,r4,29
 c00dc40:	202a90fa 	slli	r21,r4,3
 c00dc44:	94bf0044 	addi	r18,r18,-1023
 c00dc48:	80a0b03a 	or	r16,r16,r2
 c00dc4c:	0013883a 	mov	r9,zero
 c00dc50:	000b883a 	mov	r5,zero
 c00dc54:	3806d53a 	srli	r3,r7,20
 c00dc58:	382ed7fa 	srli	r23,r7,31
 c00dc5c:	04400434 	movhi	r17,16
 c00dc60:	8c7fffc4 	addi	r17,r17,-1
 c00dc64:	18c1ffcc 	andi	r3,r3,2047
 c00dc68:	3029883a 	mov	r20,r6
 c00dc6c:	3c62703a 	and	r17,r7,r17
 c00dc70:	bf003fcc 	andi	fp,r23,255
 c00dc74:	18006e26 	beq	r3,zero,c00de30 <__divdf3+0x254>
 c00dc78:	0081ffc4 	movi	r2,2047
 c00dc7c:	18806626 	beq	r3,r2,c00de18 <__divdf3+0x23c>
 c00dc80:	88800434 	orhi	r2,r17,16
 c00dc84:	100490fa 	slli	r2,r2,3
 c00dc88:	3022d77a 	srli	r17,r6,29
 c00dc8c:	302890fa 	slli	r20,r6,3
 c00dc90:	18ff0044 	addi	r3,r3,-1023
 c00dc94:	88a2b03a 	or	r17,r17,r2
 c00dc98:	000f883a 	mov	r7,zero
 c00dc9c:	b5e6f03a 	xor	r19,r22,r23
 c00dca0:	3a4cb03a 	or	r6,r7,r9
 c00dca4:	008003c4 	movi	r2,15
 c00dca8:	9809883a 	mov	r4,r19
 c00dcac:	90c7c83a 	sub	r3,r18,r3
 c00dcb0:	9cc03fcc 	andi	r19,r19,255
 c00dcb4:	11809636 	bltu	r2,r6,c00df10 <__divdf3+0x334>
 c00dcb8:	300c90ba 	slli	r6,r6,2
 c00dcbc:	00830074 	movhi	r2,3073
 c00dcc0:	10b73404 	addi	r2,r2,-9008
 c00dcc4:	308d883a 	add	r6,r6,r2
 c00dcc8:	30800017 	ldw	r2,0(r6)
 c00dccc:	1000683a 	jmp	r2
 c00dcd0:	0c00df10 	cmplti	r16,at,892
 c00dcd4:	0c00dd48 	cmpgei	r16,at,885
 c00dcd8:	0c00df00 	call	c00df0 <__alt_mem_onchip_memory2_0+0xc00df0>
 c00dcdc:	0c00dd3c 	xorhi	r16,at,884
 c00dce0:	0c00df00 	call	c00df0 <__alt_mem_onchip_memory2_0+0xc00df0>
 c00dce4:	0c00ded4 	ori	r16,at,891
 c00dce8:	0c00df00 	call	c00df0 <__alt_mem_onchip_memory2_0+0xc00df0>
 c00dcec:	0c00dd3c 	xorhi	r16,at,884
 c00dcf0:	0c00dd48 	cmpgei	r16,at,885
 c00dcf4:	0c00dd48 	cmpgei	r16,at,885
 c00dcf8:	0c00ded4 	ori	r16,at,891
 c00dcfc:	0c00dd3c 	xorhi	r16,at,884
 c00dd00:	0c00dd2c 	andhi	r16,at,884
 c00dd04:	0c00dd2c 	andhi	r16,at,884
 c00dd08:	0c00dd2c 	andhi	r16,at,884
 c00dd0c:	0c00e298 	cmpnei	r16,at,906
 c00dd10:	2404b03a 	or	r2,r4,r16
 c00dd14:	10006c1e 	bne	r2,zero,c00dec8 <__divdf3+0x2ec>
 c00dd18:	02400204 	movi	r9,8
 c00dd1c:	0021883a 	mov	r16,zero
 c00dd20:	002b883a 	mov	r21,zero
 c00dd24:	01400084 	movi	r5,2
 c00dd28:	003fca06 	br	c00dc54 <__alt_data_end+0xfc00dc54>
 c00dd2c:	8023883a 	mov	r17,r16
 c00dd30:	a829883a 	mov	r20,r21
 c00dd34:	4039883a 	mov	fp,r8
 c00dd38:	280f883a 	mov	r7,r5
 c00dd3c:	00800084 	movi	r2,2
 c00dd40:	3881601e 	bne	r7,r2,c00e2c4 <__divdf3+0x6e8>
 c00dd44:	e027883a 	mov	r19,fp
 c00dd48:	9900004c 	andi	r4,r19,1
 c00dd4c:	0081ffc4 	movi	r2,2047
 c00dd50:	0021883a 	mov	r16,zero
 c00dd54:	002b883a 	mov	r21,zero
 c00dd58:	1004953a 	slli	r2,r2,20
 c00dd5c:	20c03fcc 	andi	r3,r4,255
 c00dd60:	01400434 	movhi	r5,16
 c00dd64:	297fffc4 	addi	r5,r5,-1
 c00dd68:	180697fa 	slli	r3,r3,31
 c00dd6c:	8160703a 	and	r16,r16,r5
 c00dd70:	80a0b03a 	or	r16,r16,r2
 c00dd74:	80c6b03a 	or	r3,r16,r3
 c00dd78:	a805883a 	mov	r2,r21
 c00dd7c:	dfc00f17 	ldw	ra,60(sp)
 c00dd80:	df000e17 	ldw	fp,56(sp)
 c00dd84:	ddc00d17 	ldw	r23,52(sp)
 c00dd88:	dd800c17 	ldw	r22,48(sp)
 c00dd8c:	dd400b17 	ldw	r21,44(sp)
 c00dd90:	dd000a17 	ldw	r20,40(sp)
 c00dd94:	dcc00917 	ldw	r19,36(sp)
 c00dd98:	dc800817 	ldw	r18,32(sp)
 c00dd9c:	dc400717 	ldw	r17,28(sp)
 c00dda0:	dc000617 	ldw	r16,24(sp)
 c00dda4:	dec01004 	addi	sp,sp,64
 c00dda8:	f800283a 	ret
 c00ddac:	2404b03a 	or	r2,r4,r16
 c00ddb0:	2023883a 	mov	r17,r4
 c00ddb4:	10003f26 	beq	r2,zero,c00deb4 <__divdf3+0x2d8>
 c00ddb8:	80015e26 	beq	r16,zero,c00e334 <__divdf3+0x758>
 c00ddbc:	8009883a 	mov	r4,r16
 c00ddc0:	d9800215 	stw	r6,8(sp)
 c00ddc4:	d9c00515 	stw	r7,20(sp)
 c00ddc8:	da000415 	stw	r8,16(sp)
 c00ddcc:	c00fb700 	call	c00fb70 <__clzsi2>
 c00ddd0:	d9800217 	ldw	r6,8(sp)
 c00ddd4:	d9c00517 	ldw	r7,20(sp)
 c00ddd8:	da000417 	ldw	r8,16(sp)
 c00dddc:	113ffd44 	addi	r4,r2,-11
 c00dde0:	00c00704 	movi	r3,28
 c00dde4:	19014f16 	blt	r3,r4,c00e324 <__divdf3+0x748>
 c00dde8:	00c00744 	movi	r3,29
 c00ddec:	157ffe04 	addi	r21,r2,-8
 c00ddf0:	1907c83a 	sub	r3,r3,r4
 c00ddf4:	8560983a 	sll	r16,r16,r21
 c00ddf8:	88c6d83a 	srl	r3,r17,r3
 c00ddfc:	8d6a983a 	sll	r21,r17,r21
 c00de00:	1c20b03a 	or	r16,r3,r16
 c00de04:	1080fcc4 	addi	r2,r2,1011
 c00de08:	00a5c83a 	sub	r18,zero,r2
 c00de0c:	0013883a 	mov	r9,zero
 c00de10:	000b883a 	mov	r5,zero
 c00de14:	003f8f06 	br	c00dc54 <__alt_data_end+0xfc00dc54>
 c00de18:	3444b03a 	or	r2,r6,r17
 c00de1c:	1000231e 	bne	r2,zero,c00deac <__divdf3+0x2d0>
 c00de20:	0023883a 	mov	r17,zero
 c00de24:	0029883a 	mov	r20,zero
 c00de28:	01c00084 	movi	r7,2
 c00de2c:	003f9b06 	br	c00dc9c <__alt_data_end+0xfc00dc9c>
 c00de30:	3444b03a 	or	r2,r6,r17
 c00de34:	10001926 	beq	r2,zero,c00de9c <__divdf3+0x2c0>
 c00de38:	88014b26 	beq	r17,zero,c00e368 <__divdf3+0x78c>
 c00de3c:	8809883a 	mov	r4,r17
 c00de40:	d9400115 	stw	r5,4(sp)
 c00de44:	d9800215 	stw	r6,8(sp)
 c00de48:	da000415 	stw	r8,16(sp)
 c00de4c:	da400315 	stw	r9,12(sp)
 c00de50:	c00fb700 	call	c00fb70 <__clzsi2>
 c00de54:	d9400117 	ldw	r5,4(sp)
 c00de58:	d9800217 	ldw	r6,8(sp)
 c00de5c:	da000417 	ldw	r8,16(sp)
 c00de60:	da400317 	ldw	r9,12(sp)
 c00de64:	113ffd44 	addi	r4,r2,-11
 c00de68:	00c00704 	movi	r3,28
 c00de6c:	19013a16 	blt	r3,r4,c00e358 <__divdf3+0x77c>
 c00de70:	00c00744 	movi	r3,29
 c00de74:	153ffe04 	addi	r20,r2,-8
 c00de78:	1907c83a 	sub	r3,r3,r4
 c00de7c:	8d22983a 	sll	r17,r17,r20
 c00de80:	30c6d83a 	srl	r3,r6,r3
 c00de84:	3528983a 	sll	r20,r6,r20
 c00de88:	1c62b03a 	or	r17,r3,r17
 c00de8c:	1080fcc4 	addi	r2,r2,1011
 c00de90:	0087c83a 	sub	r3,zero,r2
 c00de94:	000f883a 	mov	r7,zero
 c00de98:	003f8006 	br	c00dc9c <__alt_data_end+0xfc00dc9c>
 c00de9c:	0023883a 	mov	r17,zero
 c00dea0:	0029883a 	mov	r20,zero
 c00dea4:	01c00044 	movi	r7,1
 c00dea8:	003f7c06 	br	c00dc9c <__alt_data_end+0xfc00dc9c>
 c00deac:	01c000c4 	movi	r7,3
 c00deb0:	003f7a06 	br	c00dc9c <__alt_data_end+0xfc00dc9c>
 c00deb4:	02400104 	movi	r9,4
 c00deb8:	0021883a 	mov	r16,zero
 c00debc:	002b883a 	mov	r21,zero
 c00dec0:	01400044 	movi	r5,1
 c00dec4:	003f6306 	br	c00dc54 <__alt_data_end+0xfc00dc54>
 c00dec8:	02400304 	movi	r9,12
 c00decc:	014000c4 	movi	r5,3
 c00ded0:	003f6006 	br	c00dc54 <__alt_data_end+0xfc00dc54>
 c00ded4:	04000434 	movhi	r16,16
 c00ded8:	0009883a 	mov	r4,zero
 c00dedc:	843fffc4 	addi	r16,r16,-1
 c00dee0:	057fffc4 	movi	r21,-1
 c00dee4:	0081ffc4 	movi	r2,2047
 c00dee8:	003f9b06 	br	c00dd58 <__alt_data_end+0xfc00dd58>
 c00deec:	00c00044 	movi	r3,1
 c00def0:	1887c83a 	sub	r3,r3,r2
 c00def4:	01000e04 	movi	r4,56
 c00def8:	20c1530e 	bge	r4,r3,c00e448 <__divdf3+0x86c>
 c00defc:	9900004c 	andi	r4,r19,1
 c00df00:	0005883a 	mov	r2,zero
 c00df04:	0021883a 	mov	r16,zero
 c00df08:	002b883a 	mov	r21,zero
 c00df0c:	003f9206 	br	c00dd58 <__alt_data_end+0xfc00dd58>
 c00df10:	8c012e36 	bltu	r17,r16,c00e3cc <__divdf3+0x7f0>
 c00df14:	84412c26 	beq	r16,r17,c00e3c8 <__divdf3+0x7ec>
 c00df18:	a82f883a 	mov	r23,r21
 c00df1c:	18ffffc4 	addi	r3,r3,-1
 c00df20:	002b883a 	mov	r21,zero
 c00df24:	a004d63a 	srli	r2,r20,24
 c00df28:	8822923a 	slli	r17,r17,8
 c00df2c:	a028923a 	slli	r20,r20,8
 c00df30:	8009883a 	mov	r4,r16
 c00df34:	88acb03a 	or	r22,r17,r2
 c00df38:	dd000015 	stw	r20,0(sp)
 c00df3c:	b028d43a 	srli	r20,r22,16
 c00df40:	d8c00215 	stw	r3,8(sp)
 c00df44:	b4bfffcc 	andi	r18,r22,65535
 c00df48:	a00b883a 	mov	r5,r20
 c00df4c:	c002c040 	call	c002c04 <__udivsi3>
 c00df50:	100b883a 	mov	r5,r2
 c00df54:	9009883a 	mov	r4,r18
 c00df58:	1023883a 	mov	r17,r2
 c00df5c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00df60:	8009883a 	mov	r4,r16
 c00df64:	a00b883a 	mov	r5,r20
 c00df68:	1039883a 	mov	fp,r2
 c00df6c:	c002c680 	call	c002c68 <__umodsi3>
 c00df70:	1004943a 	slli	r2,r2,16
 c00df74:	b808d43a 	srli	r4,r23,16
 c00df78:	d8c00217 	ldw	r3,8(sp)
 c00df7c:	2084b03a 	or	r2,r4,r2
 c00df80:	1700062e 	bgeu	r2,fp,c00df9c <__divdf3+0x3c0>
 c00df84:	1585883a 	add	r2,r2,r22
 c00df88:	893fffc4 	addi	r4,r17,-1
 c00df8c:	15811d36 	bltu	r2,r22,c00e404 <__divdf3+0x828>
 c00df90:	17011c2e 	bgeu	r2,fp,c00e404 <__divdf3+0x828>
 c00df94:	8c7fff84 	addi	r17,r17,-2
 c00df98:	1585883a 	add	r2,r2,r22
 c00df9c:	1739c83a 	sub	fp,r2,fp
 c00dfa0:	a00b883a 	mov	r5,r20
 c00dfa4:	e009883a 	mov	r4,fp
 c00dfa8:	d8c00215 	stw	r3,8(sp)
 c00dfac:	c002c040 	call	c002c04 <__udivsi3>
 c00dfb0:	100b883a 	mov	r5,r2
 c00dfb4:	9009883a 	mov	r4,r18
 c00dfb8:	1021883a 	mov	r16,r2
 c00dfbc:	c002cc00 	call	c002cc0 <__mulsi3>
 c00dfc0:	a00b883a 	mov	r5,r20
 c00dfc4:	e009883a 	mov	r4,fp
 c00dfc8:	d8800415 	stw	r2,16(sp)
 c00dfcc:	c002c680 	call	c002c68 <__umodsi3>
 c00dfd0:	1004943a 	slli	r2,r2,16
 c00dfd4:	da000417 	ldw	r8,16(sp)
 c00dfd8:	bdffffcc 	andi	r23,r23,65535
 c00dfdc:	b884b03a 	or	r2,r23,r2
 c00dfe0:	d8c00217 	ldw	r3,8(sp)
 c00dfe4:	1200062e 	bgeu	r2,r8,c00e000 <__divdf3+0x424>
 c00dfe8:	1585883a 	add	r2,r2,r22
 c00dfec:	813fffc4 	addi	r4,r16,-1
 c00dff0:	15810236 	bltu	r2,r22,c00e3fc <__divdf3+0x820>
 c00dff4:	1201012e 	bgeu	r2,r8,c00e3fc <__divdf3+0x820>
 c00dff8:	843fff84 	addi	r16,r16,-2
 c00dffc:	1585883a 	add	r2,r2,r22
 c00e000:	8822943a 	slli	r17,r17,16
 c00e004:	d9800017 	ldw	r6,0(sp)
 c00e008:	1211c83a 	sub	r8,r2,r8
 c00e00c:	8c22b03a 	or	r17,r17,r16
 c00e010:	373fffcc 	andi	fp,r6,65535
 c00e014:	8abfffcc 	andi	r10,r17,65535
 c00e018:	8820d43a 	srli	r16,r17,16
 c00e01c:	5009883a 	mov	r4,r10
 c00e020:	e00b883a 	mov	r5,fp
 c00e024:	302ed43a 	srli	r23,r6,16
 c00e028:	d8c00215 	stw	r3,8(sp)
 c00e02c:	da000415 	stw	r8,16(sp)
 c00e030:	da800115 	stw	r10,4(sp)
 c00e034:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e038:	800b883a 	mov	r5,r16
 c00e03c:	e009883a 	mov	r4,fp
 c00e040:	d8800515 	stw	r2,20(sp)
 c00e044:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e048:	8009883a 	mov	r4,r16
 c00e04c:	b80b883a 	mov	r5,r23
 c00e050:	d8800315 	stw	r2,12(sp)
 c00e054:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e058:	da800117 	ldw	r10,4(sp)
 c00e05c:	b80b883a 	mov	r5,r23
 c00e060:	1021883a 	mov	r16,r2
 c00e064:	5009883a 	mov	r4,r10
 c00e068:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e06c:	d9c00517 	ldw	r7,20(sp)
 c00e070:	da400317 	ldw	r9,12(sp)
 c00e074:	d8c00217 	ldw	r3,8(sp)
 c00e078:	3808d43a 	srli	r4,r7,16
 c00e07c:	1245883a 	add	r2,r2,r9
 c00e080:	da000417 	ldw	r8,16(sp)
 c00e084:	2085883a 	add	r2,r4,r2
 c00e088:	1240022e 	bgeu	r2,r9,c00e094 <__divdf3+0x4b8>
 c00e08c:	01000074 	movhi	r4,1
 c00e090:	8121883a 	add	r16,r16,r4
 c00e094:	1008d43a 	srli	r4,r2,16
 c00e098:	1004943a 	slli	r2,r2,16
 c00e09c:	39ffffcc 	andi	r7,r7,65535
 c00e0a0:	2409883a 	add	r4,r4,r16
 c00e0a4:	11c5883a 	add	r2,r2,r7
 c00e0a8:	4100bb36 	bltu	r8,r4,c00e398 <__divdf3+0x7bc>
 c00e0ac:	4100d726 	beq	r8,r4,c00e40c <__divdf3+0x830>
 c00e0b0:	4109c83a 	sub	r4,r8,r4
 c00e0b4:	a8a1c83a 	sub	r16,r21,r2
 c00e0b8:	ac2b803a 	cmpltu	r21,r21,r16
 c00e0bc:	256bc83a 	sub	r21,r4,r21
 c00e0c0:	b540d926 	beq	r22,r21,c00e428 <__divdf3+0x84c>
 c00e0c4:	a00b883a 	mov	r5,r20
 c00e0c8:	a809883a 	mov	r4,r21
 c00e0cc:	d8c00215 	stw	r3,8(sp)
 c00e0d0:	c002c040 	call	c002c04 <__udivsi3>
 c00e0d4:	100b883a 	mov	r5,r2
 c00e0d8:	9009883a 	mov	r4,r18
 c00e0dc:	d8800515 	stw	r2,20(sp)
 c00e0e0:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e0e4:	a809883a 	mov	r4,r21
 c00e0e8:	a00b883a 	mov	r5,r20
 c00e0ec:	d8800415 	stw	r2,16(sp)
 c00e0f0:	c002c680 	call	c002c68 <__umodsi3>
 c00e0f4:	1004943a 	slli	r2,r2,16
 c00e0f8:	8008d43a 	srli	r4,r16,16
 c00e0fc:	da000417 	ldw	r8,16(sp)
 c00e100:	d8c00217 	ldw	r3,8(sp)
 c00e104:	2084b03a 	or	r2,r4,r2
 c00e108:	d9c00517 	ldw	r7,20(sp)
 c00e10c:	1200062e 	bgeu	r2,r8,c00e128 <__divdf3+0x54c>
 c00e110:	1585883a 	add	r2,r2,r22
 c00e114:	393fffc4 	addi	r4,r7,-1
 c00e118:	1580c536 	bltu	r2,r22,c00e430 <__divdf3+0x854>
 c00e11c:	1200c42e 	bgeu	r2,r8,c00e430 <__divdf3+0x854>
 c00e120:	39ffff84 	addi	r7,r7,-2
 c00e124:	1585883a 	add	r2,r2,r22
 c00e128:	122bc83a 	sub	r21,r2,r8
 c00e12c:	a00b883a 	mov	r5,r20
 c00e130:	a809883a 	mov	r4,r21
 c00e134:	d8c00215 	stw	r3,8(sp)
 c00e138:	d9c00515 	stw	r7,20(sp)
 c00e13c:	c002c040 	call	c002c04 <__udivsi3>
 c00e140:	9009883a 	mov	r4,r18
 c00e144:	100b883a 	mov	r5,r2
 c00e148:	d8800415 	stw	r2,16(sp)
 c00e14c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e150:	a809883a 	mov	r4,r21
 c00e154:	a00b883a 	mov	r5,r20
 c00e158:	1025883a 	mov	r18,r2
 c00e15c:	c002c680 	call	c002c68 <__umodsi3>
 c00e160:	1004943a 	slli	r2,r2,16
 c00e164:	813fffcc 	andi	r4,r16,65535
 c00e168:	d8c00217 	ldw	r3,8(sp)
 c00e16c:	20a0b03a 	or	r16,r4,r2
 c00e170:	d9c00517 	ldw	r7,20(sp)
 c00e174:	da000417 	ldw	r8,16(sp)
 c00e178:	8480062e 	bgeu	r16,r18,c00e194 <__divdf3+0x5b8>
 c00e17c:	85a1883a 	add	r16,r16,r22
 c00e180:	40bfffc4 	addi	r2,r8,-1
 c00e184:	8580ac36 	bltu	r16,r22,c00e438 <__divdf3+0x85c>
 c00e188:	8480ab2e 	bgeu	r16,r18,c00e438 <__divdf3+0x85c>
 c00e18c:	423fff84 	addi	r8,r8,-2
 c00e190:	85a1883a 	add	r16,r16,r22
 c00e194:	3804943a 	slli	r2,r7,16
 c00e198:	84a1c83a 	sub	r16,r16,r18
 c00e19c:	e009883a 	mov	r4,fp
 c00e1a0:	1228b03a 	or	r20,r2,r8
 c00e1a4:	a1ffffcc 	andi	r7,r20,65535
 c00e1a8:	a024d43a 	srli	r18,r20,16
 c00e1ac:	380b883a 	mov	r5,r7
 c00e1b0:	d8c00215 	stw	r3,8(sp)
 c00e1b4:	d9c00515 	stw	r7,20(sp)
 c00e1b8:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e1bc:	900b883a 	mov	r5,r18
 c00e1c0:	e009883a 	mov	r4,fp
 c00e1c4:	102b883a 	mov	r21,r2
 c00e1c8:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e1cc:	900b883a 	mov	r5,r18
 c00e1d0:	b809883a 	mov	r4,r23
 c00e1d4:	1039883a 	mov	fp,r2
 c00e1d8:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e1dc:	d9c00517 	ldw	r7,20(sp)
 c00e1e0:	b80b883a 	mov	r5,r23
 c00e1e4:	1025883a 	mov	r18,r2
 c00e1e8:	3809883a 	mov	r4,r7
 c00e1ec:	c002cc00 	call	c002cc0 <__mulsi3>
 c00e1f0:	a808d43a 	srli	r4,r21,16
 c00e1f4:	1705883a 	add	r2,r2,fp
 c00e1f8:	d8c00217 	ldw	r3,8(sp)
 c00e1fc:	2085883a 	add	r2,r4,r2
 c00e200:	1700022e 	bgeu	r2,fp,c00e20c <__divdf3+0x630>
 c00e204:	01000074 	movhi	r4,1
 c00e208:	9125883a 	add	r18,r18,r4
 c00e20c:	1008d43a 	srli	r4,r2,16
 c00e210:	1004943a 	slli	r2,r2,16
 c00e214:	ad7fffcc 	andi	r21,r21,65535
 c00e218:	2489883a 	add	r4,r4,r18
 c00e21c:	1545883a 	add	r2,r2,r21
 c00e220:	81003836 	bltu	r16,r4,c00e304 <__divdf3+0x728>
 c00e224:	81003626 	beq	r16,r4,c00e300 <__divdf3+0x724>
 c00e228:	a5000054 	ori	r20,r20,1
 c00e22c:	1880ffc4 	addi	r2,r3,1023
 c00e230:	00bf2e0e 	bge	zero,r2,c00deec <__alt_data_end+0xfc00deec>
 c00e234:	a10001cc 	andi	r4,r20,7
 c00e238:	20000726 	beq	r4,zero,c00e258 <__divdf3+0x67c>
 c00e23c:	a10003cc 	andi	r4,r20,15
 c00e240:	01400104 	movi	r5,4
 c00e244:	21400426 	beq	r4,r5,c00e258 <__divdf3+0x67c>
 c00e248:	a149883a 	add	r4,r20,r5
 c00e24c:	2529803a 	cmpltu	r20,r4,r20
 c00e250:	8d23883a 	add	r17,r17,r20
 c00e254:	2029883a 	mov	r20,r4
 c00e258:	8900402c 	andhi	r4,r17,256
 c00e25c:	20000426 	beq	r4,zero,c00e270 <__divdf3+0x694>
 c00e260:	18810004 	addi	r2,r3,1024
 c00e264:	00ffc034 	movhi	r3,65280
 c00e268:	18ffffc4 	addi	r3,r3,-1
 c00e26c:	88e2703a 	and	r17,r17,r3
 c00e270:	00c1ff84 	movi	r3,2046
 c00e274:	18beb416 	blt	r3,r2,c00dd48 <__alt_data_end+0xfc00dd48>
 c00e278:	a028d0fa 	srli	r20,r20,3
 c00e27c:	882a977a 	slli	r21,r17,29
 c00e280:	8820927a 	slli	r16,r17,9
 c00e284:	1081ffcc 	andi	r2,r2,2047
 c00e288:	ad2ab03a 	or	r21,r21,r20
 c00e28c:	8020d33a 	srli	r16,r16,12
 c00e290:	9900004c 	andi	r4,r19,1
 c00e294:	003eb006 	br	c00dd58 <__alt_data_end+0xfc00dd58>
 c00e298:	8080022c 	andhi	r2,r16,8
 c00e29c:	10001226 	beq	r2,zero,c00e2e8 <__divdf3+0x70c>
 c00e2a0:	8880022c 	andhi	r2,r17,8
 c00e2a4:	1000101e 	bne	r2,zero,c00e2e8 <__divdf3+0x70c>
 c00e2a8:	00800434 	movhi	r2,16
 c00e2ac:	8c000234 	orhi	r16,r17,8
 c00e2b0:	10bfffc4 	addi	r2,r2,-1
 c00e2b4:	b809883a 	mov	r4,r23
 c00e2b8:	80a0703a 	and	r16,r16,r2
 c00e2bc:	a02b883a 	mov	r21,r20
 c00e2c0:	003f0806 	br	c00dee4 <__alt_data_end+0xfc00dee4>
 c00e2c4:	008000c4 	movi	r2,3
 c00e2c8:	3880b126 	beq	r7,r2,c00e590 <__divdf3+0x9b4>
 c00e2cc:	00800044 	movi	r2,1
 c00e2d0:	38805b1e 	bne	r7,r2,c00e440 <__divdf3+0x864>
 c00e2d4:	e009883a 	mov	r4,fp
 c00e2d8:	0005883a 	mov	r2,zero
 c00e2dc:	0021883a 	mov	r16,zero
 c00e2e0:	002b883a 	mov	r21,zero
 c00e2e4:	003e9c06 	br	c00dd58 <__alt_data_end+0xfc00dd58>
 c00e2e8:	00800434 	movhi	r2,16
 c00e2ec:	84000234 	orhi	r16,r16,8
 c00e2f0:	10bfffc4 	addi	r2,r2,-1
 c00e2f4:	b009883a 	mov	r4,r22
 c00e2f8:	80a0703a 	and	r16,r16,r2
 c00e2fc:	003ef906 	br	c00dee4 <__alt_data_end+0xfc00dee4>
 c00e300:	103fca26 	beq	r2,zero,c00e22c <__alt_data_end+0xfc00e22c>
 c00e304:	b421883a 	add	r16,r22,r16
 c00e308:	a17fffc4 	addi	r5,r20,-1
 c00e30c:	8580422e 	bgeu	r16,r22,c00e418 <__divdf3+0x83c>
 c00e310:	2829883a 	mov	r20,r5
 c00e314:	813fc41e 	bne	r16,r4,c00e228 <__alt_data_end+0xfc00e228>
 c00e318:	d9800017 	ldw	r6,0(sp)
 c00e31c:	30bfc21e 	bne	r6,r2,c00e228 <__alt_data_end+0xfc00e228>
 c00e320:	003fc206 	br	c00e22c <__alt_data_end+0xfc00e22c>
 c00e324:	143ff604 	addi	r16,r2,-40
 c00e328:	8c20983a 	sll	r16,r17,r16
 c00e32c:	002b883a 	mov	r21,zero
 c00e330:	003eb406 	br	c00de04 <__alt_data_end+0xfc00de04>
 c00e334:	d9800215 	stw	r6,8(sp)
 c00e338:	d9c00515 	stw	r7,20(sp)
 c00e33c:	da000415 	stw	r8,16(sp)
 c00e340:	c00fb700 	call	c00fb70 <__clzsi2>
 c00e344:	10800804 	addi	r2,r2,32
 c00e348:	da000417 	ldw	r8,16(sp)
 c00e34c:	d9c00517 	ldw	r7,20(sp)
 c00e350:	d9800217 	ldw	r6,8(sp)
 c00e354:	003ea106 	br	c00dddc <__alt_data_end+0xfc00dddc>
 c00e358:	147ff604 	addi	r17,r2,-40
 c00e35c:	3462983a 	sll	r17,r6,r17
 c00e360:	0029883a 	mov	r20,zero
 c00e364:	003ec906 	br	c00de8c <__alt_data_end+0xfc00de8c>
 c00e368:	3009883a 	mov	r4,r6
 c00e36c:	d9400115 	stw	r5,4(sp)
 c00e370:	d9800215 	stw	r6,8(sp)
 c00e374:	da000415 	stw	r8,16(sp)
 c00e378:	da400315 	stw	r9,12(sp)
 c00e37c:	c00fb700 	call	c00fb70 <__clzsi2>
 c00e380:	10800804 	addi	r2,r2,32
 c00e384:	da400317 	ldw	r9,12(sp)
 c00e388:	da000417 	ldw	r8,16(sp)
 c00e38c:	d9800217 	ldw	r6,8(sp)
 c00e390:	d9400117 	ldw	r5,4(sp)
 c00e394:	003eb306 	br	c00de64 <__alt_data_end+0xfc00de64>
 c00e398:	d9800017 	ldw	r6,0(sp)
 c00e39c:	a9ab883a 	add	r21,r21,r6
 c00e3a0:	a98b803a 	cmpltu	r5,r21,r6
 c00e3a4:	2d8b883a 	add	r5,r5,r22
 c00e3a8:	2a11883a 	add	r8,r5,r8
 c00e3ac:	897fffc4 	addi	r5,r17,-1
 c00e3b0:	b2000c2e 	bgeu	r22,r8,c00e3e4 <__divdf3+0x808>
 c00e3b4:	41003f36 	bltu	r8,r4,c00e4b4 <__divdf3+0x8d8>
 c00e3b8:	22006c26 	beq	r4,r8,c00e56c <__divdf3+0x990>
 c00e3bc:	4109c83a 	sub	r4,r8,r4
 c00e3c0:	2823883a 	mov	r17,r5
 c00e3c4:	003f3b06 	br	c00e0b4 <__alt_data_end+0xfc00e0b4>
 c00e3c8:	ad3ed336 	bltu	r21,r20,c00df18 <__alt_data_end+0xfc00df18>
 c00e3cc:	a804d07a 	srli	r2,r21,1
 c00e3d0:	802e97fa 	slli	r23,r16,31
 c00e3d4:	a82a97fa 	slli	r21,r21,31
 c00e3d8:	8020d07a 	srli	r16,r16,1
 c00e3dc:	b8aeb03a 	or	r23,r23,r2
 c00e3e0:	003ed006 	br	c00df24 <__alt_data_end+0xfc00df24>
 c00e3e4:	b23ff51e 	bne	r22,r8,c00e3bc <__alt_data_end+0xfc00e3bc>
 c00e3e8:	d9800017 	ldw	r6,0(sp)
 c00e3ec:	a9bff12e 	bgeu	r21,r6,c00e3b4 <__alt_data_end+0xfc00e3b4>
 c00e3f0:	b109c83a 	sub	r4,r22,r4
 c00e3f4:	2823883a 	mov	r17,r5
 c00e3f8:	003f2e06 	br	c00e0b4 <__alt_data_end+0xfc00e0b4>
 c00e3fc:	2021883a 	mov	r16,r4
 c00e400:	003eff06 	br	c00e000 <__alt_data_end+0xfc00e000>
 c00e404:	2023883a 	mov	r17,r4
 c00e408:	003ee406 	br	c00df9c <__alt_data_end+0xfc00df9c>
 c00e40c:	a8bfe236 	bltu	r21,r2,c00e398 <__alt_data_end+0xfc00e398>
 c00e410:	0009883a 	mov	r4,zero
 c00e414:	003f2706 	br	c00e0b4 <__alt_data_end+0xfc00e0b4>
 c00e418:	81002d36 	bltu	r16,r4,c00e4d0 <__divdf3+0x8f4>
 c00e41c:	24005626 	beq	r4,r16,c00e578 <__divdf3+0x99c>
 c00e420:	2829883a 	mov	r20,r5
 c00e424:	003f8006 	br	c00e228 <__alt_data_end+0xfc00e228>
 c00e428:	053fffc4 	movi	r20,-1
 c00e42c:	003f7f06 	br	c00e22c <__alt_data_end+0xfc00e22c>
 c00e430:	200f883a 	mov	r7,r4
 c00e434:	003f3c06 	br	c00e128 <__alt_data_end+0xfc00e128>
 c00e438:	1011883a 	mov	r8,r2
 c00e43c:	003f5506 	br	c00e194 <__alt_data_end+0xfc00e194>
 c00e440:	e027883a 	mov	r19,fp
 c00e444:	003f7906 	br	c00e22c <__alt_data_end+0xfc00e22c>
 c00e448:	010007c4 	movi	r4,31
 c00e44c:	20c02816 	blt	r4,r3,c00e4f0 <__divdf3+0x914>
 c00e450:	00800804 	movi	r2,32
 c00e454:	10c5c83a 	sub	r2,r2,r3
 c00e458:	888a983a 	sll	r5,r17,r2
 c00e45c:	a0c8d83a 	srl	r4,r20,r3
 c00e460:	a084983a 	sll	r2,r20,r2
 c00e464:	88e2d83a 	srl	r17,r17,r3
 c00e468:	2906b03a 	or	r3,r5,r4
 c00e46c:	1004c03a 	cmpne	r2,r2,zero
 c00e470:	1886b03a 	or	r3,r3,r2
 c00e474:	188001cc 	andi	r2,r3,7
 c00e478:	10000726 	beq	r2,zero,c00e498 <__divdf3+0x8bc>
 c00e47c:	188003cc 	andi	r2,r3,15
 c00e480:	01000104 	movi	r4,4
 c00e484:	11000426 	beq	r2,r4,c00e498 <__divdf3+0x8bc>
 c00e488:	1805883a 	mov	r2,r3
 c00e48c:	10c00104 	addi	r3,r2,4
 c00e490:	1885803a 	cmpltu	r2,r3,r2
 c00e494:	88a3883a 	add	r17,r17,r2
 c00e498:	8880202c 	andhi	r2,r17,128
 c00e49c:	10002926 	beq	r2,zero,c00e544 <__divdf3+0x968>
 c00e4a0:	9900004c 	andi	r4,r19,1
 c00e4a4:	00800044 	movi	r2,1
 c00e4a8:	0021883a 	mov	r16,zero
 c00e4ac:	002b883a 	mov	r21,zero
 c00e4b0:	003e2906 	br	c00dd58 <__alt_data_end+0xfc00dd58>
 c00e4b4:	d9800017 	ldw	r6,0(sp)
 c00e4b8:	8c7fff84 	addi	r17,r17,-2
 c00e4bc:	a9ab883a 	add	r21,r21,r6
 c00e4c0:	a98b803a 	cmpltu	r5,r21,r6
 c00e4c4:	2d8b883a 	add	r5,r5,r22
 c00e4c8:	2a11883a 	add	r8,r5,r8
 c00e4cc:	003ef806 	br	c00e0b0 <__alt_data_end+0xfc00e0b0>
 c00e4d0:	d9800017 	ldw	r6,0(sp)
 c00e4d4:	318f883a 	add	r7,r6,r6
 c00e4d8:	398b803a 	cmpltu	r5,r7,r6
 c00e4dc:	2d8d883a 	add	r6,r5,r22
 c00e4e0:	81a1883a 	add	r16,r16,r6
 c00e4e4:	a17fff84 	addi	r5,r20,-2
 c00e4e8:	d9c00015 	stw	r7,0(sp)
 c00e4ec:	003f8806 	br	c00e310 <__alt_data_end+0xfc00e310>
 c00e4f0:	013ff844 	movi	r4,-31
 c00e4f4:	2085c83a 	sub	r2,r4,r2
 c00e4f8:	8888d83a 	srl	r4,r17,r2
 c00e4fc:	00800804 	movi	r2,32
 c00e500:	18802126 	beq	r3,r2,c00e588 <__divdf3+0x9ac>
 c00e504:	04001004 	movi	r16,64
 c00e508:	80c7c83a 	sub	r3,r16,r3
 c00e50c:	88e0983a 	sll	r16,r17,r3
 c00e510:	8504b03a 	or	r2,r16,r20
 c00e514:	1004c03a 	cmpne	r2,r2,zero
 c00e518:	2084b03a 	or	r2,r4,r2
 c00e51c:	144001cc 	andi	r17,r2,7
 c00e520:	88000d1e 	bne	r17,zero,c00e558 <__divdf3+0x97c>
 c00e524:	0021883a 	mov	r16,zero
 c00e528:	102ad0fa 	srli	r21,r2,3
 c00e52c:	9900004c 	andi	r4,r19,1
 c00e530:	0005883a 	mov	r2,zero
 c00e534:	ac6ab03a 	or	r21,r21,r17
 c00e538:	003e0706 	br	c00dd58 <__alt_data_end+0xfc00dd58>
 c00e53c:	1007883a 	mov	r3,r2
 c00e540:	0023883a 	mov	r17,zero
 c00e544:	8820927a 	slli	r16,r17,9
 c00e548:	1805883a 	mov	r2,r3
 c00e54c:	8822977a 	slli	r17,r17,29
 c00e550:	8020d33a 	srli	r16,r16,12
 c00e554:	003ff406 	br	c00e528 <__alt_data_end+0xfc00e528>
 c00e558:	10c003cc 	andi	r3,r2,15
 c00e55c:	01000104 	movi	r4,4
 c00e560:	193ff626 	beq	r3,r4,c00e53c <__alt_data_end+0xfc00e53c>
 c00e564:	0023883a 	mov	r17,zero
 c00e568:	003fc806 	br	c00e48c <__alt_data_end+0xfc00e48c>
 c00e56c:	a8bfd136 	bltu	r21,r2,c00e4b4 <__alt_data_end+0xfc00e4b4>
 c00e570:	2823883a 	mov	r17,r5
 c00e574:	003fa606 	br	c00e410 <__alt_data_end+0xfc00e410>
 c00e578:	d9800017 	ldw	r6,0(sp)
 c00e57c:	30bfd436 	bltu	r6,r2,c00e4d0 <__alt_data_end+0xfc00e4d0>
 c00e580:	2829883a 	mov	r20,r5
 c00e584:	003f6406 	br	c00e318 <__alt_data_end+0xfc00e318>
 c00e588:	0021883a 	mov	r16,zero
 c00e58c:	003fe006 	br	c00e510 <__alt_data_end+0xfc00e510>
 c00e590:	00800434 	movhi	r2,16
 c00e594:	8c000234 	orhi	r16,r17,8
 c00e598:	10bfffc4 	addi	r2,r2,-1
 c00e59c:	e009883a 	mov	r4,fp
 c00e5a0:	80a0703a 	and	r16,r16,r2
 c00e5a4:	a02b883a 	mov	r21,r20
 c00e5a8:	003e4e06 	br	c00dee4 <__alt_data_end+0xfc00dee4>

0c00e5ac <__eqdf2>:
 c00e5ac:	2804d53a 	srli	r2,r5,20
 c00e5b0:	3806d53a 	srli	r3,r7,20
 c00e5b4:	02000434 	movhi	r8,16
 c00e5b8:	423fffc4 	addi	r8,r8,-1
 c00e5bc:	1081ffcc 	andi	r2,r2,2047
 c00e5c0:	0281ffc4 	movi	r10,2047
 c00e5c4:	2a12703a 	and	r9,r5,r8
 c00e5c8:	18c1ffcc 	andi	r3,r3,2047
 c00e5cc:	3a10703a 	and	r8,r7,r8
 c00e5d0:	280ad7fa 	srli	r5,r5,31
 c00e5d4:	380ed7fa 	srli	r7,r7,31
 c00e5d8:	12801026 	beq	r2,r10,c00e61c <__eqdf2+0x70>
 c00e5dc:	0281ffc4 	movi	r10,2047
 c00e5e0:	1a800a26 	beq	r3,r10,c00e60c <__eqdf2+0x60>
 c00e5e4:	10c00226 	beq	r2,r3,c00e5f0 <__eqdf2+0x44>
 c00e5e8:	00800044 	movi	r2,1
 c00e5ec:	f800283a 	ret
 c00e5f0:	4a3ffd1e 	bne	r9,r8,c00e5e8 <__alt_data_end+0xfc00e5e8>
 c00e5f4:	21bffc1e 	bne	r4,r6,c00e5e8 <__alt_data_end+0xfc00e5e8>
 c00e5f8:	29c00c26 	beq	r5,r7,c00e62c <__eqdf2+0x80>
 c00e5fc:	103ffa1e 	bne	r2,zero,c00e5e8 <__alt_data_end+0xfc00e5e8>
 c00e600:	2244b03a 	or	r2,r4,r9
 c00e604:	1004c03a 	cmpne	r2,r2,zero
 c00e608:	f800283a 	ret
 c00e60c:	3214b03a 	or	r10,r6,r8
 c00e610:	503ff426 	beq	r10,zero,c00e5e4 <__alt_data_end+0xfc00e5e4>
 c00e614:	00800044 	movi	r2,1
 c00e618:	f800283a 	ret
 c00e61c:	2254b03a 	or	r10,r4,r9
 c00e620:	503fee26 	beq	r10,zero,c00e5dc <__alt_data_end+0xfc00e5dc>
 c00e624:	00800044 	movi	r2,1
 c00e628:	f800283a 	ret
 c00e62c:	0005883a 	mov	r2,zero
 c00e630:	f800283a 	ret

0c00e634 <__gedf2>:
 c00e634:	2804d53a 	srli	r2,r5,20
 c00e638:	3806d53a 	srli	r3,r7,20
 c00e63c:	02000434 	movhi	r8,16
 c00e640:	423fffc4 	addi	r8,r8,-1
 c00e644:	1081ffcc 	andi	r2,r2,2047
 c00e648:	0241ffc4 	movi	r9,2047
 c00e64c:	2a14703a 	and	r10,r5,r8
 c00e650:	18c1ffcc 	andi	r3,r3,2047
 c00e654:	3a10703a 	and	r8,r7,r8
 c00e658:	280ad7fa 	srli	r5,r5,31
 c00e65c:	380ed7fa 	srli	r7,r7,31
 c00e660:	12401d26 	beq	r2,r9,c00e6d8 <__gedf2+0xa4>
 c00e664:	0241ffc4 	movi	r9,2047
 c00e668:	1a401226 	beq	r3,r9,c00e6b4 <__gedf2+0x80>
 c00e66c:	1000081e 	bne	r2,zero,c00e690 <__gedf2+0x5c>
 c00e670:	2296b03a 	or	r11,r4,r10
 c00e674:	5813003a 	cmpeq	r9,r11,zero
 c00e678:	1800091e 	bne	r3,zero,c00e6a0 <__gedf2+0x6c>
 c00e67c:	3218b03a 	or	r12,r6,r8
 c00e680:	6000071e 	bne	r12,zero,c00e6a0 <__gedf2+0x6c>
 c00e684:	0005883a 	mov	r2,zero
 c00e688:	5800101e 	bne	r11,zero,c00e6cc <__gedf2+0x98>
 c00e68c:	f800283a 	ret
 c00e690:	18000c1e 	bne	r3,zero,c00e6c4 <__gedf2+0x90>
 c00e694:	3212b03a 	or	r9,r6,r8
 c00e698:	48000c26 	beq	r9,zero,c00e6cc <__gedf2+0x98>
 c00e69c:	0013883a 	mov	r9,zero
 c00e6a0:	39c03fcc 	andi	r7,r7,255
 c00e6a4:	48000826 	beq	r9,zero,c00e6c8 <__gedf2+0x94>
 c00e6a8:	38000926 	beq	r7,zero,c00e6d0 <__gedf2+0x9c>
 c00e6ac:	00800044 	movi	r2,1
 c00e6b0:	f800283a 	ret
 c00e6b4:	3212b03a 	or	r9,r6,r8
 c00e6b8:	483fec26 	beq	r9,zero,c00e66c <__alt_data_end+0xfc00e66c>
 c00e6bc:	00bfff84 	movi	r2,-2
 c00e6c0:	f800283a 	ret
 c00e6c4:	39c03fcc 	andi	r7,r7,255
 c00e6c8:	29c00626 	beq	r5,r7,c00e6e4 <__gedf2+0xb0>
 c00e6cc:	283ff726 	beq	r5,zero,c00e6ac <__alt_data_end+0xfc00e6ac>
 c00e6d0:	00bfffc4 	movi	r2,-1
 c00e6d4:	f800283a 	ret
 c00e6d8:	2292b03a 	or	r9,r4,r10
 c00e6dc:	483fe126 	beq	r9,zero,c00e664 <__alt_data_end+0xfc00e664>
 c00e6e0:	003ff606 	br	c00e6bc <__alt_data_end+0xfc00e6bc>
 c00e6e4:	18bff916 	blt	r3,r2,c00e6cc <__alt_data_end+0xfc00e6cc>
 c00e6e8:	10c00316 	blt	r2,r3,c00e6f8 <__gedf2+0xc4>
 c00e6ec:	42bff736 	bltu	r8,r10,c00e6cc <__alt_data_end+0xfc00e6cc>
 c00e6f0:	52000326 	beq	r10,r8,c00e700 <__gedf2+0xcc>
 c00e6f4:	5200042e 	bgeu	r10,r8,c00e708 <__gedf2+0xd4>
 c00e6f8:	283fec1e 	bne	r5,zero,c00e6ac <__alt_data_end+0xfc00e6ac>
 c00e6fc:	003ff406 	br	c00e6d0 <__alt_data_end+0xfc00e6d0>
 c00e700:	313ff236 	bltu	r6,r4,c00e6cc <__alt_data_end+0xfc00e6cc>
 c00e704:	21bffc36 	bltu	r4,r6,c00e6f8 <__alt_data_end+0xfc00e6f8>
 c00e708:	0005883a 	mov	r2,zero
 c00e70c:	f800283a 	ret

0c00e710 <__ledf2>:
 c00e710:	2804d53a 	srli	r2,r5,20
 c00e714:	3810d53a 	srli	r8,r7,20
 c00e718:	00c00434 	movhi	r3,16
 c00e71c:	18ffffc4 	addi	r3,r3,-1
 c00e720:	1081ffcc 	andi	r2,r2,2047
 c00e724:	0241ffc4 	movi	r9,2047
 c00e728:	28d4703a 	and	r10,r5,r3
 c00e72c:	4201ffcc 	andi	r8,r8,2047
 c00e730:	38c6703a 	and	r3,r7,r3
 c00e734:	280ad7fa 	srli	r5,r5,31
 c00e738:	380ed7fa 	srli	r7,r7,31
 c00e73c:	12401f26 	beq	r2,r9,c00e7bc <__ledf2+0xac>
 c00e740:	0241ffc4 	movi	r9,2047
 c00e744:	42401426 	beq	r8,r9,c00e798 <__ledf2+0x88>
 c00e748:	1000091e 	bne	r2,zero,c00e770 <__ledf2+0x60>
 c00e74c:	2296b03a 	or	r11,r4,r10
 c00e750:	5813003a 	cmpeq	r9,r11,zero
 c00e754:	29403fcc 	andi	r5,r5,255
 c00e758:	40000a1e 	bne	r8,zero,c00e784 <__ledf2+0x74>
 c00e75c:	30d8b03a 	or	r12,r6,r3
 c00e760:	6000081e 	bne	r12,zero,c00e784 <__ledf2+0x74>
 c00e764:	0005883a 	mov	r2,zero
 c00e768:	5800111e 	bne	r11,zero,c00e7b0 <__ledf2+0xa0>
 c00e76c:	f800283a 	ret
 c00e770:	29403fcc 	andi	r5,r5,255
 c00e774:	40000c1e 	bne	r8,zero,c00e7a8 <__ledf2+0x98>
 c00e778:	30d2b03a 	or	r9,r6,r3
 c00e77c:	48000c26 	beq	r9,zero,c00e7b0 <__ledf2+0xa0>
 c00e780:	0013883a 	mov	r9,zero
 c00e784:	39c03fcc 	andi	r7,r7,255
 c00e788:	48000826 	beq	r9,zero,c00e7ac <__ledf2+0x9c>
 c00e78c:	38001126 	beq	r7,zero,c00e7d4 <__ledf2+0xc4>
 c00e790:	00800044 	movi	r2,1
 c00e794:	f800283a 	ret
 c00e798:	30d2b03a 	or	r9,r6,r3
 c00e79c:	483fea26 	beq	r9,zero,c00e748 <__alt_data_end+0xfc00e748>
 c00e7a0:	00800084 	movi	r2,2
 c00e7a4:	f800283a 	ret
 c00e7a8:	39c03fcc 	andi	r7,r7,255
 c00e7ac:	39400726 	beq	r7,r5,c00e7cc <__ledf2+0xbc>
 c00e7b0:	2800081e 	bne	r5,zero,c00e7d4 <__ledf2+0xc4>
 c00e7b4:	00800044 	movi	r2,1
 c00e7b8:	f800283a 	ret
 c00e7bc:	2292b03a 	or	r9,r4,r10
 c00e7c0:	483fdf26 	beq	r9,zero,c00e740 <__alt_data_end+0xfc00e740>
 c00e7c4:	00800084 	movi	r2,2
 c00e7c8:	f800283a 	ret
 c00e7cc:	4080030e 	bge	r8,r2,c00e7dc <__ledf2+0xcc>
 c00e7d0:	383fef26 	beq	r7,zero,c00e790 <__alt_data_end+0xfc00e790>
 c00e7d4:	00bfffc4 	movi	r2,-1
 c00e7d8:	f800283a 	ret
 c00e7dc:	123feb16 	blt	r2,r8,c00e78c <__alt_data_end+0xfc00e78c>
 c00e7e0:	1abff336 	bltu	r3,r10,c00e7b0 <__alt_data_end+0xfc00e7b0>
 c00e7e4:	50c00326 	beq	r10,r3,c00e7f4 <__ledf2+0xe4>
 c00e7e8:	50c0042e 	bgeu	r10,r3,c00e7fc <__ledf2+0xec>
 c00e7ec:	283fe81e 	bne	r5,zero,c00e790 <__alt_data_end+0xfc00e790>
 c00e7f0:	003ff806 	br	c00e7d4 <__alt_data_end+0xfc00e7d4>
 c00e7f4:	313fee36 	bltu	r6,r4,c00e7b0 <__alt_data_end+0xfc00e7b0>
 c00e7f8:	21bffc36 	bltu	r4,r6,c00e7ec <__alt_data_end+0xfc00e7ec>
 c00e7fc:	0005883a 	mov	r2,zero
 c00e800:	f800283a 	ret

0c00e804 <__muldf3>:
 c00e804:	deffee04 	addi	sp,sp,-72
 c00e808:	dd000c15 	stw	r20,48(sp)
 c00e80c:	2828d53a 	srli	r20,r5,20
 c00e810:	ddc00f15 	stw	r23,60(sp)
 c00e814:	282ed7fa 	srli	r23,r5,31
 c00e818:	dc000815 	stw	r16,32(sp)
 c00e81c:	04000434 	movhi	r16,16
 c00e820:	dcc00b15 	stw	r19,44(sp)
 c00e824:	843fffc4 	addi	r16,r16,-1
 c00e828:	dfc01115 	stw	ra,68(sp)
 c00e82c:	df001015 	stw	fp,64(sp)
 c00e830:	dd800e15 	stw	r22,56(sp)
 c00e834:	dd400d15 	stw	r21,52(sp)
 c00e838:	dc800a15 	stw	r18,40(sp)
 c00e83c:	dc400915 	stw	r17,36(sp)
 c00e840:	a501ffcc 	andi	r20,r20,2047
 c00e844:	2c20703a 	and	r16,r5,r16
 c00e848:	b827883a 	mov	r19,r23
 c00e84c:	ba403fcc 	andi	r9,r23,255
 c00e850:	a0006026 	beq	r20,zero,c00e9d4 <__muldf3+0x1d0>
 c00e854:	0081ffc4 	movi	r2,2047
 c00e858:	202d883a 	mov	r22,r4
 c00e85c:	a0803626 	beq	r20,r2,c00e938 <__muldf3+0x134>
 c00e860:	84000434 	orhi	r16,r16,16
 c00e864:	200ad77a 	srli	r5,r4,29
 c00e868:	800490fa 	slli	r2,r16,3
 c00e86c:	202c90fa 	slli	r22,r4,3
 c00e870:	a53f0044 	addi	r20,r20,-1023
 c00e874:	28a0b03a 	or	r16,r5,r2
 c00e878:	002b883a 	mov	r21,zero
 c00e87c:	000b883a 	mov	r5,zero
 c00e880:	3804d53a 	srli	r2,r7,20
 c00e884:	3838d7fa 	srli	fp,r7,31
 c00e888:	04400434 	movhi	r17,16
 c00e88c:	8c7fffc4 	addi	r17,r17,-1
 c00e890:	1081ffcc 	andi	r2,r2,2047
 c00e894:	3025883a 	mov	r18,r6
 c00e898:	3c62703a 	and	r17,r7,r17
 c00e89c:	e2803fcc 	andi	r10,fp,255
 c00e8a0:	10006d26 	beq	r2,zero,c00ea58 <__muldf3+0x254>
 c00e8a4:	00c1ffc4 	movi	r3,2047
 c00e8a8:	10c06526 	beq	r2,r3,c00ea40 <__muldf3+0x23c>
 c00e8ac:	8c400434 	orhi	r17,r17,16
 c00e8b0:	300ed77a 	srli	r7,r6,29
 c00e8b4:	880690fa 	slli	r3,r17,3
 c00e8b8:	302490fa 	slli	r18,r6,3
 c00e8bc:	10bf0044 	addi	r2,r2,-1023
 c00e8c0:	38e2b03a 	or	r17,r7,r3
 c00e8c4:	000f883a 	mov	r7,zero
 c00e8c8:	a087883a 	add	r3,r20,r2
 c00e8cc:	010003c4 	movi	r4,15
 c00e8d0:	3d44b03a 	or	r2,r7,r21
 c00e8d4:	e5ccf03a 	xor	r6,fp,r23
 c00e8d8:	1a000044 	addi	r8,r3,1
 c00e8dc:	20809b36 	bltu	r4,r2,c00eb4c <__muldf3+0x348>
 c00e8e0:	100490ba 	slli	r2,r2,2
 c00e8e4:	01030074 	movhi	r4,3073
 c00e8e8:	213a3e04 	addi	r4,r4,-5896
 c00e8ec:	1105883a 	add	r2,r2,r4
 c00e8f0:	10800017 	ldw	r2,0(r2)
 c00e8f4:	1000683a 	jmp	r2
 c00e8f8:	0c00eb4c 	andi	r16,at,941
 c00e8fc:	0c00e958 	cmpnei	r16,at,933
 c00e900:	0c00e958 	cmpnei	r16,at,933
 c00e904:	0c00e954 	ori	r16,at,933
 c00e908:	0c00eb28 	cmpgeui	r16,at,940
 c00e90c:	0c00eb28 	cmpgeui	r16,at,940
 c00e910:	0c00eb10 	cmplti	r16,at,940
 c00e914:	0c00e954 	ori	r16,at,933
 c00e918:	0c00eb28 	cmpgeui	r16,at,940
 c00e91c:	0c00eb10 	cmplti	r16,at,940
 c00e920:	0c00eb28 	cmpgeui	r16,at,940
 c00e924:	0c00e954 	ori	r16,at,933
 c00e928:	0c00eb38 	rdprs	r16,at,940
 c00e92c:	0c00eb38 	rdprs	r16,at,940
 c00e930:	0c00eb38 	rdprs	r16,at,940
 c00e934:	0c00ee98 	cmpnei	r16,at,954
 c00e938:	2404b03a 	or	r2,r4,r16
 c00e93c:	1000711e 	bne	r2,zero,c00eb04 <__muldf3+0x300>
 c00e940:	05400204 	movi	r21,8
 c00e944:	0021883a 	mov	r16,zero
 c00e948:	002d883a 	mov	r22,zero
 c00e94c:	01400084 	movi	r5,2
 c00e950:	003fcb06 	br	c00e880 <__alt_data_end+0xfc00e880>
 c00e954:	500d883a 	mov	r6,r10
 c00e958:	00800084 	movi	r2,2
 c00e95c:	38805926 	beq	r7,r2,c00eac4 <__muldf3+0x2c0>
 c00e960:	008000c4 	movi	r2,3
 c00e964:	3881bb26 	beq	r7,r2,c00f054 <__muldf3+0x850>
 c00e968:	00800044 	movi	r2,1
 c00e96c:	3881961e 	bne	r7,r2,c00efc8 <__muldf3+0x7c4>
 c00e970:	3027883a 	mov	r19,r6
 c00e974:	0005883a 	mov	r2,zero
 c00e978:	0021883a 	mov	r16,zero
 c00e97c:	002d883a 	mov	r22,zero
 c00e980:	1004953a 	slli	r2,r2,20
 c00e984:	98c03fcc 	andi	r3,r19,255
 c00e988:	04400434 	movhi	r17,16
 c00e98c:	8c7fffc4 	addi	r17,r17,-1
 c00e990:	180697fa 	slli	r3,r3,31
 c00e994:	8460703a 	and	r16,r16,r17
 c00e998:	80a0b03a 	or	r16,r16,r2
 c00e99c:	80c6b03a 	or	r3,r16,r3
 c00e9a0:	b005883a 	mov	r2,r22
 c00e9a4:	dfc01117 	ldw	ra,68(sp)
 c00e9a8:	df001017 	ldw	fp,64(sp)
 c00e9ac:	ddc00f17 	ldw	r23,60(sp)
 c00e9b0:	dd800e17 	ldw	r22,56(sp)
 c00e9b4:	dd400d17 	ldw	r21,52(sp)
 c00e9b8:	dd000c17 	ldw	r20,48(sp)
 c00e9bc:	dcc00b17 	ldw	r19,44(sp)
 c00e9c0:	dc800a17 	ldw	r18,40(sp)
 c00e9c4:	dc400917 	ldw	r17,36(sp)
 c00e9c8:	dc000817 	ldw	r16,32(sp)
 c00e9cc:	dec01204 	addi	sp,sp,72
 c00e9d0:	f800283a 	ret
 c00e9d4:	2404b03a 	or	r2,r4,r16
 c00e9d8:	202b883a 	mov	r21,r4
 c00e9dc:	10004426 	beq	r2,zero,c00eaf0 <__muldf3+0x2ec>
 c00e9e0:	80015126 	beq	r16,zero,c00ef28 <__muldf3+0x724>
 c00e9e4:	8009883a 	mov	r4,r16
 c00e9e8:	d9800715 	stw	r6,28(sp)
 c00e9ec:	d9c00215 	stw	r7,8(sp)
 c00e9f0:	da400415 	stw	r9,16(sp)
 c00e9f4:	c00fb700 	call	c00fb70 <__clzsi2>
 c00e9f8:	d9800717 	ldw	r6,28(sp)
 c00e9fc:	d9c00217 	ldw	r7,8(sp)
 c00ea00:	da400417 	ldw	r9,16(sp)
 c00ea04:	113ffd44 	addi	r4,r2,-11
 c00ea08:	00c00704 	movi	r3,28
 c00ea0c:	19014216 	blt	r3,r4,c00ef18 <__muldf3+0x714>
 c00ea10:	00c00744 	movi	r3,29
 c00ea14:	15bffe04 	addi	r22,r2,-8
 c00ea18:	1907c83a 	sub	r3,r3,r4
 c00ea1c:	85a0983a 	sll	r16,r16,r22
 c00ea20:	a8c6d83a 	srl	r3,r21,r3
 c00ea24:	adac983a 	sll	r22,r21,r22
 c00ea28:	1c20b03a 	or	r16,r3,r16
 c00ea2c:	1080fcc4 	addi	r2,r2,1011
 c00ea30:	00a9c83a 	sub	r20,zero,r2
 c00ea34:	002b883a 	mov	r21,zero
 c00ea38:	000b883a 	mov	r5,zero
 c00ea3c:	003f9006 	br	c00e880 <__alt_data_end+0xfc00e880>
 c00ea40:	3446b03a 	or	r3,r6,r17
 c00ea44:	1800281e 	bne	r3,zero,c00eae8 <__muldf3+0x2e4>
 c00ea48:	0023883a 	mov	r17,zero
 c00ea4c:	0025883a 	mov	r18,zero
 c00ea50:	01c00084 	movi	r7,2
 c00ea54:	003f9c06 	br	c00e8c8 <__alt_data_end+0xfc00e8c8>
 c00ea58:	3446b03a 	or	r3,r6,r17
 c00ea5c:	18001e26 	beq	r3,zero,c00ead8 <__muldf3+0x2d4>
 c00ea60:	88012126 	beq	r17,zero,c00eee8 <__muldf3+0x6e4>
 c00ea64:	8809883a 	mov	r4,r17
 c00ea68:	d9400215 	stw	r5,8(sp)
 c00ea6c:	d9800715 	stw	r6,28(sp)
 c00ea70:	da400415 	stw	r9,16(sp)
 c00ea74:	da800315 	stw	r10,12(sp)
 c00ea78:	c00fb700 	call	c00fb70 <__clzsi2>
 c00ea7c:	d9400217 	ldw	r5,8(sp)
 c00ea80:	d9800717 	ldw	r6,28(sp)
 c00ea84:	da400417 	ldw	r9,16(sp)
 c00ea88:	da800317 	ldw	r10,12(sp)
 c00ea8c:	113ffd44 	addi	r4,r2,-11
 c00ea90:	00c00704 	movi	r3,28
 c00ea94:	19011016 	blt	r3,r4,c00eed8 <__muldf3+0x6d4>
 c00ea98:	00c00744 	movi	r3,29
 c00ea9c:	14bffe04 	addi	r18,r2,-8
 c00eaa0:	1907c83a 	sub	r3,r3,r4
 c00eaa4:	8ca2983a 	sll	r17,r17,r18
 c00eaa8:	30c6d83a 	srl	r3,r6,r3
 c00eaac:	34a4983a 	sll	r18,r6,r18
 c00eab0:	1c62b03a 	or	r17,r3,r17
 c00eab4:	1080fcc4 	addi	r2,r2,1011
 c00eab8:	0085c83a 	sub	r2,zero,r2
 c00eabc:	000f883a 	mov	r7,zero
 c00eac0:	003f8106 	br	c00e8c8 <__alt_data_end+0xfc00e8c8>
 c00eac4:	3027883a 	mov	r19,r6
 c00eac8:	0081ffc4 	movi	r2,2047
 c00eacc:	0021883a 	mov	r16,zero
 c00ead0:	002d883a 	mov	r22,zero
 c00ead4:	003faa06 	br	c00e980 <__alt_data_end+0xfc00e980>
 c00ead8:	0023883a 	mov	r17,zero
 c00eadc:	0025883a 	mov	r18,zero
 c00eae0:	01c00044 	movi	r7,1
 c00eae4:	003f7806 	br	c00e8c8 <__alt_data_end+0xfc00e8c8>
 c00eae8:	01c000c4 	movi	r7,3
 c00eaec:	003f7606 	br	c00e8c8 <__alt_data_end+0xfc00e8c8>
 c00eaf0:	05400104 	movi	r21,4
 c00eaf4:	0021883a 	mov	r16,zero
 c00eaf8:	002d883a 	mov	r22,zero
 c00eafc:	01400044 	movi	r5,1
 c00eb00:	003f5f06 	br	c00e880 <__alt_data_end+0xfc00e880>
 c00eb04:	05400304 	movi	r21,12
 c00eb08:	014000c4 	movi	r5,3
 c00eb0c:	003f5c06 	br	c00e880 <__alt_data_end+0xfc00e880>
 c00eb10:	04000434 	movhi	r16,16
 c00eb14:	0027883a 	mov	r19,zero
 c00eb18:	843fffc4 	addi	r16,r16,-1
 c00eb1c:	05bfffc4 	movi	r22,-1
 c00eb20:	0081ffc4 	movi	r2,2047
 c00eb24:	003f9606 	br	c00e980 <__alt_data_end+0xfc00e980>
 c00eb28:	8023883a 	mov	r17,r16
 c00eb2c:	b025883a 	mov	r18,r22
 c00eb30:	280f883a 	mov	r7,r5
 c00eb34:	003f8806 	br	c00e958 <__alt_data_end+0xfc00e958>
 c00eb38:	8023883a 	mov	r17,r16
 c00eb3c:	b025883a 	mov	r18,r22
 c00eb40:	480d883a 	mov	r6,r9
 c00eb44:	280f883a 	mov	r7,r5
 c00eb48:	003f8306 	br	c00e958 <__alt_data_end+0xfc00e958>
 c00eb4c:	b026d43a 	srli	r19,r22,16
 c00eb50:	902ed43a 	srli	r23,r18,16
 c00eb54:	b5bfffcc 	andi	r22,r22,65535
 c00eb58:	94bfffcc 	andi	r18,r18,65535
 c00eb5c:	b00b883a 	mov	r5,r22
 c00eb60:	9009883a 	mov	r4,r18
 c00eb64:	d8c00515 	stw	r3,20(sp)
 c00eb68:	d9800715 	stw	r6,28(sp)
 c00eb6c:	da000615 	stw	r8,24(sp)
 c00eb70:	c002cc00 	call	c002cc0 <__mulsi3>
 c00eb74:	980b883a 	mov	r5,r19
 c00eb78:	9009883a 	mov	r4,r18
 c00eb7c:	1029883a 	mov	r20,r2
 c00eb80:	c002cc00 	call	c002cc0 <__mulsi3>
 c00eb84:	b80b883a 	mov	r5,r23
 c00eb88:	9809883a 	mov	r4,r19
 c00eb8c:	102b883a 	mov	r21,r2
 c00eb90:	c002cc00 	call	c002cc0 <__mulsi3>
 c00eb94:	b809883a 	mov	r4,r23
 c00eb98:	b00b883a 	mov	r5,r22
 c00eb9c:	1039883a 	mov	fp,r2
 c00eba0:	c002cc00 	call	c002cc0 <__mulsi3>
 c00eba4:	a008d43a 	srli	r4,r20,16
 c00eba8:	1545883a 	add	r2,r2,r21
 c00ebac:	d8c00517 	ldw	r3,20(sp)
 c00ebb0:	2085883a 	add	r2,r4,r2
 c00ebb4:	d9800717 	ldw	r6,28(sp)
 c00ebb8:	da000617 	ldw	r8,24(sp)
 c00ebbc:	1540022e 	bgeu	r2,r21,c00ebc8 <__muldf3+0x3c4>
 c00ebc0:	01000074 	movhi	r4,1
 c00ebc4:	e139883a 	add	fp,fp,r4
 c00ebc8:	100e943a 	slli	r7,r2,16
 c00ebcc:	1004d43a 	srli	r2,r2,16
 c00ebd0:	882ad43a 	srli	r21,r17,16
 c00ebd4:	a53fffcc 	andi	r20,r20,65535
 c00ebd8:	8c7fffcc 	andi	r17,r17,65535
 c00ebdc:	3d29883a 	add	r20,r7,r20
 c00ebe0:	b00b883a 	mov	r5,r22
 c00ebe4:	8809883a 	mov	r4,r17
 c00ebe8:	d8c00515 	stw	r3,20(sp)
 c00ebec:	d9800715 	stw	r6,28(sp)
 c00ebf0:	da000615 	stw	r8,24(sp)
 c00ebf4:	dd000115 	stw	r20,4(sp)
 c00ebf8:	d8800015 	stw	r2,0(sp)
 c00ebfc:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ec00:	980b883a 	mov	r5,r19
 c00ec04:	8809883a 	mov	r4,r17
 c00ec08:	d8800215 	stw	r2,8(sp)
 c00ec0c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ec10:	9809883a 	mov	r4,r19
 c00ec14:	a80b883a 	mov	r5,r21
 c00ec18:	1029883a 	mov	r20,r2
 c00ec1c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ec20:	b00b883a 	mov	r5,r22
 c00ec24:	a809883a 	mov	r4,r21
 c00ec28:	d8800415 	stw	r2,16(sp)
 c00ec2c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ec30:	d9c00217 	ldw	r7,8(sp)
 c00ec34:	1505883a 	add	r2,r2,r20
 c00ec38:	d8c00517 	ldw	r3,20(sp)
 c00ec3c:	3826d43a 	srli	r19,r7,16
 c00ec40:	d9800717 	ldw	r6,28(sp)
 c00ec44:	da000617 	ldw	r8,24(sp)
 c00ec48:	9885883a 	add	r2,r19,r2
 c00ec4c:	da400417 	ldw	r9,16(sp)
 c00ec50:	1500022e 	bgeu	r2,r20,c00ec5c <__muldf3+0x458>
 c00ec54:	01000074 	movhi	r4,1
 c00ec58:	4913883a 	add	r9,r9,r4
 c00ec5c:	1028d43a 	srli	r20,r2,16
 c00ec60:	1004943a 	slli	r2,r2,16
 c00ec64:	802cd43a 	srli	r22,r16,16
 c00ec68:	843fffcc 	andi	r16,r16,65535
 c00ec6c:	3cffffcc 	andi	r19,r7,65535
 c00ec70:	9009883a 	mov	r4,r18
 c00ec74:	800b883a 	mov	r5,r16
 c00ec78:	a269883a 	add	r20,r20,r9
 c00ec7c:	d8c00515 	stw	r3,20(sp)
 c00ec80:	d9800715 	stw	r6,28(sp)
 c00ec84:	da000615 	stw	r8,24(sp)
 c00ec88:	14e7883a 	add	r19,r2,r19
 c00ec8c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ec90:	9009883a 	mov	r4,r18
 c00ec94:	b00b883a 	mov	r5,r22
 c00ec98:	d8800315 	stw	r2,12(sp)
 c00ec9c:	c002cc00 	call	c002cc0 <__mulsi3>
 c00eca0:	b809883a 	mov	r4,r23
 c00eca4:	b00b883a 	mov	r5,r22
 c00eca8:	d8800215 	stw	r2,8(sp)
 c00ecac:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ecb0:	b80b883a 	mov	r5,r23
 c00ecb4:	8009883a 	mov	r4,r16
 c00ecb8:	d8800415 	stw	r2,16(sp)
 c00ecbc:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ecc0:	da800317 	ldw	r10,12(sp)
 c00ecc4:	d9c00217 	ldw	r7,8(sp)
 c00ecc8:	d9000017 	ldw	r4,0(sp)
 c00eccc:	502ed43a 	srli	r23,r10,16
 c00ecd0:	11c5883a 	add	r2,r2,r7
 c00ecd4:	24e5883a 	add	r18,r4,r19
 c00ecd8:	b885883a 	add	r2,r23,r2
 c00ecdc:	d8c00517 	ldw	r3,20(sp)
 c00ece0:	d9800717 	ldw	r6,28(sp)
 c00ece4:	da000617 	ldw	r8,24(sp)
 c00ece8:	da400417 	ldw	r9,16(sp)
 c00ecec:	11c0022e 	bgeu	r2,r7,c00ecf8 <__muldf3+0x4f4>
 c00ecf0:	01000074 	movhi	r4,1
 c00ecf4:	4913883a 	add	r9,r9,r4
 c00ecf8:	100ed43a 	srli	r7,r2,16
 c00ecfc:	1004943a 	slli	r2,r2,16
 c00ed00:	55ffffcc 	andi	r23,r10,65535
 c00ed04:	3a53883a 	add	r9,r7,r9
 c00ed08:	8809883a 	mov	r4,r17
 c00ed0c:	800b883a 	mov	r5,r16
 c00ed10:	d8c00515 	stw	r3,20(sp)
 c00ed14:	d9800715 	stw	r6,28(sp)
 c00ed18:	da000615 	stw	r8,24(sp)
 c00ed1c:	da400415 	stw	r9,16(sp)
 c00ed20:	15ef883a 	add	r23,r2,r23
 c00ed24:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ed28:	8809883a 	mov	r4,r17
 c00ed2c:	b00b883a 	mov	r5,r22
 c00ed30:	d8800215 	stw	r2,8(sp)
 c00ed34:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ed38:	b00b883a 	mov	r5,r22
 c00ed3c:	a809883a 	mov	r4,r21
 c00ed40:	d8800315 	stw	r2,12(sp)
 c00ed44:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ed48:	8009883a 	mov	r4,r16
 c00ed4c:	a80b883a 	mov	r5,r21
 c00ed50:	1023883a 	mov	r17,r2
 c00ed54:	c002cc00 	call	c002cc0 <__mulsi3>
 c00ed58:	d9c00217 	ldw	r7,8(sp)
 c00ed5c:	da800317 	ldw	r10,12(sp)
 c00ed60:	d8c00517 	ldw	r3,20(sp)
 c00ed64:	3808d43a 	srli	r4,r7,16
 c00ed68:	1285883a 	add	r2,r2,r10
 c00ed6c:	d9800717 	ldw	r6,28(sp)
 c00ed70:	2085883a 	add	r2,r4,r2
 c00ed74:	da000617 	ldw	r8,24(sp)
 c00ed78:	da400417 	ldw	r9,16(sp)
 c00ed7c:	1280022e 	bgeu	r2,r10,c00ed88 <__muldf3+0x584>
 c00ed80:	01000074 	movhi	r4,1
 c00ed84:	8923883a 	add	r17,r17,r4
 c00ed88:	1008943a 	slli	r4,r2,16
 c00ed8c:	39ffffcc 	andi	r7,r7,65535
 c00ed90:	e4b9883a 	add	fp,fp,r18
 c00ed94:	21cf883a 	add	r7,r4,r7
 c00ed98:	e4e7803a 	cmpltu	r19,fp,r19
 c00ed9c:	3d0f883a 	add	r7,r7,r20
 c00eda0:	bf39883a 	add	fp,r23,fp
 c00eda4:	99c9883a 	add	r4,r19,r7
 c00eda8:	e5ef803a 	cmpltu	r23,fp,r23
 c00edac:	490b883a 	add	r5,r9,r4
 c00edb0:	1004d43a 	srli	r2,r2,16
 c00edb4:	b965883a 	add	r18,r23,r5
 c00edb8:	24c9803a 	cmpltu	r4,r4,r19
 c00edbc:	3d29803a 	cmpltu	r20,r7,r20
 c00edc0:	a128b03a 	or	r20,r20,r4
 c00edc4:	95ef803a 	cmpltu	r23,r18,r23
 c00edc8:	2a53803a 	cmpltu	r9,r5,r9
 c00edcc:	a0a9883a 	add	r20,r20,r2
 c00edd0:	4deeb03a 	or	r23,r9,r23
 c00edd4:	a5ef883a 	add	r23,r20,r23
 c00edd8:	bc63883a 	add	r17,r23,r17
 c00eddc:	e004927a 	slli	r2,fp,9
 c00ede0:	d9000117 	ldw	r4,4(sp)
 c00ede4:	882e927a 	slli	r23,r17,9
 c00ede8:	9022d5fa 	srli	r17,r18,23
 c00edec:	e038d5fa 	srli	fp,fp,23
 c00edf0:	1104b03a 	or	r2,r2,r4
 c00edf4:	9024927a 	slli	r18,r18,9
 c00edf8:	1004c03a 	cmpne	r2,r2,zero
 c00edfc:	bc62b03a 	or	r17,r23,r17
 c00ee00:	1738b03a 	or	fp,r2,fp
 c00ee04:	8880402c 	andhi	r2,r17,256
 c00ee08:	e4a4b03a 	or	r18,fp,r18
 c00ee0c:	10000726 	beq	r2,zero,c00ee2c <__muldf3+0x628>
 c00ee10:	9006d07a 	srli	r3,r18,1
 c00ee14:	880497fa 	slli	r2,r17,31
 c00ee18:	9480004c 	andi	r18,r18,1
 c00ee1c:	8822d07a 	srli	r17,r17,1
 c00ee20:	1ca4b03a 	or	r18,r3,r18
 c00ee24:	14a4b03a 	or	r18,r2,r18
 c00ee28:	4007883a 	mov	r3,r8
 c00ee2c:	1880ffc4 	addi	r2,r3,1023
 c00ee30:	0080460e 	bge	zero,r2,c00ef4c <__muldf3+0x748>
 c00ee34:	910001cc 	andi	r4,r18,7
 c00ee38:	20000726 	beq	r4,zero,c00ee58 <__muldf3+0x654>
 c00ee3c:	910003cc 	andi	r4,r18,15
 c00ee40:	01400104 	movi	r5,4
 c00ee44:	21400426 	beq	r4,r5,c00ee58 <__muldf3+0x654>
 c00ee48:	9149883a 	add	r4,r18,r5
 c00ee4c:	24a5803a 	cmpltu	r18,r4,r18
 c00ee50:	8ca3883a 	add	r17,r17,r18
 c00ee54:	2025883a 	mov	r18,r4
 c00ee58:	8900402c 	andhi	r4,r17,256
 c00ee5c:	20000426 	beq	r4,zero,c00ee70 <__muldf3+0x66c>
 c00ee60:	18810004 	addi	r2,r3,1024
 c00ee64:	00ffc034 	movhi	r3,65280
 c00ee68:	18ffffc4 	addi	r3,r3,-1
 c00ee6c:	88e2703a 	and	r17,r17,r3
 c00ee70:	00c1ff84 	movi	r3,2046
 c00ee74:	18bf1316 	blt	r3,r2,c00eac4 <__alt_data_end+0xfc00eac4>
 c00ee78:	882c977a 	slli	r22,r17,29
 c00ee7c:	9024d0fa 	srli	r18,r18,3
 c00ee80:	8822927a 	slli	r17,r17,9
 c00ee84:	1081ffcc 	andi	r2,r2,2047
 c00ee88:	b4acb03a 	or	r22,r22,r18
 c00ee8c:	8820d33a 	srli	r16,r17,12
 c00ee90:	3027883a 	mov	r19,r6
 c00ee94:	003eba06 	br	c00e980 <__alt_data_end+0xfc00e980>
 c00ee98:	8080022c 	andhi	r2,r16,8
 c00ee9c:	10000926 	beq	r2,zero,c00eec4 <__muldf3+0x6c0>
 c00eea0:	8880022c 	andhi	r2,r17,8
 c00eea4:	1000071e 	bne	r2,zero,c00eec4 <__muldf3+0x6c0>
 c00eea8:	00800434 	movhi	r2,16
 c00eeac:	8c000234 	orhi	r16,r17,8
 c00eeb0:	10bfffc4 	addi	r2,r2,-1
 c00eeb4:	e027883a 	mov	r19,fp
 c00eeb8:	80a0703a 	and	r16,r16,r2
 c00eebc:	902d883a 	mov	r22,r18
 c00eec0:	003f1706 	br	c00eb20 <__alt_data_end+0xfc00eb20>
 c00eec4:	00800434 	movhi	r2,16
 c00eec8:	84000234 	orhi	r16,r16,8
 c00eecc:	10bfffc4 	addi	r2,r2,-1
 c00eed0:	80a0703a 	and	r16,r16,r2
 c00eed4:	003f1206 	br	c00eb20 <__alt_data_end+0xfc00eb20>
 c00eed8:	147ff604 	addi	r17,r2,-40
 c00eedc:	3462983a 	sll	r17,r6,r17
 c00eee0:	0025883a 	mov	r18,zero
 c00eee4:	003ef306 	br	c00eab4 <__alt_data_end+0xfc00eab4>
 c00eee8:	3009883a 	mov	r4,r6
 c00eeec:	d9400215 	stw	r5,8(sp)
 c00eef0:	d9800715 	stw	r6,28(sp)
 c00eef4:	da400415 	stw	r9,16(sp)
 c00eef8:	da800315 	stw	r10,12(sp)
 c00eefc:	c00fb700 	call	c00fb70 <__clzsi2>
 c00ef00:	10800804 	addi	r2,r2,32
 c00ef04:	da800317 	ldw	r10,12(sp)
 c00ef08:	da400417 	ldw	r9,16(sp)
 c00ef0c:	d9800717 	ldw	r6,28(sp)
 c00ef10:	d9400217 	ldw	r5,8(sp)
 c00ef14:	003edd06 	br	c00ea8c <__alt_data_end+0xfc00ea8c>
 c00ef18:	143ff604 	addi	r16,r2,-40
 c00ef1c:	ac20983a 	sll	r16,r21,r16
 c00ef20:	002d883a 	mov	r22,zero
 c00ef24:	003ec106 	br	c00ea2c <__alt_data_end+0xfc00ea2c>
 c00ef28:	d9800715 	stw	r6,28(sp)
 c00ef2c:	d9c00215 	stw	r7,8(sp)
 c00ef30:	da400415 	stw	r9,16(sp)
 c00ef34:	c00fb700 	call	c00fb70 <__clzsi2>
 c00ef38:	10800804 	addi	r2,r2,32
 c00ef3c:	da400417 	ldw	r9,16(sp)
 c00ef40:	d9c00217 	ldw	r7,8(sp)
 c00ef44:	d9800717 	ldw	r6,28(sp)
 c00ef48:	003eae06 	br	c00ea04 <__alt_data_end+0xfc00ea04>
 c00ef4c:	00c00044 	movi	r3,1
 c00ef50:	1887c83a 	sub	r3,r3,r2
 c00ef54:	01000e04 	movi	r4,56
 c00ef58:	20fe8516 	blt	r4,r3,c00e970 <__alt_data_end+0xfc00e970>
 c00ef5c:	010007c4 	movi	r4,31
 c00ef60:	20c01b16 	blt	r4,r3,c00efd0 <__muldf3+0x7cc>
 c00ef64:	00800804 	movi	r2,32
 c00ef68:	10c5c83a 	sub	r2,r2,r3
 c00ef6c:	888a983a 	sll	r5,r17,r2
 c00ef70:	90c8d83a 	srl	r4,r18,r3
 c00ef74:	9084983a 	sll	r2,r18,r2
 c00ef78:	88e2d83a 	srl	r17,r17,r3
 c00ef7c:	2906b03a 	or	r3,r5,r4
 c00ef80:	1004c03a 	cmpne	r2,r2,zero
 c00ef84:	1886b03a 	or	r3,r3,r2
 c00ef88:	188001cc 	andi	r2,r3,7
 c00ef8c:	10000726 	beq	r2,zero,c00efac <__muldf3+0x7a8>
 c00ef90:	188003cc 	andi	r2,r3,15
 c00ef94:	01000104 	movi	r4,4
 c00ef98:	11000426 	beq	r2,r4,c00efac <__muldf3+0x7a8>
 c00ef9c:	1805883a 	mov	r2,r3
 c00efa0:	10c00104 	addi	r3,r2,4
 c00efa4:	1885803a 	cmpltu	r2,r3,r2
 c00efa8:	88a3883a 	add	r17,r17,r2
 c00efac:	8880202c 	andhi	r2,r17,128
 c00efb0:	10001c26 	beq	r2,zero,c00f024 <__muldf3+0x820>
 c00efb4:	3027883a 	mov	r19,r6
 c00efb8:	00800044 	movi	r2,1
 c00efbc:	0021883a 	mov	r16,zero
 c00efc0:	002d883a 	mov	r22,zero
 c00efc4:	003e6e06 	br	c00e980 <__alt_data_end+0xfc00e980>
 c00efc8:	4007883a 	mov	r3,r8
 c00efcc:	003f9706 	br	c00ee2c <__alt_data_end+0xfc00ee2c>
 c00efd0:	017ff844 	movi	r5,-31
 c00efd4:	2885c83a 	sub	r2,r5,r2
 c00efd8:	888ad83a 	srl	r5,r17,r2
 c00efdc:	00800804 	movi	r2,32
 c00efe0:	18801a26 	beq	r3,r2,c00f04c <__muldf3+0x848>
 c00efe4:	01001004 	movi	r4,64
 c00efe8:	20c7c83a 	sub	r3,r4,r3
 c00efec:	88e2983a 	sll	r17,r17,r3
 c00eff0:	8ca4b03a 	or	r18,r17,r18
 c00eff4:	9004c03a 	cmpne	r2,r18,zero
 c00eff8:	2884b03a 	or	r2,r5,r2
 c00effc:	144001cc 	andi	r17,r2,7
 c00f000:	88000d1e 	bne	r17,zero,c00f038 <__muldf3+0x834>
 c00f004:	0021883a 	mov	r16,zero
 c00f008:	102cd0fa 	srli	r22,r2,3
 c00f00c:	3027883a 	mov	r19,r6
 c00f010:	0005883a 	mov	r2,zero
 c00f014:	b46cb03a 	or	r22,r22,r17
 c00f018:	003e5906 	br	c00e980 <__alt_data_end+0xfc00e980>
 c00f01c:	1007883a 	mov	r3,r2
 c00f020:	0023883a 	mov	r17,zero
 c00f024:	8820927a 	slli	r16,r17,9
 c00f028:	1805883a 	mov	r2,r3
 c00f02c:	8822977a 	slli	r17,r17,29
 c00f030:	8020d33a 	srli	r16,r16,12
 c00f034:	003ff406 	br	c00f008 <__alt_data_end+0xfc00f008>
 c00f038:	10c003cc 	andi	r3,r2,15
 c00f03c:	01000104 	movi	r4,4
 c00f040:	193ff626 	beq	r3,r4,c00f01c <__alt_data_end+0xfc00f01c>
 c00f044:	0023883a 	mov	r17,zero
 c00f048:	003fd506 	br	c00efa0 <__alt_data_end+0xfc00efa0>
 c00f04c:	0023883a 	mov	r17,zero
 c00f050:	003fe706 	br	c00eff0 <__alt_data_end+0xfc00eff0>
 c00f054:	00800434 	movhi	r2,16
 c00f058:	8c000234 	orhi	r16,r17,8
 c00f05c:	10bfffc4 	addi	r2,r2,-1
 c00f060:	3027883a 	mov	r19,r6
 c00f064:	80a0703a 	and	r16,r16,r2
 c00f068:	902d883a 	mov	r22,r18
 c00f06c:	003eac06 	br	c00eb20 <__alt_data_end+0xfc00eb20>

0c00f070 <__subdf3>:
 c00f070:	02000434 	movhi	r8,16
 c00f074:	423fffc4 	addi	r8,r8,-1
 c00f078:	defffb04 	addi	sp,sp,-20
 c00f07c:	2a14703a 	and	r10,r5,r8
 c00f080:	3812d53a 	srli	r9,r7,20
 c00f084:	3a10703a 	and	r8,r7,r8
 c00f088:	2006d77a 	srli	r3,r4,29
 c00f08c:	3004d77a 	srli	r2,r6,29
 c00f090:	dc000015 	stw	r16,0(sp)
 c00f094:	501490fa 	slli	r10,r10,3
 c00f098:	2820d53a 	srli	r16,r5,20
 c00f09c:	401090fa 	slli	r8,r8,3
 c00f0a0:	dc800215 	stw	r18,8(sp)
 c00f0a4:	dc400115 	stw	r17,4(sp)
 c00f0a8:	dfc00415 	stw	ra,16(sp)
 c00f0ac:	202290fa 	slli	r17,r4,3
 c00f0b0:	dcc00315 	stw	r19,12(sp)
 c00f0b4:	4a41ffcc 	andi	r9,r9,2047
 c00f0b8:	0101ffc4 	movi	r4,2047
 c00f0bc:	2824d7fa 	srli	r18,r5,31
 c00f0c0:	8401ffcc 	andi	r16,r16,2047
 c00f0c4:	50c6b03a 	or	r3,r10,r3
 c00f0c8:	380ed7fa 	srli	r7,r7,31
 c00f0cc:	408ab03a 	or	r5,r8,r2
 c00f0d0:	300c90fa 	slli	r6,r6,3
 c00f0d4:	49009626 	beq	r9,r4,c00f330 <__subdf3+0x2c0>
 c00f0d8:	39c0005c 	xori	r7,r7,1
 c00f0dc:	8245c83a 	sub	r2,r16,r9
 c00f0e0:	3c807426 	beq	r7,r18,c00f2b4 <__subdf3+0x244>
 c00f0e4:	0080af0e 	bge	zero,r2,c00f3a4 <__subdf3+0x334>
 c00f0e8:	48002a1e 	bne	r9,zero,c00f194 <__subdf3+0x124>
 c00f0ec:	2988b03a 	or	r4,r5,r6
 c00f0f0:	20009a1e 	bne	r4,zero,c00f35c <__subdf3+0x2ec>
 c00f0f4:	888001cc 	andi	r2,r17,7
 c00f0f8:	10000726 	beq	r2,zero,c00f118 <__subdf3+0xa8>
 c00f0fc:	888003cc 	andi	r2,r17,15
 c00f100:	01000104 	movi	r4,4
 c00f104:	11000426 	beq	r2,r4,c00f118 <__subdf3+0xa8>
 c00f108:	890b883a 	add	r5,r17,r4
 c00f10c:	2c63803a 	cmpltu	r17,r5,r17
 c00f110:	1c47883a 	add	r3,r3,r17
 c00f114:	2823883a 	mov	r17,r5
 c00f118:	1880202c 	andhi	r2,r3,128
 c00f11c:	10005926 	beq	r2,zero,c00f284 <__subdf3+0x214>
 c00f120:	84000044 	addi	r16,r16,1
 c00f124:	0081ffc4 	movi	r2,2047
 c00f128:	8080be26 	beq	r16,r2,c00f424 <__subdf3+0x3b4>
 c00f12c:	017fe034 	movhi	r5,65408
 c00f130:	297fffc4 	addi	r5,r5,-1
 c00f134:	1946703a 	and	r3,r3,r5
 c00f138:	1804977a 	slli	r2,r3,29
 c00f13c:	1806927a 	slli	r3,r3,9
 c00f140:	8822d0fa 	srli	r17,r17,3
 c00f144:	8401ffcc 	andi	r16,r16,2047
 c00f148:	180ad33a 	srli	r5,r3,12
 c00f14c:	9100004c 	andi	r4,r18,1
 c00f150:	1444b03a 	or	r2,r2,r17
 c00f154:	80c1ffcc 	andi	r3,r16,2047
 c00f158:	1820953a 	slli	r16,r3,20
 c00f15c:	20c03fcc 	andi	r3,r4,255
 c00f160:	180897fa 	slli	r4,r3,31
 c00f164:	00c00434 	movhi	r3,16
 c00f168:	18ffffc4 	addi	r3,r3,-1
 c00f16c:	28c6703a 	and	r3,r5,r3
 c00f170:	1c06b03a 	or	r3,r3,r16
 c00f174:	1906b03a 	or	r3,r3,r4
 c00f178:	dfc00417 	ldw	ra,16(sp)
 c00f17c:	dcc00317 	ldw	r19,12(sp)
 c00f180:	dc800217 	ldw	r18,8(sp)
 c00f184:	dc400117 	ldw	r17,4(sp)
 c00f188:	dc000017 	ldw	r16,0(sp)
 c00f18c:	dec00504 	addi	sp,sp,20
 c00f190:	f800283a 	ret
 c00f194:	0101ffc4 	movi	r4,2047
 c00f198:	813fd626 	beq	r16,r4,c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f19c:	29402034 	orhi	r5,r5,128
 c00f1a0:	01000e04 	movi	r4,56
 c00f1a4:	2080a316 	blt	r4,r2,c00f434 <__subdf3+0x3c4>
 c00f1a8:	010007c4 	movi	r4,31
 c00f1ac:	2080c616 	blt	r4,r2,c00f4c8 <__subdf3+0x458>
 c00f1b0:	01000804 	movi	r4,32
 c00f1b4:	2089c83a 	sub	r4,r4,r2
 c00f1b8:	2910983a 	sll	r8,r5,r4
 c00f1bc:	308ed83a 	srl	r7,r6,r2
 c00f1c0:	3108983a 	sll	r4,r6,r4
 c00f1c4:	2884d83a 	srl	r2,r5,r2
 c00f1c8:	41ccb03a 	or	r6,r8,r7
 c00f1cc:	2008c03a 	cmpne	r4,r4,zero
 c00f1d0:	310cb03a 	or	r6,r6,r4
 c00f1d4:	898dc83a 	sub	r6,r17,r6
 c00f1d8:	89a3803a 	cmpltu	r17,r17,r6
 c00f1dc:	1887c83a 	sub	r3,r3,r2
 c00f1e0:	1c47c83a 	sub	r3,r3,r17
 c00f1e4:	3023883a 	mov	r17,r6
 c00f1e8:	1880202c 	andhi	r2,r3,128
 c00f1ec:	10002326 	beq	r2,zero,c00f27c <__subdf3+0x20c>
 c00f1f0:	04c02034 	movhi	r19,128
 c00f1f4:	9cffffc4 	addi	r19,r19,-1
 c00f1f8:	1ce6703a 	and	r19,r3,r19
 c00f1fc:	98007a26 	beq	r19,zero,c00f3e8 <__subdf3+0x378>
 c00f200:	9809883a 	mov	r4,r19
 c00f204:	c00fb700 	call	c00fb70 <__clzsi2>
 c00f208:	113ffe04 	addi	r4,r2,-8
 c00f20c:	00c007c4 	movi	r3,31
 c00f210:	19007b16 	blt	r3,r4,c00f400 <__subdf3+0x390>
 c00f214:	00800804 	movi	r2,32
 c00f218:	1105c83a 	sub	r2,r2,r4
 c00f21c:	8884d83a 	srl	r2,r17,r2
 c00f220:	9906983a 	sll	r3,r19,r4
 c00f224:	8922983a 	sll	r17,r17,r4
 c00f228:	10c4b03a 	or	r2,r2,r3
 c00f22c:	24007816 	blt	r4,r16,c00f410 <__subdf3+0x3a0>
 c00f230:	2421c83a 	sub	r16,r4,r16
 c00f234:	80c00044 	addi	r3,r16,1
 c00f238:	010007c4 	movi	r4,31
 c00f23c:	20c09516 	blt	r4,r3,c00f494 <__subdf3+0x424>
 c00f240:	01400804 	movi	r5,32
 c00f244:	28cbc83a 	sub	r5,r5,r3
 c00f248:	88c8d83a 	srl	r4,r17,r3
 c00f24c:	8962983a 	sll	r17,r17,r5
 c00f250:	114a983a 	sll	r5,r2,r5
 c00f254:	10c6d83a 	srl	r3,r2,r3
 c00f258:	8804c03a 	cmpne	r2,r17,zero
 c00f25c:	290ab03a 	or	r5,r5,r4
 c00f260:	28a2b03a 	or	r17,r5,r2
 c00f264:	0021883a 	mov	r16,zero
 c00f268:	003fa206 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f26c:	2090b03a 	or	r8,r4,r2
 c00f270:	40018e26 	beq	r8,zero,c00f8ac <__subdf3+0x83c>
 c00f274:	1007883a 	mov	r3,r2
 c00f278:	2023883a 	mov	r17,r4
 c00f27c:	888001cc 	andi	r2,r17,7
 c00f280:	103f9e1e 	bne	r2,zero,c00f0fc <__alt_data_end+0xfc00f0fc>
 c00f284:	1804977a 	slli	r2,r3,29
 c00f288:	8822d0fa 	srli	r17,r17,3
 c00f28c:	1810d0fa 	srli	r8,r3,3
 c00f290:	9100004c 	andi	r4,r18,1
 c00f294:	1444b03a 	or	r2,r2,r17
 c00f298:	00c1ffc4 	movi	r3,2047
 c00f29c:	80c02826 	beq	r16,r3,c00f340 <__subdf3+0x2d0>
 c00f2a0:	01400434 	movhi	r5,16
 c00f2a4:	297fffc4 	addi	r5,r5,-1
 c00f2a8:	80e0703a 	and	r16,r16,r3
 c00f2ac:	414a703a 	and	r5,r8,r5
 c00f2b0:	003fa806 	br	c00f154 <__alt_data_end+0xfc00f154>
 c00f2b4:	0080630e 	bge	zero,r2,c00f444 <__subdf3+0x3d4>
 c00f2b8:	48003026 	beq	r9,zero,c00f37c <__subdf3+0x30c>
 c00f2bc:	0101ffc4 	movi	r4,2047
 c00f2c0:	813f8c26 	beq	r16,r4,c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f2c4:	29402034 	orhi	r5,r5,128
 c00f2c8:	01000e04 	movi	r4,56
 c00f2cc:	2080a90e 	bge	r4,r2,c00f574 <__subdf3+0x504>
 c00f2d0:	298cb03a 	or	r6,r5,r6
 c00f2d4:	3012c03a 	cmpne	r9,r6,zero
 c00f2d8:	0005883a 	mov	r2,zero
 c00f2dc:	4c53883a 	add	r9,r9,r17
 c00f2e0:	4c63803a 	cmpltu	r17,r9,r17
 c00f2e4:	10c7883a 	add	r3,r2,r3
 c00f2e8:	88c7883a 	add	r3,r17,r3
 c00f2ec:	4823883a 	mov	r17,r9
 c00f2f0:	1880202c 	andhi	r2,r3,128
 c00f2f4:	1000d026 	beq	r2,zero,c00f638 <__subdf3+0x5c8>
 c00f2f8:	84000044 	addi	r16,r16,1
 c00f2fc:	0081ffc4 	movi	r2,2047
 c00f300:	8080fe26 	beq	r16,r2,c00f6fc <__subdf3+0x68c>
 c00f304:	00bfe034 	movhi	r2,65408
 c00f308:	10bfffc4 	addi	r2,r2,-1
 c00f30c:	1886703a 	and	r3,r3,r2
 c00f310:	880ad07a 	srli	r5,r17,1
 c00f314:	180497fa 	slli	r2,r3,31
 c00f318:	8900004c 	andi	r4,r17,1
 c00f31c:	2922b03a 	or	r17,r5,r4
 c00f320:	1806d07a 	srli	r3,r3,1
 c00f324:	1462b03a 	or	r17,r2,r17
 c00f328:	3825883a 	mov	r18,r7
 c00f32c:	003f7106 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f330:	2984b03a 	or	r2,r5,r6
 c00f334:	103f6826 	beq	r2,zero,c00f0d8 <__alt_data_end+0xfc00f0d8>
 c00f338:	39c03fcc 	andi	r7,r7,255
 c00f33c:	003f6706 	br	c00f0dc <__alt_data_end+0xfc00f0dc>
 c00f340:	4086b03a 	or	r3,r8,r2
 c00f344:	18015226 	beq	r3,zero,c00f890 <__subdf3+0x820>
 c00f348:	00c00434 	movhi	r3,16
 c00f34c:	41400234 	orhi	r5,r8,8
 c00f350:	18ffffc4 	addi	r3,r3,-1
 c00f354:	28ca703a 	and	r5,r5,r3
 c00f358:	003f7e06 	br	c00f154 <__alt_data_end+0xfc00f154>
 c00f35c:	10bfffc4 	addi	r2,r2,-1
 c00f360:	1000491e 	bne	r2,zero,c00f488 <__subdf3+0x418>
 c00f364:	898fc83a 	sub	r7,r17,r6
 c00f368:	89e3803a 	cmpltu	r17,r17,r7
 c00f36c:	1947c83a 	sub	r3,r3,r5
 c00f370:	1c47c83a 	sub	r3,r3,r17
 c00f374:	3823883a 	mov	r17,r7
 c00f378:	003f9b06 	br	c00f1e8 <__alt_data_end+0xfc00f1e8>
 c00f37c:	2988b03a 	or	r4,r5,r6
 c00f380:	203f5c26 	beq	r4,zero,c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f384:	10bfffc4 	addi	r2,r2,-1
 c00f388:	1000931e 	bne	r2,zero,c00f5d8 <__subdf3+0x568>
 c00f38c:	898d883a 	add	r6,r17,r6
 c00f390:	3463803a 	cmpltu	r17,r6,r17
 c00f394:	1947883a 	add	r3,r3,r5
 c00f398:	88c7883a 	add	r3,r17,r3
 c00f39c:	3023883a 	mov	r17,r6
 c00f3a0:	003fd306 	br	c00f2f0 <__alt_data_end+0xfc00f2f0>
 c00f3a4:	1000541e 	bne	r2,zero,c00f4f8 <__subdf3+0x488>
 c00f3a8:	80800044 	addi	r2,r16,1
 c00f3ac:	1081ffcc 	andi	r2,r2,2047
 c00f3b0:	01000044 	movi	r4,1
 c00f3b4:	2080a20e 	bge	r4,r2,c00f640 <__subdf3+0x5d0>
 c00f3b8:	8989c83a 	sub	r4,r17,r6
 c00f3bc:	8905803a 	cmpltu	r2,r17,r4
 c00f3c0:	1967c83a 	sub	r19,r3,r5
 c00f3c4:	98a7c83a 	sub	r19,r19,r2
 c00f3c8:	9880202c 	andhi	r2,r19,128
 c00f3cc:	10006326 	beq	r2,zero,c00f55c <__subdf3+0x4ec>
 c00f3d0:	3463c83a 	sub	r17,r6,r17
 c00f3d4:	28c7c83a 	sub	r3,r5,r3
 c00f3d8:	344d803a 	cmpltu	r6,r6,r17
 c00f3dc:	19a7c83a 	sub	r19,r3,r6
 c00f3e0:	3825883a 	mov	r18,r7
 c00f3e4:	983f861e 	bne	r19,zero,c00f200 <__alt_data_end+0xfc00f200>
 c00f3e8:	8809883a 	mov	r4,r17
 c00f3ec:	c00fb700 	call	c00fb70 <__clzsi2>
 c00f3f0:	10800804 	addi	r2,r2,32
 c00f3f4:	113ffe04 	addi	r4,r2,-8
 c00f3f8:	00c007c4 	movi	r3,31
 c00f3fc:	193f850e 	bge	r3,r4,c00f214 <__alt_data_end+0xfc00f214>
 c00f400:	10bff604 	addi	r2,r2,-40
 c00f404:	8884983a 	sll	r2,r17,r2
 c00f408:	0023883a 	mov	r17,zero
 c00f40c:	243f880e 	bge	r4,r16,c00f230 <__alt_data_end+0xfc00f230>
 c00f410:	00ffe034 	movhi	r3,65408
 c00f414:	18ffffc4 	addi	r3,r3,-1
 c00f418:	8121c83a 	sub	r16,r16,r4
 c00f41c:	10c6703a 	and	r3,r2,r3
 c00f420:	003f3406 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f424:	9100004c 	andi	r4,r18,1
 c00f428:	000b883a 	mov	r5,zero
 c00f42c:	0005883a 	mov	r2,zero
 c00f430:	003f4806 	br	c00f154 <__alt_data_end+0xfc00f154>
 c00f434:	298cb03a 	or	r6,r5,r6
 c00f438:	300cc03a 	cmpne	r6,r6,zero
 c00f43c:	0005883a 	mov	r2,zero
 c00f440:	003f6406 	br	c00f1d4 <__alt_data_end+0xfc00f1d4>
 c00f444:	10009a1e 	bne	r2,zero,c00f6b0 <__subdf3+0x640>
 c00f448:	82400044 	addi	r9,r16,1
 c00f44c:	4881ffcc 	andi	r2,r9,2047
 c00f450:	02800044 	movi	r10,1
 c00f454:	5080670e 	bge	r10,r2,c00f5f4 <__subdf3+0x584>
 c00f458:	0081ffc4 	movi	r2,2047
 c00f45c:	4880af26 	beq	r9,r2,c00f71c <__subdf3+0x6ac>
 c00f460:	898d883a 	add	r6,r17,r6
 c00f464:	1945883a 	add	r2,r3,r5
 c00f468:	3447803a 	cmpltu	r3,r6,r17
 c00f46c:	1887883a 	add	r3,r3,r2
 c00f470:	182297fa 	slli	r17,r3,31
 c00f474:	300cd07a 	srli	r6,r6,1
 c00f478:	1806d07a 	srli	r3,r3,1
 c00f47c:	4821883a 	mov	r16,r9
 c00f480:	89a2b03a 	or	r17,r17,r6
 c00f484:	003f1b06 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f488:	0101ffc4 	movi	r4,2047
 c00f48c:	813f441e 	bne	r16,r4,c00f1a0 <__alt_data_end+0xfc00f1a0>
 c00f490:	003f1806 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f494:	843ff844 	addi	r16,r16,-31
 c00f498:	01400804 	movi	r5,32
 c00f49c:	1408d83a 	srl	r4,r2,r16
 c00f4a0:	19405026 	beq	r3,r5,c00f5e4 <__subdf3+0x574>
 c00f4a4:	01401004 	movi	r5,64
 c00f4a8:	28c7c83a 	sub	r3,r5,r3
 c00f4ac:	10c4983a 	sll	r2,r2,r3
 c00f4b0:	88a2b03a 	or	r17,r17,r2
 c00f4b4:	8822c03a 	cmpne	r17,r17,zero
 c00f4b8:	2462b03a 	or	r17,r4,r17
 c00f4bc:	0007883a 	mov	r3,zero
 c00f4c0:	0021883a 	mov	r16,zero
 c00f4c4:	003f6d06 	br	c00f27c <__alt_data_end+0xfc00f27c>
 c00f4c8:	11fff804 	addi	r7,r2,-32
 c00f4cc:	01000804 	movi	r4,32
 c00f4d0:	29ced83a 	srl	r7,r5,r7
 c00f4d4:	11004526 	beq	r2,r4,c00f5ec <__subdf3+0x57c>
 c00f4d8:	01001004 	movi	r4,64
 c00f4dc:	2089c83a 	sub	r4,r4,r2
 c00f4e0:	2904983a 	sll	r2,r5,r4
 c00f4e4:	118cb03a 	or	r6,r2,r6
 c00f4e8:	300cc03a 	cmpne	r6,r6,zero
 c00f4ec:	398cb03a 	or	r6,r7,r6
 c00f4f0:	0005883a 	mov	r2,zero
 c00f4f4:	003f3706 	br	c00f1d4 <__alt_data_end+0xfc00f1d4>
 c00f4f8:	80002a26 	beq	r16,zero,c00f5a4 <__subdf3+0x534>
 c00f4fc:	0101ffc4 	movi	r4,2047
 c00f500:	49006626 	beq	r9,r4,c00f69c <__subdf3+0x62c>
 c00f504:	0085c83a 	sub	r2,zero,r2
 c00f508:	18c02034 	orhi	r3,r3,128
 c00f50c:	01000e04 	movi	r4,56
 c00f510:	20807e16 	blt	r4,r2,c00f70c <__subdf3+0x69c>
 c00f514:	010007c4 	movi	r4,31
 c00f518:	2080e716 	blt	r4,r2,c00f8b8 <__subdf3+0x848>
 c00f51c:	01000804 	movi	r4,32
 c00f520:	2089c83a 	sub	r4,r4,r2
 c00f524:	1914983a 	sll	r10,r3,r4
 c00f528:	8890d83a 	srl	r8,r17,r2
 c00f52c:	8908983a 	sll	r4,r17,r4
 c00f530:	1884d83a 	srl	r2,r3,r2
 c00f534:	5222b03a 	or	r17,r10,r8
 c00f538:	2006c03a 	cmpne	r3,r4,zero
 c00f53c:	88e2b03a 	or	r17,r17,r3
 c00f540:	3463c83a 	sub	r17,r6,r17
 c00f544:	2885c83a 	sub	r2,r5,r2
 c00f548:	344d803a 	cmpltu	r6,r6,r17
 c00f54c:	1187c83a 	sub	r3,r2,r6
 c00f550:	4821883a 	mov	r16,r9
 c00f554:	3825883a 	mov	r18,r7
 c00f558:	003f2306 	br	c00f1e8 <__alt_data_end+0xfc00f1e8>
 c00f55c:	24d0b03a 	or	r8,r4,r19
 c00f560:	40001b1e 	bne	r8,zero,c00f5d0 <__subdf3+0x560>
 c00f564:	0005883a 	mov	r2,zero
 c00f568:	0009883a 	mov	r4,zero
 c00f56c:	0021883a 	mov	r16,zero
 c00f570:	003f4906 	br	c00f298 <__alt_data_end+0xfc00f298>
 c00f574:	010007c4 	movi	r4,31
 c00f578:	20803a16 	blt	r4,r2,c00f664 <__subdf3+0x5f4>
 c00f57c:	01000804 	movi	r4,32
 c00f580:	2089c83a 	sub	r4,r4,r2
 c00f584:	2912983a 	sll	r9,r5,r4
 c00f588:	3090d83a 	srl	r8,r6,r2
 c00f58c:	3108983a 	sll	r4,r6,r4
 c00f590:	2884d83a 	srl	r2,r5,r2
 c00f594:	4a12b03a 	or	r9,r9,r8
 c00f598:	2008c03a 	cmpne	r4,r4,zero
 c00f59c:	4912b03a 	or	r9,r9,r4
 c00f5a0:	003f4e06 	br	c00f2dc <__alt_data_end+0xfc00f2dc>
 c00f5a4:	1c48b03a 	or	r4,r3,r17
 c00f5a8:	20003c26 	beq	r4,zero,c00f69c <__subdf3+0x62c>
 c00f5ac:	0084303a 	nor	r2,zero,r2
 c00f5b0:	1000381e 	bne	r2,zero,c00f694 <__subdf3+0x624>
 c00f5b4:	3463c83a 	sub	r17,r6,r17
 c00f5b8:	28c5c83a 	sub	r2,r5,r3
 c00f5bc:	344d803a 	cmpltu	r6,r6,r17
 c00f5c0:	1187c83a 	sub	r3,r2,r6
 c00f5c4:	4821883a 	mov	r16,r9
 c00f5c8:	3825883a 	mov	r18,r7
 c00f5cc:	003f0606 	br	c00f1e8 <__alt_data_end+0xfc00f1e8>
 c00f5d0:	2023883a 	mov	r17,r4
 c00f5d4:	003f0906 	br	c00f1fc <__alt_data_end+0xfc00f1fc>
 c00f5d8:	0101ffc4 	movi	r4,2047
 c00f5dc:	813f3a1e 	bne	r16,r4,c00f2c8 <__alt_data_end+0xfc00f2c8>
 c00f5e0:	003ec406 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f5e4:	0005883a 	mov	r2,zero
 c00f5e8:	003fb106 	br	c00f4b0 <__alt_data_end+0xfc00f4b0>
 c00f5ec:	0005883a 	mov	r2,zero
 c00f5f0:	003fbc06 	br	c00f4e4 <__alt_data_end+0xfc00f4e4>
 c00f5f4:	1c44b03a 	or	r2,r3,r17
 c00f5f8:	80008e1e 	bne	r16,zero,c00f834 <__subdf3+0x7c4>
 c00f5fc:	1000c826 	beq	r2,zero,c00f920 <__subdf3+0x8b0>
 c00f600:	2984b03a 	or	r2,r5,r6
 c00f604:	103ebb26 	beq	r2,zero,c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f608:	8989883a 	add	r4,r17,r6
 c00f60c:	1945883a 	add	r2,r3,r5
 c00f610:	2447803a 	cmpltu	r3,r4,r17
 c00f614:	1887883a 	add	r3,r3,r2
 c00f618:	1880202c 	andhi	r2,r3,128
 c00f61c:	2023883a 	mov	r17,r4
 c00f620:	103f1626 	beq	r2,zero,c00f27c <__alt_data_end+0xfc00f27c>
 c00f624:	00bfe034 	movhi	r2,65408
 c00f628:	10bfffc4 	addi	r2,r2,-1
 c00f62c:	5021883a 	mov	r16,r10
 c00f630:	1886703a 	and	r3,r3,r2
 c00f634:	003eaf06 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f638:	3825883a 	mov	r18,r7
 c00f63c:	003f0f06 	br	c00f27c <__alt_data_end+0xfc00f27c>
 c00f640:	1c44b03a 	or	r2,r3,r17
 c00f644:	8000251e 	bne	r16,zero,c00f6dc <__subdf3+0x66c>
 c00f648:	1000661e 	bne	r2,zero,c00f7e4 <__subdf3+0x774>
 c00f64c:	2990b03a 	or	r8,r5,r6
 c00f650:	40009626 	beq	r8,zero,c00f8ac <__subdf3+0x83c>
 c00f654:	2807883a 	mov	r3,r5
 c00f658:	3023883a 	mov	r17,r6
 c00f65c:	3825883a 	mov	r18,r7
 c00f660:	003ea406 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f664:	127ff804 	addi	r9,r2,-32
 c00f668:	01000804 	movi	r4,32
 c00f66c:	2a52d83a 	srl	r9,r5,r9
 c00f670:	11008c26 	beq	r2,r4,c00f8a4 <__subdf3+0x834>
 c00f674:	01001004 	movi	r4,64
 c00f678:	2085c83a 	sub	r2,r4,r2
 c00f67c:	2884983a 	sll	r2,r5,r2
 c00f680:	118cb03a 	or	r6,r2,r6
 c00f684:	300cc03a 	cmpne	r6,r6,zero
 c00f688:	4992b03a 	or	r9,r9,r6
 c00f68c:	0005883a 	mov	r2,zero
 c00f690:	003f1206 	br	c00f2dc <__alt_data_end+0xfc00f2dc>
 c00f694:	0101ffc4 	movi	r4,2047
 c00f698:	493f9c1e 	bne	r9,r4,c00f50c <__alt_data_end+0xfc00f50c>
 c00f69c:	2807883a 	mov	r3,r5
 c00f6a0:	3023883a 	mov	r17,r6
 c00f6a4:	4821883a 	mov	r16,r9
 c00f6a8:	3825883a 	mov	r18,r7
 c00f6ac:	003e9106 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f6b0:	80001f1e 	bne	r16,zero,c00f730 <__subdf3+0x6c0>
 c00f6b4:	1c48b03a 	or	r4,r3,r17
 c00f6b8:	20005a26 	beq	r4,zero,c00f824 <__subdf3+0x7b4>
 c00f6bc:	0084303a 	nor	r2,zero,r2
 c00f6c0:	1000561e 	bne	r2,zero,c00f81c <__subdf3+0x7ac>
 c00f6c4:	89a3883a 	add	r17,r17,r6
 c00f6c8:	1945883a 	add	r2,r3,r5
 c00f6cc:	898d803a 	cmpltu	r6,r17,r6
 c00f6d0:	3087883a 	add	r3,r6,r2
 c00f6d4:	4821883a 	mov	r16,r9
 c00f6d8:	003f0506 	br	c00f2f0 <__alt_data_end+0xfc00f2f0>
 c00f6dc:	10002b1e 	bne	r2,zero,c00f78c <__subdf3+0x71c>
 c00f6e0:	2984b03a 	or	r2,r5,r6
 c00f6e4:	10008026 	beq	r2,zero,c00f8e8 <__subdf3+0x878>
 c00f6e8:	2807883a 	mov	r3,r5
 c00f6ec:	3023883a 	mov	r17,r6
 c00f6f0:	3825883a 	mov	r18,r7
 c00f6f4:	0401ffc4 	movi	r16,2047
 c00f6f8:	003e7e06 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f6fc:	3809883a 	mov	r4,r7
 c00f700:	0011883a 	mov	r8,zero
 c00f704:	0005883a 	mov	r2,zero
 c00f708:	003ee306 	br	c00f298 <__alt_data_end+0xfc00f298>
 c00f70c:	1c62b03a 	or	r17,r3,r17
 c00f710:	8822c03a 	cmpne	r17,r17,zero
 c00f714:	0005883a 	mov	r2,zero
 c00f718:	003f8906 	br	c00f540 <__alt_data_end+0xfc00f540>
 c00f71c:	3809883a 	mov	r4,r7
 c00f720:	4821883a 	mov	r16,r9
 c00f724:	0011883a 	mov	r8,zero
 c00f728:	0005883a 	mov	r2,zero
 c00f72c:	003eda06 	br	c00f298 <__alt_data_end+0xfc00f298>
 c00f730:	0101ffc4 	movi	r4,2047
 c00f734:	49003b26 	beq	r9,r4,c00f824 <__subdf3+0x7b4>
 c00f738:	0085c83a 	sub	r2,zero,r2
 c00f73c:	18c02034 	orhi	r3,r3,128
 c00f740:	01000e04 	movi	r4,56
 c00f744:	20806e16 	blt	r4,r2,c00f900 <__subdf3+0x890>
 c00f748:	010007c4 	movi	r4,31
 c00f74c:	20807716 	blt	r4,r2,c00f92c <__subdf3+0x8bc>
 c00f750:	01000804 	movi	r4,32
 c00f754:	2089c83a 	sub	r4,r4,r2
 c00f758:	1914983a 	sll	r10,r3,r4
 c00f75c:	8890d83a 	srl	r8,r17,r2
 c00f760:	8908983a 	sll	r4,r17,r4
 c00f764:	1884d83a 	srl	r2,r3,r2
 c00f768:	5222b03a 	or	r17,r10,r8
 c00f76c:	2006c03a 	cmpne	r3,r4,zero
 c00f770:	88e2b03a 	or	r17,r17,r3
 c00f774:	89a3883a 	add	r17,r17,r6
 c00f778:	1145883a 	add	r2,r2,r5
 c00f77c:	898d803a 	cmpltu	r6,r17,r6
 c00f780:	3087883a 	add	r3,r6,r2
 c00f784:	4821883a 	mov	r16,r9
 c00f788:	003ed906 	br	c00f2f0 <__alt_data_end+0xfc00f2f0>
 c00f78c:	2984b03a 	or	r2,r5,r6
 c00f790:	10004226 	beq	r2,zero,c00f89c <__subdf3+0x82c>
 c00f794:	1808d0fa 	srli	r4,r3,3
 c00f798:	8822d0fa 	srli	r17,r17,3
 c00f79c:	1806977a 	slli	r3,r3,29
 c00f7a0:	2080022c 	andhi	r2,r4,8
 c00f7a4:	1c62b03a 	or	r17,r3,r17
 c00f7a8:	10000826 	beq	r2,zero,c00f7cc <__subdf3+0x75c>
 c00f7ac:	2812d0fa 	srli	r9,r5,3
 c00f7b0:	4880022c 	andhi	r2,r9,8
 c00f7b4:	1000051e 	bne	r2,zero,c00f7cc <__subdf3+0x75c>
 c00f7b8:	300cd0fa 	srli	r6,r6,3
 c00f7bc:	2804977a 	slli	r2,r5,29
 c00f7c0:	4809883a 	mov	r4,r9
 c00f7c4:	3825883a 	mov	r18,r7
 c00f7c8:	11a2b03a 	or	r17,r2,r6
 c00f7cc:	8806d77a 	srli	r3,r17,29
 c00f7d0:	200890fa 	slli	r4,r4,3
 c00f7d4:	882290fa 	slli	r17,r17,3
 c00f7d8:	0401ffc4 	movi	r16,2047
 c00f7dc:	1906b03a 	or	r3,r3,r4
 c00f7e0:	003e4406 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f7e4:	2984b03a 	or	r2,r5,r6
 c00f7e8:	103e4226 	beq	r2,zero,c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f7ec:	8989c83a 	sub	r4,r17,r6
 c00f7f0:	8911803a 	cmpltu	r8,r17,r4
 c00f7f4:	1945c83a 	sub	r2,r3,r5
 c00f7f8:	1205c83a 	sub	r2,r2,r8
 c00f7fc:	1200202c 	andhi	r8,r2,128
 c00f800:	403e9a26 	beq	r8,zero,c00f26c <__alt_data_end+0xfc00f26c>
 c00f804:	3463c83a 	sub	r17,r6,r17
 c00f808:	28c5c83a 	sub	r2,r5,r3
 c00f80c:	344d803a 	cmpltu	r6,r6,r17
 c00f810:	1187c83a 	sub	r3,r2,r6
 c00f814:	3825883a 	mov	r18,r7
 c00f818:	003e3606 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f81c:	0101ffc4 	movi	r4,2047
 c00f820:	493fc71e 	bne	r9,r4,c00f740 <__alt_data_end+0xfc00f740>
 c00f824:	2807883a 	mov	r3,r5
 c00f828:	3023883a 	mov	r17,r6
 c00f82c:	4821883a 	mov	r16,r9
 c00f830:	003e3006 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f834:	10003626 	beq	r2,zero,c00f910 <__subdf3+0x8a0>
 c00f838:	2984b03a 	or	r2,r5,r6
 c00f83c:	10001726 	beq	r2,zero,c00f89c <__subdf3+0x82c>
 c00f840:	1808d0fa 	srli	r4,r3,3
 c00f844:	8822d0fa 	srli	r17,r17,3
 c00f848:	1806977a 	slli	r3,r3,29
 c00f84c:	2080022c 	andhi	r2,r4,8
 c00f850:	1c62b03a 	or	r17,r3,r17
 c00f854:	10000726 	beq	r2,zero,c00f874 <__subdf3+0x804>
 c00f858:	2812d0fa 	srli	r9,r5,3
 c00f85c:	4880022c 	andhi	r2,r9,8
 c00f860:	1000041e 	bne	r2,zero,c00f874 <__subdf3+0x804>
 c00f864:	300cd0fa 	srli	r6,r6,3
 c00f868:	2804977a 	slli	r2,r5,29
 c00f86c:	4809883a 	mov	r4,r9
 c00f870:	11a2b03a 	or	r17,r2,r6
 c00f874:	8806d77a 	srli	r3,r17,29
 c00f878:	200890fa 	slli	r4,r4,3
 c00f87c:	882290fa 	slli	r17,r17,3
 c00f880:	3825883a 	mov	r18,r7
 c00f884:	1906b03a 	or	r3,r3,r4
 c00f888:	0401ffc4 	movi	r16,2047
 c00f88c:	003e1906 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f890:	000b883a 	mov	r5,zero
 c00f894:	0005883a 	mov	r2,zero
 c00f898:	003e2e06 	br	c00f154 <__alt_data_end+0xfc00f154>
 c00f89c:	0401ffc4 	movi	r16,2047
 c00f8a0:	003e1406 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f8a4:	0005883a 	mov	r2,zero
 c00f8a8:	003f7506 	br	c00f680 <__alt_data_end+0xfc00f680>
 c00f8ac:	0005883a 	mov	r2,zero
 c00f8b0:	0009883a 	mov	r4,zero
 c00f8b4:	003e7806 	br	c00f298 <__alt_data_end+0xfc00f298>
 c00f8b8:	123ff804 	addi	r8,r2,-32
 c00f8bc:	01000804 	movi	r4,32
 c00f8c0:	1a10d83a 	srl	r8,r3,r8
 c00f8c4:	11002526 	beq	r2,r4,c00f95c <__subdf3+0x8ec>
 c00f8c8:	01001004 	movi	r4,64
 c00f8cc:	2085c83a 	sub	r2,r4,r2
 c00f8d0:	1884983a 	sll	r2,r3,r2
 c00f8d4:	1444b03a 	or	r2,r2,r17
 c00f8d8:	1004c03a 	cmpne	r2,r2,zero
 c00f8dc:	40a2b03a 	or	r17,r8,r2
 c00f8e0:	0005883a 	mov	r2,zero
 c00f8e4:	003f1606 	br	c00f540 <__alt_data_end+0xfc00f540>
 c00f8e8:	02000434 	movhi	r8,16
 c00f8ec:	0009883a 	mov	r4,zero
 c00f8f0:	423fffc4 	addi	r8,r8,-1
 c00f8f4:	00bfffc4 	movi	r2,-1
 c00f8f8:	0401ffc4 	movi	r16,2047
 c00f8fc:	003e6606 	br	c00f298 <__alt_data_end+0xfc00f298>
 c00f900:	1c62b03a 	or	r17,r3,r17
 c00f904:	8822c03a 	cmpne	r17,r17,zero
 c00f908:	0005883a 	mov	r2,zero
 c00f90c:	003f9906 	br	c00f774 <__alt_data_end+0xfc00f774>
 c00f910:	2807883a 	mov	r3,r5
 c00f914:	3023883a 	mov	r17,r6
 c00f918:	0401ffc4 	movi	r16,2047
 c00f91c:	003df506 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f920:	2807883a 	mov	r3,r5
 c00f924:	3023883a 	mov	r17,r6
 c00f928:	003df206 	br	c00f0f4 <__alt_data_end+0xfc00f0f4>
 c00f92c:	123ff804 	addi	r8,r2,-32
 c00f930:	01000804 	movi	r4,32
 c00f934:	1a10d83a 	srl	r8,r3,r8
 c00f938:	11000a26 	beq	r2,r4,c00f964 <__subdf3+0x8f4>
 c00f93c:	01001004 	movi	r4,64
 c00f940:	2085c83a 	sub	r2,r4,r2
 c00f944:	1884983a 	sll	r2,r3,r2
 c00f948:	1444b03a 	or	r2,r2,r17
 c00f94c:	1004c03a 	cmpne	r2,r2,zero
 c00f950:	40a2b03a 	or	r17,r8,r2
 c00f954:	0005883a 	mov	r2,zero
 c00f958:	003f8606 	br	c00f774 <__alt_data_end+0xfc00f774>
 c00f95c:	0005883a 	mov	r2,zero
 c00f960:	003fdc06 	br	c00f8d4 <__alt_data_end+0xfc00f8d4>
 c00f964:	0005883a 	mov	r2,zero
 c00f968:	003ff706 	br	c00f948 <__alt_data_end+0xfc00f948>

0c00f96c <__fixdfsi>:
 c00f96c:	280cd53a 	srli	r6,r5,20
 c00f970:	00c00434 	movhi	r3,16
 c00f974:	18ffffc4 	addi	r3,r3,-1
 c00f978:	3181ffcc 	andi	r6,r6,2047
 c00f97c:	01c0ff84 	movi	r7,1022
 c00f980:	28c6703a 	and	r3,r5,r3
 c00f984:	280ad7fa 	srli	r5,r5,31
 c00f988:	3980120e 	bge	r7,r6,c00f9d4 <__fixdfsi+0x68>
 c00f98c:	00810744 	movi	r2,1053
 c00f990:	11800c16 	blt	r2,r6,c00f9c4 <__fixdfsi+0x58>
 c00f994:	00810cc4 	movi	r2,1075
 c00f998:	1185c83a 	sub	r2,r2,r6
 c00f99c:	01c007c4 	movi	r7,31
 c00f9a0:	18c00434 	orhi	r3,r3,16
 c00f9a4:	38800d16 	blt	r7,r2,c00f9dc <__fixdfsi+0x70>
 c00f9a8:	31befb44 	addi	r6,r6,-1043
 c00f9ac:	2084d83a 	srl	r2,r4,r2
 c00f9b0:	1986983a 	sll	r3,r3,r6
 c00f9b4:	1884b03a 	or	r2,r3,r2
 c00f9b8:	28000726 	beq	r5,zero,c00f9d8 <__fixdfsi+0x6c>
 c00f9bc:	0085c83a 	sub	r2,zero,r2
 c00f9c0:	f800283a 	ret
 c00f9c4:	00a00034 	movhi	r2,32768
 c00f9c8:	10bfffc4 	addi	r2,r2,-1
 c00f9cc:	2885883a 	add	r2,r5,r2
 c00f9d0:	f800283a 	ret
 c00f9d4:	0005883a 	mov	r2,zero
 c00f9d8:	f800283a 	ret
 c00f9dc:	008104c4 	movi	r2,1043
 c00f9e0:	1185c83a 	sub	r2,r2,r6
 c00f9e4:	1884d83a 	srl	r2,r3,r2
 c00f9e8:	003ff306 	br	c00f9b8 <__alt_data_end+0xfc00f9b8>

0c00f9ec <__floatsidf>:
 c00f9ec:	defffd04 	addi	sp,sp,-12
 c00f9f0:	dfc00215 	stw	ra,8(sp)
 c00f9f4:	dc400115 	stw	r17,4(sp)
 c00f9f8:	dc000015 	stw	r16,0(sp)
 c00f9fc:	20002b26 	beq	r4,zero,c00faac <__floatsidf+0xc0>
 c00fa00:	2023883a 	mov	r17,r4
 c00fa04:	2020d7fa 	srli	r16,r4,31
 c00fa08:	20002d16 	blt	r4,zero,c00fac0 <__floatsidf+0xd4>
 c00fa0c:	8809883a 	mov	r4,r17
 c00fa10:	c00fb700 	call	c00fb70 <__clzsi2>
 c00fa14:	01410784 	movi	r5,1054
 c00fa18:	288bc83a 	sub	r5,r5,r2
 c00fa1c:	01010cc4 	movi	r4,1075
 c00fa20:	2149c83a 	sub	r4,r4,r5
 c00fa24:	00c007c4 	movi	r3,31
 c00fa28:	1900160e 	bge	r3,r4,c00fa84 <__floatsidf+0x98>
 c00fa2c:	00c104c4 	movi	r3,1043
 c00fa30:	1947c83a 	sub	r3,r3,r5
 c00fa34:	88c6983a 	sll	r3,r17,r3
 c00fa38:	00800434 	movhi	r2,16
 c00fa3c:	10bfffc4 	addi	r2,r2,-1
 c00fa40:	1886703a 	and	r3,r3,r2
 c00fa44:	2941ffcc 	andi	r5,r5,2047
 c00fa48:	800d883a 	mov	r6,r16
 c00fa4c:	0005883a 	mov	r2,zero
 c00fa50:	280a953a 	slli	r5,r5,20
 c00fa54:	31803fcc 	andi	r6,r6,255
 c00fa58:	01000434 	movhi	r4,16
 c00fa5c:	300c97fa 	slli	r6,r6,31
 c00fa60:	213fffc4 	addi	r4,r4,-1
 c00fa64:	1906703a 	and	r3,r3,r4
 c00fa68:	1946b03a 	or	r3,r3,r5
 c00fa6c:	1986b03a 	or	r3,r3,r6
 c00fa70:	dfc00217 	ldw	ra,8(sp)
 c00fa74:	dc400117 	ldw	r17,4(sp)
 c00fa78:	dc000017 	ldw	r16,0(sp)
 c00fa7c:	dec00304 	addi	sp,sp,12
 c00fa80:	f800283a 	ret
 c00fa84:	00c002c4 	movi	r3,11
 c00fa88:	1887c83a 	sub	r3,r3,r2
 c00fa8c:	88c6d83a 	srl	r3,r17,r3
 c00fa90:	8904983a 	sll	r2,r17,r4
 c00fa94:	01000434 	movhi	r4,16
 c00fa98:	213fffc4 	addi	r4,r4,-1
 c00fa9c:	2941ffcc 	andi	r5,r5,2047
 c00faa0:	1906703a 	and	r3,r3,r4
 c00faa4:	800d883a 	mov	r6,r16
 c00faa8:	003fe906 	br	c00fa50 <__alt_data_end+0xfc00fa50>
 c00faac:	000d883a 	mov	r6,zero
 c00fab0:	000b883a 	mov	r5,zero
 c00fab4:	0007883a 	mov	r3,zero
 c00fab8:	0005883a 	mov	r2,zero
 c00fabc:	003fe406 	br	c00fa50 <__alt_data_end+0xfc00fa50>
 c00fac0:	0123c83a 	sub	r17,zero,r4
 c00fac4:	003fd106 	br	c00fa0c <__alt_data_end+0xfc00fa0c>

0c00fac8 <__floatunsidf>:
 c00fac8:	defffe04 	addi	sp,sp,-8
 c00facc:	dc000015 	stw	r16,0(sp)
 c00fad0:	dfc00115 	stw	ra,4(sp)
 c00fad4:	2021883a 	mov	r16,r4
 c00fad8:	20002226 	beq	r4,zero,c00fb64 <__floatunsidf+0x9c>
 c00fadc:	c00fb700 	call	c00fb70 <__clzsi2>
 c00fae0:	01010784 	movi	r4,1054
 c00fae4:	2089c83a 	sub	r4,r4,r2
 c00fae8:	01810cc4 	movi	r6,1075
 c00faec:	310dc83a 	sub	r6,r6,r4
 c00faf0:	00c007c4 	movi	r3,31
 c00faf4:	1980120e 	bge	r3,r6,c00fb40 <__floatunsidf+0x78>
 c00faf8:	00c104c4 	movi	r3,1043
 c00fafc:	1907c83a 	sub	r3,r3,r4
 c00fb00:	80ca983a 	sll	r5,r16,r3
 c00fb04:	00800434 	movhi	r2,16
 c00fb08:	10bfffc4 	addi	r2,r2,-1
 c00fb0c:	2101ffcc 	andi	r4,r4,2047
 c00fb10:	0021883a 	mov	r16,zero
 c00fb14:	288a703a 	and	r5,r5,r2
 c00fb18:	2008953a 	slli	r4,r4,20
 c00fb1c:	00c00434 	movhi	r3,16
 c00fb20:	18ffffc4 	addi	r3,r3,-1
 c00fb24:	28c6703a 	and	r3,r5,r3
 c00fb28:	8005883a 	mov	r2,r16
 c00fb2c:	1906b03a 	or	r3,r3,r4
 c00fb30:	dfc00117 	ldw	ra,4(sp)
 c00fb34:	dc000017 	ldw	r16,0(sp)
 c00fb38:	dec00204 	addi	sp,sp,8
 c00fb3c:	f800283a 	ret
 c00fb40:	00c002c4 	movi	r3,11
 c00fb44:	188bc83a 	sub	r5,r3,r2
 c00fb48:	814ad83a 	srl	r5,r16,r5
 c00fb4c:	00c00434 	movhi	r3,16
 c00fb50:	18ffffc4 	addi	r3,r3,-1
 c00fb54:	81a0983a 	sll	r16,r16,r6
 c00fb58:	2101ffcc 	andi	r4,r4,2047
 c00fb5c:	28ca703a 	and	r5,r5,r3
 c00fb60:	003fed06 	br	c00fb18 <__alt_data_end+0xfc00fb18>
 c00fb64:	0009883a 	mov	r4,zero
 c00fb68:	000b883a 	mov	r5,zero
 c00fb6c:	003fea06 	br	c00fb18 <__alt_data_end+0xfc00fb18>

0c00fb70 <__clzsi2>:
 c00fb70:	00bfffd4 	movui	r2,65535
 c00fb74:	11000536 	bltu	r2,r4,c00fb8c <__clzsi2+0x1c>
 c00fb78:	00803fc4 	movi	r2,255
 c00fb7c:	11000f36 	bltu	r2,r4,c00fbbc <__clzsi2+0x4c>
 c00fb80:	00800804 	movi	r2,32
 c00fb84:	0007883a 	mov	r3,zero
 c00fb88:	00000506 	br	c00fba0 <__clzsi2+0x30>
 c00fb8c:	00804034 	movhi	r2,256
 c00fb90:	10bfffc4 	addi	r2,r2,-1
 c00fb94:	11000c2e 	bgeu	r2,r4,c00fbc8 <__clzsi2+0x58>
 c00fb98:	00800204 	movi	r2,8
 c00fb9c:	00c00604 	movi	r3,24
 c00fba0:	20c8d83a 	srl	r4,r4,r3
 c00fba4:	00c30074 	movhi	r3,3073
 c00fba8:	18cac104 	addi	r3,r3,11012
 c00fbac:	1909883a 	add	r4,r3,r4
 c00fbb0:	20c00003 	ldbu	r3,0(r4)
 c00fbb4:	10c5c83a 	sub	r2,r2,r3
 c00fbb8:	f800283a 	ret
 c00fbbc:	00800604 	movi	r2,24
 c00fbc0:	00c00204 	movi	r3,8
 c00fbc4:	003ff606 	br	c00fba0 <__alt_data_end+0xfc00fba0>
 c00fbc8:	00800404 	movi	r2,16
 c00fbcc:	1007883a 	mov	r3,r2
 c00fbd0:	003ff306 	br	c00fba0 <__alt_data_end+0xfc00fba0>

0c00fbd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00fbd4:	defffe04 	addi	sp,sp,-8
 c00fbd8:	dfc00115 	stw	ra,4(sp)
 c00fbdc:	df000015 	stw	fp,0(sp)
 c00fbe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00fbe4:	d0a00f17 	ldw	r2,-32708(gp)
 c00fbe8:	10000326 	beq	r2,zero,c00fbf8 <alt_get_errno+0x24>
 c00fbec:	d0a00f17 	ldw	r2,-32708(gp)
 c00fbf0:	103ee83a 	callr	r2
 c00fbf4:	00000106 	br	c00fbfc <alt_get_errno+0x28>
 c00fbf8:	d0a6eb04 	addi	r2,gp,-25684
}
 c00fbfc:	e037883a 	mov	sp,fp
 c00fc00:	dfc00117 	ldw	ra,4(sp)
 c00fc04:	df000017 	ldw	fp,0(sp)
 c00fc08:	dec00204 	addi	sp,sp,8
 c00fc0c:	f800283a 	ret

0c00fc10 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c00fc10:	defffb04 	addi	sp,sp,-20
 c00fc14:	dfc00415 	stw	ra,16(sp)
 c00fc18:	df000315 	stw	fp,12(sp)
 c00fc1c:	df000304 	addi	fp,sp,12
 c00fc20:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c00fc24:	e0bfff17 	ldw	r2,-4(fp)
 c00fc28:	10000816 	blt	r2,zero,c00fc4c <close+0x3c>
 c00fc2c:	01400304 	movi	r5,12
 c00fc30:	e13fff17 	ldw	r4,-4(fp)
 c00fc34:	c002cc00 	call	c002cc0 <__mulsi3>
 c00fc38:	1007883a 	mov	r3,r2
 c00fc3c:	00830074 	movhi	r2,3073
 c00fc40:	108d4d04 	addi	r2,r2,13620
 c00fc44:	1885883a 	add	r2,r3,r2
 c00fc48:	00000106 	br	c00fc50 <close+0x40>
 c00fc4c:	0005883a 	mov	r2,zero
 c00fc50:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 c00fc54:	e0bffd17 	ldw	r2,-12(fp)
 c00fc58:	10001926 	beq	r2,zero,c00fcc0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c00fc5c:	e0bffd17 	ldw	r2,-12(fp)
 c00fc60:	10800017 	ldw	r2,0(r2)
 c00fc64:	10800417 	ldw	r2,16(r2)
 c00fc68:	10000626 	beq	r2,zero,c00fc84 <close+0x74>
 c00fc6c:	e0bffd17 	ldw	r2,-12(fp)
 c00fc70:	10800017 	ldw	r2,0(r2)
 c00fc74:	10800417 	ldw	r2,16(r2)
 c00fc78:	e13ffd17 	ldw	r4,-12(fp)
 c00fc7c:	103ee83a 	callr	r2
 c00fc80:	00000106 	br	c00fc88 <close+0x78>
 c00fc84:	0005883a 	mov	r2,zero
 c00fc88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c00fc8c:	e13fff17 	ldw	r4,-4(fp)
 c00fc90:	c0102f80 	call	c0102f8 <alt_release_fd>
    if (rval < 0)
 c00fc94:	e0bffe17 	ldw	r2,-8(fp)
 c00fc98:	1000070e 	bge	r2,zero,c00fcb8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 c00fc9c:	c00fbd40 	call	c00fbd4 <alt_get_errno>
 c00fca0:	1007883a 	mov	r3,r2
 c00fca4:	e0bffe17 	ldw	r2,-8(fp)
 c00fca8:	0085c83a 	sub	r2,zero,r2
 c00fcac:	18800015 	stw	r2,0(r3)
      return -1;
 c00fcb0:	00bfffc4 	movi	r2,-1
 c00fcb4:	00000706 	br	c00fcd4 <close+0xc4>
    }
    return 0;
 c00fcb8:	0005883a 	mov	r2,zero
 c00fcbc:	00000506 	br	c00fcd4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00fcc0:	c00fbd40 	call	c00fbd4 <alt_get_errno>
 c00fcc4:	1007883a 	mov	r3,r2
 c00fcc8:	00801444 	movi	r2,81
 c00fccc:	18800015 	stw	r2,0(r3)
    return -1;
 c00fcd0:	00bfffc4 	movi	r2,-1
  }
}
 c00fcd4:	e037883a 	mov	sp,fp
 c00fcd8:	dfc00117 	ldw	ra,4(sp)
 c00fcdc:	df000017 	ldw	fp,0(sp)
 c00fce0:	dec00204 	addi	sp,sp,8
 c00fce4:	f800283a 	ret

0c00fce8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c00fce8:	defffc04 	addi	sp,sp,-16
 c00fcec:	df000315 	stw	fp,12(sp)
 c00fcf0:	df000304 	addi	fp,sp,12
 c00fcf4:	e13ffd15 	stw	r4,-12(fp)
 c00fcf8:	e17ffe15 	stw	r5,-8(fp)
 c00fcfc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c00fd00:	e0bfff17 	ldw	r2,-4(fp)
}
 c00fd04:	e037883a 	mov	sp,fp
 c00fd08:	df000017 	ldw	fp,0(sp)
 c00fd0c:	dec00104 	addi	sp,sp,4
 c00fd10:	f800283a 	ret

0c00fd14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00fd14:	defffe04 	addi	sp,sp,-8
 c00fd18:	dfc00115 	stw	ra,4(sp)
 c00fd1c:	df000015 	stw	fp,0(sp)
 c00fd20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00fd24:	d0a00f17 	ldw	r2,-32708(gp)
 c00fd28:	10000326 	beq	r2,zero,c00fd38 <alt_get_errno+0x24>
 c00fd2c:	d0a00f17 	ldw	r2,-32708(gp)
 c00fd30:	103ee83a 	callr	r2
 c00fd34:	00000106 	br	c00fd3c <alt_get_errno+0x28>
 c00fd38:	d0a6eb04 	addi	r2,gp,-25684
}
 c00fd3c:	e037883a 	mov	sp,fp
 c00fd40:	dfc00117 	ldw	ra,4(sp)
 c00fd44:	df000017 	ldw	fp,0(sp)
 c00fd48:	dec00204 	addi	sp,sp,8
 c00fd4c:	f800283a 	ret

0c00fd50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 c00fd50:	defffb04 	addi	sp,sp,-20
 c00fd54:	dfc00415 	stw	ra,16(sp)
 c00fd58:	df000315 	stw	fp,12(sp)
 c00fd5c:	df000304 	addi	fp,sp,12
 c00fd60:	e13ffe15 	stw	r4,-8(fp)
 c00fd64:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00fd68:	e0bffe17 	ldw	r2,-8(fp)
 c00fd6c:	10000816 	blt	r2,zero,c00fd90 <fstat+0x40>
 c00fd70:	01400304 	movi	r5,12
 c00fd74:	e13ffe17 	ldw	r4,-8(fp)
 c00fd78:	c002cc00 	call	c002cc0 <__mulsi3>
 c00fd7c:	1007883a 	mov	r3,r2
 c00fd80:	00830074 	movhi	r2,3073
 c00fd84:	108d4d04 	addi	r2,r2,13620
 c00fd88:	1885883a 	add	r2,r3,r2
 c00fd8c:	00000106 	br	c00fd94 <fstat+0x44>
 c00fd90:	0005883a 	mov	r2,zero
 c00fd94:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 c00fd98:	e0bffd17 	ldw	r2,-12(fp)
 c00fd9c:	10001026 	beq	r2,zero,c00fde0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 c00fda0:	e0bffd17 	ldw	r2,-12(fp)
 c00fda4:	10800017 	ldw	r2,0(r2)
 c00fda8:	10800817 	ldw	r2,32(r2)
 c00fdac:	10000726 	beq	r2,zero,c00fdcc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 c00fdb0:	e0bffd17 	ldw	r2,-12(fp)
 c00fdb4:	10800017 	ldw	r2,0(r2)
 c00fdb8:	10800817 	ldw	r2,32(r2)
 c00fdbc:	e17fff17 	ldw	r5,-4(fp)
 c00fdc0:	e13ffd17 	ldw	r4,-12(fp)
 c00fdc4:	103ee83a 	callr	r2
 c00fdc8:	00000a06 	br	c00fdf4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 c00fdcc:	e0bfff17 	ldw	r2,-4(fp)
 c00fdd0:	00c80004 	movi	r3,8192
 c00fdd4:	10c00115 	stw	r3,4(r2)
      return 0;
 c00fdd8:	0005883a 	mov	r2,zero
 c00fddc:	00000506 	br	c00fdf4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00fde0:	c00fd140 	call	c00fd14 <alt_get_errno>
 c00fde4:	1007883a 	mov	r3,r2
 c00fde8:	00801444 	movi	r2,81
 c00fdec:	18800015 	stw	r2,0(r3)
    return -1;
 c00fdf0:	00bfffc4 	movi	r2,-1
  }
}
 c00fdf4:	e037883a 	mov	sp,fp
 c00fdf8:	dfc00117 	ldw	ra,4(sp)
 c00fdfc:	df000017 	ldw	fp,0(sp)
 c00fe00:	dec00204 	addi	sp,sp,8
 c00fe04:	f800283a 	ret

0c00fe08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00fe08:	defffe04 	addi	sp,sp,-8
 c00fe0c:	dfc00115 	stw	ra,4(sp)
 c00fe10:	df000015 	stw	fp,0(sp)
 c00fe14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00fe18:	d0a00f17 	ldw	r2,-32708(gp)
 c00fe1c:	10000326 	beq	r2,zero,c00fe2c <alt_get_errno+0x24>
 c00fe20:	d0a00f17 	ldw	r2,-32708(gp)
 c00fe24:	103ee83a 	callr	r2
 c00fe28:	00000106 	br	c00fe30 <alt_get_errno+0x28>
 c00fe2c:	d0a6eb04 	addi	r2,gp,-25684
}
 c00fe30:	e037883a 	mov	sp,fp
 c00fe34:	dfc00117 	ldw	ra,4(sp)
 c00fe38:	df000017 	ldw	fp,0(sp)
 c00fe3c:	dec00204 	addi	sp,sp,8
 c00fe40:	f800283a 	ret

0c00fe44 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 c00fe44:	deffed04 	addi	sp,sp,-76
 c00fe48:	dfc01215 	stw	ra,72(sp)
 c00fe4c:	df001115 	stw	fp,68(sp)
 c00fe50:	df001104 	addi	fp,sp,68
 c00fe54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00fe58:	e0bfff17 	ldw	r2,-4(fp)
 c00fe5c:	10000816 	blt	r2,zero,c00fe80 <isatty+0x3c>
 c00fe60:	01400304 	movi	r5,12
 c00fe64:	e13fff17 	ldw	r4,-4(fp)
 c00fe68:	c002cc00 	call	c002cc0 <__mulsi3>
 c00fe6c:	1007883a 	mov	r3,r2
 c00fe70:	00830074 	movhi	r2,3073
 c00fe74:	108d4d04 	addi	r2,r2,13620
 c00fe78:	1885883a 	add	r2,r3,r2
 c00fe7c:	00000106 	br	c00fe84 <isatty+0x40>
 c00fe80:	0005883a 	mov	r2,zero
 c00fe84:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 c00fe88:	e0bfef17 	ldw	r2,-68(fp)
 c00fe8c:	10000e26 	beq	r2,zero,c00fec8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 c00fe90:	e0bfef17 	ldw	r2,-68(fp)
 c00fe94:	10800017 	ldw	r2,0(r2)
 c00fe98:	10800817 	ldw	r2,32(r2)
 c00fe9c:	1000021e 	bne	r2,zero,c00fea8 <isatty+0x64>
    {
      return 1;
 c00fea0:	00800044 	movi	r2,1
 c00fea4:	00000d06 	br	c00fedc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 c00fea8:	e0bff004 	addi	r2,fp,-64
 c00feac:	100b883a 	mov	r5,r2
 c00feb0:	e13fff17 	ldw	r4,-4(fp)
 c00feb4:	c00fd500 	call	c00fd50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 c00feb8:	e0bff117 	ldw	r2,-60(fp)
 c00febc:	10880020 	cmpeqi	r2,r2,8192
 c00fec0:	10803fcc 	andi	r2,r2,255
 c00fec4:	00000506 	br	c00fedc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00fec8:	c00fe080 	call	c00fe08 <alt_get_errno>
 c00fecc:	1007883a 	mov	r3,r2
 c00fed0:	00801444 	movi	r2,81
 c00fed4:	18800015 	stw	r2,0(r3)
    return 0;
 c00fed8:	0005883a 	mov	r2,zero
  }
}
 c00fedc:	e037883a 	mov	sp,fp
 c00fee0:	dfc00117 	ldw	ra,4(sp)
 c00fee4:	df000017 	ldw	fp,0(sp)
 c00fee8:	dec00204 	addi	sp,sp,8
 c00feec:	f800283a 	ret

0c00fef0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c00fef0:	defffc04 	addi	sp,sp,-16
 c00fef4:	df000315 	stw	fp,12(sp)
 c00fef8:	df000304 	addi	fp,sp,12
 c00fefc:	e13ffd15 	stw	r4,-12(fp)
 c00ff00:	e17ffe15 	stw	r5,-8(fp)
 c00ff04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c00ff08:	e0fffe17 	ldw	r3,-8(fp)
 c00ff0c:	e0bffd17 	ldw	r2,-12(fp)
 c00ff10:	18800c26 	beq	r3,r2,c00ff44 <alt_load_section+0x54>
  {
    while( to != end )
 c00ff14:	00000806 	br	c00ff38 <alt_load_section+0x48>
    {
      *to++ = *from++;
 c00ff18:	e0bffe17 	ldw	r2,-8(fp)
 c00ff1c:	10c00104 	addi	r3,r2,4
 c00ff20:	e0fffe15 	stw	r3,-8(fp)
 c00ff24:	e0fffd17 	ldw	r3,-12(fp)
 c00ff28:	19000104 	addi	r4,r3,4
 c00ff2c:	e13ffd15 	stw	r4,-12(fp)
 c00ff30:	18c00017 	ldw	r3,0(r3)
 c00ff34:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c00ff38:	e0fffe17 	ldw	r3,-8(fp)
 c00ff3c:	e0bfff17 	ldw	r2,-4(fp)
 c00ff40:	18bff51e 	bne	r3,r2,c00ff18 <__alt_data_end+0xfc00ff18>
    {
      *to++ = *from++;
    }
  }
}
 c00ff44:	0001883a 	nop
 c00ff48:	e037883a 	mov	sp,fp
 c00ff4c:	df000017 	ldw	fp,0(sp)
 c00ff50:	dec00104 	addi	sp,sp,4
 c00ff54:	f800283a 	ret

0c00ff58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c00ff58:	defffe04 	addi	sp,sp,-8
 c00ff5c:	dfc00115 	stw	ra,4(sp)
 c00ff60:	df000015 	stw	fp,0(sp)
 c00ff64:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c00ff68:	01830074 	movhi	r6,3073
 c00ff6c:	3191d904 	addi	r6,r6,18276
 c00ff70:	01430074 	movhi	r5,3073
 c00ff74:	294b0e04 	addi	r5,r5,11320
 c00ff78:	01030074 	movhi	r4,3073
 c00ff7c:	2111d904 	addi	r4,r4,18276
 c00ff80:	c00fef00 	call	c00fef0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c00ff84:	01830034 	movhi	r6,3072
 c00ff88:	31808c04 	addi	r6,r6,560
 c00ff8c:	01430034 	movhi	r5,3072
 c00ff90:	29400804 	addi	r5,r5,32
 c00ff94:	01030034 	movhi	r4,3072
 c00ff98:	21000804 	addi	r4,r4,32
 c00ff9c:	c00fef00 	call	c00fef0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c00ffa0:	01830074 	movhi	r6,3073
 c00ffa4:	318b0e04 	addi	r6,r6,11320
 c00ffa8:	01430074 	movhi	r5,3073
 c00ffac:	2949bf04 	addi	r5,r5,9980
 c00ffb0:	01030074 	movhi	r4,3073
 c00ffb4:	2109bf04 	addi	r4,r4,9980
 c00ffb8:	c00fef00 	call	c00fef0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c00ffbc:	c0117e80 	call	c0117e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 c00ffc0:	c0119a80 	call	c0119a8 <alt_icache_flush_all>
}
 c00ffc4:	0001883a 	nop
 c00ffc8:	e037883a 	mov	sp,fp
 c00ffcc:	dfc00117 	ldw	ra,4(sp)
 c00ffd0:	df000017 	ldw	fp,0(sp)
 c00ffd4:	dec00204 	addi	sp,sp,8
 c00ffd8:	f800283a 	ret

0c00ffdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00ffdc:	defffe04 	addi	sp,sp,-8
 c00ffe0:	dfc00115 	stw	ra,4(sp)
 c00ffe4:	df000015 	stw	fp,0(sp)
 c00ffe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00ffec:	d0a00f17 	ldw	r2,-32708(gp)
 c00fff0:	10000326 	beq	r2,zero,c010000 <alt_get_errno+0x24>
 c00fff4:	d0a00f17 	ldw	r2,-32708(gp)
 c00fff8:	103ee83a 	callr	r2
 c00fffc:	00000106 	br	c010004 <alt_get_errno+0x28>
 c010000:	d0a6eb04 	addi	r2,gp,-25684
}
 c010004:	e037883a 	mov	sp,fp
 c010008:	dfc00117 	ldw	ra,4(sp)
 c01000c:	df000017 	ldw	fp,0(sp)
 c010010:	dec00204 	addi	sp,sp,8
 c010014:	f800283a 	ret

0c010018 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 c010018:	defff904 	addi	sp,sp,-28
 c01001c:	dfc00615 	stw	ra,24(sp)
 c010020:	df000515 	stw	fp,20(sp)
 c010024:	df000504 	addi	fp,sp,20
 c010028:	e13ffd15 	stw	r4,-12(fp)
 c01002c:	e17ffe15 	stw	r5,-8(fp)
 c010030:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 c010034:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c010038:	e0bffd17 	ldw	r2,-12(fp)
 c01003c:	10000816 	blt	r2,zero,c010060 <lseek+0x48>
 c010040:	01400304 	movi	r5,12
 c010044:	e13ffd17 	ldw	r4,-12(fp)
 c010048:	c002cc00 	call	c002cc0 <__mulsi3>
 c01004c:	1007883a 	mov	r3,r2
 c010050:	00830074 	movhi	r2,3073
 c010054:	108d4d04 	addi	r2,r2,13620
 c010058:	1885883a 	add	r2,r3,r2
 c01005c:	00000106 	br	c010064 <lseek+0x4c>
 c010060:	0005883a 	mov	r2,zero
 c010064:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 c010068:	e0bffc17 	ldw	r2,-16(fp)
 c01006c:	10001026 	beq	r2,zero,c0100b0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 c010070:	e0bffc17 	ldw	r2,-16(fp)
 c010074:	10800017 	ldw	r2,0(r2)
 c010078:	10800717 	ldw	r2,28(r2)
 c01007c:	10000926 	beq	r2,zero,c0100a4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 c010080:	e0bffc17 	ldw	r2,-16(fp)
 c010084:	10800017 	ldw	r2,0(r2)
 c010088:	10800717 	ldw	r2,28(r2)
 c01008c:	e1bfff17 	ldw	r6,-4(fp)
 c010090:	e17ffe17 	ldw	r5,-8(fp)
 c010094:	e13ffc17 	ldw	r4,-16(fp)
 c010098:	103ee83a 	callr	r2
 c01009c:	e0bffb15 	stw	r2,-20(fp)
 c0100a0:	00000506 	br	c0100b8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 c0100a4:	00bfde84 	movi	r2,-134
 c0100a8:	e0bffb15 	stw	r2,-20(fp)
 c0100ac:	00000206 	br	c0100b8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 c0100b0:	00bfebc4 	movi	r2,-81
 c0100b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 c0100b8:	e0bffb17 	ldw	r2,-20(fp)
 c0100bc:	1000070e 	bge	r2,zero,c0100dc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 c0100c0:	c00ffdc0 	call	c00ffdc <alt_get_errno>
 c0100c4:	1007883a 	mov	r3,r2
 c0100c8:	e0bffb17 	ldw	r2,-20(fp)
 c0100cc:	0085c83a 	sub	r2,zero,r2
 c0100d0:	18800015 	stw	r2,0(r3)
    rc = -1;
 c0100d4:	00bfffc4 	movi	r2,-1
 c0100d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 c0100dc:	e0bffb17 	ldw	r2,-20(fp)
}
 c0100e0:	e037883a 	mov	sp,fp
 c0100e4:	dfc00117 	ldw	ra,4(sp)
 c0100e8:	df000017 	ldw	fp,0(sp)
 c0100ec:	dec00204 	addi	sp,sp,8
 c0100f0:	f800283a 	ret

0c0100f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c0100f4:	defffd04 	addi	sp,sp,-12
 c0100f8:	dfc00215 	stw	ra,8(sp)
 c0100fc:	df000115 	stw	fp,4(sp)
 c010100:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c010104:	0009883a 	mov	r4,zero
 c010108:	c0107700 	call	c010770 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 c01010c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c010110:	c0107a80 	call	c0107a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c010114:	01830074 	movhi	r6,3073
 c010118:	318b0404 	addi	r6,r6,11280
 c01011c:	01430074 	movhi	r5,3073
 c010120:	294b0404 	addi	r5,r5,11280
 c010124:	01030074 	movhi	r4,3073
 c010128:	210b0404 	addi	r4,r4,11280
 c01012c:	c011d4c0 	call	c011d4c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c010130:	c0118e80 	call	c0118e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c010134:	01030074 	movhi	r4,3073
 c010138:	21065204 	addi	r4,r4,6472
 c01013c:	c0123680 	call	c012368 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c010140:	d0a6ec17 	ldw	r2,-25680(gp)
 c010144:	d0e6ed17 	ldw	r3,-25676(gp)
 c010148:	d126ee17 	ldw	r4,-25672(gp)
 c01014c:	200d883a 	mov	r6,r4
 c010150:	180b883a 	mov	r5,r3
 c010154:	1009883a 	mov	r4,r2
 c010158:	c00076c0 	call	c00076c <main>
 c01015c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c010160:	01000044 	movi	r4,1
 c010164:	c00fc100 	call	c00fc10 <close>
  exit (result);
 c010168:	e13fff17 	ldw	r4,-4(fp)
 c01016c:	c01237c0 	call	c01237c <exit>

0c010170 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c010170:	defffe04 	addi	sp,sp,-8
 c010174:	df000115 	stw	fp,4(sp)
 c010178:	df000104 	addi	fp,sp,4
 c01017c:	e13fff15 	stw	r4,-4(fp)
}
 c010180:	0001883a 	nop
 c010184:	e037883a 	mov	sp,fp
 c010188:	df000017 	ldw	fp,0(sp)
 c01018c:	dec00104 	addi	sp,sp,4
 c010190:	f800283a 	ret

0c010194 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c010194:	defffe04 	addi	sp,sp,-8
 c010198:	df000115 	stw	fp,4(sp)
 c01019c:	df000104 	addi	fp,sp,4
 c0101a0:	e13fff15 	stw	r4,-4(fp)
}
 c0101a4:	0001883a 	nop
 c0101a8:	e037883a 	mov	sp,fp
 c0101ac:	df000017 	ldw	fp,0(sp)
 c0101b0:	dec00104 	addi	sp,sp,4
 c0101b4:	f800283a 	ret

0c0101b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0101b8:	defffe04 	addi	sp,sp,-8
 c0101bc:	dfc00115 	stw	ra,4(sp)
 c0101c0:	df000015 	stw	fp,0(sp)
 c0101c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0101c8:	d0a00f17 	ldw	r2,-32708(gp)
 c0101cc:	10000326 	beq	r2,zero,c0101dc <alt_get_errno+0x24>
 c0101d0:	d0a00f17 	ldw	r2,-32708(gp)
 c0101d4:	103ee83a 	callr	r2
 c0101d8:	00000106 	br	c0101e0 <alt_get_errno+0x28>
 c0101dc:	d0a6eb04 	addi	r2,gp,-25684
}
 c0101e0:	e037883a 	mov	sp,fp
 c0101e4:	dfc00117 	ldw	ra,4(sp)
 c0101e8:	df000017 	ldw	fp,0(sp)
 c0101ec:	dec00204 	addi	sp,sp,8
 c0101f0:	f800283a 	ret

0c0101f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 c0101f4:	defff904 	addi	sp,sp,-28
 c0101f8:	dfc00615 	stw	ra,24(sp)
 c0101fc:	df000515 	stw	fp,20(sp)
 c010200:	df000504 	addi	fp,sp,20
 c010204:	e13ffd15 	stw	r4,-12(fp)
 c010208:	e17ffe15 	stw	r5,-8(fp)
 c01020c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c010210:	e0bffd17 	ldw	r2,-12(fp)
 c010214:	10000816 	blt	r2,zero,c010238 <read+0x44>
 c010218:	01400304 	movi	r5,12
 c01021c:	e13ffd17 	ldw	r4,-12(fp)
 c010220:	c002cc00 	call	c002cc0 <__mulsi3>
 c010224:	1007883a 	mov	r3,r2
 c010228:	00830074 	movhi	r2,3073
 c01022c:	108d4d04 	addi	r2,r2,13620
 c010230:	1885883a 	add	r2,r3,r2
 c010234:	00000106 	br	c01023c <read+0x48>
 c010238:	0005883a 	mov	r2,zero
 c01023c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c010240:	e0bffb17 	ldw	r2,-20(fp)
 c010244:	10002226 	beq	r2,zero,c0102d0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c010248:	e0bffb17 	ldw	r2,-20(fp)
 c01024c:	10800217 	ldw	r2,8(r2)
 c010250:	108000cc 	andi	r2,r2,3
 c010254:	10800060 	cmpeqi	r2,r2,1
 c010258:	1000181e 	bne	r2,zero,c0102bc <read+0xc8>
        (fd->dev->read))
 c01025c:	e0bffb17 	ldw	r2,-20(fp)
 c010260:	10800017 	ldw	r2,0(r2)
 c010264:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c010268:	10001426 	beq	r2,zero,c0102bc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 c01026c:	e0bffb17 	ldw	r2,-20(fp)
 c010270:	10800017 	ldw	r2,0(r2)
 c010274:	10800517 	ldw	r2,20(r2)
 c010278:	e0ffff17 	ldw	r3,-4(fp)
 c01027c:	180d883a 	mov	r6,r3
 c010280:	e17ffe17 	ldw	r5,-8(fp)
 c010284:	e13ffb17 	ldw	r4,-20(fp)
 c010288:	103ee83a 	callr	r2
 c01028c:	e0bffc15 	stw	r2,-16(fp)
 c010290:	e0bffc17 	ldw	r2,-16(fp)
 c010294:	1000070e 	bge	r2,zero,c0102b4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 c010298:	c0101b80 	call	c0101b8 <alt_get_errno>
 c01029c:	1007883a 	mov	r3,r2
 c0102a0:	e0bffc17 	ldw	r2,-16(fp)
 c0102a4:	0085c83a 	sub	r2,zero,r2
 c0102a8:	18800015 	stw	r2,0(r3)
          return -1;
 c0102ac:	00bfffc4 	movi	r2,-1
 c0102b0:	00000c06 	br	c0102e4 <read+0xf0>
        }
        return rval;
 c0102b4:	e0bffc17 	ldw	r2,-16(fp)
 c0102b8:	00000a06 	br	c0102e4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 c0102bc:	c0101b80 	call	c0101b8 <alt_get_errno>
 c0102c0:	1007883a 	mov	r3,r2
 c0102c4:	00800344 	movi	r2,13
 c0102c8:	18800015 	stw	r2,0(r3)
 c0102cc:	00000406 	br	c0102e0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 c0102d0:	c0101b80 	call	c0101b8 <alt_get_errno>
 c0102d4:	1007883a 	mov	r3,r2
 c0102d8:	00801444 	movi	r2,81
 c0102dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c0102e0:	00bfffc4 	movi	r2,-1
}
 c0102e4:	e037883a 	mov	sp,fp
 c0102e8:	dfc00117 	ldw	ra,4(sp)
 c0102ec:	df000017 	ldw	fp,0(sp)
 c0102f0:	dec00204 	addi	sp,sp,8
 c0102f4:	f800283a 	ret

0c0102f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c0102f8:	defffc04 	addi	sp,sp,-16
 c0102fc:	dfc00315 	stw	ra,12(sp)
 c010300:	df000215 	stw	fp,8(sp)
 c010304:	dc000115 	stw	r16,4(sp)
 c010308:	df000204 	addi	fp,sp,8
 c01030c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 c010310:	e0bffe17 	ldw	r2,-8(fp)
 c010314:	108000d0 	cmplti	r2,r2,3
 c010318:	1000111e 	bne	r2,zero,c010360 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 c01031c:	04030074 	movhi	r16,3073
 c010320:	840d4d04 	addi	r16,r16,13620
 c010324:	e0bffe17 	ldw	r2,-8(fp)
 c010328:	01400304 	movi	r5,12
 c01032c:	1009883a 	mov	r4,r2
 c010330:	c002cc00 	call	c002cc0 <__mulsi3>
 c010334:	8085883a 	add	r2,r16,r2
 c010338:	10800204 	addi	r2,r2,8
 c01033c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c010340:	04030074 	movhi	r16,3073
 c010344:	840d4d04 	addi	r16,r16,13620
 c010348:	e0bffe17 	ldw	r2,-8(fp)
 c01034c:	01400304 	movi	r5,12
 c010350:	1009883a 	mov	r4,r2
 c010354:	c002cc00 	call	c002cc0 <__mulsi3>
 c010358:	8085883a 	add	r2,r16,r2
 c01035c:	10000015 	stw	zero,0(r2)
  }
}
 c010360:	0001883a 	nop
 c010364:	e6ffff04 	addi	sp,fp,-4
 c010368:	dfc00217 	ldw	ra,8(sp)
 c01036c:	df000117 	ldw	fp,4(sp)
 c010370:	dc000017 	ldw	r16,0(sp)
 c010374:	dec00304 	addi	sp,sp,12
 c010378:	f800283a 	ret

0c01037c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c01037c:	defff904 	addi	sp,sp,-28
 c010380:	df000615 	stw	fp,24(sp)
 c010384:	df000604 	addi	fp,sp,24
 c010388:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c01038c:	0005303a 	rdctl	r2,status
 c010390:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c010394:	e0fffe17 	ldw	r3,-8(fp)
 c010398:	00bfff84 	movi	r2,-2
 c01039c:	1884703a 	and	r2,r3,r2
 c0103a0:	1001703a 	wrctl	status,r2
  
  return context;
 c0103a4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c0103a8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c0103ac:	d0a01017 	ldw	r2,-32704(gp)
 c0103b0:	10c000c4 	addi	r3,r2,3
 c0103b4:	00bfff04 	movi	r2,-4
 c0103b8:	1884703a 	and	r2,r3,r2
 c0103bc:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c0103c0:	d0e01017 	ldw	r3,-32704(gp)
 c0103c4:	e0bfff17 	ldw	r2,-4(fp)
 c0103c8:	1887883a 	add	r3,r3,r2
 c0103cc:	00840034 	movhi	r2,4096
 c0103d0:	10800004 	addi	r2,r2,0
 c0103d4:	10c0062e 	bgeu	r2,r3,c0103f0 <sbrk+0x74>
 c0103d8:	e0bffb17 	ldw	r2,-20(fp)
 c0103dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0103e0:	e0bffa17 	ldw	r2,-24(fp)
 c0103e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c0103e8:	00bfffc4 	movi	r2,-1
 c0103ec:	00000b06 	br	c01041c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 c0103f0:	d0a01017 	ldw	r2,-32704(gp)
 c0103f4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 c0103f8:	d0e01017 	ldw	r3,-32704(gp)
 c0103fc:	e0bfff17 	ldw	r2,-4(fp)
 c010400:	1885883a 	add	r2,r3,r2
 c010404:	d0a01015 	stw	r2,-32704(gp)
 c010408:	e0bffb17 	ldw	r2,-20(fp)
 c01040c:	e0bffc15 	stw	r2,-16(fp)
 c010410:	e0bffc17 	ldw	r2,-16(fp)
 c010414:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c010418:	e0bffd17 	ldw	r2,-12(fp)
} 
 c01041c:	e037883a 	mov	sp,fp
 c010420:	df000017 	ldw	fp,0(sp)
 c010424:	dec00104 	addi	sp,sp,4
 c010428:	f800283a 	ret

0c01042c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c01042c:	defffa04 	addi	sp,sp,-24
 c010430:	df000515 	stw	fp,20(sp)
 c010434:	df000504 	addi	fp,sp,20
 c010438:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c01043c:	0005303a 	rdctl	r2,status
 c010440:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c010444:	e0fffc17 	ldw	r3,-16(fp)
 c010448:	00bfff84 	movi	r2,-2
 c01044c:	1884703a 	and	r2,r3,r2
 c010450:	1001703a 	wrctl	status,r2
  
  return context;
 c010454:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c010458:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 c01045c:	e0bfff17 	ldw	r2,-4(fp)
 c010460:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c010464:	e0bffd17 	ldw	r2,-12(fp)
 c010468:	10800017 	ldw	r2,0(r2)
 c01046c:	e0fffd17 	ldw	r3,-12(fp)
 c010470:	18c00117 	ldw	r3,4(r3)
 c010474:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 c010478:	e0bffd17 	ldw	r2,-12(fp)
 c01047c:	10800117 	ldw	r2,4(r2)
 c010480:	e0fffd17 	ldw	r3,-12(fp)
 c010484:	18c00017 	ldw	r3,0(r3)
 c010488:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c01048c:	e0bffd17 	ldw	r2,-12(fp)
 c010490:	e0fffd17 	ldw	r3,-12(fp)
 c010494:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 c010498:	e0bffd17 	ldw	r2,-12(fp)
 c01049c:	e0fffd17 	ldw	r3,-12(fp)
 c0104a0:	10c00015 	stw	r3,0(r2)
 c0104a4:	e0bffb17 	ldw	r2,-20(fp)
 c0104a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0104ac:	e0bffe17 	ldw	r2,-8(fp)
 c0104b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c0104b4:	0001883a 	nop
 c0104b8:	e037883a 	mov	sp,fp
 c0104bc:	df000017 	ldw	fp,0(sp)
 c0104c0:	dec00104 	addi	sp,sp,4
 c0104c4:	f800283a 	ret

0c0104c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c0104c8:	defffb04 	addi	sp,sp,-20
 c0104cc:	dfc00415 	stw	ra,16(sp)
 c0104d0:	df000315 	stw	fp,12(sp)
 c0104d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c0104d8:	d0a01117 	ldw	r2,-32700(gp)
 c0104dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c0104e0:	d0a6f017 	ldw	r2,-25664(gp)
 c0104e4:	10800044 	addi	r2,r2,1
 c0104e8:	d0a6f015 	stw	r2,-25664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c0104ec:	00002e06 	br	c0105a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 c0104f0:	e0bffd17 	ldw	r2,-12(fp)
 c0104f4:	10800017 	ldw	r2,0(r2)
 c0104f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c0104fc:	e0bffd17 	ldw	r2,-12(fp)
 c010500:	10800403 	ldbu	r2,16(r2)
 c010504:	10803fcc 	andi	r2,r2,255
 c010508:	10000426 	beq	r2,zero,c01051c <alt_tick+0x54>
 c01050c:	d0a6f017 	ldw	r2,-25664(gp)
 c010510:	1000021e 	bne	r2,zero,c01051c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 c010514:	e0bffd17 	ldw	r2,-12(fp)
 c010518:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c01051c:	e0bffd17 	ldw	r2,-12(fp)
 c010520:	10800217 	ldw	r2,8(r2)
 c010524:	d0e6f017 	ldw	r3,-25664(gp)
 c010528:	18801d36 	bltu	r3,r2,c0105a0 <alt_tick+0xd8>
 c01052c:	e0bffd17 	ldw	r2,-12(fp)
 c010530:	10800403 	ldbu	r2,16(r2)
 c010534:	10803fcc 	andi	r2,r2,255
 c010538:	1000191e 	bne	r2,zero,c0105a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 c01053c:	e0bffd17 	ldw	r2,-12(fp)
 c010540:	10800317 	ldw	r2,12(r2)
 c010544:	e0fffd17 	ldw	r3,-12(fp)
 c010548:	18c00517 	ldw	r3,20(r3)
 c01054c:	1809883a 	mov	r4,r3
 c010550:	103ee83a 	callr	r2
 c010554:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c010558:	e0bfff17 	ldw	r2,-4(fp)
 c01055c:	1000031e 	bne	r2,zero,c01056c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 c010560:	e13ffd17 	ldw	r4,-12(fp)
 c010564:	c01042c0 	call	c01042c <alt_alarm_stop>
 c010568:	00000d06 	br	c0105a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 c01056c:	e0bffd17 	ldw	r2,-12(fp)
 c010570:	10c00217 	ldw	r3,8(r2)
 c010574:	e0bfff17 	ldw	r2,-4(fp)
 c010578:	1887883a 	add	r3,r3,r2
 c01057c:	e0bffd17 	ldw	r2,-12(fp)
 c010580:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c010584:	e0bffd17 	ldw	r2,-12(fp)
 c010588:	10c00217 	ldw	r3,8(r2)
 c01058c:	d0a6f017 	ldw	r2,-25664(gp)
 c010590:	1880032e 	bgeu	r3,r2,c0105a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 c010594:	e0bffd17 	ldw	r2,-12(fp)
 c010598:	00c00044 	movi	r3,1
 c01059c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 c0105a0:	e0bffe17 	ldw	r2,-8(fp)
 c0105a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c0105a8:	e0fffd17 	ldw	r3,-12(fp)
 c0105ac:	d0a01104 	addi	r2,gp,-32700
 c0105b0:	18bfcf1e 	bne	r3,r2,c0104f0 <__alt_data_end+0xfc0104f0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 c0105b4:	0001883a 	nop
}
 c0105b8:	0001883a 	nop
 c0105bc:	e037883a 	mov	sp,fp
 c0105c0:	dfc00117 	ldw	ra,4(sp)
 c0105c4:	df000017 	ldw	fp,0(sp)
 c0105c8:	dec00204 	addi	sp,sp,8
 c0105cc:	f800283a 	ret

0c0105d0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 c0105d0:	defffd04 	addi	sp,sp,-12
 c0105d4:	dfc00215 	stw	ra,8(sp)
 c0105d8:	df000115 	stw	fp,4(sp)
 c0105dc:	df000104 	addi	fp,sp,4
 c0105e0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 c0105e4:	e13fff17 	ldw	r4,-4(fp)
 c0105e8:	c0116900 	call	c011690 <alt_busy_sleep>
}
 c0105ec:	e037883a 	mov	sp,fp
 c0105f0:	dfc00117 	ldw	ra,4(sp)
 c0105f4:	df000017 	ldw	fp,0(sp)
 c0105f8:	dec00204 	addi	sp,sp,8
 c0105fc:	f800283a 	ret

0c010600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c010600:	defffe04 	addi	sp,sp,-8
 c010604:	dfc00115 	stw	ra,4(sp)
 c010608:	df000015 	stw	fp,0(sp)
 c01060c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c010610:	d0a00f17 	ldw	r2,-32708(gp)
 c010614:	10000326 	beq	r2,zero,c010624 <alt_get_errno+0x24>
 c010618:	d0a00f17 	ldw	r2,-32708(gp)
 c01061c:	103ee83a 	callr	r2
 c010620:	00000106 	br	c010628 <alt_get_errno+0x28>
 c010624:	d0a6eb04 	addi	r2,gp,-25684
}
 c010628:	e037883a 	mov	sp,fp
 c01062c:	dfc00117 	ldw	ra,4(sp)
 c010630:	df000017 	ldw	fp,0(sp)
 c010634:	dec00204 	addi	sp,sp,8
 c010638:	f800283a 	ret

0c01063c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 c01063c:	defff904 	addi	sp,sp,-28
 c010640:	dfc00615 	stw	ra,24(sp)
 c010644:	df000515 	stw	fp,20(sp)
 c010648:	df000504 	addi	fp,sp,20
 c01064c:	e13ffd15 	stw	r4,-12(fp)
 c010650:	e17ffe15 	stw	r5,-8(fp)
 c010654:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c010658:	e0bffd17 	ldw	r2,-12(fp)
 c01065c:	10000816 	blt	r2,zero,c010680 <write+0x44>
 c010660:	01400304 	movi	r5,12
 c010664:	e13ffd17 	ldw	r4,-12(fp)
 c010668:	c002cc00 	call	c002cc0 <__mulsi3>
 c01066c:	1007883a 	mov	r3,r2
 c010670:	00830074 	movhi	r2,3073
 c010674:	108d4d04 	addi	r2,r2,13620
 c010678:	1885883a 	add	r2,r3,r2
 c01067c:	00000106 	br	c010684 <write+0x48>
 c010680:	0005883a 	mov	r2,zero
 c010684:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c010688:	e0bffb17 	ldw	r2,-20(fp)
 c01068c:	10002126 	beq	r2,zero,c010714 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 c010690:	e0bffb17 	ldw	r2,-20(fp)
 c010694:	10800217 	ldw	r2,8(r2)
 c010698:	108000cc 	andi	r2,r2,3
 c01069c:	10001826 	beq	r2,zero,c010700 <write+0xc4>
 c0106a0:	e0bffb17 	ldw	r2,-20(fp)
 c0106a4:	10800017 	ldw	r2,0(r2)
 c0106a8:	10800617 	ldw	r2,24(r2)
 c0106ac:	10001426 	beq	r2,zero,c010700 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 c0106b0:	e0bffb17 	ldw	r2,-20(fp)
 c0106b4:	10800017 	ldw	r2,0(r2)
 c0106b8:	10800617 	ldw	r2,24(r2)
 c0106bc:	e0ffff17 	ldw	r3,-4(fp)
 c0106c0:	180d883a 	mov	r6,r3
 c0106c4:	e17ffe17 	ldw	r5,-8(fp)
 c0106c8:	e13ffb17 	ldw	r4,-20(fp)
 c0106cc:	103ee83a 	callr	r2
 c0106d0:	e0bffc15 	stw	r2,-16(fp)
 c0106d4:	e0bffc17 	ldw	r2,-16(fp)
 c0106d8:	1000070e 	bge	r2,zero,c0106f8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 c0106dc:	c0106000 	call	c010600 <alt_get_errno>
 c0106e0:	1007883a 	mov	r3,r2
 c0106e4:	e0bffc17 	ldw	r2,-16(fp)
 c0106e8:	0085c83a 	sub	r2,zero,r2
 c0106ec:	18800015 	stw	r2,0(r3)
        return -1;
 c0106f0:	00bfffc4 	movi	r2,-1
 c0106f4:	00000c06 	br	c010728 <write+0xec>
      }
      return rval;
 c0106f8:	e0bffc17 	ldw	r2,-16(fp)
 c0106fc:	00000a06 	br	c010728 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 c010700:	c0106000 	call	c010600 <alt_get_errno>
 c010704:	1007883a 	mov	r3,r2
 c010708:	00800344 	movi	r2,13
 c01070c:	18800015 	stw	r2,0(r3)
 c010710:	00000406 	br	c010724 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 c010714:	c0106000 	call	c010600 <alt_get_errno>
 c010718:	1007883a 	mov	r3,r2
 c01071c:	00801444 	movi	r2,81
 c010720:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c010724:	00bfffc4 	movi	r2,-1
}
 c010728:	e037883a 	mov	sp,fp
 c01072c:	dfc00117 	ldw	ra,4(sp)
 c010730:	df000017 	ldw	fp,0(sp)
 c010734:	dec00204 	addi	sp,sp,8
 c010738:	f800283a 	ret

0c01073c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c01073c:	defffd04 	addi	sp,sp,-12
 c010740:	dfc00215 	stw	ra,8(sp)
 c010744:	df000115 	stw	fp,4(sp)
 c010748:	df000104 	addi	fp,sp,4
 c01074c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c010750:	d1600c04 	addi	r5,gp,-32720
 c010754:	e13fff17 	ldw	r4,-4(fp)
 c010758:	c0118440 	call	c011844 <alt_dev_llist_insert>
}
 c01075c:	e037883a 	mov	sp,fp
 c010760:	dfc00117 	ldw	ra,4(sp)
 c010764:	df000017 	ldw	fp,0(sp)
 c010768:	dec00204 	addi	sp,sp,8
 c01076c:	f800283a 	ret

0c010770 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c010770:	defffd04 	addi	sp,sp,-12
 c010774:	dfc00215 	stw	ra,8(sp)
 c010778:	df000115 	stw	fp,4(sp)
 c01077c:	df000104 	addi	fp,sp,4
 c010780:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 c010784:	c01204c0 	call	c01204c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c010788:	00800044 	movi	r2,1
 c01078c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c010790:	0001883a 	nop
 c010794:	e037883a 	mov	sp,fp
 c010798:	dfc00117 	ldw	ra,4(sp)
 c01079c:	df000017 	ldw	fp,0(sp)
 c0107a0:	dec00204 	addi	sp,sp,8
 c0107a4:	f800283a 	ret

0c0107a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c0107a8:	defffe04 	addi	sp,sp,-8
 c0107ac:	dfc00115 	stw	ra,4(sp)
 c0107b0:	df000015 	stw	fp,0(sp)
 c0107b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 c0107b8:	01c0fa04 	movi	r7,1000
 c0107bc:	01800084 	movi	r6,2
 c0107c0:	000b883a 	mov	r5,zero
 c0107c4:	01002004 	movi	r4,128
 c0107c8:	c0114e80 	call	c0114e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c0107cc:	01800044 	movi	r6,1
 c0107d0:	000b883a 	mov	r5,zero
 c0107d4:	01030074 	movhi	r4,3073
 c0107d8:	210db704 	addi	r4,r4,14044
 c0107dc:	c0109700 	call	c010970 <altera_avalon_jtag_uart_init>
 c0107e0:	01030074 	movhi	r4,3073
 c0107e4:	210dad04 	addi	r4,r4,14004
 c0107e8:	c01073c0 	call	c01073c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 c0107ec:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 c0107f0:	0001883a 	nop
}
 c0107f4:	0001883a 	nop
 c0107f8:	e037883a 	mov	sp,fp
 c0107fc:	dfc00117 	ldw	ra,4(sp)
 c010800:	df000017 	ldw	fp,0(sp)
 c010804:	dec00204 	addi	sp,sp,8
 c010808:	f800283a 	ret

0c01080c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c01080c:	defffa04 	addi	sp,sp,-24
 c010810:	dfc00515 	stw	ra,20(sp)
 c010814:	df000415 	stw	fp,16(sp)
 c010818:	df000404 	addi	fp,sp,16
 c01081c:	e13ffd15 	stw	r4,-12(fp)
 c010820:	e17ffe15 	stw	r5,-8(fp)
 c010824:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c010828:	e0bffd17 	ldw	r2,-12(fp)
 c01082c:	10800017 	ldw	r2,0(r2)
 c010830:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c010834:	e0bffc17 	ldw	r2,-16(fp)
 c010838:	10c00a04 	addi	r3,r2,40
 c01083c:	e0bffd17 	ldw	r2,-12(fp)
 c010840:	10800217 	ldw	r2,8(r2)
 c010844:	100f883a 	mov	r7,r2
 c010848:	e1bfff17 	ldw	r6,-4(fp)
 c01084c:	e17ffe17 	ldw	r5,-8(fp)
 c010850:	1809883a 	mov	r4,r3
 c010854:	c010e340 	call	c010e34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c010858:	e037883a 	mov	sp,fp
 c01085c:	dfc00117 	ldw	ra,4(sp)
 c010860:	df000017 	ldw	fp,0(sp)
 c010864:	dec00204 	addi	sp,sp,8
 c010868:	f800283a 	ret

0c01086c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c01086c:	defffa04 	addi	sp,sp,-24
 c010870:	dfc00515 	stw	ra,20(sp)
 c010874:	df000415 	stw	fp,16(sp)
 c010878:	df000404 	addi	fp,sp,16
 c01087c:	e13ffd15 	stw	r4,-12(fp)
 c010880:	e17ffe15 	stw	r5,-8(fp)
 c010884:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c010888:	e0bffd17 	ldw	r2,-12(fp)
 c01088c:	10800017 	ldw	r2,0(r2)
 c010890:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c010894:	e0bffc17 	ldw	r2,-16(fp)
 c010898:	10c00a04 	addi	r3,r2,40
 c01089c:	e0bffd17 	ldw	r2,-12(fp)
 c0108a0:	10800217 	ldw	r2,8(r2)
 c0108a4:	100f883a 	mov	r7,r2
 c0108a8:	e1bfff17 	ldw	r6,-4(fp)
 c0108ac:	e17ffe17 	ldw	r5,-8(fp)
 c0108b0:	1809883a 	mov	r4,r3
 c0108b4:	c0110500 	call	c011050 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c0108b8:	e037883a 	mov	sp,fp
 c0108bc:	dfc00117 	ldw	ra,4(sp)
 c0108c0:	df000017 	ldw	fp,0(sp)
 c0108c4:	dec00204 	addi	sp,sp,8
 c0108c8:	f800283a 	ret

0c0108cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c0108cc:	defffc04 	addi	sp,sp,-16
 c0108d0:	dfc00315 	stw	ra,12(sp)
 c0108d4:	df000215 	stw	fp,8(sp)
 c0108d8:	df000204 	addi	fp,sp,8
 c0108dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c0108e0:	e0bfff17 	ldw	r2,-4(fp)
 c0108e4:	10800017 	ldw	r2,0(r2)
 c0108e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c0108ec:	e0bffe17 	ldw	r2,-8(fp)
 c0108f0:	10c00a04 	addi	r3,r2,40
 c0108f4:	e0bfff17 	ldw	r2,-4(fp)
 c0108f8:	10800217 	ldw	r2,8(r2)
 c0108fc:	100b883a 	mov	r5,r2
 c010900:	1809883a 	mov	r4,r3
 c010904:	c010cdc0 	call	c010cdc <altera_avalon_jtag_uart_close>
}
 c010908:	e037883a 	mov	sp,fp
 c01090c:	dfc00117 	ldw	ra,4(sp)
 c010910:	df000017 	ldw	fp,0(sp)
 c010914:	dec00204 	addi	sp,sp,8
 c010918:	f800283a 	ret

0c01091c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c01091c:	defffa04 	addi	sp,sp,-24
 c010920:	dfc00515 	stw	ra,20(sp)
 c010924:	df000415 	stw	fp,16(sp)
 c010928:	df000404 	addi	fp,sp,16
 c01092c:	e13ffd15 	stw	r4,-12(fp)
 c010930:	e17ffe15 	stw	r5,-8(fp)
 c010934:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c010938:	e0bffd17 	ldw	r2,-12(fp)
 c01093c:	10800017 	ldw	r2,0(r2)
 c010940:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c010944:	e0bffc17 	ldw	r2,-16(fp)
 c010948:	10800a04 	addi	r2,r2,40
 c01094c:	e1bfff17 	ldw	r6,-4(fp)
 c010950:	e17ffe17 	ldw	r5,-8(fp)
 c010954:	1009883a 	mov	r4,r2
 c010958:	c010d440 	call	c010d44 <altera_avalon_jtag_uart_ioctl>
}
 c01095c:	e037883a 	mov	sp,fp
 c010960:	dfc00117 	ldw	ra,4(sp)
 c010964:	df000017 	ldw	fp,0(sp)
 c010968:	dec00204 	addi	sp,sp,8
 c01096c:	f800283a 	ret

0c010970 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c010970:	defffa04 	addi	sp,sp,-24
 c010974:	dfc00515 	stw	ra,20(sp)
 c010978:	df000415 	stw	fp,16(sp)
 c01097c:	df000404 	addi	fp,sp,16
 c010980:	e13ffd15 	stw	r4,-12(fp)
 c010984:	e17ffe15 	stw	r5,-8(fp)
 c010988:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c01098c:	e0bffd17 	ldw	r2,-12(fp)
 c010990:	00c00044 	movi	r3,1
 c010994:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c010998:	e0bffd17 	ldw	r2,-12(fp)
 c01099c:	10800017 	ldw	r2,0(r2)
 c0109a0:	10800104 	addi	r2,r2,4
 c0109a4:	1007883a 	mov	r3,r2
 c0109a8:	e0bffd17 	ldw	r2,-12(fp)
 c0109ac:	10800817 	ldw	r2,32(r2)
 c0109b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c0109b4:	e0bffe17 	ldw	r2,-8(fp)
 c0109b8:	e0ffff17 	ldw	r3,-4(fp)
 c0109bc:	d8000015 	stw	zero,0(sp)
 c0109c0:	e1fffd17 	ldw	r7,-12(fp)
 c0109c4:	01830074 	movhi	r6,3073
 c0109c8:	31828c04 	addi	r6,r6,2608
 c0109cc:	180b883a 	mov	r5,r3
 c0109d0:	1009883a 	mov	r4,r2
 c0109d4:	c0119c80 	call	c0119c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c0109d8:	e0bffd17 	ldw	r2,-12(fp)
 c0109dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c0109e0:	e0bffd17 	ldw	r2,-12(fp)
 c0109e4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0109e8:	d0e6ef17 	ldw	r3,-25668(gp)
 c0109ec:	e1fffd17 	ldw	r7,-12(fp)
 c0109f0:	01830074 	movhi	r6,3073
 c0109f4:	31830f04 	addi	r6,r6,3132
 c0109f8:	180b883a 	mov	r5,r3
 c0109fc:	1009883a 	mov	r4,r2
 c010a00:	c0115640 	call	c011564 <alt_alarm_start>
 c010a04:	1000040e 	bge	r2,zero,c010a18 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c010a08:	e0fffd17 	ldw	r3,-12(fp)
 c010a0c:	00a00034 	movhi	r2,32768
 c010a10:	10bfffc4 	addi	r2,r2,-1
 c010a14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c010a18:	0001883a 	nop
 c010a1c:	e037883a 	mov	sp,fp
 c010a20:	dfc00117 	ldw	ra,4(sp)
 c010a24:	df000017 	ldw	fp,0(sp)
 c010a28:	dec00204 	addi	sp,sp,8
 c010a2c:	f800283a 	ret

0c010a30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c010a30:	defff804 	addi	sp,sp,-32
 c010a34:	df000715 	stw	fp,28(sp)
 c010a38:	df000704 	addi	fp,sp,28
 c010a3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c010a40:	e0bfff17 	ldw	r2,-4(fp)
 c010a44:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 c010a48:	e0bffb17 	ldw	r2,-20(fp)
 c010a4c:	10800017 	ldw	r2,0(r2)
 c010a50:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c010a54:	e0bffc17 	ldw	r2,-16(fp)
 c010a58:	10800104 	addi	r2,r2,4
 c010a5c:	10800037 	ldwio	r2,0(r2)
 c010a60:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c010a64:	e0bffd17 	ldw	r2,-12(fp)
 c010a68:	1080c00c 	andi	r2,r2,768
 c010a6c:	10006d26 	beq	r2,zero,c010c24 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c010a70:	e0bffd17 	ldw	r2,-12(fp)
 c010a74:	1080400c 	andi	r2,r2,256
 c010a78:	10003526 	beq	r2,zero,c010b50 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c010a7c:	00800074 	movhi	r2,1
 c010a80:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c010a84:	e0bffb17 	ldw	r2,-20(fp)
 c010a88:	10800a17 	ldw	r2,40(r2)
 c010a8c:	10800044 	addi	r2,r2,1
 c010a90:	1081ffcc 	andi	r2,r2,2047
 c010a94:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 c010a98:	e0bffb17 	ldw	r2,-20(fp)
 c010a9c:	10c00b17 	ldw	r3,44(r2)
 c010aa0:	e0bffe17 	ldw	r2,-8(fp)
 c010aa4:	18801526 	beq	r3,r2,c010afc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c010aa8:	e0bffc17 	ldw	r2,-16(fp)
 c010aac:	10800037 	ldwio	r2,0(r2)
 c010ab0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c010ab4:	e0bff917 	ldw	r2,-28(fp)
 c010ab8:	10a0000c 	andi	r2,r2,32768
 c010abc:	10001126 	beq	r2,zero,c010b04 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c010ac0:	e0bffb17 	ldw	r2,-20(fp)
 c010ac4:	10800a17 	ldw	r2,40(r2)
 c010ac8:	e0fff917 	ldw	r3,-28(fp)
 c010acc:	1809883a 	mov	r4,r3
 c010ad0:	e0fffb17 	ldw	r3,-20(fp)
 c010ad4:	1885883a 	add	r2,r3,r2
 c010ad8:	10800e04 	addi	r2,r2,56
 c010adc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c010ae0:	e0bffb17 	ldw	r2,-20(fp)
 c010ae4:	10800a17 	ldw	r2,40(r2)
 c010ae8:	10800044 	addi	r2,r2,1
 c010aec:	10c1ffcc 	andi	r3,r2,2047
 c010af0:	e0bffb17 	ldw	r2,-20(fp)
 c010af4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c010af8:	003fe206 	br	c010a84 <__alt_data_end+0xfc010a84>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 c010afc:	0001883a 	nop
 c010b00:	00000106 	br	c010b08 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 c010b04:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c010b08:	e0bff917 	ldw	r2,-28(fp)
 c010b0c:	10bfffec 	andhi	r2,r2,65535
 c010b10:	10000f26 	beq	r2,zero,c010b50 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c010b14:	e0bffb17 	ldw	r2,-20(fp)
 c010b18:	10c00817 	ldw	r3,32(r2)
 c010b1c:	00bfff84 	movi	r2,-2
 c010b20:	1886703a 	and	r3,r3,r2
 c010b24:	e0bffb17 	ldw	r2,-20(fp)
 c010b28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c010b2c:	e0bffc17 	ldw	r2,-16(fp)
 c010b30:	10800104 	addi	r2,r2,4
 c010b34:	1007883a 	mov	r3,r2
 c010b38:	e0bffb17 	ldw	r2,-20(fp)
 c010b3c:	10800817 	ldw	r2,32(r2)
 c010b40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c010b44:	e0bffc17 	ldw	r2,-16(fp)
 c010b48:	10800104 	addi	r2,r2,4
 c010b4c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c010b50:	e0bffd17 	ldw	r2,-12(fp)
 c010b54:	1080800c 	andi	r2,r2,512
 c010b58:	103fbe26 	beq	r2,zero,c010a54 <__alt_data_end+0xfc010a54>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c010b5c:	e0bffd17 	ldw	r2,-12(fp)
 c010b60:	1004d43a 	srli	r2,r2,16
 c010b64:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c010b68:	00001406 	br	c010bbc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c010b6c:	e0bffc17 	ldw	r2,-16(fp)
 c010b70:	e0fffb17 	ldw	r3,-20(fp)
 c010b74:	18c00d17 	ldw	r3,52(r3)
 c010b78:	e13ffb17 	ldw	r4,-20(fp)
 c010b7c:	20c7883a 	add	r3,r4,r3
 c010b80:	18c20e04 	addi	r3,r3,2104
 c010b84:	18c00003 	ldbu	r3,0(r3)
 c010b88:	18c03fcc 	andi	r3,r3,255
 c010b8c:	18c0201c 	xori	r3,r3,128
 c010b90:	18ffe004 	addi	r3,r3,-128
 c010b94:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c010b98:	e0bffb17 	ldw	r2,-20(fp)
 c010b9c:	10800d17 	ldw	r2,52(r2)
 c010ba0:	10800044 	addi	r2,r2,1
 c010ba4:	10c1ffcc 	andi	r3,r2,2047
 c010ba8:	e0bffb17 	ldw	r2,-20(fp)
 c010bac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c010bb0:	e0bffa17 	ldw	r2,-24(fp)
 c010bb4:	10bfffc4 	addi	r2,r2,-1
 c010bb8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c010bbc:	e0bffa17 	ldw	r2,-24(fp)
 c010bc0:	10000526 	beq	r2,zero,c010bd8 <altera_avalon_jtag_uart_irq+0x1a8>
 c010bc4:	e0bffb17 	ldw	r2,-20(fp)
 c010bc8:	10c00d17 	ldw	r3,52(r2)
 c010bcc:	e0bffb17 	ldw	r2,-20(fp)
 c010bd0:	10800c17 	ldw	r2,48(r2)
 c010bd4:	18bfe51e 	bne	r3,r2,c010b6c <__alt_data_end+0xfc010b6c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c010bd8:	e0bffa17 	ldw	r2,-24(fp)
 c010bdc:	103f9d26 	beq	r2,zero,c010a54 <__alt_data_end+0xfc010a54>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c010be0:	e0bffb17 	ldw	r2,-20(fp)
 c010be4:	10c00817 	ldw	r3,32(r2)
 c010be8:	00bfff44 	movi	r2,-3
 c010bec:	1886703a 	and	r3,r3,r2
 c010bf0:	e0bffb17 	ldw	r2,-20(fp)
 c010bf4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c010bf8:	e0bffb17 	ldw	r2,-20(fp)
 c010bfc:	10800017 	ldw	r2,0(r2)
 c010c00:	10800104 	addi	r2,r2,4
 c010c04:	1007883a 	mov	r3,r2
 c010c08:	e0bffb17 	ldw	r2,-20(fp)
 c010c0c:	10800817 	ldw	r2,32(r2)
 c010c10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c010c14:	e0bffc17 	ldw	r2,-16(fp)
 c010c18:	10800104 	addi	r2,r2,4
 c010c1c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c010c20:	003f8c06 	br	c010a54 <__alt_data_end+0xfc010a54>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 c010c24:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 c010c28:	0001883a 	nop
 c010c2c:	e037883a 	mov	sp,fp
 c010c30:	df000017 	ldw	fp,0(sp)
 c010c34:	dec00104 	addi	sp,sp,4
 c010c38:	f800283a 	ret

0c010c3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c010c3c:	defff804 	addi	sp,sp,-32
 c010c40:	df000715 	stw	fp,28(sp)
 c010c44:	df000704 	addi	fp,sp,28
 c010c48:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c010c4c:	e0bffb17 	ldw	r2,-20(fp)
 c010c50:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c010c54:	e0bff917 	ldw	r2,-28(fp)
 c010c58:	10800017 	ldw	r2,0(r2)
 c010c5c:	10800104 	addi	r2,r2,4
 c010c60:	10800037 	ldwio	r2,0(r2)
 c010c64:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c010c68:	e0bffa17 	ldw	r2,-24(fp)
 c010c6c:	1081000c 	andi	r2,r2,1024
 c010c70:	10000b26 	beq	r2,zero,c010ca0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c010c74:	e0bff917 	ldw	r2,-28(fp)
 c010c78:	10800017 	ldw	r2,0(r2)
 c010c7c:	10800104 	addi	r2,r2,4
 c010c80:	1007883a 	mov	r3,r2
 c010c84:	e0bff917 	ldw	r2,-28(fp)
 c010c88:	10800817 	ldw	r2,32(r2)
 c010c8c:	10810014 	ori	r2,r2,1024
 c010c90:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 c010c94:	e0bff917 	ldw	r2,-28(fp)
 c010c98:	10000915 	stw	zero,36(r2)
 c010c9c:	00000a06 	br	c010cc8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c010ca0:	e0bff917 	ldw	r2,-28(fp)
 c010ca4:	10c00917 	ldw	r3,36(r2)
 c010ca8:	00a00034 	movhi	r2,32768
 c010cac:	10bfff04 	addi	r2,r2,-4
 c010cb0:	10c00536 	bltu	r2,r3,c010cc8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 c010cb4:	e0bff917 	ldw	r2,-28(fp)
 c010cb8:	10800917 	ldw	r2,36(r2)
 c010cbc:	10c00044 	addi	r3,r2,1
 c010cc0:	e0bff917 	ldw	r2,-28(fp)
 c010cc4:	10c00915 	stw	r3,36(r2)
 c010cc8:	d0a6ef17 	ldw	r2,-25668(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c010ccc:	e037883a 	mov	sp,fp
 c010cd0:	df000017 	ldw	fp,0(sp)
 c010cd4:	dec00104 	addi	sp,sp,4
 c010cd8:	f800283a 	ret

0c010cdc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c010cdc:	defffd04 	addi	sp,sp,-12
 c010ce0:	df000215 	stw	fp,8(sp)
 c010ce4:	df000204 	addi	fp,sp,8
 c010ce8:	e13ffe15 	stw	r4,-8(fp)
 c010cec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c010cf0:	00000506 	br	c010d08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 c010cf4:	e0bfff17 	ldw	r2,-4(fp)
 c010cf8:	1090000c 	andi	r2,r2,16384
 c010cfc:	10000226 	beq	r2,zero,c010d08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 c010d00:	00bffd44 	movi	r2,-11
 c010d04:	00000b06 	br	c010d34 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c010d08:	e0bffe17 	ldw	r2,-8(fp)
 c010d0c:	10c00d17 	ldw	r3,52(r2)
 c010d10:	e0bffe17 	ldw	r2,-8(fp)
 c010d14:	10800c17 	ldw	r2,48(r2)
 c010d18:	18800526 	beq	r3,r2,c010d30 <altera_avalon_jtag_uart_close+0x54>
 c010d1c:	e0bffe17 	ldw	r2,-8(fp)
 c010d20:	10c00917 	ldw	r3,36(r2)
 c010d24:	e0bffe17 	ldw	r2,-8(fp)
 c010d28:	10800117 	ldw	r2,4(r2)
 c010d2c:	18bff136 	bltu	r3,r2,c010cf4 <__alt_data_end+0xfc010cf4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c010d30:	0005883a 	mov	r2,zero
}
 c010d34:	e037883a 	mov	sp,fp
 c010d38:	df000017 	ldw	fp,0(sp)
 c010d3c:	dec00104 	addi	sp,sp,4
 c010d40:	f800283a 	ret

0c010d44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c010d44:	defffa04 	addi	sp,sp,-24
 c010d48:	df000515 	stw	fp,20(sp)
 c010d4c:	df000504 	addi	fp,sp,20
 c010d50:	e13ffd15 	stw	r4,-12(fp)
 c010d54:	e17ffe15 	stw	r5,-8(fp)
 c010d58:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 c010d5c:	00bff9c4 	movi	r2,-25
 c010d60:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 c010d64:	e0bffe17 	ldw	r2,-8(fp)
 c010d68:	10da8060 	cmpeqi	r3,r2,27137
 c010d6c:	1800031e 	bne	r3,zero,c010d7c <altera_avalon_jtag_uart_ioctl+0x38>
 c010d70:	109a80a0 	cmpeqi	r2,r2,27138
 c010d74:	1000181e 	bne	r2,zero,c010dd8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 c010d78:	00002906 	br	c010e20 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c010d7c:	e0bffd17 	ldw	r2,-12(fp)
 c010d80:	10c00117 	ldw	r3,4(r2)
 c010d84:	00a00034 	movhi	r2,32768
 c010d88:	10bfffc4 	addi	r2,r2,-1
 c010d8c:	18802126 	beq	r3,r2,c010e14 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 c010d90:	e0bfff17 	ldw	r2,-4(fp)
 c010d94:	10800017 	ldw	r2,0(r2)
 c010d98:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c010d9c:	e0bffc17 	ldw	r2,-16(fp)
 c010da0:	10800090 	cmplti	r2,r2,2
 c010da4:	1000061e 	bne	r2,zero,c010dc0 <altera_avalon_jtag_uart_ioctl+0x7c>
 c010da8:	e0fffc17 	ldw	r3,-16(fp)
 c010dac:	00a00034 	movhi	r2,32768
 c010db0:	10bfffc4 	addi	r2,r2,-1
 c010db4:	18800226 	beq	r3,r2,c010dc0 <altera_avalon_jtag_uart_ioctl+0x7c>
 c010db8:	e0bffc17 	ldw	r2,-16(fp)
 c010dbc:	00000206 	br	c010dc8 <altera_avalon_jtag_uart_ioctl+0x84>
 c010dc0:	00a00034 	movhi	r2,32768
 c010dc4:	10bfff84 	addi	r2,r2,-2
 c010dc8:	e0fffd17 	ldw	r3,-12(fp)
 c010dcc:	18800115 	stw	r2,4(r3)
      rc = 0;
 c010dd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c010dd4:	00000f06 	br	c010e14 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c010dd8:	e0bffd17 	ldw	r2,-12(fp)
 c010ddc:	10c00117 	ldw	r3,4(r2)
 c010de0:	00a00034 	movhi	r2,32768
 c010de4:	10bfffc4 	addi	r2,r2,-1
 c010de8:	18800c26 	beq	r3,r2,c010e1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c010dec:	e0bffd17 	ldw	r2,-12(fp)
 c010df0:	10c00917 	ldw	r3,36(r2)
 c010df4:	e0bffd17 	ldw	r2,-12(fp)
 c010df8:	10800117 	ldw	r2,4(r2)
 c010dfc:	1885803a 	cmpltu	r2,r3,r2
 c010e00:	10c03fcc 	andi	r3,r2,255
 c010e04:	e0bfff17 	ldw	r2,-4(fp)
 c010e08:	10c00015 	stw	r3,0(r2)
      rc = 0;
 c010e0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c010e10:	00000206 	br	c010e1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 c010e14:	0001883a 	nop
 c010e18:	00000106 	br	c010e20 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 c010e1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 c010e20:	e0bffb17 	ldw	r2,-20(fp)
}
 c010e24:	e037883a 	mov	sp,fp
 c010e28:	df000017 	ldw	fp,0(sp)
 c010e2c:	dec00104 	addi	sp,sp,4
 c010e30:	f800283a 	ret

0c010e34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c010e34:	defff304 	addi	sp,sp,-52
 c010e38:	dfc00c15 	stw	ra,48(sp)
 c010e3c:	df000b15 	stw	fp,44(sp)
 c010e40:	df000b04 	addi	fp,sp,44
 c010e44:	e13ffc15 	stw	r4,-16(fp)
 c010e48:	e17ffd15 	stw	r5,-12(fp)
 c010e4c:	e1bffe15 	stw	r6,-8(fp)
 c010e50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 c010e54:	e0bffd17 	ldw	r2,-12(fp)
 c010e58:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c010e5c:	00004706 	br	c010f7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c010e60:	e0bffc17 	ldw	r2,-16(fp)
 c010e64:	10800a17 	ldw	r2,40(r2)
 c010e68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c010e6c:	e0bffc17 	ldw	r2,-16(fp)
 c010e70:	10800b17 	ldw	r2,44(r2)
 c010e74:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 c010e78:	e0fff717 	ldw	r3,-36(fp)
 c010e7c:	e0bff817 	ldw	r2,-32(fp)
 c010e80:	18800536 	bltu	r3,r2,c010e98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c010e84:	e0fff717 	ldw	r3,-36(fp)
 c010e88:	e0bff817 	ldw	r2,-32(fp)
 c010e8c:	1885c83a 	sub	r2,r3,r2
 c010e90:	e0bff615 	stw	r2,-40(fp)
 c010e94:	00000406 	br	c010ea8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c010e98:	00c20004 	movi	r3,2048
 c010e9c:	e0bff817 	ldw	r2,-32(fp)
 c010ea0:	1885c83a 	sub	r2,r3,r2
 c010ea4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c010ea8:	e0bff617 	ldw	r2,-40(fp)
 c010eac:	10001e26 	beq	r2,zero,c010f28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 c010eb0:	e0fffe17 	ldw	r3,-8(fp)
 c010eb4:	e0bff617 	ldw	r2,-40(fp)
 c010eb8:	1880022e 	bgeu	r3,r2,c010ec4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 c010ebc:	e0bffe17 	ldw	r2,-8(fp)
 c010ec0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c010ec4:	e0bffc17 	ldw	r2,-16(fp)
 c010ec8:	10c00e04 	addi	r3,r2,56
 c010ecc:	e0bff817 	ldw	r2,-32(fp)
 c010ed0:	1885883a 	add	r2,r3,r2
 c010ed4:	e1bff617 	ldw	r6,-40(fp)
 c010ed8:	100b883a 	mov	r5,r2
 c010edc:	e13ff517 	ldw	r4,-44(fp)
 c010ee0:	c0088fc0 	call	c0088fc <memcpy>
      ptr   += n;
 c010ee4:	e0fff517 	ldw	r3,-44(fp)
 c010ee8:	e0bff617 	ldw	r2,-40(fp)
 c010eec:	1885883a 	add	r2,r3,r2
 c010ef0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 c010ef4:	e0fffe17 	ldw	r3,-8(fp)
 c010ef8:	e0bff617 	ldw	r2,-40(fp)
 c010efc:	1885c83a 	sub	r2,r3,r2
 c010f00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c010f04:	e0fff817 	ldw	r3,-32(fp)
 c010f08:	e0bff617 	ldw	r2,-40(fp)
 c010f0c:	1885883a 	add	r2,r3,r2
 c010f10:	10c1ffcc 	andi	r3,r2,2047
 c010f14:	e0bffc17 	ldw	r2,-16(fp)
 c010f18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c010f1c:	e0bffe17 	ldw	r2,-8(fp)
 c010f20:	00bfcf16 	blt	zero,r2,c010e60 <__alt_data_end+0xfc010e60>
 c010f24:	00000106 	br	c010f2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 c010f28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 c010f2c:	e0fff517 	ldw	r3,-44(fp)
 c010f30:	e0bffd17 	ldw	r2,-12(fp)
 c010f34:	1880141e 	bne	r3,r2,c010f88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c010f38:	e0bfff17 	ldw	r2,-4(fp)
 c010f3c:	1090000c 	andi	r2,r2,16384
 c010f40:	1000131e 	bne	r2,zero,c010f90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c010f44:	0001883a 	nop
 c010f48:	e0bffc17 	ldw	r2,-16(fp)
 c010f4c:	10c00a17 	ldw	r3,40(r2)
 c010f50:	e0bff717 	ldw	r2,-36(fp)
 c010f54:	1880051e 	bne	r3,r2,c010f6c <altera_avalon_jtag_uart_read+0x138>
 c010f58:	e0bffc17 	ldw	r2,-16(fp)
 c010f5c:	10c00917 	ldw	r3,36(r2)
 c010f60:	e0bffc17 	ldw	r2,-16(fp)
 c010f64:	10800117 	ldw	r2,4(r2)
 c010f68:	18bff736 	bltu	r3,r2,c010f48 <__alt_data_end+0xfc010f48>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c010f6c:	e0bffc17 	ldw	r2,-16(fp)
 c010f70:	10c00a17 	ldw	r3,40(r2)
 c010f74:	e0bff717 	ldw	r2,-36(fp)
 c010f78:	18800726 	beq	r3,r2,c010f98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c010f7c:	e0bffe17 	ldw	r2,-8(fp)
 c010f80:	00bfb716 	blt	zero,r2,c010e60 <__alt_data_end+0xfc010e60>
 c010f84:	00000506 	br	c010f9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 c010f88:	0001883a 	nop
 c010f8c:	00000306 	br	c010f9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 c010f90:	0001883a 	nop
 c010f94:	00000106 	br	c010f9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 c010f98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c010f9c:	e0fff517 	ldw	r3,-44(fp)
 c010fa0:	e0bffd17 	ldw	r2,-12(fp)
 c010fa4:	18801826 	beq	r3,r2,c011008 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c010fa8:	0005303a 	rdctl	r2,status
 c010fac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c010fb0:	e0fffb17 	ldw	r3,-20(fp)
 c010fb4:	00bfff84 	movi	r2,-2
 c010fb8:	1884703a 	and	r2,r3,r2
 c010fbc:	1001703a 	wrctl	status,r2
  
  return context;
 c010fc0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c010fc4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c010fc8:	e0bffc17 	ldw	r2,-16(fp)
 c010fcc:	10800817 	ldw	r2,32(r2)
 c010fd0:	10c00054 	ori	r3,r2,1
 c010fd4:	e0bffc17 	ldw	r2,-16(fp)
 c010fd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c010fdc:	e0bffc17 	ldw	r2,-16(fp)
 c010fe0:	10800017 	ldw	r2,0(r2)
 c010fe4:	10800104 	addi	r2,r2,4
 c010fe8:	1007883a 	mov	r3,r2
 c010fec:	e0bffc17 	ldw	r2,-16(fp)
 c010ff0:	10800817 	ldw	r2,32(r2)
 c010ff4:	18800035 	stwio	r2,0(r3)
 c010ff8:	e0bffa17 	ldw	r2,-24(fp)
 c010ffc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c011000:	e0bff917 	ldw	r2,-28(fp)
 c011004:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c011008:	e0fff517 	ldw	r3,-44(fp)
 c01100c:	e0bffd17 	ldw	r2,-12(fp)
 c011010:	18800426 	beq	r3,r2,c011024 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 c011014:	e0fff517 	ldw	r3,-44(fp)
 c011018:	e0bffd17 	ldw	r2,-12(fp)
 c01101c:	1885c83a 	sub	r2,r3,r2
 c011020:	00000606 	br	c01103c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 c011024:	e0bfff17 	ldw	r2,-4(fp)
 c011028:	1090000c 	andi	r2,r2,16384
 c01102c:	10000226 	beq	r2,zero,c011038 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c011030:	00bffd44 	movi	r2,-11
 c011034:	00000106 	br	c01103c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 c011038:	00bffec4 	movi	r2,-5
}
 c01103c:	e037883a 	mov	sp,fp
 c011040:	dfc00117 	ldw	ra,4(sp)
 c011044:	df000017 	ldw	fp,0(sp)
 c011048:	dec00204 	addi	sp,sp,8
 c01104c:	f800283a 	ret

0c011050 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c011050:	defff304 	addi	sp,sp,-52
 c011054:	dfc00c15 	stw	ra,48(sp)
 c011058:	df000b15 	stw	fp,44(sp)
 c01105c:	df000b04 	addi	fp,sp,44
 c011060:	e13ffc15 	stw	r4,-16(fp)
 c011064:	e17ffd15 	stw	r5,-12(fp)
 c011068:	e1bffe15 	stw	r6,-8(fp)
 c01106c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c011070:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c011074:	e0bffd17 	ldw	r2,-12(fp)
 c011078:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c01107c:	00003706 	br	c01115c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c011080:	e0bffc17 	ldw	r2,-16(fp)
 c011084:	10800c17 	ldw	r2,48(r2)
 c011088:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 c01108c:	e0bffc17 	ldw	r2,-16(fp)
 c011090:	10800d17 	ldw	r2,52(r2)
 c011094:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 c011098:	e0fff917 	ldw	r3,-28(fp)
 c01109c:	e0bff517 	ldw	r2,-44(fp)
 c0110a0:	1880062e 	bgeu	r3,r2,c0110bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c0110a4:	e0fff517 	ldw	r3,-44(fp)
 c0110a8:	e0bff917 	ldw	r2,-28(fp)
 c0110ac:	1885c83a 	sub	r2,r3,r2
 c0110b0:	10bfffc4 	addi	r2,r2,-1
 c0110b4:	e0bff615 	stw	r2,-40(fp)
 c0110b8:	00000b06 	br	c0110e8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 c0110bc:	e0bff517 	ldw	r2,-44(fp)
 c0110c0:	10000526 	beq	r2,zero,c0110d8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c0110c4:	00c20004 	movi	r3,2048
 c0110c8:	e0bff917 	ldw	r2,-28(fp)
 c0110cc:	1885c83a 	sub	r2,r3,r2
 c0110d0:	e0bff615 	stw	r2,-40(fp)
 c0110d4:	00000406 	br	c0110e8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c0110d8:	00c1ffc4 	movi	r3,2047
 c0110dc:	e0bff917 	ldw	r2,-28(fp)
 c0110e0:	1885c83a 	sub	r2,r3,r2
 c0110e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c0110e8:	e0bff617 	ldw	r2,-40(fp)
 c0110ec:	10001e26 	beq	r2,zero,c011168 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 c0110f0:	e0fffe17 	ldw	r3,-8(fp)
 c0110f4:	e0bff617 	ldw	r2,-40(fp)
 c0110f8:	1880022e 	bgeu	r3,r2,c011104 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 c0110fc:	e0bffe17 	ldw	r2,-8(fp)
 c011100:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c011104:	e0bffc17 	ldw	r2,-16(fp)
 c011108:	10c20e04 	addi	r3,r2,2104
 c01110c:	e0bff917 	ldw	r2,-28(fp)
 c011110:	1885883a 	add	r2,r3,r2
 c011114:	e1bff617 	ldw	r6,-40(fp)
 c011118:	e17ffd17 	ldw	r5,-12(fp)
 c01111c:	1009883a 	mov	r4,r2
 c011120:	c0088fc0 	call	c0088fc <memcpy>
      ptr   += n;
 c011124:	e0fffd17 	ldw	r3,-12(fp)
 c011128:	e0bff617 	ldw	r2,-40(fp)
 c01112c:	1885883a 	add	r2,r3,r2
 c011130:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 c011134:	e0fffe17 	ldw	r3,-8(fp)
 c011138:	e0bff617 	ldw	r2,-40(fp)
 c01113c:	1885c83a 	sub	r2,r3,r2
 c011140:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c011144:	e0fff917 	ldw	r3,-28(fp)
 c011148:	e0bff617 	ldw	r2,-40(fp)
 c01114c:	1885883a 	add	r2,r3,r2
 c011150:	10c1ffcc 	andi	r3,r2,2047
 c011154:	e0bffc17 	ldw	r2,-16(fp)
 c011158:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c01115c:	e0bffe17 	ldw	r2,-8(fp)
 c011160:	00bfc716 	blt	zero,r2,c011080 <__alt_data_end+0xfc011080>
 c011164:	00000106 	br	c01116c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 c011168:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c01116c:	0005303a 	rdctl	r2,status
 c011170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c011174:	e0fffb17 	ldw	r3,-20(fp)
 c011178:	00bfff84 	movi	r2,-2
 c01117c:	1884703a 	and	r2,r3,r2
 c011180:	1001703a 	wrctl	status,r2
  
  return context;
 c011184:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c011188:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c01118c:	e0bffc17 	ldw	r2,-16(fp)
 c011190:	10800817 	ldw	r2,32(r2)
 c011194:	10c00094 	ori	r3,r2,2
 c011198:	e0bffc17 	ldw	r2,-16(fp)
 c01119c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c0111a0:	e0bffc17 	ldw	r2,-16(fp)
 c0111a4:	10800017 	ldw	r2,0(r2)
 c0111a8:	10800104 	addi	r2,r2,4
 c0111ac:	1007883a 	mov	r3,r2
 c0111b0:	e0bffc17 	ldw	r2,-16(fp)
 c0111b4:	10800817 	ldw	r2,32(r2)
 c0111b8:	18800035 	stwio	r2,0(r3)
 c0111bc:	e0bffa17 	ldw	r2,-24(fp)
 c0111c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0111c4:	e0bff817 	ldw	r2,-32(fp)
 c0111c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c0111cc:	e0bffe17 	ldw	r2,-8(fp)
 c0111d0:	0080100e 	bge	zero,r2,c011214 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 c0111d4:	e0bfff17 	ldw	r2,-4(fp)
 c0111d8:	1090000c 	andi	r2,r2,16384
 c0111dc:	1000101e 	bne	r2,zero,c011220 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c0111e0:	0001883a 	nop
 c0111e4:	e0bffc17 	ldw	r2,-16(fp)
 c0111e8:	10c00d17 	ldw	r3,52(r2)
 c0111ec:	e0bff517 	ldw	r2,-44(fp)
 c0111f0:	1880051e 	bne	r3,r2,c011208 <altera_avalon_jtag_uart_write+0x1b8>
 c0111f4:	e0bffc17 	ldw	r2,-16(fp)
 c0111f8:	10c00917 	ldw	r3,36(r2)
 c0111fc:	e0bffc17 	ldw	r2,-16(fp)
 c011200:	10800117 	ldw	r2,4(r2)
 c011204:	18bff736 	bltu	r3,r2,c0111e4 <__alt_data_end+0xfc0111e4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 c011208:	e0bffc17 	ldw	r2,-16(fp)
 c01120c:	10800917 	ldw	r2,36(r2)
 c011210:	1000051e 	bne	r2,zero,c011228 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 c011214:	e0bffe17 	ldw	r2,-8(fp)
 c011218:	00bfd016 	blt	zero,r2,c01115c <__alt_data_end+0xfc01115c>
 c01121c:	00000306 	br	c01122c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 c011220:	0001883a 	nop
 c011224:	00000106 	br	c01122c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 c011228:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c01122c:	e0fffd17 	ldw	r3,-12(fp)
 c011230:	e0bff717 	ldw	r2,-36(fp)
 c011234:	18800426 	beq	r3,r2,c011248 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 c011238:	e0fffd17 	ldw	r3,-12(fp)
 c01123c:	e0bff717 	ldw	r2,-36(fp)
 c011240:	1885c83a 	sub	r2,r3,r2
 c011244:	00000606 	br	c011260 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 c011248:	e0bfff17 	ldw	r2,-4(fp)
 c01124c:	1090000c 	andi	r2,r2,16384
 c011250:	10000226 	beq	r2,zero,c01125c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 c011254:	00bffd44 	movi	r2,-11
 c011258:	00000106 	br	c011260 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c01125c:	00bffec4 	movi	r2,-5
}
 c011260:	e037883a 	mov	sp,fp
 c011264:	dfc00117 	ldw	ra,4(sp)
 c011268:	df000017 	ldw	fp,0(sp)
 c01126c:	dec00204 	addi	sp,sp,8
 c011270:	f800283a 	ret

0c011274 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 c011274:	defff404 	addi	sp,sp,-48
 c011278:	df000b15 	stw	fp,44(sp)
 c01127c:	df000b04 	addi	fp,sp,44
 c011280:	e13ffc15 	stw	r4,-16(fp)
 c011284:	e17ffd15 	stw	r5,-12(fp)
 c011288:	e1bffe15 	stw	r6,-8(fp)
 c01128c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 c011290:	e0ffff17 	ldw	r3,-4(fp)
 c011294:	e0bffe17 	ldw	r2,-8(fp)
 c011298:	1885883a 	add	r2,r3,r2
 c01129c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 c0112a0:	e0c00217 	ldw	r3,8(fp)
 c0112a4:	e0800117 	ldw	r2,4(fp)
 c0112a8:	1885883a 	add	r2,r3,r2
 c0112ac:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 c0112b0:	e0800117 	ldw	r2,4(fp)
 c0112b4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 c0112b8:	e0bffe17 	ldw	r2,-8(fp)
 c0112bc:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 c0112c0:	00800044 	movi	r2,1
 c0112c4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 c0112c8:	e0bffc17 	ldw	r2,-16(fp)
 c0112cc:	10800504 	addi	r2,r2,20
 c0112d0:	1009883a 	mov	r4,r2
 c0112d4:	00c00044 	movi	r3,1
 c0112d8:	e0bffd17 	ldw	r2,-12(fp)
 c0112dc:	1884983a 	sll	r2,r3,r2
 c0112e0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 c0112e4:	e0800317 	ldw	r2,12(fp)
 c0112e8:	1080008c 	andi	r2,r2,2
 c0112ec:	1000051e 	bne	r2,zero,c011304 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 c0112f0:	e0bffc17 	ldw	r2,-16(fp)
 c0112f4:	10800304 	addi	r2,r2,12
 c0112f8:	1007883a 	mov	r3,r2
 c0112fc:	00810004 	movi	r2,1024
 c011300:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 c011304:	e0bffc17 	ldw	r2,-16(fp)
 c011308:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 c01130c:	e0bffc17 	ldw	r2,-16(fp)
 c011310:	10800204 	addi	r2,r2,8
 c011314:	10800037 	ldwio	r2,0(r2)
 c011318:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c01131c:	e0bffa17 	ldw	r2,-24(fp)
 c011320:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 c011324:	10000226 	beq	r2,zero,c011330 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c011328:	e0bff717 	ldw	r2,-36(fp)
 c01132c:	1000031e 	bne	r2,zero,c01133c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 c011330:	e0bffa17 	ldw	r2,-24(fp)
 c011334:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 c011338:	103ff426 	beq	r2,zero,c01130c <__alt_data_end+0xfc01130c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 c01133c:	e0bffa17 	ldw	r2,-24(fp)
 c011340:	1080100c 	andi	r2,r2,64
 c011344:	10001e26 	beq	r2,zero,c0113c0 <alt_avalon_spi_command+0x14c>
 c011348:	e0bff717 	ldw	r2,-36(fp)
 c01134c:	00801c0e 	bge	zero,r2,c0113c0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 c011350:	e0bff717 	ldw	r2,-36(fp)
 c011354:	10bfffc4 	addi	r2,r2,-1
 c011358:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 c01135c:	e0ffff17 	ldw	r3,-4(fp)
 c011360:	e0bff817 	ldw	r2,-32(fp)
 c011364:	18800a2e 	bgeu	r3,r2,c011390 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 c011368:	e0bffc17 	ldw	r2,-16(fp)
 c01136c:	10800104 	addi	r2,r2,4
 c011370:	1009883a 	mov	r4,r2
 c011374:	e0bfff17 	ldw	r2,-4(fp)
 c011378:	10c00044 	addi	r3,r2,1
 c01137c:	e0ffff15 	stw	r3,-4(fp)
 c011380:	10800003 	ldbu	r2,0(r2)
 c011384:	10803fcc 	andi	r2,r2,255
 c011388:	20800035 	stwio	r2,0(r4)
 c01138c:	00000c06 	br	c0113c0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 c011390:	e0bff517 	ldw	r2,-44(fp)
 c011394:	10000826 	beq	r2,zero,c0113b8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 c011398:	e0bff517 	ldw	r2,-44(fp)
 c01139c:	10bfffc4 	addi	r2,r2,-1
 c0113a0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 c0113a4:	e0bffc17 	ldw	r2,-16(fp)
 c0113a8:	10800104 	addi	r2,r2,4
 c0113ac:	0007883a 	mov	r3,zero
 c0113b0:	10c00035 	stwio	r3,0(r2)
 c0113b4:	00000206 	br	c0113c0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 c0113b8:	00bf0004 	movi	r2,-1024
 c0113bc:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 c0113c0:	e0bffa17 	ldw	r2,-24(fp)
 c0113c4:	1080200c 	andi	r2,r2,128
 c0113c8:	103fd026 	beq	r2,zero,c01130c <__alt_data_end+0xfc01130c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 c0113cc:	e0bffc17 	ldw	r2,-16(fp)
 c0113d0:	10800037 	ldwio	r2,0(r2)
 c0113d4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 c0113d8:	e0bff617 	ldw	r2,-40(fp)
 c0113dc:	10000426 	beq	r2,zero,c0113f0 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 c0113e0:	e0bff617 	ldw	r2,-40(fp)
 c0113e4:	10bfffc4 	addi	r2,r2,-1
 c0113e8:	e0bff615 	stw	r2,-40(fp)
 c0113ec:	00000506 	br	c011404 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 c0113f0:	e0800217 	ldw	r2,8(fp)
 c0113f4:	10c00044 	addi	r3,r2,1
 c0113f8:	e0c00215 	stw	r3,8(fp)
 c0113fc:	e0fffb17 	ldw	r3,-20(fp)
 c011400:	10c00005 	stb	r3,0(r2)
      credits++;
 c011404:	e0bff717 	ldw	r2,-36(fp)
 c011408:	10800044 	addi	r2,r2,1
 c01140c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 c011410:	e0bff617 	ldw	r2,-40(fp)
 c011414:	103fbd1e 	bne	r2,zero,c01130c <__alt_data_end+0xfc01130c>
 c011418:	e0c00217 	ldw	r3,8(fp)
 c01141c:	e0bff917 	ldw	r2,-28(fp)
 c011420:	18bfba1e 	bne	r3,r2,c01130c <__alt_data_end+0xfc01130c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 c011424:	e0bffc17 	ldw	r2,-16(fp)
 c011428:	10800204 	addi	r2,r2,8
 c01142c:	10800037 	ldwio	r2,0(r2)
 c011430:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 c011434:	e0bffa17 	ldw	r2,-24(fp)
 c011438:	1080080c 	andi	r2,r2,32
 c01143c:	103ff926 	beq	r2,zero,c011424 <__alt_data_end+0xfc011424>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 c011440:	e0800317 	ldw	r2,12(fp)
 c011444:	1080004c 	andi	r2,r2,1
 c011448:	1000041e 	bne	r2,zero,c01145c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 c01144c:	e0bffc17 	ldw	r2,-16(fp)
 c011450:	10800304 	addi	r2,r2,12
 c011454:	0007883a 	mov	r3,zero
 c011458:	10c00035 	stwio	r3,0(r2)

  return read_length;
 c01145c:	e0800117 	ldw	r2,4(fp)
}
 c011460:	e037883a 	mov	sp,fp
 c011464:	df000017 	ldw	fp,0(sp)
 c011468:	dec00104 	addi	sp,sp,4
 c01146c:	f800283a 	ret

0c011470 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c011470:	defffa04 	addi	sp,sp,-24
 c011474:	dfc00515 	stw	ra,20(sp)
 c011478:	df000415 	stw	fp,16(sp)
 c01147c:	df000404 	addi	fp,sp,16
 c011480:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c011484:	0007883a 	mov	r3,zero
 c011488:	e0bfff17 	ldw	r2,-4(fp)
 c01148c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c011490:	e0bfff17 	ldw	r2,-4(fp)
 c011494:	10800104 	addi	r2,r2,4
 c011498:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c01149c:	0005303a 	rdctl	r2,status
 c0114a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0114a4:	e0fffd17 	ldw	r3,-12(fp)
 c0114a8:	00bfff84 	movi	r2,-2
 c0114ac:	1884703a 	and	r2,r3,r2
 c0114b0:	1001703a 	wrctl	status,r2
  
  return context;
 c0114b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c0114b8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 c0114bc:	c0104c80 	call	c0104c8 <alt_tick>
 c0114c0:	e0bffc17 	ldw	r2,-16(fp)
 c0114c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0114c8:	e0bffe17 	ldw	r2,-8(fp)
 c0114cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c0114d0:	0001883a 	nop
 c0114d4:	e037883a 	mov	sp,fp
 c0114d8:	dfc00117 	ldw	ra,4(sp)
 c0114dc:	df000017 	ldw	fp,0(sp)
 c0114e0:	dec00204 	addi	sp,sp,8
 c0114e4:	f800283a 	ret

0c0114e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c0114e8:	defff804 	addi	sp,sp,-32
 c0114ec:	dfc00715 	stw	ra,28(sp)
 c0114f0:	df000615 	stw	fp,24(sp)
 c0114f4:	df000604 	addi	fp,sp,24
 c0114f8:	e13ffc15 	stw	r4,-16(fp)
 c0114fc:	e17ffd15 	stw	r5,-12(fp)
 c011500:	e1bffe15 	stw	r6,-8(fp)
 c011504:	e1ffff15 	stw	r7,-4(fp)
 c011508:	e0bfff17 	ldw	r2,-4(fp)
 c01150c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c011510:	d0a6ef17 	ldw	r2,-25668(gp)
 c011514:	1000021e 	bne	r2,zero,c011520 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 c011518:	e0bffb17 	ldw	r2,-20(fp)
 c01151c:	d0a6ef15 	stw	r2,-25668(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c011520:	e0bffc17 	ldw	r2,-16(fp)
 c011524:	10800104 	addi	r2,r2,4
 c011528:	00c001c4 	movi	r3,7
 c01152c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c011530:	d8000015 	stw	zero,0(sp)
 c011534:	e1fffc17 	ldw	r7,-16(fp)
 c011538:	01830074 	movhi	r6,3073
 c01153c:	31851c04 	addi	r6,r6,5232
 c011540:	e17ffe17 	ldw	r5,-8(fp)
 c011544:	e13ffd17 	ldw	r4,-12(fp)
 c011548:	c0119c80 	call	c0119c8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c01154c:	0001883a 	nop
 c011550:	e037883a 	mov	sp,fp
 c011554:	dfc00117 	ldw	ra,4(sp)
 c011558:	df000017 	ldw	fp,0(sp)
 c01155c:	dec00204 	addi	sp,sp,8
 c011560:	f800283a 	ret

0c011564 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c011564:	defff504 	addi	sp,sp,-44
 c011568:	df000a15 	stw	fp,40(sp)
 c01156c:	df000a04 	addi	fp,sp,40
 c011570:	e13ffc15 	stw	r4,-16(fp)
 c011574:	e17ffd15 	stw	r5,-12(fp)
 c011578:	e1bffe15 	stw	r6,-8(fp)
 c01157c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c011580:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c011584:	d0a6ef17 	ldw	r2,-25668(gp)
  
  if (alt_ticks_per_second ())
 c011588:	10003c26 	beq	r2,zero,c01167c <alt_alarm_start+0x118>
  {
    if (alarm)
 c01158c:	e0bffc17 	ldw	r2,-16(fp)
 c011590:	10003826 	beq	r2,zero,c011674 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 c011594:	e0bffc17 	ldw	r2,-16(fp)
 c011598:	e0fffe17 	ldw	r3,-8(fp)
 c01159c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 c0115a0:	e0bffc17 	ldw	r2,-16(fp)
 c0115a4:	e0ffff17 	ldw	r3,-4(fp)
 c0115a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0115ac:	0005303a 	rdctl	r2,status
 c0115b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0115b4:	e0fff917 	ldw	r3,-28(fp)
 c0115b8:	00bfff84 	movi	r2,-2
 c0115bc:	1884703a 	and	r2,r3,r2
 c0115c0:	1001703a 	wrctl	status,r2
  
  return context;
 c0115c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 c0115c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0115cc:	d0a6f017 	ldw	r2,-25664(gp)
      
      current_nticks = alt_nticks();
 c0115d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c0115d4:	e0fffd17 	ldw	r3,-12(fp)
 c0115d8:	e0bff617 	ldw	r2,-40(fp)
 c0115dc:	1885883a 	add	r2,r3,r2
 c0115e0:	10c00044 	addi	r3,r2,1
 c0115e4:	e0bffc17 	ldw	r2,-16(fp)
 c0115e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c0115ec:	e0bffc17 	ldw	r2,-16(fp)
 c0115f0:	10c00217 	ldw	r3,8(r2)
 c0115f4:	e0bff617 	ldw	r2,-40(fp)
 c0115f8:	1880042e 	bgeu	r3,r2,c01160c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 c0115fc:	e0bffc17 	ldw	r2,-16(fp)
 c011600:	00c00044 	movi	r3,1
 c011604:	10c00405 	stb	r3,16(r2)
 c011608:	00000206 	br	c011614 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 c01160c:	e0bffc17 	ldw	r2,-16(fp)
 c011610:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c011614:	e0bffc17 	ldw	r2,-16(fp)
 c011618:	d0e01104 	addi	r3,gp,-32700
 c01161c:	e0fffa15 	stw	r3,-24(fp)
 c011620:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c011624:	e0bffb17 	ldw	r2,-20(fp)
 c011628:	e0fffa17 	ldw	r3,-24(fp)
 c01162c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c011630:	e0bffa17 	ldw	r2,-24(fp)
 c011634:	10c00017 	ldw	r3,0(r2)
 c011638:	e0bffb17 	ldw	r2,-20(fp)
 c01163c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c011640:	e0bffa17 	ldw	r2,-24(fp)
 c011644:	10800017 	ldw	r2,0(r2)
 c011648:	e0fffb17 	ldw	r3,-20(fp)
 c01164c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c011650:	e0bffa17 	ldw	r2,-24(fp)
 c011654:	e0fffb17 	ldw	r3,-20(fp)
 c011658:	10c00015 	stw	r3,0(r2)
 c01165c:	e0bff817 	ldw	r2,-32(fp)
 c011660:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c011664:	e0bff717 	ldw	r2,-36(fp)
 c011668:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c01166c:	0005883a 	mov	r2,zero
 c011670:	00000306 	br	c011680 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 c011674:	00bffa84 	movi	r2,-22
 c011678:	00000106 	br	c011680 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 c01167c:	00bfde84 	movi	r2,-134
  }
}
 c011680:	e037883a 	mov	sp,fp
 c011684:	df000017 	ldw	fp,0(sp)
 c011688:	dec00104 	addi	sp,sp,4
 c01168c:	f800283a 	ret

0c011690 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c011690:	defffa04 	addi	sp,sp,-24
 c011694:	dfc00515 	stw	ra,20(sp)
 c011698:	df000415 	stw	fp,16(sp)
 c01169c:	df000404 	addi	fp,sp,16
 c0116a0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 c0116a4:	00800244 	movi	r2,9
 c0116a8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 c0116ac:	014003f4 	movhi	r5,15
 c0116b0:	29509004 	addi	r5,r5,16960
 c0116b4:	e13ffd17 	ldw	r4,-12(fp)
 c0116b8:	c002cc00 	call	c002cc0 <__mulsi3>
 c0116bc:	100b883a 	mov	r5,r2
 c0116c0:	0100bef4 	movhi	r4,763
 c0116c4:	213c2004 	addi	r4,r4,-3968
 c0116c8:	c002c040 	call	c002c04 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c0116cc:	100b883a 	mov	r5,r2
 c0116d0:	01200034 	movhi	r4,32768
 c0116d4:	213fffc4 	addi	r4,r4,-1
 c0116d8:	c002c040 	call	c002c04 <__udivsi3>
 c0116dc:	100b883a 	mov	r5,r2
 c0116e0:	e13fff17 	ldw	r4,-4(fp)
 c0116e4:	c002c040 	call	c002c04 <__udivsi3>
 c0116e8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c0116ec:	e0bffe17 	ldw	r2,-8(fp)
 c0116f0:	10002a26 	beq	r2,zero,c01179c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 c0116f4:	e03ffc15 	stw	zero,-16(fp)
 c0116f8:	00001706 	br	c011758 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c0116fc:	00a00034 	movhi	r2,32768
 c011700:	10bfffc4 	addi	r2,r2,-1
 c011704:	10bfffc4 	addi	r2,r2,-1
 c011708:	103ffe1e 	bne	r2,zero,c011704 <__alt_data_end+0xfc011704>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 c01170c:	014003f4 	movhi	r5,15
 c011710:	29509004 	addi	r5,r5,16960
 c011714:	e13ffd17 	ldw	r4,-12(fp)
 c011718:	c002cc00 	call	c002cc0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c01171c:	100b883a 	mov	r5,r2
 c011720:	0100bef4 	movhi	r4,763
 c011724:	213c2004 	addi	r4,r4,-3968
 c011728:	c002c040 	call	c002c04 <__udivsi3>
 c01172c:	100b883a 	mov	r5,r2
 c011730:	01200034 	movhi	r4,32768
 c011734:	213fffc4 	addi	r4,r4,-1
 c011738:	c002c040 	call	c002c04 <__udivsi3>
 c01173c:	1007883a 	mov	r3,r2
 c011740:	e0bfff17 	ldw	r2,-4(fp)
 c011744:	10c5c83a 	sub	r2,r2,r3
 c011748:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c01174c:	e0bffc17 	ldw	r2,-16(fp)
 c011750:	10800044 	addi	r2,r2,1
 c011754:	e0bffc15 	stw	r2,-16(fp)
 c011758:	e0fffc17 	ldw	r3,-16(fp)
 c01175c:	e0bffe17 	ldw	r2,-8(fp)
 c011760:	18bfe616 	blt	r3,r2,c0116fc <__alt_data_end+0xfc0116fc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c011764:	014003f4 	movhi	r5,15
 c011768:	29509004 	addi	r5,r5,16960
 c01176c:	e13ffd17 	ldw	r4,-12(fp)
 c011770:	c002cc00 	call	c002cc0 <__mulsi3>
 c011774:	100b883a 	mov	r5,r2
 c011778:	0100bef4 	movhi	r4,763
 c01177c:	213c2004 	addi	r4,r4,-3968
 c011780:	c002c040 	call	c002c04 <__udivsi3>
 c011784:	e17fff17 	ldw	r5,-4(fp)
 c011788:	1009883a 	mov	r4,r2
 c01178c:	c002cc00 	call	c002cc0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c011790:	10bfffc4 	addi	r2,r2,-1
 c011794:	103ffe1e 	bne	r2,zero,c011790 <__alt_data_end+0xfc011790>
 c011798:	00000d06 	br	c0117d0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c01179c:	014003f4 	movhi	r5,15
 c0117a0:	29509004 	addi	r5,r5,16960
 c0117a4:	e13ffd17 	ldw	r4,-12(fp)
 c0117a8:	c002cc00 	call	c002cc0 <__mulsi3>
 c0117ac:	100b883a 	mov	r5,r2
 c0117b0:	0100bef4 	movhi	r4,763
 c0117b4:	213c2004 	addi	r4,r4,-3968
 c0117b8:	c002c040 	call	c002c04 <__udivsi3>
 c0117bc:	e17fff17 	ldw	r5,-4(fp)
 c0117c0:	1009883a 	mov	r4,r2
 c0117c4:	c002cc00 	call	c002cc0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c0117c8:	10bfffc4 	addi	r2,r2,-1
 c0117cc:	00bffe16 	blt	zero,r2,c0117c8 <__alt_data_end+0xfc0117c8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 c0117d0:	0005883a 	mov	r2,zero
}
 c0117d4:	e037883a 	mov	sp,fp
 c0117d8:	dfc00117 	ldw	ra,4(sp)
 c0117dc:	df000017 	ldw	fp,0(sp)
 c0117e0:	dec00204 	addi	sp,sp,8
 c0117e4:	f800283a 	ret

0c0117e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c0117e8:	deffff04 	addi	sp,sp,-4
 c0117ec:	df000015 	stw	fp,0(sp)
 c0117f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c0117f4:	0001883a 	nop
 c0117f8:	e037883a 	mov	sp,fp
 c0117fc:	df000017 	ldw	fp,0(sp)
 c011800:	dec00104 	addi	sp,sp,4
 c011804:	f800283a 	ret

0c011808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c011808:	defffe04 	addi	sp,sp,-8
 c01180c:	dfc00115 	stw	ra,4(sp)
 c011810:	df000015 	stw	fp,0(sp)
 c011814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c011818:	d0a00f17 	ldw	r2,-32708(gp)
 c01181c:	10000326 	beq	r2,zero,c01182c <alt_get_errno+0x24>
 c011820:	d0a00f17 	ldw	r2,-32708(gp)
 c011824:	103ee83a 	callr	r2
 c011828:	00000106 	br	c011830 <alt_get_errno+0x28>
 c01182c:	d0a6eb04 	addi	r2,gp,-25684
}
 c011830:	e037883a 	mov	sp,fp
 c011834:	dfc00117 	ldw	ra,4(sp)
 c011838:	df000017 	ldw	fp,0(sp)
 c01183c:	dec00204 	addi	sp,sp,8
 c011840:	f800283a 	ret

0c011844 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c011844:	defffa04 	addi	sp,sp,-24
 c011848:	dfc00515 	stw	ra,20(sp)
 c01184c:	df000415 	stw	fp,16(sp)
 c011850:	df000404 	addi	fp,sp,16
 c011854:	e13ffe15 	stw	r4,-8(fp)
 c011858:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c01185c:	e0bffe17 	ldw	r2,-8(fp)
 c011860:	10000326 	beq	r2,zero,c011870 <alt_dev_llist_insert+0x2c>
 c011864:	e0bffe17 	ldw	r2,-8(fp)
 c011868:	10800217 	ldw	r2,8(r2)
 c01186c:	1000061e 	bne	r2,zero,c011888 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 c011870:	c0118080 	call	c011808 <alt_get_errno>
 c011874:	1007883a 	mov	r3,r2
 c011878:	00800584 	movi	r2,22
 c01187c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c011880:	00bffa84 	movi	r2,-22
 c011884:	00001306 	br	c0118d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c011888:	e0bffe17 	ldw	r2,-8(fp)
 c01188c:	e0ffff17 	ldw	r3,-4(fp)
 c011890:	e0fffc15 	stw	r3,-16(fp)
 c011894:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c011898:	e0bffd17 	ldw	r2,-12(fp)
 c01189c:	e0fffc17 	ldw	r3,-16(fp)
 c0118a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c0118a4:	e0bffc17 	ldw	r2,-16(fp)
 c0118a8:	10c00017 	ldw	r3,0(r2)
 c0118ac:	e0bffd17 	ldw	r2,-12(fp)
 c0118b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c0118b4:	e0bffc17 	ldw	r2,-16(fp)
 c0118b8:	10800017 	ldw	r2,0(r2)
 c0118bc:	e0fffd17 	ldw	r3,-12(fp)
 c0118c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c0118c4:	e0bffc17 	ldw	r2,-16(fp)
 c0118c8:	e0fffd17 	ldw	r3,-12(fp)
 c0118cc:	10c00015 	stw	r3,0(r2)

  return 0;  
 c0118d0:	0005883a 	mov	r2,zero
}
 c0118d4:	e037883a 	mov	sp,fp
 c0118d8:	dfc00117 	ldw	ra,4(sp)
 c0118dc:	df000017 	ldw	fp,0(sp)
 c0118e0:	dec00204 	addi	sp,sp,8
 c0118e4:	f800283a 	ret

0c0118e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c0118e8:	defffd04 	addi	sp,sp,-12
 c0118ec:	dfc00215 	stw	ra,8(sp)
 c0118f0:	df000115 	stw	fp,4(sp)
 c0118f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c0118f8:	00830074 	movhi	r2,3073
 c0118fc:	1089be04 	addi	r2,r2,9976
 c011900:	e0bfff15 	stw	r2,-4(fp)
 c011904:	00000606 	br	c011920 <_do_ctors+0x38>
        (*ctor) (); 
 c011908:	e0bfff17 	ldw	r2,-4(fp)
 c01190c:	10800017 	ldw	r2,0(r2)
 c011910:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c011914:	e0bfff17 	ldw	r2,-4(fp)
 c011918:	10bfff04 	addi	r2,r2,-4
 c01191c:	e0bfff15 	stw	r2,-4(fp)
 c011920:	e0ffff17 	ldw	r3,-4(fp)
 c011924:	00830074 	movhi	r2,3073
 c011928:	1089bf04 	addi	r2,r2,9980
 c01192c:	18bff62e 	bgeu	r3,r2,c011908 <__alt_data_end+0xfc011908>
        (*ctor) (); 
}
 c011930:	0001883a 	nop
 c011934:	e037883a 	mov	sp,fp
 c011938:	dfc00117 	ldw	ra,4(sp)
 c01193c:	df000017 	ldw	fp,0(sp)
 c011940:	dec00204 	addi	sp,sp,8
 c011944:	f800283a 	ret

0c011948 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c011948:	defffd04 	addi	sp,sp,-12
 c01194c:	dfc00215 	stw	ra,8(sp)
 c011950:	df000115 	stw	fp,4(sp)
 c011954:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c011958:	00830074 	movhi	r2,3073
 c01195c:	1089be04 	addi	r2,r2,9976
 c011960:	e0bfff15 	stw	r2,-4(fp)
 c011964:	00000606 	br	c011980 <_do_dtors+0x38>
        (*dtor) (); 
 c011968:	e0bfff17 	ldw	r2,-4(fp)
 c01196c:	10800017 	ldw	r2,0(r2)
 c011970:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c011974:	e0bfff17 	ldw	r2,-4(fp)
 c011978:	10bfff04 	addi	r2,r2,-4
 c01197c:	e0bfff15 	stw	r2,-4(fp)
 c011980:	e0ffff17 	ldw	r3,-4(fp)
 c011984:	00830074 	movhi	r2,3073
 c011988:	1089bf04 	addi	r2,r2,9980
 c01198c:	18bff62e 	bgeu	r3,r2,c011968 <__alt_data_end+0xfc011968>
        (*dtor) (); 
}
 c011990:	0001883a 	nop
 c011994:	e037883a 	mov	sp,fp
 c011998:	dfc00117 	ldw	ra,4(sp)
 c01199c:	df000017 	ldw	fp,0(sp)
 c0119a0:	dec00204 	addi	sp,sp,8
 c0119a4:	f800283a 	ret

0c0119a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c0119a8:	deffff04 	addi	sp,sp,-4
 c0119ac:	df000015 	stw	fp,0(sp)
 c0119b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 c0119b4:	0001883a 	nop
 c0119b8:	e037883a 	mov	sp,fp
 c0119bc:	df000017 	ldw	fp,0(sp)
 c0119c0:	dec00104 	addi	sp,sp,4
 c0119c4:	f800283a 	ret

0c0119c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c0119c8:	defff904 	addi	sp,sp,-28
 c0119cc:	dfc00615 	stw	ra,24(sp)
 c0119d0:	df000515 	stw	fp,20(sp)
 c0119d4:	df000504 	addi	fp,sp,20
 c0119d8:	e13ffc15 	stw	r4,-16(fp)
 c0119dc:	e17ffd15 	stw	r5,-12(fp)
 c0119e0:	e1bffe15 	stw	r6,-8(fp)
 c0119e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c0119e8:	e0800217 	ldw	r2,8(fp)
 c0119ec:	d8800015 	stw	r2,0(sp)
 c0119f0:	e1ffff17 	ldw	r7,-4(fp)
 c0119f4:	e1bffe17 	ldw	r6,-8(fp)
 c0119f8:	e17ffd17 	ldw	r5,-12(fp)
 c0119fc:	e13ffc17 	ldw	r4,-16(fp)
 c011a00:	c011b780 	call	c011b78 <alt_iic_isr_register>
}  
 c011a04:	e037883a 	mov	sp,fp
 c011a08:	dfc00117 	ldw	ra,4(sp)
 c011a0c:	df000017 	ldw	fp,0(sp)
 c011a10:	dec00204 	addi	sp,sp,8
 c011a14:	f800283a 	ret

0c011a18 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c011a18:	defff904 	addi	sp,sp,-28
 c011a1c:	df000615 	stw	fp,24(sp)
 c011a20:	df000604 	addi	fp,sp,24
 c011a24:	e13ffe15 	stw	r4,-8(fp)
 c011a28:	e17fff15 	stw	r5,-4(fp)
 c011a2c:	e0bfff17 	ldw	r2,-4(fp)
 c011a30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c011a34:	0005303a 	rdctl	r2,status
 c011a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c011a3c:	e0fffb17 	ldw	r3,-20(fp)
 c011a40:	00bfff84 	movi	r2,-2
 c011a44:	1884703a 	and	r2,r3,r2
 c011a48:	1001703a 	wrctl	status,r2
  
  return context;
 c011a4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c011a50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 c011a54:	00c00044 	movi	r3,1
 c011a58:	e0bffa17 	ldw	r2,-24(fp)
 c011a5c:	1884983a 	sll	r2,r3,r2
 c011a60:	1007883a 	mov	r3,r2
 c011a64:	d0a6f117 	ldw	r2,-25660(gp)
 c011a68:	1884b03a 	or	r2,r3,r2
 c011a6c:	d0a6f115 	stw	r2,-25660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c011a70:	d0a6f117 	ldw	r2,-25660(gp)
 c011a74:	100170fa 	wrctl	ienable,r2
 c011a78:	e0bffc17 	ldw	r2,-16(fp)
 c011a7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c011a80:	e0bffd17 	ldw	r2,-12(fp)
 c011a84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c011a88:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 c011a8c:	0001883a 	nop
}
 c011a90:	e037883a 	mov	sp,fp
 c011a94:	df000017 	ldw	fp,0(sp)
 c011a98:	dec00104 	addi	sp,sp,4
 c011a9c:	f800283a 	ret

0c011aa0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c011aa0:	defff904 	addi	sp,sp,-28
 c011aa4:	df000615 	stw	fp,24(sp)
 c011aa8:	df000604 	addi	fp,sp,24
 c011aac:	e13ffe15 	stw	r4,-8(fp)
 c011ab0:	e17fff15 	stw	r5,-4(fp)
 c011ab4:	e0bfff17 	ldw	r2,-4(fp)
 c011ab8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c011abc:	0005303a 	rdctl	r2,status
 c011ac0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c011ac4:	e0fffb17 	ldw	r3,-20(fp)
 c011ac8:	00bfff84 	movi	r2,-2
 c011acc:	1884703a 	and	r2,r3,r2
 c011ad0:	1001703a 	wrctl	status,r2
  
  return context;
 c011ad4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c011ad8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 c011adc:	00c00044 	movi	r3,1
 c011ae0:	e0bffa17 	ldw	r2,-24(fp)
 c011ae4:	1884983a 	sll	r2,r3,r2
 c011ae8:	0084303a 	nor	r2,zero,r2
 c011aec:	1007883a 	mov	r3,r2
 c011af0:	d0a6f117 	ldw	r2,-25660(gp)
 c011af4:	1884703a 	and	r2,r3,r2
 c011af8:	d0a6f115 	stw	r2,-25660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c011afc:	d0a6f117 	ldw	r2,-25660(gp)
 c011b00:	100170fa 	wrctl	ienable,r2
 c011b04:	e0bffc17 	ldw	r2,-16(fp)
 c011b08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c011b0c:	e0bffd17 	ldw	r2,-12(fp)
 c011b10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c011b14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 c011b18:	0001883a 	nop
}
 c011b1c:	e037883a 	mov	sp,fp
 c011b20:	df000017 	ldw	fp,0(sp)
 c011b24:	dec00104 	addi	sp,sp,4
 c011b28:	f800283a 	ret

0c011b2c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c011b2c:	defffc04 	addi	sp,sp,-16
 c011b30:	df000315 	stw	fp,12(sp)
 c011b34:	df000304 	addi	fp,sp,12
 c011b38:	e13ffe15 	stw	r4,-8(fp)
 c011b3c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c011b40:	000530fa 	rdctl	r2,ienable
 c011b44:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c011b48:	00c00044 	movi	r3,1
 c011b4c:	e0bfff17 	ldw	r2,-4(fp)
 c011b50:	1884983a 	sll	r2,r3,r2
 c011b54:	1007883a 	mov	r3,r2
 c011b58:	e0bffd17 	ldw	r2,-12(fp)
 c011b5c:	1884703a 	and	r2,r3,r2
 c011b60:	1004c03a 	cmpne	r2,r2,zero
 c011b64:	10803fcc 	andi	r2,r2,255
}
 c011b68:	e037883a 	mov	sp,fp
 c011b6c:	df000017 	ldw	fp,0(sp)
 c011b70:	dec00104 	addi	sp,sp,4
 c011b74:	f800283a 	ret

0c011b78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c011b78:	defff504 	addi	sp,sp,-44
 c011b7c:	dfc00a15 	stw	ra,40(sp)
 c011b80:	df000915 	stw	fp,36(sp)
 c011b84:	df000904 	addi	fp,sp,36
 c011b88:	e13ffc15 	stw	r4,-16(fp)
 c011b8c:	e17ffd15 	stw	r5,-12(fp)
 c011b90:	e1bffe15 	stw	r6,-8(fp)
 c011b94:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 c011b98:	00bffa84 	movi	r2,-22
 c011b9c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c011ba0:	e0bffd17 	ldw	r2,-12(fp)
 c011ba4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c011ba8:	e0bff817 	ldw	r2,-32(fp)
 c011bac:	10800808 	cmpgei	r2,r2,32
 c011bb0:	1000271e 	bne	r2,zero,c011c50 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c011bb4:	0005303a 	rdctl	r2,status
 c011bb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c011bbc:	e0fffb17 	ldw	r3,-20(fp)
 c011bc0:	00bfff84 	movi	r2,-2
 c011bc4:	1884703a 	and	r2,r3,r2
 c011bc8:	1001703a 	wrctl	status,r2
  
  return context;
 c011bcc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c011bd0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 c011bd4:	00830074 	movhi	r2,3073
 c011bd8:	10991e04 	addi	r2,r2,25720
 c011bdc:	e0fff817 	ldw	r3,-32(fp)
 c011be0:	180690fa 	slli	r3,r3,3
 c011be4:	10c5883a 	add	r2,r2,r3
 c011be8:	e0fffe17 	ldw	r3,-8(fp)
 c011bec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 c011bf0:	00830074 	movhi	r2,3073
 c011bf4:	10991e04 	addi	r2,r2,25720
 c011bf8:	e0fff817 	ldw	r3,-32(fp)
 c011bfc:	180690fa 	slli	r3,r3,3
 c011c00:	10c5883a 	add	r2,r2,r3
 c011c04:	10800104 	addi	r2,r2,4
 c011c08:	e0ffff17 	ldw	r3,-4(fp)
 c011c0c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c011c10:	e0bffe17 	ldw	r2,-8(fp)
 c011c14:	10000526 	beq	r2,zero,c011c2c <alt_iic_isr_register+0xb4>
 c011c18:	e0bff817 	ldw	r2,-32(fp)
 c011c1c:	100b883a 	mov	r5,r2
 c011c20:	e13ffc17 	ldw	r4,-16(fp)
 c011c24:	c011a180 	call	c011a18 <alt_ic_irq_enable>
 c011c28:	00000406 	br	c011c3c <alt_iic_isr_register+0xc4>
 c011c2c:	e0bff817 	ldw	r2,-32(fp)
 c011c30:	100b883a 	mov	r5,r2
 c011c34:	e13ffc17 	ldw	r4,-16(fp)
 c011c38:	c011aa00 	call	c011aa0 <alt_ic_irq_disable>
 c011c3c:	e0bff715 	stw	r2,-36(fp)
 c011c40:	e0bffa17 	ldw	r2,-24(fp)
 c011c44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c011c48:	e0bff917 	ldw	r2,-28(fp)
 c011c4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c011c50:	e0bff717 	ldw	r2,-36(fp)
}
 c011c54:	e037883a 	mov	sp,fp
 c011c58:	dfc00117 	ldw	ra,4(sp)
 c011c5c:	df000017 	ldw	fp,0(sp)
 c011c60:	dec00204 	addi	sp,sp,8
 c011c64:	f800283a 	ret

0c011c68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c011c68:	defff804 	addi	sp,sp,-32
 c011c6c:	dfc00715 	stw	ra,28(sp)
 c011c70:	df000615 	stw	fp,24(sp)
 c011c74:	dc000515 	stw	r16,20(sp)
 c011c78:	df000604 	addi	fp,sp,24
 c011c7c:	e13ffb15 	stw	r4,-20(fp)
 c011c80:	e17ffc15 	stw	r5,-16(fp)
 c011c84:	e1bffd15 	stw	r6,-12(fp)
 c011c88:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 c011c8c:	e1bffe17 	ldw	r6,-8(fp)
 c011c90:	e17ffd17 	ldw	r5,-12(fp)
 c011c94:	e13ffc17 	ldw	r4,-16(fp)
 c011c98:	c011ef00 	call	c011ef0 <open>
 c011c9c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 c011ca0:	e0bffa17 	ldw	r2,-24(fp)
 c011ca4:	10002216 	blt	r2,zero,c011d30 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 c011ca8:	04030074 	movhi	r16,3073
 c011cac:	840d4d04 	addi	r16,r16,13620
 c011cb0:	e0bffa17 	ldw	r2,-24(fp)
 c011cb4:	01400304 	movi	r5,12
 c011cb8:	1009883a 	mov	r4,r2
 c011cbc:	c002cc00 	call	c002cc0 <__mulsi3>
 c011cc0:	8085883a 	add	r2,r16,r2
 c011cc4:	10c00017 	ldw	r3,0(r2)
 c011cc8:	e0bffb17 	ldw	r2,-20(fp)
 c011ccc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c011cd0:	04030074 	movhi	r16,3073
 c011cd4:	840d4d04 	addi	r16,r16,13620
 c011cd8:	e0bffa17 	ldw	r2,-24(fp)
 c011cdc:	01400304 	movi	r5,12
 c011ce0:	1009883a 	mov	r4,r2
 c011ce4:	c002cc00 	call	c002cc0 <__mulsi3>
 c011ce8:	8085883a 	add	r2,r16,r2
 c011cec:	10800104 	addi	r2,r2,4
 c011cf0:	10c00017 	ldw	r3,0(r2)
 c011cf4:	e0bffb17 	ldw	r2,-20(fp)
 c011cf8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c011cfc:	04030074 	movhi	r16,3073
 c011d00:	840d4d04 	addi	r16,r16,13620
 c011d04:	e0bffa17 	ldw	r2,-24(fp)
 c011d08:	01400304 	movi	r5,12
 c011d0c:	1009883a 	mov	r4,r2
 c011d10:	c002cc00 	call	c002cc0 <__mulsi3>
 c011d14:	8085883a 	add	r2,r16,r2
 c011d18:	10800204 	addi	r2,r2,8
 c011d1c:	10c00017 	ldw	r3,0(r2)
 c011d20:	e0bffb17 	ldw	r2,-20(fp)
 c011d24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c011d28:	e13ffa17 	ldw	r4,-24(fp)
 c011d2c:	c0102f80 	call	c0102f8 <alt_release_fd>
  }
} 
 c011d30:	0001883a 	nop
 c011d34:	e6ffff04 	addi	sp,fp,-4
 c011d38:	dfc00217 	ldw	ra,8(sp)
 c011d3c:	df000117 	ldw	fp,4(sp)
 c011d40:	dc000017 	ldw	r16,0(sp)
 c011d44:	dec00304 	addi	sp,sp,12
 c011d48:	f800283a 	ret

0c011d4c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c011d4c:	defffb04 	addi	sp,sp,-20
 c011d50:	dfc00415 	stw	ra,16(sp)
 c011d54:	df000315 	stw	fp,12(sp)
 c011d58:	df000304 	addi	fp,sp,12
 c011d5c:	e13ffd15 	stw	r4,-12(fp)
 c011d60:	e17ffe15 	stw	r5,-8(fp)
 c011d64:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c011d68:	01c07fc4 	movi	r7,511
 c011d6c:	01800044 	movi	r6,1
 c011d70:	e17ffd17 	ldw	r5,-12(fp)
 c011d74:	01030074 	movhi	r4,3073
 c011d78:	210d5004 	addi	r4,r4,13632
 c011d7c:	c011c680 	call	c011c68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c011d80:	01c07fc4 	movi	r7,511
 c011d84:	000d883a 	mov	r6,zero
 c011d88:	e17ffe17 	ldw	r5,-8(fp)
 c011d8c:	01030074 	movhi	r4,3073
 c011d90:	210d4d04 	addi	r4,r4,13620
 c011d94:	c011c680 	call	c011c68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c011d98:	01c07fc4 	movi	r7,511
 c011d9c:	01800044 	movi	r6,1
 c011da0:	e17fff17 	ldw	r5,-4(fp)
 c011da4:	01030074 	movhi	r4,3073
 c011da8:	210d5304 	addi	r4,r4,13644
 c011dac:	c011c680 	call	c011c68 <alt_open_fd>
}  
 c011db0:	0001883a 	nop
 c011db4:	e037883a 	mov	sp,fp
 c011db8:	dfc00117 	ldw	ra,4(sp)
 c011dbc:	df000017 	ldw	fp,0(sp)
 c011dc0:	dec00204 	addi	sp,sp,8
 c011dc4:	f800283a 	ret

0c011dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c011dc8:	defffe04 	addi	sp,sp,-8
 c011dcc:	dfc00115 	stw	ra,4(sp)
 c011dd0:	df000015 	stw	fp,0(sp)
 c011dd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c011dd8:	d0a00f17 	ldw	r2,-32708(gp)
 c011ddc:	10000326 	beq	r2,zero,c011dec <alt_get_errno+0x24>
 c011de0:	d0a00f17 	ldw	r2,-32708(gp)
 c011de4:	103ee83a 	callr	r2
 c011de8:	00000106 	br	c011df0 <alt_get_errno+0x28>
 c011dec:	d0a6eb04 	addi	r2,gp,-25684
}
 c011df0:	e037883a 	mov	sp,fp
 c011df4:	dfc00117 	ldw	ra,4(sp)
 c011df8:	df000017 	ldw	fp,0(sp)
 c011dfc:	dec00204 	addi	sp,sp,8
 c011e00:	f800283a 	ret

0c011e04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c011e04:	defffb04 	addi	sp,sp,-20
 c011e08:	dfc00415 	stw	ra,16(sp)
 c011e0c:	df000315 	stw	fp,12(sp)
 c011e10:	dc000215 	stw	r16,8(sp)
 c011e14:	df000304 	addi	fp,sp,12
 c011e18:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c011e1c:	e0bffe17 	ldw	r2,-8(fp)
 c011e20:	10800217 	ldw	r2,8(r2)
 c011e24:	10d00034 	orhi	r3,r2,16384
 c011e28:	e0bffe17 	ldw	r2,-8(fp)
 c011e2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c011e30:	e03ffd15 	stw	zero,-12(fp)
 c011e34:	00002306 	br	c011ec4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c011e38:	04030074 	movhi	r16,3073
 c011e3c:	840d4d04 	addi	r16,r16,13620
 c011e40:	e0bffd17 	ldw	r2,-12(fp)
 c011e44:	01400304 	movi	r5,12
 c011e48:	1009883a 	mov	r4,r2
 c011e4c:	c002cc00 	call	c002cc0 <__mulsi3>
 c011e50:	8085883a 	add	r2,r16,r2
 c011e54:	10c00017 	ldw	r3,0(r2)
 c011e58:	e0bffe17 	ldw	r2,-8(fp)
 c011e5c:	10800017 	ldw	r2,0(r2)
 c011e60:	1880151e 	bne	r3,r2,c011eb8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c011e64:	04030074 	movhi	r16,3073
 c011e68:	840d4d04 	addi	r16,r16,13620
 c011e6c:	e0bffd17 	ldw	r2,-12(fp)
 c011e70:	01400304 	movi	r5,12
 c011e74:	1009883a 	mov	r4,r2
 c011e78:	c002cc00 	call	c002cc0 <__mulsi3>
 c011e7c:	8085883a 	add	r2,r16,r2
 c011e80:	10800204 	addi	r2,r2,8
 c011e84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c011e88:	10000b0e 	bge	r2,zero,c011eb8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 c011e8c:	01400304 	movi	r5,12
 c011e90:	e13ffd17 	ldw	r4,-12(fp)
 c011e94:	c002cc00 	call	c002cc0 <__mulsi3>
 c011e98:	1007883a 	mov	r3,r2
 c011e9c:	00830074 	movhi	r2,3073
 c011ea0:	108d4d04 	addi	r2,r2,13620
 c011ea4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c011ea8:	e0bffe17 	ldw	r2,-8(fp)
 c011eac:	18800226 	beq	r3,r2,c011eb8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c011eb0:	00bffcc4 	movi	r2,-13
 c011eb4:	00000806 	br	c011ed8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c011eb8:	e0bffd17 	ldw	r2,-12(fp)
 c011ebc:	10800044 	addi	r2,r2,1
 c011ec0:	e0bffd15 	stw	r2,-12(fp)
 c011ec4:	d0a00e17 	ldw	r2,-32712(gp)
 c011ec8:	1007883a 	mov	r3,r2
 c011ecc:	e0bffd17 	ldw	r2,-12(fp)
 c011ed0:	18bfd92e 	bgeu	r3,r2,c011e38 <__alt_data_end+0xfc011e38>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c011ed4:	0005883a 	mov	r2,zero
}
 c011ed8:	e6ffff04 	addi	sp,fp,-4
 c011edc:	dfc00217 	ldw	ra,8(sp)
 c011ee0:	df000117 	ldw	fp,4(sp)
 c011ee4:	dc000017 	ldw	r16,0(sp)
 c011ee8:	dec00304 	addi	sp,sp,12
 c011eec:	f800283a 	ret

0c011ef0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c011ef0:	defff604 	addi	sp,sp,-40
 c011ef4:	dfc00915 	stw	ra,36(sp)
 c011ef8:	df000815 	stw	fp,32(sp)
 c011efc:	df000804 	addi	fp,sp,32
 c011f00:	e13ffd15 	stw	r4,-12(fp)
 c011f04:	e17ffe15 	stw	r5,-8(fp)
 c011f08:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c011f0c:	00bfffc4 	movi	r2,-1
 c011f10:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 c011f14:	00bffb44 	movi	r2,-19
 c011f18:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 c011f1c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c011f20:	d1600c04 	addi	r5,gp,-32720
 c011f24:	e13ffd17 	ldw	r4,-12(fp)
 c011f28:	c0120700 	call	c012070 <alt_find_dev>
 c011f2c:	e0bff815 	stw	r2,-32(fp)
 c011f30:	e0bff817 	ldw	r2,-32(fp)
 c011f34:	1000051e 	bne	r2,zero,c011f4c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c011f38:	e13ffd17 	ldw	r4,-12(fp)
 c011f3c:	c0121000 	call	c012100 <alt_find_file>
 c011f40:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 c011f44:	00800044 	movi	r2,1
 c011f48:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c011f4c:	e0bff817 	ldw	r2,-32(fp)
 c011f50:	10002b26 	beq	r2,zero,c012000 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c011f54:	e13ff817 	ldw	r4,-32(fp)
 c011f58:	c0122080 	call	c012208 <alt_get_fd>
 c011f5c:	e0bff915 	stw	r2,-28(fp)
 c011f60:	e0bff917 	ldw	r2,-28(fp)
 c011f64:	1000030e 	bge	r2,zero,c011f74 <open+0x84>
    {
      status = index;
 c011f68:	e0bff917 	ldw	r2,-28(fp)
 c011f6c:	e0bffa15 	stw	r2,-24(fp)
 c011f70:	00002506 	br	c012008 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 c011f74:	01400304 	movi	r5,12
 c011f78:	e13ff917 	ldw	r4,-28(fp)
 c011f7c:	c002cc00 	call	c002cc0 <__mulsi3>
 c011f80:	1007883a 	mov	r3,r2
 c011f84:	00830074 	movhi	r2,3073
 c011f88:	108d4d04 	addi	r2,r2,13620
 c011f8c:	1885883a 	add	r2,r3,r2
 c011f90:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c011f94:	e0fffe17 	ldw	r3,-8(fp)
 c011f98:	00900034 	movhi	r2,16384
 c011f9c:	10bfffc4 	addi	r2,r2,-1
 c011fa0:	1886703a 	and	r3,r3,r2
 c011fa4:	e0bffc17 	ldw	r2,-16(fp)
 c011fa8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c011fac:	e0bffb17 	ldw	r2,-20(fp)
 c011fb0:	1000051e 	bne	r2,zero,c011fc8 <open+0xd8>
 c011fb4:	e13ffc17 	ldw	r4,-16(fp)
 c011fb8:	c011e040 	call	c011e04 <alt_file_locked>
 c011fbc:	e0bffa15 	stw	r2,-24(fp)
 c011fc0:	e0bffa17 	ldw	r2,-24(fp)
 c011fc4:	10001016 	blt	r2,zero,c012008 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c011fc8:	e0bff817 	ldw	r2,-32(fp)
 c011fcc:	10800317 	ldw	r2,12(r2)
 c011fd0:	10000826 	beq	r2,zero,c011ff4 <open+0x104>
 c011fd4:	e0bff817 	ldw	r2,-32(fp)
 c011fd8:	10800317 	ldw	r2,12(r2)
 c011fdc:	e1ffff17 	ldw	r7,-4(fp)
 c011fe0:	e1bffe17 	ldw	r6,-8(fp)
 c011fe4:	e17ffd17 	ldw	r5,-12(fp)
 c011fe8:	e13ffc17 	ldw	r4,-16(fp)
 c011fec:	103ee83a 	callr	r2
 c011ff0:	00000106 	br	c011ff8 <open+0x108>
 c011ff4:	0005883a 	mov	r2,zero
 c011ff8:	e0bffa15 	stw	r2,-24(fp)
 c011ffc:	00000206 	br	c012008 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c012000:	00bffb44 	movi	r2,-19
 c012004:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c012008:	e0bffa17 	ldw	r2,-24(fp)
 c01200c:	1000090e 	bge	r2,zero,c012034 <open+0x144>
  {
    alt_release_fd (index);  
 c012010:	e13ff917 	ldw	r4,-28(fp)
 c012014:	c0102f80 	call	c0102f8 <alt_release_fd>
    ALT_ERRNO = -status;
 c012018:	c011dc80 	call	c011dc8 <alt_get_errno>
 c01201c:	1007883a 	mov	r3,r2
 c012020:	e0bffa17 	ldw	r2,-24(fp)
 c012024:	0085c83a 	sub	r2,zero,r2
 c012028:	18800015 	stw	r2,0(r3)
    return -1;
 c01202c:	00bfffc4 	movi	r2,-1
 c012030:	00000106 	br	c012038 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 c012034:	e0bff917 	ldw	r2,-28(fp)
}
 c012038:	e037883a 	mov	sp,fp
 c01203c:	dfc00117 	ldw	ra,4(sp)
 c012040:	df000017 	ldw	fp,0(sp)
 c012044:	dec00204 	addi	sp,sp,8
 c012048:	f800283a 	ret

0c01204c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 c01204c:	deffff04 	addi	sp,sp,-4
 c012050:	df000015 	stw	fp,0(sp)
 c012054:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c012058:	000170fa 	wrctl	ienable,zero
}
 c01205c:	0001883a 	nop
 c012060:	e037883a 	mov	sp,fp
 c012064:	df000017 	ldw	fp,0(sp)
 c012068:	dec00104 	addi	sp,sp,4
 c01206c:	f800283a 	ret

0c012070 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c012070:	defffa04 	addi	sp,sp,-24
 c012074:	dfc00515 	stw	ra,20(sp)
 c012078:	df000415 	stw	fp,16(sp)
 c01207c:	df000404 	addi	fp,sp,16
 c012080:	e13ffe15 	stw	r4,-8(fp)
 c012084:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c012088:	e0bfff17 	ldw	r2,-4(fp)
 c01208c:	10800017 	ldw	r2,0(r2)
 c012090:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c012094:	e13ffe17 	ldw	r4,-8(fp)
 c012098:	c002e480 	call	c002e48 <strlen>
 c01209c:	10800044 	addi	r2,r2,1
 c0120a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c0120a4:	00000d06 	br	c0120dc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c0120a8:	e0bffc17 	ldw	r2,-16(fp)
 c0120ac:	10800217 	ldw	r2,8(r2)
 c0120b0:	e0fffd17 	ldw	r3,-12(fp)
 c0120b4:	180d883a 	mov	r6,r3
 c0120b8:	e17ffe17 	ldw	r5,-8(fp)
 c0120bc:	1009883a 	mov	r4,r2
 c0120c0:	c0123b40 	call	c0123b4 <memcmp>
 c0120c4:	1000021e 	bne	r2,zero,c0120d0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c0120c8:	e0bffc17 	ldw	r2,-16(fp)
 c0120cc:	00000706 	br	c0120ec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c0120d0:	e0bffc17 	ldw	r2,-16(fp)
 c0120d4:	10800017 	ldw	r2,0(r2)
 c0120d8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c0120dc:	e0fffc17 	ldw	r3,-16(fp)
 c0120e0:	e0bfff17 	ldw	r2,-4(fp)
 c0120e4:	18bff01e 	bne	r3,r2,c0120a8 <__alt_data_end+0xfc0120a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c0120e8:	0005883a 	mov	r2,zero
}
 c0120ec:	e037883a 	mov	sp,fp
 c0120f0:	dfc00117 	ldw	ra,4(sp)
 c0120f4:	df000017 	ldw	fp,0(sp)
 c0120f8:	dec00204 	addi	sp,sp,8
 c0120fc:	f800283a 	ret

0c012100 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c012100:	defffb04 	addi	sp,sp,-20
 c012104:	dfc00415 	stw	ra,16(sp)
 c012108:	df000315 	stw	fp,12(sp)
 c01210c:	df000304 	addi	fp,sp,12
 c012110:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c012114:	d0a00a17 	ldw	r2,-32728(gp)
 c012118:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c01211c:	00003106 	br	c0121e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 c012120:	e0bffd17 	ldw	r2,-12(fp)
 c012124:	10800217 	ldw	r2,8(r2)
 c012128:	1009883a 	mov	r4,r2
 c01212c:	c002e480 	call	c002e48 <strlen>
 c012130:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 c012134:	e0bffd17 	ldw	r2,-12(fp)
 c012138:	10c00217 	ldw	r3,8(r2)
 c01213c:	e0bffe17 	ldw	r2,-8(fp)
 c012140:	10bfffc4 	addi	r2,r2,-1
 c012144:	1885883a 	add	r2,r3,r2
 c012148:	10800003 	ldbu	r2,0(r2)
 c01214c:	10803fcc 	andi	r2,r2,255
 c012150:	1080201c 	xori	r2,r2,128
 c012154:	10bfe004 	addi	r2,r2,-128
 c012158:	10800bd8 	cmpnei	r2,r2,47
 c01215c:	1000031e 	bne	r2,zero,c01216c <alt_find_file+0x6c>
    {
      len -= 1;
 c012160:	e0bffe17 	ldw	r2,-8(fp)
 c012164:	10bfffc4 	addi	r2,r2,-1
 c012168:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c01216c:	e0bffe17 	ldw	r2,-8(fp)
 c012170:	e0ffff17 	ldw	r3,-4(fp)
 c012174:	1885883a 	add	r2,r3,r2
 c012178:	10800003 	ldbu	r2,0(r2)
 c01217c:	10803fcc 	andi	r2,r2,255
 c012180:	1080201c 	xori	r2,r2,128
 c012184:	10bfe004 	addi	r2,r2,-128
 c012188:	10800be0 	cmpeqi	r2,r2,47
 c01218c:	1000081e 	bne	r2,zero,c0121b0 <alt_find_file+0xb0>
 c012190:	e0bffe17 	ldw	r2,-8(fp)
 c012194:	e0ffff17 	ldw	r3,-4(fp)
 c012198:	1885883a 	add	r2,r3,r2
 c01219c:	10800003 	ldbu	r2,0(r2)
 c0121a0:	10803fcc 	andi	r2,r2,255
 c0121a4:	1080201c 	xori	r2,r2,128
 c0121a8:	10bfe004 	addi	r2,r2,-128
 c0121ac:	10000a1e 	bne	r2,zero,c0121d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 c0121b0:	e0bffd17 	ldw	r2,-12(fp)
 c0121b4:	10800217 	ldw	r2,8(r2)
 c0121b8:	e0fffe17 	ldw	r3,-8(fp)
 c0121bc:	180d883a 	mov	r6,r3
 c0121c0:	e17fff17 	ldw	r5,-4(fp)
 c0121c4:	1009883a 	mov	r4,r2
 c0121c8:	c0123b40 	call	c0123b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c0121cc:	1000021e 	bne	r2,zero,c0121d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c0121d0:	e0bffd17 	ldw	r2,-12(fp)
 c0121d4:	00000706 	br	c0121f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 c0121d8:	e0bffd17 	ldw	r2,-12(fp)
 c0121dc:	10800017 	ldw	r2,0(r2)
 c0121e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c0121e4:	e0fffd17 	ldw	r3,-12(fp)
 c0121e8:	d0a00a04 	addi	r2,gp,-32728
 c0121ec:	18bfcc1e 	bne	r3,r2,c012120 <__alt_data_end+0xfc012120>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c0121f0:	0005883a 	mov	r2,zero
}
 c0121f4:	e037883a 	mov	sp,fp
 c0121f8:	dfc00117 	ldw	ra,4(sp)
 c0121fc:	df000017 	ldw	fp,0(sp)
 c012200:	dec00204 	addi	sp,sp,8
 c012204:	f800283a 	ret

0c012208 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c012208:	defffa04 	addi	sp,sp,-24
 c01220c:	dfc00515 	stw	ra,20(sp)
 c012210:	df000415 	stw	fp,16(sp)
 c012214:	dc000315 	stw	r16,12(sp)
 c012218:	df000404 	addi	fp,sp,16
 c01221c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 c012220:	00bffa04 	movi	r2,-24
 c012224:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c012228:	e03ffc15 	stw	zero,-16(fp)
 c01222c:	00001d06 	br	c0122a4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 c012230:	04030074 	movhi	r16,3073
 c012234:	840d4d04 	addi	r16,r16,13620
 c012238:	e0bffc17 	ldw	r2,-16(fp)
 c01223c:	01400304 	movi	r5,12
 c012240:	1009883a 	mov	r4,r2
 c012244:	c002cc00 	call	c002cc0 <__mulsi3>
 c012248:	8085883a 	add	r2,r16,r2
 c01224c:	10800017 	ldw	r2,0(r2)
 c012250:	1000111e 	bne	r2,zero,c012298 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 c012254:	04030074 	movhi	r16,3073
 c012258:	840d4d04 	addi	r16,r16,13620
 c01225c:	e0bffc17 	ldw	r2,-16(fp)
 c012260:	01400304 	movi	r5,12
 c012264:	1009883a 	mov	r4,r2
 c012268:	c002cc00 	call	c002cc0 <__mulsi3>
 c01226c:	8085883a 	add	r2,r16,r2
 c012270:	e0fffe17 	ldw	r3,-8(fp)
 c012274:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 c012278:	d0e00e17 	ldw	r3,-32712(gp)
 c01227c:	e0bffc17 	ldw	r2,-16(fp)
 c012280:	1880020e 	bge	r3,r2,c01228c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 c012284:	e0bffc17 	ldw	r2,-16(fp)
 c012288:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 c01228c:	e0bffc17 	ldw	r2,-16(fp)
 c012290:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c012294:	00000606 	br	c0122b0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c012298:	e0bffc17 	ldw	r2,-16(fp)
 c01229c:	10800044 	addi	r2,r2,1
 c0122a0:	e0bffc15 	stw	r2,-16(fp)
 c0122a4:	e0bffc17 	ldw	r2,-16(fp)
 c0122a8:	10800810 	cmplti	r2,r2,32
 c0122ac:	103fe01e 	bne	r2,zero,c012230 <__alt_data_end+0xfc012230>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c0122b0:	e0bffd17 	ldw	r2,-12(fp)
}
 c0122b4:	e6ffff04 	addi	sp,fp,-4
 c0122b8:	dfc00217 	ldw	ra,8(sp)
 c0122bc:	df000117 	ldw	fp,4(sp)
 c0122c0:	dc000017 	ldw	r16,0(sp)
 c0122c4:	dec00304 	addi	sp,sp,12
 c0122c8:	f800283a 	ret

0c0122cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 c0122cc:	defffe04 	addi	sp,sp,-8
 c0122d0:	df000115 	stw	fp,4(sp)
 c0122d4:	df000104 	addi	fp,sp,4
 c0122d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 c0122dc:	e0bfff17 	ldw	r2,-4(fp)
 c0122e0:	10bffe84 	addi	r2,r2,-6
 c0122e4:	10c00428 	cmpgeui	r3,r2,16
 c0122e8:	18001a1e 	bne	r3,zero,c012354 <alt_exception_cause_generated_bad_addr+0x88>
 c0122ec:	100690ba 	slli	r3,r2,2
 c0122f0:	00830074 	movhi	r2,3073
 c0122f4:	1088c104 	addi	r2,r2,8964
 c0122f8:	1885883a 	add	r2,r3,r2
 c0122fc:	10800017 	ldw	r2,0(r2)
 c012300:	1000683a 	jmp	r2
 c012304:	0c012344 	addi	r16,at,1165
 c012308:	0c012344 	addi	r16,at,1165
 c01230c:	0c012354 	ori	r16,at,1165
 c012310:	0c012354 	ori	r16,at,1165
 c012314:	0c012354 	ori	r16,at,1165
 c012318:	0c012344 	addi	r16,at,1165
 c01231c:	0c01234c 	andi	r16,at,1165
 c012320:	0c012354 	ori	r16,at,1165
 c012324:	0c012344 	addi	r16,at,1165
 c012328:	0c012344 	addi	r16,at,1165
 c01232c:	0c012354 	ori	r16,at,1165
 c012330:	0c012344 	addi	r16,at,1165
 c012334:	0c01234c 	andi	r16,at,1165
 c012338:	0c012354 	ori	r16,at,1165
 c01233c:	0c012354 	ori	r16,at,1165
 c012340:	0c012344 	addi	r16,at,1165
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c012344:	00800044 	movi	r2,1
 c012348:	00000306 	br	c012358 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c01234c:	0005883a 	mov	r2,zero
 c012350:	00000106 	br	c012358 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 c012354:	0005883a 	mov	r2,zero
  }
}
 c012358:	e037883a 	mov	sp,fp
 c01235c:	df000017 	ldw	fp,0(sp)
 c012360:	dec00104 	addi	sp,sp,4
 c012364:	f800283a 	ret

0c012368 <atexit>:
 c012368:	200b883a 	mov	r5,r4
 c01236c:	000f883a 	mov	r7,zero
 c012370:	000d883a 	mov	r6,zero
 c012374:	0009883a 	mov	r4,zero
 c012378:	c0124301 	jmpi	c012430 <__register_exitproc>

0c01237c <exit>:
 c01237c:	defffe04 	addi	sp,sp,-8
 c012380:	000b883a 	mov	r5,zero
 c012384:	dc000015 	stw	r16,0(sp)
 c012388:	dfc00115 	stw	ra,4(sp)
 c01238c:	2021883a 	mov	r16,r4
 c012390:	c0125480 	call	c012548 <__call_exitprocs>
 c012394:	00830074 	movhi	r2,3073
 c012398:	1091c904 	addi	r2,r2,18212
 c01239c:	11000017 	ldw	r4,0(r2)
 c0123a0:	20800f17 	ldw	r2,60(r4)
 c0123a4:	10000126 	beq	r2,zero,c0123ac <exit+0x30>
 c0123a8:	103ee83a 	callr	r2
 c0123ac:	8009883a 	mov	r4,r16
 c0123b0:	c0126c80 	call	c0126c8 <_exit>

0c0123b4 <memcmp>:
 c0123b4:	01c000c4 	movi	r7,3
 c0123b8:	3980192e 	bgeu	r7,r6,c012420 <memcmp+0x6c>
 c0123bc:	2144b03a 	or	r2,r4,r5
 c0123c0:	11c4703a 	and	r2,r2,r7
 c0123c4:	10000f26 	beq	r2,zero,c012404 <memcmp+0x50>
 c0123c8:	20800003 	ldbu	r2,0(r4)
 c0123cc:	28c00003 	ldbu	r3,0(r5)
 c0123d0:	10c0151e 	bne	r2,r3,c012428 <memcmp+0x74>
 c0123d4:	31bfff84 	addi	r6,r6,-2
 c0123d8:	01ffffc4 	movi	r7,-1
 c0123dc:	00000406 	br	c0123f0 <memcmp+0x3c>
 c0123e0:	20800003 	ldbu	r2,0(r4)
 c0123e4:	28c00003 	ldbu	r3,0(r5)
 c0123e8:	31bfffc4 	addi	r6,r6,-1
 c0123ec:	10c00e1e 	bne	r2,r3,c012428 <memcmp+0x74>
 c0123f0:	21000044 	addi	r4,r4,1
 c0123f4:	29400044 	addi	r5,r5,1
 c0123f8:	31fff91e 	bne	r6,r7,c0123e0 <__alt_data_end+0xfc0123e0>
 c0123fc:	0005883a 	mov	r2,zero
 c012400:	f800283a 	ret
 c012404:	20c00017 	ldw	r3,0(r4)
 c012408:	28800017 	ldw	r2,0(r5)
 c01240c:	18bfee1e 	bne	r3,r2,c0123c8 <__alt_data_end+0xfc0123c8>
 c012410:	31bfff04 	addi	r6,r6,-4
 c012414:	21000104 	addi	r4,r4,4
 c012418:	29400104 	addi	r5,r5,4
 c01241c:	39bff936 	bltu	r7,r6,c012404 <__alt_data_end+0xfc012404>
 c012420:	303fe91e 	bne	r6,zero,c0123c8 <__alt_data_end+0xfc0123c8>
 c012424:	003ff506 	br	c0123fc <__alt_data_end+0xfc0123fc>
 c012428:	10c5c83a 	sub	r2,r2,r3
 c01242c:	f800283a 	ret

0c012430 <__register_exitproc>:
 c012430:	defffa04 	addi	sp,sp,-24
 c012434:	dc000315 	stw	r16,12(sp)
 c012438:	04030074 	movhi	r16,3073
 c01243c:	8411c904 	addi	r16,r16,18212
 c012440:	80c00017 	ldw	r3,0(r16)
 c012444:	dc400415 	stw	r17,16(sp)
 c012448:	dfc00515 	stw	ra,20(sp)
 c01244c:	18805217 	ldw	r2,328(r3)
 c012450:	2023883a 	mov	r17,r4
 c012454:	10003726 	beq	r2,zero,c012534 <__register_exitproc+0x104>
 c012458:	10c00117 	ldw	r3,4(r2)
 c01245c:	010007c4 	movi	r4,31
 c012460:	20c00e16 	blt	r4,r3,c01249c <__register_exitproc+0x6c>
 c012464:	1a000044 	addi	r8,r3,1
 c012468:	8800221e 	bne	r17,zero,c0124f4 <__register_exitproc+0xc4>
 c01246c:	18c00084 	addi	r3,r3,2
 c012470:	18c7883a 	add	r3,r3,r3
 c012474:	18c7883a 	add	r3,r3,r3
 c012478:	12000115 	stw	r8,4(r2)
 c01247c:	10c7883a 	add	r3,r2,r3
 c012480:	19400015 	stw	r5,0(r3)
 c012484:	0005883a 	mov	r2,zero
 c012488:	dfc00517 	ldw	ra,20(sp)
 c01248c:	dc400417 	ldw	r17,16(sp)
 c012490:	dc000317 	ldw	r16,12(sp)
 c012494:	dec00604 	addi	sp,sp,24
 c012498:	f800283a 	ret
 c01249c:	00800034 	movhi	r2,0
 c0124a0:	10800004 	addi	r2,r2,0
 c0124a4:	10002626 	beq	r2,zero,c012540 <__register_exitproc+0x110>
 c0124a8:	01006404 	movi	r4,400
 c0124ac:	d9400015 	stw	r5,0(sp)
 c0124b0:	d9800115 	stw	r6,4(sp)
 c0124b4:	d9c00215 	stw	r7,8(sp)
 c0124b8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c0124bc:	d9400017 	ldw	r5,0(sp)
 c0124c0:	d9800117 	ldw	r6,4(sp)
 c0124c4:	d9c00217 	ldw	r7,8(sp)
 c0124c8:	10001d26 	beq	r2,zero,c012540 <__register_exitproc+0x110>
 c0124cc:	81000017 	ldw	r4,0(r16)
 c0124d0:	10000115 	stw	zero,4(r2)
 c0124d4:	02000044 	movi	r8,1
 c0124d8:	22405217 	ldw	r9,328(r4)
 c0124dc:	0007883a 	mov	r3,zero
 c0124e0:	12400015 	stw	r9,0(r2)
 c0124e4:	20805215 	stw	r2,328(r4)
 c0124e8:	10006215 	stw	zero,392(r2)
 c0124ec:	10006315 	stw	zero,396(r2)
 c0124f0:	883fde26 	beq	r17,zero,c01246c <__alt_data_end+0xfc01246c>
 c0124f4:	18c9883a 	add	r4,r3,r3
 c0124f8:	2109883a 	add	r4,r4,r4
 c0124fc:	1109883a 	add	r4,r2,r4
 c012500:	21802215 	stw	r6,136(r4)
 c012504:	01800044 	movi	r6,1
 c012508:	12406217 	ldw	r9,392(r2)
 c01250c:	30cc983a 	sll	r6,r6,r3
 c012510:	4992b03a 	or	r9,r9,r6
 c012514:	12406215 	stw	r9,392(r2)
 c012518:	21c04215 	stw	r7,264(r4)
 c01251c:	01000084 	movi	r4,2
 c012520:	893fd21e 	bne	r17,r4,c01246c <__alt_data_end+0xfc01246c>
 c012524:	11006317 	ldw	r4,396(r2)
 c012528:	218cb03a 	or	r6,r4,r6
 c01252c:	11806315 	stw	r6,396(r2)
 c012530:	003fce06 	br	c01246c <__alt_data_end+0xfc01246c>
 c012534:	18805304 	addi	r2,r3,332
 c012538:	18805215 	stw	r2,328(r3)
 c01253c:	003fc606 	br	c012458 <__alt_data_end+0xfc012458>
 c012540:	00bfffc4 	movi	r2,-1
 c012544:	003fd006 	br	c012488 <__alt_data_end+0xfc012488>

0c012548 <__call_exitprocs>:
 c012548:	defff504 	addi	sp,sp,-44
 c01254c:	df000915 	stw	fp,36(sp)
 c012550:	dd400615 	stw	r21,24(sp)
 c012554:	dc800315 	stw	r18,12(sp)
 c012558:	dfc00a15 	stw	ra,40(sp)
 c01255c:	ddc00815 	stw	r23,32(sp)
 c012560:	dd800715 	stw	r22,28(sp)
 c012564:	dd000515 	stw	r20,20(sp)
 c012568:	dcc00415 	stw	r19,16(sp)
 c01256c:	dc400215 	stw	r17,8(sp)
 c012570:	dc000115 	stw	r16,4(sp)
 c012574:	d9000015 	stw	r4,0(sp)
 c012578:	2839883a 	mov	fp,r5
 c01257c:	04800044 	movi	r18,1
 c012580:	057fffc4 	movi	r21,-1
 c012584:	00830074 	movhi	r2,3073
 c012588:	1091c904 	addi	r2,r2,18212
 c01258c:	12000017 	ldw	r8,0(r2)
 c012590:	45005217 	ldw	r20,328(r8)
 c012594:	44c05204 	addi	r19,r8,328
 c012598:	a0001c26 	beq	r20,zero,c01260c <__call_exitprocs+0xc4>
 c01259c:	a0800117 	ldw	r2,4(r20)
 c0125a0:	15ffffc4 	addi	r23,r2,-1
 c0125a4:	b8000d16 	blt	r23,zero,c0125dc <__call_exitprocs+0x94>
 c0125a8:	14000044 	addi	r16,r2,1
 c0125ac:	8421883a 	add	r16,r16,r16
 c0125b0:	8421883a 	add	r16,r16,r16
 c0125b4:	84402004 	addi	r17,r16,128
 c0125b8:	a463883a 	add	r17,r20,r17
 c0125bc:	a421883a 	add	r16,r20,r16
 c0125c0:	e0001e26 	beq	fp,zero,c01263c <__call_exitprocs+0xf4>
 c0125c4:	80804017 	ldw	r2,256(r16)
 c0125c8:	e0801c26 	beq	fp,r2,c01263c <__call_exitprocs+0xf4>
 c0125cc:	bdffffc4 	addi	r23,r23,-1
 c0125d0:	843fff04 	addi	r16,r16,-4
 c0125d4:	8c7fff04 	addi	r17,r17,-4
 c0125d8:	bd7ff91e 	bne	r23,r21,c0125c0 <__alt_data_end+0xfc0125c0>
 c0125dc:	00800034 	movhi	r2,0
 c0125e0:	10800004 	addi	r2,r2,0
 c0125e4:	10000926 	beq	r2,zero,c01260c <__call_exitprocs+0xc4>
 c0125e8:	a0800117 	ldw	r2,4(r20)
 c0125ec:	1000301e 	bne	r2,zero,c0126b0 <__call_exitprocs+0x168>
 c0125f0:	a0800017 	ldw	r2,0(r20)
 c0125f4:	10003226 	beq	r2,zero,c0126c0 <__call_exitprocs+0x178>
 c0125f8:	a009883a 	mov	r4,r20
 c0125fc:	98800015 	stw	r2,0(r19)
 c012600:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c012604:	9d000017 	ldw	r20,0(r19)
 c012608:	a03fe41e 	bne	r20,zero,c01259c <__alt_data_end+0xfc01259c>
 c01260c:	dfc00a17 	ldw	ra,40(sp)
 c012610:	df000917 	ldw	fp,36(sp)
 c012614:	ddc00817 	ldw	r23,32(sp)
 c012618:	dd800717 	ldw	r22,28(sp)
 c01261c:	dd400617 	ldw	r21,24(sp)
 c012620:	dd000517 	ldw	r20,20(sp)
 c012624:	dcc00417 	ldw	r19,16(sp)
 c012628:	dc800317 	ldw	r18,12(sp)
 c01262c:	dc400217 	ldw	r17,8(sp)
 c012630:	dc000117 	ldw	r16,4(sp)
 c012634:	dec00b04 	addi	sp,sp,44
 c012638:	f800283a 	ret
 c01263c:	a0800117 	ldw	r2,4(r20)
 c012640:	80c00017 	ldw	r3,0(r16)
 c012644:	10bfffc4 	addi	r2,r2,-1
 c012648:	15c01426 	beq	r2,r23,c01269c <__call_exitprocs+0x154>
 c01264c:	80000015 	stw	zero,0(r16)
 c012650:	183fde26 	beq	r3,zero,c0125cc <__alt_data_end+0xfc0125cc>
 c012654:	95c8983a 	sll	r4,r18,r23
 c012658:	a0806217 	ldw	r2,392(r20)
 c01265c:	a5800117 	ldw	r22,4(r20)
 c012660:	2084703a 	and	r2,r4,r2
 c012664:	10000b26 	beq	r2,zero,c012694 <__call_exitprocs+0x14c>
 c012668:	a0806317 	ldw	r2,396(r20)
 c01266c:	2088703a 	and	r4,r4,r2
 c012670:	20000c1e 	bne	r4,zero,c0126a4 <__call_exitprocs+0x15c>
 c012674:	89400017 	ldw	r5,0(r17)
 c012678:	d9000017 	ldw	r4,0(sp)
 c01267c:	183ee83a 	callr	r3
 c012680:	a0800117 	ldw	r2,4(r20)
 c012684:	15bfbf1e 	bne	r2,r22,c012584 <__alt_data_end+0xfc012584>
 c012688:	98800017 	ldw	r2,0(r19)
 c01268c:	153fcf26 	beq	r2,r20,c0125cc <__alt_data_end+0xfc0125cc>
 c012690:	003fbc06 	br	c012584 <__alt_data_end+0xfc012584>
 c012694:	183ee83a 	callr	r3
 c012698:	003ff906 	br	c012680 <__alt_data_end+0xfc012680>
 c01269c:	a5c00115 	stw	r23,4(r20)
 c0126a0:	003feb06 	br	c012650 <__alt_data_end+0xfc012650>
 c0126a4:	89000017 	ldw	r4,0(r17)
 c0126a8:	183ee83a 	callr	r3
 c0126ac:	003ff406 	br	c012680 <__alt_data_end+0xfc012680>
 c0126b0:	a0800017 	ldw	r2,0(r20)
 c0126b4:	a027883a 	mov	r19,r20
 c0126b8:	1029883a 	mov	r20,r2
 c0126bc:	003fb606 	br	c012598 <__alt_data_end+0xfc012598>
 c0126c0:	0005883a 	mov	r2,zero
 c0126c4:	003ffb06 	br	c0126b4 <__alt_data_end+0xfc0126b4>

0c0126c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c0126c8:	defffd04 	addi	sp,sp,-12
 c0126cc:	df000215 	stw	fp,8(sp)
 c0126d0:	df000204 	addi	fp,sp,8
 c0126d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 c0126d8:	0001883a 	nop
 c0126dc:	e0bfff17 	ldw	r2,-4(fp)
 c0126e0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 c0126e4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c0126e8:	10000226 	beq	r2,zero,c0126f4 <_exit+0x2c>
    ALT_SIM_FAIL();
 c0126ec:	002af070 	cmpltui	zero,zero,43969
 c0126f0:	00000106 	br	c0126f8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 c0126f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c0126f8:	003fff06 	br	c0126f8 <__alt_data_end+0xfc0126f8>
